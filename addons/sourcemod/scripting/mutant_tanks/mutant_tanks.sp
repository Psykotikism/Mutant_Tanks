/**
 * Mutant Tanks: A L4D/L4D2 SourceMod Plugin
 * Copyright (C) 2017-2025  Alfred "Psyk0tik" Llagas
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

#include <sourcemod>
#include <dhooks>
#include <mutant_tanks>

#undef REQUIRE_EXTENSIONS
#tryinclude <actions>
#tryinclude <clientprefs>
#define REQUIRE_EXTENSIONS

#undef REQUIRE_PLUGIN
#tryinclude <adminmenu>
#tryinclude <autoexecconfig>
#tryinclude <mt_clone>
#tryinclude <ThirdPersonShoulder_Detect>
#tryinclude <updater>
#tryinclude <WeaponHandling>
#define REQUIRE_PLUGIN

#pragma semicolon 1
#pragma newdecls required

public Plugin myinfo =
{
	name = MT_NAME,
	author = MT_AUTHOR,
	description = MT_DESCRIPTION,
	version = MT_VERSION,
	url = MT_URL
};

bool g_bDedicated, g_bLateLoad, g_bSecondGame;

Handle g_hPluginHandle;

/**
 * Third-party natives
 **/

// [L4D & L4D2] Lagged Movement - Plugin Conflict Resolver: https://forums.alliedmods.net/showthread.php?t=340345
native any L4D_LaggedMovement(int client, float value, bool force = false);

public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
	switch (GetEngineVersion())
	{
		case Engine_Left4Dead: g_bSecondGame = false;
		case Engine_Left4Dead2: g_bSecondGame = true;
		default:
		{
			strcopy(error, err_max, "\"Mutant Tanks\" only supports Left 4 Dead 1 & 2");

			return APLRes_SilentFailure;
		}
	}

	if (GetFeatureStatus(FeatureType_Native, "MT_IsTypeEnabled") != FeatureStatus_Unknown)
	{
		strcopy(error, err_max, "\"Mutant Tanks\" is already running. Please remove the duplicate plugin");

		return APLRes_SilentFailure;
	}

	if (GetFeatureStatus(FeatureType_Native, "ST_IsTypeEnabled") != FeatureStatus_Unknown)
	{
		strcopy(error, err_max, "\"Super Tanks++\" is already running. Please remove the duplicate plugin");

		return APLRes_SilentFailure;
	}

	MarkNativeAsOptional("L4D_LaggedMovement");
	RegPluginLibrary("mutant_tanks");
	vRegisterForwards();
	vRegisterNatives();

	g_bDedicated = IsDedicatedServer();
	g_bLateLoad = late;
	g_hPluginHandle = myself;

	return APLRes_Success;
}

#define MODEL_CONCRETE_CHUNK "models/props_debris/concrete_chunk01a.mdl"
#define MODEL_FIREWORKCRATE "models/props_junk/explosive_box001.mdl" // Only available in L4D2
#define MODEL_GASCAN "models/props_junk/gascan001a.mdl"
#define MODEL_OXYGENTANK "models/props_equipment/oxygentank01.mdl"
#define MODEL_PROPANETANK "models/props_junk/propanecanister001a.mdl"
#define MODEL_SHIELD "models/props_unique/airport/atlas_break_ball.mdl"
#define MODEL_TIRES "models/props_vehicles/tire001c_car.mdl"
#define MODEL_TREE_TRUNK "models/props_foliage/tree_trunk.mdl"
#define MODEL_TANK_MAIN "models/infected/hulk.mdl"
#define MODEL_TANK_DLC "models/infected/hulk_dlc3.mdl"
#define MODEL_TANK_L4D1 "models/infected/hulk_l4d1.mdl" // Only available in L4D2
#define MODEL_SMOKER_MAIN "models/infected/smoker.mdl"
#define MODEL_SMOKER_L4D1 "models/infected/smoker_l4d1.mdl" // Only available in L4D2
#define MODEL_BOOMER_MAIN "models/infected/boomer.mdl"
#define MODEL_BOOMER_L4D1 "models/infected/boomer_l4d1.mdl" // Only available in L4D2
#define MODEL_BOOMETTE "models/infected/boomette.mdl" // Only available in L4D2
#define MODEL_HUNTER_MAIN "models/infected/hunter.mdl"
#define MODEL_HUNTER_L4D1 "models/infected/hunter_l4d1.mdl" // Only available in L4D2
#define MODEL_WITCH "models/infected/witch.mdl"
#define MODEL_WITCHBRIDE "models/infected/witch_bride.mdl" // Only available in L4D2

#define PARTICLE_ACHIEVED "achieved"
#define PARTICLE_BLOOD "boomer_explode_D"
#define PARTICLE_ELECTRICITY "electrical_arc_01_system"
#define PARTICLE_FIRE "aircraft_destroy_fastFireTrail"
#define PARTICLE_FIREWORK "mini_fireworks"
#define PARTICLE_GORE "gore_wound_fullbody_1"
#define PARTICLE_ICE "apc_wheel_smoke1"
#define PARTICLE_METEOR "smoke_medium_01"
#define PARTICLE_SMOKE "smoker_smokecloud"
#define PARTICLE_SPIT "spitter_projectile" // Only available in L4D2
#define PARTICLE_SPIT2 "spitter_slime_trail" // Only available in L4D2

#define SOUND_ACHIEVEMENT "ui/pickup_misc42.wav"
#define SOUND_DAMAGE "player/damage1.wav"
#define SOUND_DAMAGE2 "player/damage2.wav"
#define SOUND_DEATH "ui/pickup_scifi37.wav"
#define SOUND_ELECTRICITY "items/suitchargeok1.wav"
#define SOUND_EMPTY "weapons/clipempty_rifle.wav"
#define SOUND_EXPLOSION "animation/van_inside_debris.wav" // Only used in L4D1
#define SOUND_EXPLOSION2 "weapons/grenade_launcher/grenadefire/grenade_launcher_explode_2.wav" // Only available in L4D2
#define SOUND_EXPLOSION3 "weapons/grenade_launcher/grenadefire/grenade_launcher_fire_1.wav" // Only available in L4D2
#define SOUND_HEARTBEAT "player/heartbeatloop.wav"
#define SOUND_LADYKILLER "ui/alert_clink.wav"
#define SOUND_METAL "physics/metal/metal_solid_impact_hard5.wav"
#define SOUND_NULL "common/null.wav"
#define SOUND_SPAWN "ui/pickup_secret01.wav"
#define SOUND_SPIT "player/spitter/voice/warn/spitter_spit_02.wav" // Only available in L4D2
#define SOUND_THROWN "player/tank/attack/thrown_missile_loop_1.wav"

#define SPRITE_EXPLODE "sprites/zerogxplode.spr"
#define SPRITE_GLOW "sprites/glow01.vmt"
#define SPRITE_LASER "sprites/laser.vmt"
#define SPRITE_LASERBEAM "sprites/laserbeam.vmt"

#define MT_L4D1_ACT_TERROR_HIT_BY_TANKPUNCH 1077 // ACT_TERROR_HIT_BY_TANKPUNCH
#define MT_L4D2_ACT_TERROR_HIT_BY_TANKPUNCH 521 // ACT_TERROR_HIT_BY_TANKPUNCH
#define MT_L4D1_ACT_TERROR_HULK_VICTORY 1284 // ACT_TERROR_HULK_VICTORY
#define MT_L4D2_ACT_TERROR_HULK_VICTORY 792 // ACT_TERROR_HULK_VICTORY
#define MT_L4D1_ACT_TERROR_RAGE_AT_KNOCKDOWN 1287 // ACT_TERROR_RAGE_AT_KNOCKDOWN
#define MT_L4D2_ACT_TERROR_RAGE_AT_KNOCKDOWN 795 // ACT_TERROR_RAGE_AT_KNOCKDOWN
#define MT_L4D1_ACT_TERROR_IDLE_FALL_FROM_TANKPUNCH 1078 // ACT_TERROR_IDLE_FALL_FROM_TANKPUNCH
#define MT_L4D2_ACT_TERROR_IDLE_FALL_FROM_TANKPUNCH 522 // ACT_TERROR_IDLE_FALL_FROM_TANKPUNCH
#define MT_L4D1_ACT_TERROR_POUNCED_TO_STAND 1263 // ACT_TERROR_POUNCED_TO_STAND
#define MT_L4D2_ACT_TERROR_POUNCED_TO_STAND 771 // ACT_TERROR_POUNCED_TO_STAND
#define MT_L4D1_ACT_TERROR_TANKPUNCH_LAND 1079 // ACT_TERROR_TANKPUNCH_LAND
#define MT_L4D2_ACT_TERROR_TANKPUNCH_LAND 523 // ACT_TERROR_TANKPUNCH_LAND
#define MT_L4D1_ACT_TERROR_TANKROCK_TO_STAND 1283 // ACT_TERROR_TANKROCK_TO_STAND
#define MT_L4D2_ACT_TERROR_TANKROCK_TO_STAND 791 // ACT_TERROR_TANKROCK_TO_STAND

#define MT_ANIM_ACTIVESTATE 65 // active/standing state
#define MT_ANIM_LANDING 96 // landing on something
#define MT_ANIM_TANKPUNCHED 57 // punched by a Tank

#define MT_ARRIVAL_SPAWN (1 << 0) // announce spawn
#define MT_ARRIVAL_BOSS (1 << 1) // announce evolution
#define MT_ARRIVAL_RANDOM (1 << 2) // announce randomization
#define MT_ARRIVAL_TRANSFORM (1 << 3) // announce transformation
#define MT_ARRIVAL_REVERT (1 << 4) // announce revert

#define MT_BOSS_REACTIONS (1 << 0) // survivor reactions
#define MT_BOSS_EXPLOSION (1 << 1) // explosion
#define MT_BOSS_IMPACTWAVE (1 << 2) // impact dust wave
#define MT_BOSS_SLOWMOTION (1 << 3) // slow-motion

#define MT_CMD_SPAWN (1 << 0) // "sm_tank"/"sm_mt_tank"
#define MT_CMD_CONFIG (1 << 1) // "sm_mt_config"
#define MT_CMD_LIST (1 << 2) // "sm_mt_list"
#define MT_CMD_RELOAD (1 << 3) // "sm_mt_reload"
#define MT_CMD_VERSION (1 << 4) // "sm_mt_version"

#define MT_CONFIG_DIFFICULTY (1 << 0) // difficulty_configs
#define MT_CONFIG_MAP (1 << 1) // l4d_map_configs/l4d2_map_configs
#define MT_CONFIG_GAMEMODE (1 << 2) // l4d_gamemode_configs/l4d2_gamemode_configs
#define MT_CONFIG_DAY (1 << 3) // daily_configs
#define MT_CONFIG_PLAYERCOUNT (1 << 4) // playercount_configs
#define MT_CONFIG_SURVIVORCOUNT (1 << 5) // survivorcount_configs
#define MT_CONFIG_INFECTEDCOUNT (1 << 6) // infectedcount_configs
#define MT_CONFIG_FINALE (1 << 7) // l4d_finale_configs/l4d2_finale_configs

#define MT_CONFIG_FILE_MAIN "mutant_tanks.cfg"
#define MT_CONFIG_FILE_DETOURS "mutant_tanks_detours"
#define MT_CONFIG_FILE_PATCHES "mutant_tanks_patches"
#define MT_CONFIG_FILE_SIGNATURES "mutant_tanks_signatures"
#define MT_CONFIG_FILEPATH "data/mutant_tanks/"
#define MT_CONFIG_PATH_DAY "daily_configs/"
#define MT_CONFIG_PATH_DIFFICULTY "difficulty_configs/"
#define MT_CONFIG_PATH_FINALE "l4d_finale_configs/"
#define MT_CONFIG_PATH_FINALE2 "l4d2_finale_configs/"
#define MT_CONFIG_PATH_GAMEMODE "l4d_gamemode_configs/"
#define MT_CONFIG_PATH_GAMEMODE2 "l4d2_gamemode_configs/"
#define MT_CONFIG_PATH_INFECTEDCOUNT "infectedcount_configs/"
#define MT_CONFIG_PATH_MAP "l4d_map_configs/"
#define MT_CONFIG_PATH_MAP2 "l4d2_map_configs/"
#define MT_CONFIG_PATH_PLAYERCOUNT "playercount_configs/"
#define MT_CONFIG_PATH_SURVIVORCOUNT "survivorcount_configs/"

#define MT_CONFIG_SECTION_NICK "Nick"
#define MT_CONFIG_SECTION_ROCHELLE "Rochelle"
#define MT_CONFIG_SECTION_ELLIS "Ellis"
#define MT_CONFIG_SECTION_COACH "Coach"
#define MT_CONFIG_SECTION_BILL "Bill"
#define MT_CONFIG_SECTION_ZOEY "Zoey"
#define MT_CONFIG_SECTION_FRANCIS "Francis"
#define MT_CONFIG_SECTION_LOUIS "Louis"
#define MT_CONFIG_SECTION_WEAPON "weapon_"

#define MT_CONFIG_SECTION_SMOKER "Smoker"
#define MT_CONFIG_SECTION_BOOMER "Boomer"
#define MT_CONFIG_SECTION_HUNTER "Hunter"
#define MT_CONFIG_SECTION_SPITTER "Spitter"
#define MT_CONFIG_SECTION_JOCKEY "Jockey"
#define MT_CONFIG_SECTION_CHARGER "Charger"
#define MT_CONFIG_SECTION_WITCH "Witch"
#define MT_CONFIG_SECTION_COMMON "Common"
#define MT_CONFIG_SECTION_SPECIAL "Special"
#define MT_CONFIG_SECTION_SPECIAL2 "spec"
#define MT_CONFIG_SECTION_MOB "Mob"
#define MT_CONFIG_SECTION_INFECTED "Infected"
#define MT_CONFIG_SECTION_INFECTED2 "inf"

#define MT_CONFIG_SECTION_MAIN "Mutant Tanks"
#define MT_CONFIG_SECTION_MAIN2 "MutantTanks"
#define MT_CONFIG_SECTION_MAIN3 "Mutant_Tanks"
#define MT_CONFIG_SECTION_MAIN4 "MTanks"
#define MT_CONFIG_SECTION_MAIN5 "MT"
#define MT_CONFIG_SECTION_SUB "Mutant Smokers"
#define MT_CONFIG_SECTION_SUB2 "Mutant Boomers"
#define MT_CONFIG_SECTION_SUB3 "Mutant Hunters"
#define MT_CONFIG_SECTION_SUB4 "Mutant Spitters"
#define MT_CONFIG_SECTION_SUB5 "Mutant Jockeys"
#define MT_CONFIG_SECTION_SUB6 "Mutant Chargers"
#define MT_CONFIG_SECTION_SETTINGS "PluginSettings"
#define MT_CONFIG_SECTION_SETTINGS2 "Plugin Settings"
#define MT_CONFIG_SECTION_SETTINGS3 "Plugin_Settings"
#define MT_CONFIG_SECTION_SETTINGS4 "settings"
#define MT_CONFIG_SECTION_GENERAL "General"
#define MT_CONFIG_SECTION_ANNOUNCE "Announcements"
#define MT_CONFIG_SECTION_ANNOUNCE2 "announce"
#define MT_CONFIG_SECTION_CLASSES "Classes"
#define MT_CONFIG_SECTION_COLORS "Colors"
#define MT_CONFIG_SECTION_PUNISH "Punishment"
#define MT_CONFIG_SECTION_PUNISH2 "punish"
#define MT_CONFIG_SECTION_REWARDS "Rewards"
#define MT_CONFIG_SECTION_SURVIVORS "Survivors"
#define MT_CONFIG_SECTION_COMP "Competitive"
#define MT_CONFIG_SECTION_COMP2 "comp"
#define MT_CONFIG_SECTION_DIFF "Difficulty"
#define MT_CONFIG_SECTION_DIFF2 "diff"
#define MT_CONFIG_SECTION_HEALTH "Health"
#define MT_CONFIG_SECTION_SIZE "Size"
#define MT_CONFIG_SECTION_HUMAN "HumanSupport"
#define MT_CONFIG_SECTION_HUMAN2 "Human Support"
#define MT_CONFIG_SECTION_HUMAN3 "Human_Support"
#define MT_CONFIG_SECTION_HUMAN4 "human"
#define MT_CONFIG_SECTION_WAVES "Waves"
#define MT_CONFIG_SECTION_RUSH "Rush"
#define MT_CONFIG_SECTION_CONVARS "ConVars"
#define MT_CONFIG_SECTION_CONVARS2 "cvars"
#define MT_CONFIG_SECTION_GAMEMODES "GameModes"
#define MT_CONFIG_SECTION_GAMEMODES2 "Game Modes"
#define MT_CONFIG_SECTION_GAMEMODES3 "Game_Modes"
#define MT_CONFIG_SECTION_GAMEMODES4 "modes"
#define MT_CONFIG_SECTION_CUSTOM "Custom"
#define MT_CONFIG_SECTION_GLOW "Glow"
#define MT_CONFIG_SECTION_SPAWN "Spawn"
#define MT_CONFIG_SECTION_BOSS "Boss"
#define MT_CONFIG_SECTION_COMBO "Combo"
#define MT_CONFIG_SECTION_PROTECT "Protection"
#define MT_CONFIG_SECTION_PROTECT2 "protect"
#define MT_CONFIG_SECTION_RANDOM "Random"
#define MT_CONFIG_SECTION_TRANSFORM "Transform"
#define MT_CONFIG_SECTION_ADMIN "Administration"
#define MT_CONFIG_SECTION_ADMIN2 "admin"
#define MT_CONFIG_SECTION_PROPS "Props"
#define MT_CONFIG_SECTION_PARTICLES "Particles"
#define MT_CONFIG_SECTION_ENHANCE "Enhancements"
#define MT_CONFIG_SECTION_ENHANCE2 "enhance"
#define MT_CONFIG_SECTION_IMMUNE "Immunities"
#define MT_CONFIG_SECTION_IMMUNE2 "immune"

#define MT_DATA_SECTION_GAME_BOTH "Both"
#define MT_DATA_SECTION_GAME "Left4Dead"
#define MT_DATA_SECTION_GAME2 "Left 4 Dead"
#define MT_DATA_SECTION_GAME3 "Left_4_Dead"
#define MT_DATA_SECTION_GAME4 "L4D"
#define MT_DATA_SECTION_GAME_ONE "Left4Dead1"
#define MT_DATA_SECTION_GAME_ONE2 "Left 4 Dead 1"
#define MT_DATA_SECTION_GAME_ONE3 "Left_4_Dead_1"
#define MT_DATA_SECTION_GAME_ONE4 "L4D1"
#define MT_DATA_SECTION_GAME_TWO "Left4Dead2"
#define MT_DATA_SECTION_GAME_TWO2 "Left 4 Dead 2"
#define MT_DATA_SECTION_GAME_TWO3 "Left_4_Dead_2"
#define MT_DATA_SECTION_GAME_TWO4 "L4D2"

#define MT_DATA_SECTION_OS "Linux"
#define MT_DATA_SECTION_OS2 "Lin"
#define MT_DATA_SECTION_OS3 "Macintosh"
#define MT_DATA_SECTION_OS4 "Mac"
#define MT_DATA_SECTION_OS5 "Windows"
#define MT_DATA_SECTION_OS6 "Win"

#define MT_DETOUR_LIMIT 100 // number of detours allowed

#define MT_DETOURS_SECTION_MAIN "Mutant Tanks Detours"
#define MT_DETOURS_SECTION_MAIN2 "MutantTanksDetours"
#define MT_DETOURS_SECTION_MAIN3 "Mutant_Tanks_Detours"
#define MT_DETOURS_SECTION_MAIN4 "MTDetours"
#define MT_DETOURS_SECTION_MAIN5 "Detours"
#define MT_DETOURS_SECTION_PREFIX "MTDetour_"

#define MT_DEV_MAXLEVEL 4095

#define MT_EFFECT_TROPHY (1 << 0) // trophy
#define MT_EFFECT_FIREWORKS (1 << 1) // fireworks particles
#define MT_EFFECT_SOUND (1 << 2) // sound effect
#define MT_EFFECT_THIRDPERSON (1 << 3) // thirdperson view

#define MT_GAMEDATA "mutant_tanks"
#define MT_GAMEDATA_TEMP "mutant_tanks_temp"

#define MT_GRENADE_CHANCE 10.0 // chance to launch grenade

#define MT_INFAMMO_PRIMARY (1 << 0) // primary weapon
#define MT_INFAMMO_SECONDARY (1 << 1) // secondary weapon
#define MT_INFAMMO_THROWABLE (1 << 2) // throwable
#define MT_INFAMMO_MEDKIT (1 << 3) // medkit
#define MT_INFAMMO_PILLS (1 << 4) // pills

#define MT_JUMP_DASHCOOLDOWN 0.15 // time between air dashes
#define MT_JUMP_DEFAULTHEIGHT 57.0 // default jump height
#define MT_JUMP_FALLPASSES 3 // safe fall passes
#define MT_JUMP_FORWARDBOOST 50.0 // forward boost for each jump

#define MT_L4D1_AMMOTYPE_PISTOL 1 // pistol
#define MT_L4D1_AMMOTYPE_HUNTING_RIFLE 2 // hunting_rifle
#define MT_L4D1_AMMOTYPE_RIFLE 3 // rifle
#define MT_L4D1_AMMOTYPE_SMG 5 // smg
#define MT_L4D1_AMMOTYPE_SHOTGUN 6 // pumpshotgun/autoshotgun

#define MT_L4D2_AMMOTYPE_PISTOL 1 // pistol
#define MT_L4D2_AMMOTYPE_PISTOL_MAGNUM 2 // pistol_magnum
#define MT_L4D2_AMMOTYPE_RIFLE 3 // rifle/rifle_ak47/rifle_desert/rifle_sg552
#define MT_L4D2_AMMOTYPE_SMG 5 // smg/smg_silenced/smg_mp5
#define MT_L4D2_AMMOTYPE_RIFLE_M60 6 // rifle_m60
#define MT_L4D2_AMMOTYPE_SHOTGUN_TIER1 7 // pumpshotgun/shotgun_chrome
#define MT_L4D2_AMMOTYPE_SHOTGUN_TIER2 8 // autoshotgun/shotgun_spas
#define MT_L4D2_AMMOTYPE_HUNTING_RIFLE 9 // hunting_rifle
#define MT_L4D2_AMMOTYPE_SNIPER_RIFLE 10 // sniper_military/sniper_awp/sniper_scout
#define MT_L4D2_AMMOTYPE_GRENADE_LAUNCHER 17 // grenade_launcher

#define MT_MENUFLAG_ALL (1 << 0) // all types
#define MT_MENUFLAG_INDOOR (1 << 1) // indoor types
#define MT_MENUFLAG_OUTDOOR (1 << 2) // outdoor types
#define MT_MENUFLAG_HUMANS (1 << 3) // human-dependent types
#define MT_MENUFLAG_BOTS (1 << 4) // bot-dependent types
#define MT_MENUFLAG_SPAWNABLE (1 << 5) // spawnable types
#define MT_MENUFLAG_UNSPAWNABLE (1 << 6) // unspawnable types
#define MT_MENUFLAG_COMPETITIVE (1 << 7) // competitive types

#define MT_MOBVARIANT_WITCH (1 << 0) // witch
#define MT_MOBVARIANT_COMMON (1 << 1) // common infected

#define MT_PARTICLE_BLOOD (1 << 0) // blood particle
#define MT_PARTICLE_ELECTRICITY (1 << 1) // electric particle
#define MT_PARTICLE_FIRE (1 << 2) // fire particle
#define MT_PARTICLE_ICE (1 << 3) // ice particle
#define MT_PARTICLE_METEOR (1 << 4) // meteor particle
#define MT_PARTICLE_SMOKE (1 << 5) // smoke particle
#define MT_PARTICLE_SPIT (1 << 6) // spit particle

#define MT_PATCH_LIMIT 100 // number of patches allowed
#define MT_PATCH_MAXLEN 48 // number of bytes allowed

#define MT_PATCHES_SECTION_MAIN "Mutant Tanks Patches"
#define MT_PATCHES_SECTION_MAIN2 "MutantTanksPatches"
#define MT_PATCHES_SECTION_MAIN3 "Mutant_Tanks_Patches"
#define MT_PATCHES_SECTION_MAIN4 "MTPatches"
#define MT_PATCHES_SECTION_MAIN5 "Patches"
#define MT_PATCHES_SECTION_PREFIX "MTPatch_"

#define MT_PROP_BLUR (1 << 0) // blur prop
#define MT_PROP_LIGHT (1 << 1) // light prop
#define MT_PROP_OXYGENTANK (1 << 2) // oxgyen tank prop
#define MT_PROP_FLAME (1 << 3) // flame prop
#define MT_PROP_ROCK (1 << 4) // rock prop
#define MT_PROP_TIRE (1 << 5) // tire prop
#define MT_PROP_PROPANETANK (1 << 6) // propane tank prop
#define MT_PROP_FLASHLIGHT (1 << 7) // flashlight prop
#define MT_PROP_CROWN (1 << 8) // crown prop

#define MT_PUNISH_ALIVE (1 << 0) // alive/healthy survivors
#define MT_PUNISH_INCAPS (1 << 1) // incapacitated/hanging survivors
#define MT_PUNISH_ACTIONS (1 << 2) // survivors doing actions
#define MT_PUNISH_IDLE (1 << 3) // idle/afk survivors
#define MT_PUNISH_PINNED (1 << 4) // pinned/caught survivors
#define MT_PUNISH_INJURED (1 << 5) // injured/black and white survivors

#define MT_ROCK_BLOOD (1 << 0) // blood particle
#define MT_ROCK_ELECTRICITY (1 << 1) // electric particle
#define MT_ROCK_FIRE (1 << 2) // fire particle
#define MT_ROCK_SPIT (1 << 3) // spit particle

#define MT_RUSHTYPE_TANK (1 << 0) // tank rush
#define MT_RUSHTYPE_SMOKER (1<< 1) // gas chamber
#define MT_RUSHTYPE_BOOMER (1 << 2) // vomit vault
#define MT_RUSHTYPE_HUNTER (1 << 3) // hunting ground
#define MT_RUSHTYPE_SPITTER (1 << 4) // acid rain
#define MT_RUSHTYPE_JOCKEY (1 << 5) // mental asylum
#define MT_RUSHTYPE_CHARGER (1 << 6) // meat grinder

#define MT_SIGNATURE_LIMIT 100 // number of signatures allowed

#define MT_SIGNATURES_SECTION_MAIN "Mutant Tanks Signatures"
#define MT_SIGNATURES_SECTION_MAIN2 "MutantTanksSignatures"
#define MT_SIGNATURES_SECTION_MAIN3 "Mutant_Tanks_Signatures"
#define MT_SIGNATURES_SECTION_MAIN4 "MTSignatures"
#define MT_SIGNATURES_SECTION_MAIN5 "Signatures"
#define MT_SIGNATURES_SECTION_PREFIX "MTSignature_"

#define MT_SPECINF_SMOKER (1 << 0) // smoker
#define MT_SPECINF_BOOMER (1 << 1) // boomer
#define MT_SPECINF_HUNTER (1 << 2) // hunter
#define MT_SPECINF_SPITTER (1 << 3) // spitter
#define MT_SPECINF_JOCKEY (1 << 4) // jockey
#define MT_SPECINF_CHARGER (1 << 5) // charger

#define MT_SURVINF_COMMON (1 << 0) // common infected
#define MT_SURVINF_SMOKER (1 << 1) // smoker
#define MT_SURVINF_BOOMER (1 << 2) // boomer
#define MT_SURVINF_HUNTER (1 << 3) // hunter
#define MT_SURVINF_SPITTER (1 << 4) // spitter
#define MT_SURVINF_JOCKEY (1 << 5) // jockey
#define MT_SURVINF_CHARGER (1 << 6) // charger
#define MT_SURVINF_WITCH (1 << 7) // witch
#define MT_SURVINF_TANK (1 << 8) // tank

#define MT_UPDATE_URL "https://raw.githubusercontent.com/Psykotikism/Mutant_Tanks/master/addons/sourcemod/mutant_tanks_updater.txt"

#define MT_USEFUL_REFILL (1 << 0) // useful refill reward
#define MT_USEFUL_HEALTH (1 << 1) // useful health reward
#define MT_USEFUL_AMMO (1 << 2) // useful ammo reward
#define MT_USEFUL_RESPAWN (1 << 3) // useful respawn reward

#define MT_VISUAL_SCREEN (1 << 0) // screen color
#define MT_VISUAL_PARTICLE (1 << 1) // particle effect
#define MT_VISUAL_VOICELINE (1 << 2) // looping voiceline
#define MT_VISUAL_VOICEPITCH (1 << 3) // voice pitch
#define MT_VISUAL_LIGHT (1 << 4) // flashlight
#define MT_VISUAL_BODY (1 << 5) // body color
#define MT_VISUAL_GLOW (1 << 6) // glow outline

#define MT_WATER_NONE 0 // not in water
#define MT_WATER_FEET 1 // feet in water
#define MT_WATER_WAIST 2 // waist in water
#define MT_WATER_HEAD 3 // head in water

#define MT_WITCHFILTER_COMMON (1 << 0) // common infected
#define MT_WITCHFILTER_SMOKER (1 << 1) // smoker
#define MT_WITCHFILTER_BOOMER (1 << 2) // boomer
#define MT_WITCHFILTER_HUNTER (1 << 3) // hunter
#define MT_WITCHFILTER_SPITTER (1 << 4) // spitter
#define MT_WITCHFILTER_JOCKEY (1 << 5) // jockey
#define MT_WITCHFILTER_CHARGER (1 << 6) // charger
#define MT_WITCHFILTER_TANK (1 << 7) // tank
#define MT_WITCHFILTER_SURVIVORS (1 << 8) // survivors

#define MT_WITCHTRIGGER_STARTLED (1 << 0) // startled
#define MT_WITCHTRIGGER_KILLED (1 << 1) // killed
#define MT_WITCHTRIGGER_CROWNED (1 << 2) // crowned

enum ConfigState
{
	ConfigState_None, // no section yet
	ConfigState_Start, // reached "Mutant Tanks" section
	ConfigState_Settings, // reached "Plugin Settings" section
	ConfigState_Type, // reached "Tank #" section
	ConfigState_Admin, // reached "STEAM_"/"[U:" section
	ConfigState_Specific, // reached specific sections
	ConfigState_Special // reached special infected section
};

enum DataState
{
	DataState_None, // no section yet
	DataState_Start, // reached "Detours"/"Patches" section
	DataState_Game, // reached "left4dead"/"left4dead2"/"both" section
	DataState_Name, // reached "MTDetour_FunctionName"/"MTPatch_PatchName" section
	DataState_OS, // reached "linux"/"windows" section
};

enum struct esGeneral
{
	Address g_adDirector;
	Address g_adDoJumpValue;
	Address g_adOriginalJumpHeight[2];
	Address g_adOriginalVerticalPunch;

	ArrayList g_alAbilitySections[4];
	ArrayList g_alClassKeys[2];
	ArrayList g_alColorKeys[2];
	ArrayList g_alCompTypes[2];
	ArrayList g_alElevators;
	ArrayList g_alFilePaths;
	ArrayList g_alPlugins;
	ArrayList g_alSections;
#if defined _mtclone_included
	bool g_bCloneInstalled;
#endif
	bool g_bAbilityPlugin[MT_MAXABILITIES + 1];
	bool g_bBlindType;
	bool g_bFinaleEnded;
	bool g_bFinalMap;
	bool g_bForceSpawned;
	bool g_bHideNameChange;
	bool g_bIgnoreWeaponShotPosition;
	bool g_bLaggedMovementInstalled;
	bool g_bNextRound;
	bool g_bNormalMap;
	bool g_bOverrideDetour;
	bool g_bOverridePatch;
	bool g_bPatchFallingSound;
	bool g_bPatchJumpHeight;
	bool g_bPatchVerticalPunch;
	bool g_bPluginEnabled;
	bool g_bRecycleTypes;
	bool g_bRecycleTypes2;
	bool g_bRoundEnded;
	bool g_bRushCooldown;
	bool g_bRushCoop;
	bool g_bRushCountdown;
	bool g_bRushEnded;
	bool g_bRushFirst;
	bool g_bRushRested;
	bool g_bRushSpawning;
	bool g_bRushStarted;
	bool g_bSameMission;
	bool g_bUpdateDoJumpMemAccess;
	bool g_bUpdateWeaponInfoMemAccess;
	bool g_bUsedParser;
	bool g_bWitchKilled[2048];

	char g_sArmorCharacters[4];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sChosenPath[PLATFORM_MAX_PATH];
	char g_sConfigPath[PLATFORM_MAX_PATH];
	char g_sCurrentMissionDisplayTitle[64];
	char g_sCurrentMissionName[64];
	char g_sCurrentSection[128];
	char g_sCurrentSection2[128];
	char g_sCurrentSection3[128];
	char g_sCurrentSection4[128];
	char g_sCurrentSpecSection[128];
	char g_sCurrentSubSection[128];
	char g_sCurrentSubSection2[128];
	char g_sCurrentSubSection3[128];
	char g_sDefaultGunVerticalPunch[6];
	char g_sDisabledGameModes[513];
	char g_sEnabledGameModes[513];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sHealthCharacters[4];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLogFile[PLATFORM_MAX_PATH];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sSavePath[PLATFORM_MAX_PATH];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sSection[PLATFORM_MAX_PATH];
	char g_sShieldCharacters[4];

	ConfigState g_csState;
	ConfigState g_csState2;

	ConVar g_cvMTAdrenalineDuration;
	ConVar g_cvMTAmmoPackUseDuration;
	ConVar g_cvMTAssaultRifleAmmo;
	ConVar g_cvMTAutoShotgunAmmo;
	ConVar g_cvMTAutoUpdate;
	ConVar g_cvMTBlind;
	ConVar g_cvMTColaBottlesUseDuration;
	ConVar g_cvMTCommonLimit;
	ConVar g_cvMTConfigFile;
	ConVar g_cvMTDefibrillatorUseDuration;
	ConVar g_cvMTDifficulty;
	ConVar g_cvMTDirectorNoBosses;
	ConVar g_cvMTDirectorNoMobs;
	ConVar g_cvMTDisabledGameModes;
	ConVar g_cvMTEnabledGameModes;
	ConVar g_cvMTFirstAidHealPercent;
	ConVar g_cvMTFirstAidKitUseDuration;
	ConVar g_cvMTGameMode;
	ConVar g_cvMTGameModeTypes;
	ConVar g_cvMTGameTypes;
	ConVar g_cvMTGasCanUseDuration;
	ConVar g_cvMTGhostSpeed;
	ConVar g_cvMTGhostTravelDistance;
	ConVar g_cvMTGraphicsLevel;
	ConVar g_cvMTGrenadeLauncherAmmo;
	ConVar g_cvMTGunSwingInterval;
	ConVar g_cvMTGunVerticalPunch;
	ConVar g_cvMTHuntingRifleAmmo;
	ConVar g_cvMTListenSupport;
	ConVar g_cvMTMeleeRange;
	ConVar g_cvMTPainPillsDecayRate;
	ConVar g_cvMTPainPillsHealthValue;
	ConVar g_cvMTPhysicsPushScale;
	ConVar g_cvMTPipeBombDuration;
	ConVar g_cvMTPluginEnabled;
	ConVar g_cvMTShotgunAmmo;
	ConVar g_cvMTSMGAmmo;
	ConVar g_cvMTSniperRifleAmmo;
	ConVar g_cvMTSurvivorMaxIncapCount;
	ConVar g_cvMTSurvivorReviveDuration;
	ConVar g_cvMTSurvivorReviveHealth;
	ConVar g_cvMTSurvivorUpgrades;
	ConVar g_cvMTTankFrustration;
	ConVar g_cvMTTankIncapHealth;
	ConVar g_cvMTTankThrowForce;
	ConVar g_cvMTTempSetting;
	ConVar g_cvMTUpgradePackUseDuration;
#if defined _clientprefs_included
	Cookie g_ckMTAdmin[6];
	Cookie g_ckMTPrefs;
#endif
	DataState g_dsState;
	DataState g_dsState2;
	DataState g_dsState3;

	DynamicDetour g_ddActionCompleteDetour;
	DynamicDetour g_ddActivateAbilityDetour;
	DynamicDetour g_ddBaseEntityCreateDetour;
	DynamicDetour g_ddBaseEntityGetGroundEntityDetour;
	DynamicDetour g_ddBeginChangeLevelDetour;
	DynamicDetour g_ddCanDeployForDetour;
	DynamicDetour g_ddCheckJumpButtonDetour;
	DynamicDetour g_ddDeathFallCameraEnableDetour;
	DynamicDetour g_ddDoAnimationEventDetour;
	DynamicDetour g_ddDoJumpDetour;
	DynamicDetour g_ddEnterGhostStateDetour;
	DynamicDetour g_ddEnterStasisDetour;
	DynamicDetour g_ddEventKilledDetour;
	DynamicDetour g_ddExtinguishDetour;
	DynamicDetour g_ddFallingDetour;
	DynamicDetour g_ddFootstepDetour;
	DynamicDetour g_ddFinishHealingDetour;
	DynamicDetour g_ddFirstSurvivorLeftSafeAreaDetour;
	DynamicDetour g_ddFireBulletDetour;
	DynamicDetour g_ddFlingDetour;
	DynamicDetour g_ddGetMaxClip1Detour;
	DynamicDetour g_ddGetRateOfFireDetour;
	DynamicDetour g_ddGrabVictimWithTongueDetour;
	DynamicDetour g_ddHitByVomitJarDetour;
	DynamicDetour g_ddIncapacitatedAsTankDetour;
	DynamicDetour g_ddInitialContainedActionDetour;
	DynamicDetour g_ddITExpiredDetour;
	DynamicDetour g_ddLadderDismountDetour;
	DynamicDetour g_ddLadderMountDetour;
	DynamicDetour g_ddLauncherDirectionDetour;
	DynamicDetour g_ddLeaveStasisDetour;
	DynamicDetour g_ddLeptOnSurvivorDetour;
	DynamicDetour g_ddMaxCarryDetour;
	DynamicDetour g_ddPipeBombProjectileCreateDetour;
	DynamicDetour g_ddPipeBombProjectileDetonateDetour;
	DynamicDetour g_ddPistolGetRateOfFireDetour;
	DynamicDetour g_ddPouncedOnSurvivorDetour;
	DynamicDetour g_ddPreThinkDetour;
	DynamicDetour g_ddQueuePummelVictimDetour;
	DynamicDetour g_ddReplaceTankDetour;
	DynamicDetour g_ddRevivedDetour;
	DynamicDetour g_ddSecondaryAttackDetour;
	DynamicDetour g_ddSecondaryAttackDetour2;
	DynamicDetour g_ddSelectWeightedSequenceDetour;
	DynamicDetour g_ddShovedByPounceLandingDetour;
	DynamicDetour g_ddShovedBySurvivorDetour;
	DynamicDetour g_ddSpawnBoomerDetour;
	DynamicDetour g_ddSpawnHunterDetour;
	DynamicDetour g_ddSpawnSmokerDetour;
	DynamicDetour g_ddSpawnSpecialDetour;
	DynamicDetour g_ddSpawnTankDetour;
	DynamicDetour g_ddSpecialClawSwingEndDetour;
	DynamicDetour g_ddStaggeredDetour;
	DynamicDetour g_ddStartActionDetour;
	DynamicDetour g_ddStartCarryingVictimDetour;
	DynamicDetour g_ddStartHealingDetour;
	DynamicDetour g_ddStartRevivingDetour;
	DynamicDetour g_ddTankClawDoSwingDetour;
	DynamicDetour g_ddTankClawGroundPoundDetour;
	DynamicDetour g_ddTankClawPlayerHitDetour;
	DynamicDetour g_ddTankClawPrimaryAttackDetour;
	DynamicDetour g_ddTankClawTrySwingDetour;
	DynamicDetour g_ddTankRockCreateDetour;
	DynamicDetour g_ddTankRockDetonateDetour;
	DynamicDetour g_ddTankRockReleaseDetour;
	DynamicDetour g_ddTestMeleeSwingCollisionDetour;
	DynamicDetour g_ddThrowUpdateAbilityDetour;
	DynamicDetour g_ddTrySwingDetour;
	DynamicDetour g_ddTryToThrowRockDetour;
	DynamicDetour g_ddUTILSetModelDetour;
	DynamicDetour g_ddUseDetour;
	DynamicDetour g_ddUseDetour2;
	DynamicDetour g_ddVomitedUponDetour;

	DynamicHook g_dhWeaponShootPositionHook;

	float g_flActionDurationReward[4];
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flConfigDelay;
	float g_flCoopDelay;
	float g_flDamageBoostReward[4];
	float g_flDamageResistanceReward[4];
	float g_flDefaultAmmoPackUseDuration;
	float g_flDefaultColaBottlesUseDuration;
	float g_flDefaultDefibrillatorUseDuration;
	float g_flDefaultFirstAidHealPercent;
	float g_flDefaultFirstAidKitUseDuration;
	float g_flDefaultGasCanUseDuration;
	float g_flDefaultGunSwingInterval;
	float g_flDefaultPhysicsPushScale;
	float g_flDefaultPipeBombDuration;
	float g_flDefaultSurvivorReviveDuration;
	float g_flDefaultTankThrowForce;
	float g_flDefaultUpgradePackUseDuration;
	float g_flDifficultyDamage[4];
	float g_flDopamineRadiusReward[4];
	float g_flExtrasDelay;
	float g_flFinaleCooldown;
	float g_flFireRateReward[4];
	float g_flForceSpawn;
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmoReward[4];
	float g_flIdleCheck;
	float g_flIncapDamageMultiplier;
	float g_flInfectedChance;
	float g_flInfectedScaleMax;
	float g_flInfectedScaleMin;
	float g_flJockeyChance;
	float g_flJockeyScaleMax;
	float g_flJockeyScaleMin;
	float g_flJumpHeightReward[4];
	float g_flKillCountdown;
	float g_flLadyKillerReward[4];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flOverdoseRadiusReward[4];
	float g_flPipeBombDurationReward[4];
	float g_flPunchForce;
	float g_flPunchResistanceReward[4];
	float g_flPunchThrow;
	float g_flPunishDistance[2];
	float g_flPunisherLifetime[2];
	float g_flRapidPistolReward[4];
	float g_flRefillPercentReward[4];
	float g_flRegularDelay;
	float g_flRegularInterval;
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRockDamage;
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamageReward[4];
	float g_flShoveRateReward[4];
	float g_flSledgehammerRoundsReward[4];
	float g_flSpawnInterval;
	float g_flSpeedBoostReward[4];
	float g_flStickyDelay[2048];
	float g_flSupplierReward[4];
	float g_flSurvivalDelay;
	float g_flSwingRateReward[4];
	float g_flTankChance;
	float g_flThrowForce;
	float g_flThrowInterval;
	float g_flTickInterval;
	float g_flWarningDistance[2];
	float g_flWitchChance;
	float g_flWitchScaleMax;
	float g_flWitchScaleMin;
	float g_flZedTime[2];

	GameData g_gdMutantTanks;

	GlobalForward g_gfAbilityActivatedForward;
	GlobalForward g_gfAbilityCheckForward;
	GlobalForward g_gfButtonPressedForward;
	GlobalForward g_gfButtonReleasedForward;
	GlobalForward g_gfChangeTypeForward;
	GlobalForward g_gfCombineAbilitiesForward;
	GlobalForward g_gfConfigsLoadForward;
	GlobalForward g_gfConfigsLoadedForward;
	GlobalForward g_gfCopyStatsForward;
	GlobalForward g_gfDisplayMenuForward;
	GlobalForward g_gfEventFiredForward;
	GlobalForward g_gfFatalFallingForward;
	GlobalForward g_gfHookEventForward;
	GlobalForward g_gfLogMessageForward;
	GlobalForward g_gfMenuItemDisplayedForward;
	GlobalForward g_gfMenuItemSelectedForward;
	GlobalForward g_gfPlayerEventKilledForward;
	GlobalForward g_gfPlayerHitByVomitJarForward;
	GlobalForward g_gfPlayerShovedBySurvivorForward;
	GlobalForward g_gfPluginCheckForward;
	GlobalForward g_gfPluginEndForward;
	GlobalForward g_gfPostTankSpawnForward;
	GlobalForward g_gfResetTimersForward;
	GlobalForward g_gfRewardSurvivorForward;
	GlobalForward g_gfRockBreakForward;
	GlobalForward g_gfRockThrowForward;
	GlobalForward g_gfSettingsCachedForward;
	GlobalForward g_gfToggleSurvivorPassiveForward;
	GlobalForward g_gfTypeChosenForward;
#if defined _updater_included
	GlobalForward g_gfPluginUpdateForward;
#endif
	Handle g_hRegularWavesTimer;
	Handle g_hSDKAddUpgrade;
	Handle g_hSDKBecomeGhost;
	Handle g_hSDKCreateForPlayer;
	Handle g_hSDKDeafen;
	Handle g_hSDKFirstContainedResponder;
	Handle g_hSDKGetLastKnownArea;
	Handle g_hSDKGetMaxClip1;
	Handle g_hSDKGetMissionFirstMap;
	Handle g_hSDKGetMissionInfo;
	Handle g_hSDKGetName;
	Handle g_hSDKGetRefEHandle;
	Handle g_hSDKGetUseAction;
	Handle g_hSDKGetWeaponID;
	Handle g_hSDKGetWeaponInfo;
	Handle g_hSDKHasAnySurvivorLeftSafeArea;
	Handle g_hSDKHasConfigurableDifficultySetting;
	Handle g_hSDKIsCoopMode;
	Handle g_hSDKIsFirstMapInScenario;
	Handle g_hSDKIsInStasis;
	Handle g_hSDKIsMissionFinalMap;
	Handle g_hSDKIsRealismMode;
	Handle g_hSDKIsScavengeMode;
	Handle g_hSDKIsSurvivalMode;
	Handle g_hSDKIsVersusMode;
	Handle g_hSDKITExpired;
	Handle g_hSDKKeyValuesGetString;
	Handle g_hSDKLaunchGrenade;
	Handle g_hSDKLeaveStasis;
	Handle g_hSDKMaterializeFromGhost;
	Handle g_hSDKPipeBombProjectileCreate;
	Handle g_hSDKPlayerZombieAbortControl;
	Handle g_hSDKRemoveUpgrade;
	Handle g_hSDKRevive;
	Handle g_hSDKRockDetonate;
	Handle g_hSDKRoundRespawn;
	Handle g_hSDKSetClass;
	Handle g_hSDKShovedBySurvivor;
	Handle g_hSDKStagger;
	Handle g_hSDKStartAttackTimer;
	Handle g_hSDKStateTransition;
	Handle g_hSDKVomitedUpon;
	Handle g_hSDKWeaponShootPosition;
	Handle g_hSurvivalTimer;
	Handle g_hTankWaveTimer;

	int g_iAccessFlags;
	int g_iAmmoBoostReward[4];
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAttackerOffset;
	int g_iAutoAggravate;
	int g_iAutoHop;
	int g_iAutoUpdate;
	int g_iBaseHealth;
	int g_iBlazeHealthReward[4];
	int g_iBloodDonorReward[4];
	int g_iBulletFix;
	int g_iBulletImmunity;
	int g_iBunnyHopReward[4];
	int g_iBurstDoorsReward[4];
	int g_iCheckAbilities;
	int g_iChosenType;
	int g_iCleanKillsReward[4];
	int g_iClusterBombsReward[4];
	int g_iCommonHealth[2048];
	int g_iCommonLimit;
	int g_iConfigCreate;
	int g_iConfigEnable;
	int g_iConfigExecute;
	int g_iConfigMode;
	int g_iCreditIgniters;
	int g_iCurrentLine;
	int g_iCurrentMode;
	int g_iCycleTypes;
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDefaultMeleeRange;
	int g_iDefaultSurvivorReviveHealth;
	int g_iDefaultTankIncapHealth;
	int g_iDetourCount;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth;
	int g_iFastRecoveryReward[4];
	int g_iFileTimeOld[8];
	int g_iFileTimeNew[8];
	int g_iFinaleAmount;
	int g_iFinaleCheck;
	int g_iFinaleMaxTypes[11];
	int g_iFinaleMinTypes[11];
	int g_iFinaleMode;
	int g_iFinalesOnly;
	int g_iFinaleWave[11];
	int g_iFireImmunity;
	int g_iFlowOffset;
	int g_iFootstepShake;
	int g_iFriendlyFireReward[4];
	int g_iGameModeTypes;
	int g_iGhostBulletsReward[4];
	int g_iGraphicsLevel;
	int g_iGroundPound;
	int g_iHardcoreMode;
	int g_iHealthKills;
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHumanCooldown;
	int g_iHumanMultiplierMode;
	int g_iIdleCheckMode;
	int g_iIgnoreLevel;
	int g_iIgnoreLevel2;
	int g_iIgnoreLevel3;
	int g_iIgnoreLevel4;
	int g_iIgnoreLevel5;
	int g_iImmunityFlags;
	int g_iIncapsRequired;
	int g_iInfectedDamage;
	int g_iInfectedHealth;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iIntentionOffset;
	int g_iJockeyDamage;
	int g_iJockeyHealth;
	int g_iKickBots;
	int g_iKillMessage;
	int g_iLadderActionsReward[4];
	int g_iLaserSightReward[4];
	int g_iLauncher;
	int g_iLifeLeechReward[4];
	int g_iLimitExtras;
	int g_iListenSupport;
	int g_iLogCommands;
	int g_iLogMessages;
	int g_iMasterControl;
	int g_iMaxType;
	int g_iMaxWeapons;
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeOffset;
	int g_iMeleeRangeReward[4];
	int g_iMidairDashesLimit;
	int g_iMidairDashesReward[4];
	int g_iMinType;
	int g_iMinimumHumans;
	int g_iMultiplyHealth;
	int g_iOverhealthReward[4];
	int g_iOwnerID[2048];
	int g_iOwnerID2[2048];
	int g_iParserViewer;
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPatchCount;
	int g_iPlatformType;
	int g_iPlayerCount[3];
	int g_iPluginEnabled;
	int g_iPrefsNotify[4];
	int g_iPrioritizeThrows;
	int g_iPunishBots[2];
	int g_iPunishEnabled[2];
	int g_iPunisherTypes[2];
	int g_iRecoilDampenerReward[4];
	int g_iRegenBurstsReward[4];
	int g_iRegularAmount;
	int g_iRegularCount;
	int g_iRegularLimit;
	int g_iRegularMaxType;
	int g_iRegularMinType;
	int g_iRegularMode;
	int g_iRegularWave;
	int g_iRequiresHumans;
	int g_iRespawnLoadoutReward[4];
	int g_iReviveHealthReward[4];
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardVisual[4];
	int g_iRiotGearReward[4];
	int g_iRockSound;
	int g_iRushCooldownTick;
	int g_iRushCoopTick;
	int g_iRushCountdownHalf;
	int g_iRushCountdownTick;
	int g_iRushTypes;
	int g_iRushLimit;
	int g_iRushSpawnTick;
	int g_iSafetyBubbleReward[4];
	int g_iScaleDamage;
	int g_iSection;
	int g_iShareRewards[4];
	int g_iShovePenaltyReward[4];
	int g_iSignatureCount;
	int g_iSkipIncap;
	int g_iSkipTaunt;
	int g_iSpawnLimit;
	int g_iSpawnEnabled;
	int g_iSpawnMode;
	int g_iSpawnProtection;
	int g_iSpecialAmmoReward[4];
	int g_iSpecialCount;
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStasisMode;
	int g_iStickyGrenadesReward[4];
	int g_iSurvivalBlock;
	int g_iSurvivorIncaps;
	int g_iSurvivorsRequired;
	int g_iSurvivorTypes;
	int g_iSweepFist;
	int g_iSyringeDartsReward[4];
	int g_iTankCount;
	int g_iTankEnabled;
	int g_iTankModel;
	int g_iTankNote;
	int g_iTankWave;
	int g_iTeamID[2048];
	int g_iTeamID2[2048];
	int g_iTeammateLimit;
	int g_iThornsReward[4];
	int g_iThrowRock;
	int g_iTotalTypes[2];
	int g_iTypeCounter[2];
	int g_iUsefulRewards[4];
	int g_iVerticalPunchOffset;
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
	int g_iWarningInterval[2];
	int g_iWarningLimit[2];
	int g_iWitchDamage;
	int g_iWitchHealth;

	StringMap g_smCvars;
#if defined _adminmenu_included
	TopMenu g_tmMTMenu;
#endif
	UserMsg g_umSayText;
	UserMsg g_umSayText2;
}

esGeneral g_esGeneral;

enum struct esSpecific
{
	bool g_bInfected[MT_MAXTYPES + 1];
	bool g_bRecycleTypes[7];
	bool g_bRecycleTypes2[7];

	char g_sArmorCharacters[4];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sHealthCharacters[4];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sShieldCharacters[4];

	float g_flActionDurationReward[4];
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flDamageBoostReward[4];
	float g_flDamageResistanceReward[4];
	float g_flDopamineRadiusReward[4];
	float g_flFireRateReward[4];
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmoReward[4];
	float g_flIncapDamageMultiplier;
	float g_flJumpHeightReward[4];
	float g_flLadyKillerReward[4];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadiusReward[4];
	float g_flOverdoseRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flPinDamage;
	float g_flPipeBombDurationReward[4];
	float g_flPunchResistanceReward[4];
	float g_flRapidPistolReward[4];
	float g_flRefillPercentReward[4];
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamageReward[4];
	float g_flShoveRateReward[4];
	float g_flSledgehammerRoundsReward[4];
	float g_flSpecialChance;
	float g_flSpecialInterval;
	float g_flSpeedBoostReward[4];
	float g_flSupplierReward[4];
	float g_flSwingRateReward[4];

	int g_iAmmoBoostReward[4];
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAutoHop;
	int g_iBaseHealth[7];
	int g_iBlazeHealthReward[4];
	int g_iBloodDonorReward[4];
	int g_iBulletImmunity;
	int g_iBunnyHopReward[4];
	int g_iBurstDoorsReward[4];
	int g_iCleanKillsReward[4];
	int g_iClusterBombsReward[4];
	int g_iCycleTypes;
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth[7];
	int g_iFastRecoveryReward[4];
	int g_iFinalesOnly;
	int g_iFireImmunity;
	int g_iFriendlyFireReward[4];
	int g_iGameModeTypes;
	int g_iGhostBulletsReward[4];
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHumanCooldown;
	int g_iHumanMultiplierMode;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iKillMessage;
	int g_iLadderActionsReward[4];
	int g_iLaserSightReward[4];
	int g_iLifeLeechReward[4];
	int g_iMaxType;
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeRangeReward[4];
	int g_iMidairDashesReward[4];
	int g_iMinimumHumans;
	int g_iMinType;
	int g_iMultiplyHealth;
	int g_iOverhealthReward[4];
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPrefsNotify[4];
	int g_iRecoilDampenerReward[4];
	int g_iRegenBurstsReward[4];
	int g_iRequiresHumans;
	int g_iRespawnLoadoutReward[4];
	int g_iReviveHealthReward[4];
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardVisual[4];
	int g_iRiotGearReward[4];
	int g_iSafetyBubbleReward[4];
	int g_iShareRewards[4];
	int g_iShovePenaltyReward[4];
	int g_iSpawnEnabled;
	int g_iSpawnMode;
	int g_iSpawnProtection;
	int g_iSpecialAmmoReward[4];
	int g_iSpecialModel;
	int g_iSpecialNote;
	int g_iSpecialTypes;
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStickyGrenadesReward[4];
	int g_iSyringeDartsReward[4];
	int g_iThornsReward[4];
	int g_iThrowRock;
	int g_iUsefulRewards[4];
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
}

esSpecific g_esSpecific;

enum struct esMob
{
	char g_sHealthCharacters[4];

	float g_flBioMassMeter;
	float g_flCommonBioChance;
	float g_flCommonChance;
	float g_flCommonCheck;
	float g_flCommonDamagePoints;
	float g_flCommonDeathPoints;
	float g_flCommonGoal;
	float g_flWitchChance;
	float g_flWitchMutateChance;
	float g_flWitchRange;

	Handle g_hBioMassTimer;

	int g_iCommonFilter;
	int g_iCommonVariant;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iMobVariants;
	int g_iWitchFilter;
	int g_iWitchMode;
	int g_iWitchTypes;
}

esMob g_esMob;

enum struct esHuman
{
	char g_sCarrierAttackVoicelines[1280];
	char g_sCarrierBaitVoicelines[1280];
	char g_sItemPassive[320];

	float g_flActionDurationPassive;
	float g_flAdrenalineTimePassive;
	float g_flAttackBoostPassive;
	float g_flCarrierChance;
	float g_flCarrierDamageMultiplier;
	float g_flCarrierDelay;
	float g_flCarrierHealthMultiplier;
	float g_flCarrierVoiceChance;
	float g_flCarrierVoiceInterval;
	float g_flDamageBoostPassive;
	float g_flDamageResistancePassive;
	float g_flDopamineRadiusPassive;
	float g_flFireRatePassive;
	float g_flGrenadeLauncherPassive;
	float g_flHealPercentPassive;
	float g_flHealthcareRadiusPassive;
	float g_flHeartbeatPassive;
	float g_flHollowpointAmmoPassive;
	float g_flJumpHeightPassive;
	float g_flLadyKillerPassive;
	float g_flLuckyBulletPassive;
	float g_flMotivationRadiusPassive;
	float g_flOverdoseRadiusPassive;
	float g_flPipeBombDurationPassive;
	float g_flPunchResistancePassive;
	float g_flRapidPistolPassive;
	float g_flRefillPercentPassive;
	float g_flReloadRatePassive;
	float g_flShockwaveRadiusPassive;
	float g_flShoveDamagePassive;
	float g_flShoveRatePassive;
	float g_flSledgehammerRoundsPassive;
	float g_flSpeedBoostPassive;
	float g_flSupplierPassive;
	float g_flSwingRatePassive;

	int g_iAmmoBoostPassive;
	int g_iAmmoRefillPassive;
	int g_iAmmoRegenPassive;
	int g_iBlazeHealthPassive;
	int g_iBloodDonorPassive;
	int g_iBunnyHopPassive;
	int g_iBurstDoorsPassive;
	int g_iCarrierBody;
	int g_iCarrierBots;
	int g_iCarrierCleanse;
	int g_iCarrierEnabled;
	int g_iCarrierFilter;
	int g_iCarrierInfection;
	int g_iCarrierMaxType;
	int g_iCarrierMinType;
	int g_iCarrierMix;
	int g_iCarrierMode;
	int g_iCarrierTeleport;
	int g_iCarrierVoice;
	int g_iCleanKillsPassive;
	int g_iClusterBombsPassive;
	int g_iEternalFlamesPassive;
	int g_iFastRecoveryPassive;
	int g_iFriendlyFirePassive;
	int g_iGhostBulletsPassive;
	int g_iHealthRegenPassive;
	int g_iInfiniteAmmoPassive;
	int g_iLadderActionsPassive;
	int g_iLaserSightPassive;
	int g_iLifeLeechPassive;
	int g_iMedicalCutsPassive;
	int g_iMeleeRangePassive;
	int g_iMidairDashesPassive;
	int g_iOverhealthPassive;
	int g_iPassiveBots;
	int g_iPassiveEnabled;
	int g_iPassiveNotify;
	int g_iRecoilDampenerPassive;
	int g_iRegenBurstsPassive;
	int g_iRespawnLoadoutPassive;
	int g_iReviveHealthPassive;
	int g_iRiotGearPassive;
	int g_iSafetyBubblePassive;
	int g_iShovePenaltyPassive;
	int g_iSpecialAmmoPassive;
	int g_iStickyGrenadesPassive;
	int g_iSyringeDartsPassive;
	int g_iThornsPassive;
}

esHuman g_esHuman;

enum struct esAdmin
{
	int g_iAccessFlags[MAXPLAYERS + 1];
	int g_iImmunityFlags[MAXPLAYERS + 1];
}

esAdmin g_esAdmin[MT_MAXTYPES + 1];

enum struct esDeveloper
{
	bool g_bDevVisual;

	char g_sDevFallVoiceline[64];
	char g_sDevFlashlight[64];
	char g_sDevGlowOutline[64];
	char g_sDevLoadout[384];
	char g_sDevSkinColor[64];

	float g_flDevActionDuration;
	float g_flDevAdrenalineTime;
	float g_flDevAttackBoost;
	float g_flDevDamageBoost;
	float g_flDevDamageResistance;
	float g_flDevDopamineRadius;
	float g_flDevFireRate;
	float g_flDevGrenadeLauncher;
	float g_flDevHealPercent;
	float g_flDevHealthcareRadius;
	float g_flDevJumpHeight;
	float g_flDevLadyKiller;
	float g_flDevMotivationRadius;
	float g_flDevOverdoseRadius;
	float g_flDevPipeBombDuration;
	float g_flDevPunchResistance;
	float g_flDevRapidPistol;
	float g_flDevReloadRate;
	float g_flDevRewardDuration;
	float g_flDevShockwaveRadius;
	float g_flDevShoveDamage;
	float g_flDevShoveRate;
	float g_flDevSpeedBoost;
	float g_flDevSwingRate;

	int g_iDevAccess;
	int g_iDevAmmoRegen;
	int g_iDevBlazeHealth;
	int g_iDevClusterBombs;
	int g_iDevHealthRegen;
	int g_iDevInfiniteAmmo;
	int g_iDevLifeLeech;
	int g_iDevMedicalCuts;
	int g_iDevMeleeRange;
	int g_iDevMidairDashes;
	int g_iDevOverhealth;
	int g_iDevPanelPage;
	int g_iDevPanelPages;
	int g_iDevParticle;
	int g_iDevRegenBursts;
	int g_iDevReviveHealth;
	int g_iDevPassiveTypes;
	int g_iDevRewardTypes;
	int g_iDevSpecialAmmo;
	int g_iDevSyringeDarts;
	int g_iDevVoicePitch;
	int g_iDevWeaponSkin;
}

esDeveloper g_esDeveloper[MAXPLAYERS + 1];

enum struct esPlayer
{
	bool g_bAdminMenu;
	bool g_bApplyVisuals[7];
	bool g_bArtificial;
	bool g_bBlindTank;
	bool g_bBlood;
	bool g_bBlur;
	bool g_bBoss;
	bool g_bCombo;
	bool g_bCustomLaser;
	bool g_bDied;
	bool g_bDualWielding;
	bool g_bElectric;
	bool g_bFallDamage;
	bool g_bFalling;
	bool g_bFallTracked;
	bool g_bFatalFalling;
	bool g_bFinalFall;
	bool g_bFire;
	bool g_bFirstSpawn;
	bool g_bIce;
	bool g_bIgnoreCmd;
	bool g_bInitialRound;
	bool g_bKeepCurrentType;
	bool g_bLadyKiller;
	bool g_bLastLife[2];
	bool g_bMeteor;
	bool g_bMutantMenu;
	bool g_bPassive;
	bool g_bProtected[2];
	bool g_bPunished;
	bool g_bPunisher;
	bool g_bRainbowColor;
	bool g_bRandomized;
	bool g_bReleasedJump;
	bool g_bReplaceSelf;
	bool g_bRushDespawning;
	bool g_bRushGhost;
	bool g_bRushWaiting;
	bool g_bSetup;
	bool g_bSmoke;
	bool g_bSpit;
	bool g_bStasis;
	bool g_bStickied;
	bool g_bThirdPerson;
#if defined _ThirdPersonShoulder_Detect_included
	bool g_bThirdPerson2;
#endif
	bool g_bTransformed;
	bool g_bVomited;
#if defined _actions_included
	char g_sActionName[32];
#endif
	char g_sArmorCharacters[4];
	char g_sBodyColor[64];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sComboSet[320];
	char g_sFallVoiceline[64];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sFlameColor[64];
	char g_sFlashlightColor[64];
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sLightColor[64];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLoopingVoiceline[64];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sMenuTitle[33];
	char g_sOutlineColor[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sOzTankColor[64];
	char g_sPropTankColor[64];
	char g_sRockColor[64];
	char g_sScreenColor[64];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sShieldCharacters[4];
	char g_sSkinColor[64];
	char g_sSteamID32[64];
	char g_sSteam3ID[64];
	char g_sStoredThrowable[32];
	char g_sStoredMedkit[32];
	char g_sStoredPills[32];
	char g_sTankName[33];
	char g_sTireColor[64];
	char g_sWeaponCurrent[32];
	char g_sWeaponPrimary[32];
	char g_sWeaponSecondary[32];
	char g_sWeaponThrowable[32];
	char g_sWeaponMedkit[32];
	char g_sWeaponPills[32];

	float g_flActionDuration;
	float g_flActionDurationReward[4];
	float g_flAdrenalineTime;
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoost;
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBodyChance[7];
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flComboChance[10];
	float g_flComboDamage[10];
	float g_flComboDeathChance[10];
	float g_flComboDeathRange[10];
	float g_flComboDelay[10];
	float g_flComboDuration[10];
	float g_flComboInterval[10];
	float g_flComboMaxRadius[10];
	float g_flComboMinRadius[10];
	float g_flComboRange[10];
	float g_flComboRangeChance[10];
	float g_flComboRockChance[10];
	float g_flComboSpeed[10];
	float g_flComboTypeChance[7];
	float g_flDamageBoost;
	float g_flDamageBoostReward[4];
	float g_flDamageResistance;
	float g_flDamageResistanceReward[4];
	float g_flDopamineRadius;
	float g_flDopamineRadiusReward[4];
	float g_flFireRate;
	float g_flFireRateReward[4];
	float g_flGrenadeLauncher;
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercent;
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadius;
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeat;
	float g_flHeartbeatCooldown;
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmo;
	float g_flHollowpointAmmoReward[4];
	float g_flIncapDamageMultiplier;
	float g_flJumpHeight;
	float g_flJumpHeightReward[4];
	float g_flLadyKiller;
	float g_flLadyKillerReward[4];
	float g_flLastAttackTime;
	float g_flLastClickTime;
	float g_flLastFlow;
	float g_flLastGrenadeTime;
	float g_flLastJumpTime;
	float g_flLastPosition[3];
	float g_flLastPushTime;
	float g_flLastWarning;
	float g_flLastWeaponShotPosition[3];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBullet;
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadius;
	float g_flMotivationRadiusReward[4];
	float g_flOverdoseRadius;
	float g_flOverdoseRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flPipeBombDuration;
	float g_flPipeBombDurationReward[4];
	float g_flPreFallZ;
	float g_flPropsChance[9];
	float g_flPunchForce;
	float g_flPunchResistance;
	float g_flPunchResistanceReward[4];
	float g_flPunchThrow;
	float g_flRandomDuration;
	float g_flRandomInterval;
	float g_flRapidPistol;
	float g_flRapidPistolReward[4];
	float g_flRefillPercent;
	float g_flRefillPercentReward[4];
	float g_flReloadRate;
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRewardTime[8];
	float g_flRockChance[4];
	float g_flRockDamage;
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadius;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamage;
	float g_flShoveDamageReward[4];
	float g_flShoveRate;
	float g_flShoveRateReward[4];
	float g_flSledgehammerRounds;
	float g_flSledgehammerRoundsReward[4];
	float g_flSpeedBoost;
	float g_flSpeedBoostReward[4];
	float g_flStaggerTime;
	float g_flSupplier;
	float g_flSupplierCooldown;
	float g_flSupplierReward[4];
	float g_flSwingRate;
	float g_flSwingRateReward[4];
	float g_flThrowForce;
	float g_flThrowInterval;
	float g_flTransformDelay;
	float g_flTransformDuration;
	float g_flVisualTime[7];

	Handle g_hHudTimer;
	Handle g_hPassiveTimer[2];
	Handle g_hProtectionTimer[2];

	int g_iAccessFlags;
	int g_iAmmoBoost;
	int g_iAmmoBoostReward[4];
	int g_iAmmoRefill;
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegen;
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAutoHop;
	int g_iBaseHealth;
	int g_iBlazeHealth;
	int g_iBlazeHealthReward[4];
	int g_iBloodDonor;
	int g_iBloodDonorReward[4];
	int g_iBlur;
	int g_iBodyEffects;
	int g_iBossEffects;
	int g_iBossHealth[4];
	int g_iBossStageCount;
	int g_iBossStages;
	int g_iBossType[4];
	int g_iBubble;
	int g_iBulletImmunity;
	int g_iBunnyHop;
	int g_iBunnyHopReward[4];
	int g_iBurstDoors;
	int g_iBurstDoorsReward[4];
	int g_iCheckAbilities;
	int g_iClawCount;
	int g_iClawDamage;
	int g_iCleanKills;
	int g_iCleanKillsReward[4];
	int g_iClusterBombs;
	int g_iClusterBombsReward[4];
	int g_iComboCooldown[10];
	int g_iComboRangeCooldown[10];
	int g_iComboRockCooldown[10];
	int g_iCooldown;
	int g_iCrownColor[4];
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEffect[2];
	int g_iEternalFlames;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth;
	int g_iFallPasses;
	int g_iFastRecovery;
	int g_iFastRecoveryReward[4];
	int g_iFavoriteType;
	int g_iFireImmunity;
	int g_iFlame[2];
	int g_iFlameColor[4];
	int g_iFlashlight;
	int g_iFlashlightColor[4];
	int g_iFootstepShake;
	int g_iFriendlyFire;
	int g_iFriendlyFireReward[4];
	int g_iGhostBullets;
	int g_iGhostBulletsReward[4];
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iGrenadeCount;
	int g_iGroundPound;
	int g_iHealthRegen;
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHudPanelPage;
	int g_iHudPanelPages;
	int g_iHumanMultiplierMode;
	int g_iImmunityFlags;
	int g_iIncapCount;
	int g_iInfectedType;
	int g_iInfiniteAmmo;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iKillCount;
	int g_iKillMessage;
	int g_iLadderActions;
	int g_iLadderActionsReward[4];
	int g_iLaserSight;
	int g_iLaserSightReward[4];
	int g_iLastButtons;
	int g_iLastFireAttacker;
	int g_iLifeLeech;
	int g_iLifeLeechReward[4];
	int g_iLight[9];
	int g_iLightColor[4];
	int g_iMaxClip[2];
	int g_iMedicalCuts;
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeRange;
	int g_iMeleeRangeReward[4];
	int g_iMenuFlags;
	int g_iMidairDashesCount;
	int g_iMidairDashesLimit;
	int g_iMidairDashesReward[4];
	int g_iMinimumHumans;
	int g_iMiscCount;
	int g_iMiscDamage;
	int g_iMultiplyHealth;
	int g_iNotify;
	int g_iOldTankType;
	int g_iOverhealth;
	int g_iOverhealthReward[4];
	int g_iOzTank[2];
	int g_iOzTankColor[4];
	int g_iParticleEffect;
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPersonalType;
	int g_iPrefsAccess;
	int g_iPrefsNotify[4];
	int g_iPropCount;
	int g_iPropDamage;
	int g_iPropsAttached;
	int g_iPropaneTank;
	int g_iPropTankColor[4];
	int g_iRandomTank;
	int g_iRecoilDampener;
	int g_iRecoilDampenerReward[4];
	int g_iRegenBursts;
	int g_iRegenBurstsReward[4];
	int g_iRespawnLoadoutReward[4];
	int g_iReviveCount;
	int g_iReviveHealth;
	int g_iReviveHealthReward[4];
	int g_iReviver;
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardStack[8];
	int g_iRewardTypes;
	int g_iRewardVisual[4];
	int g_iRewardVisuals;
	int g_iRiotGear;
	int g_iRiotGearReward[4];
	int g_iRock[20];
	int g_iRockColor[4];
	int g_iRockCount;
	int g_iRockDamage;
	int g_iRockEffects;
	int g_iRockModel;
	int g_iRockSound;
	int g_iRushDespawnCount;
	int g_iRushDespawningTick;
	int g_iRushWaitingTick;
	int g_iSafetyBubble;
	int g_iSafetyBubbleReward[4];
	int g_iScreenColorVisual[4];
	int g_iShareRewards[4];
	int g_iShovePenalty;
	int g_iShovePenaltyReward[4];
	int g_iSkinColor[4];
	int g_iSkipIncap;
	int g_iSkipTaunt;
	int g_iSpawnProtection;
	int g_iSpawnType;
	int g_iSpecialAmmo;
	int g_iSpecialAmmoReward[4];
	int g_iSpecialMaxHealth;
	int g_iSpecTypeMenu;
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStickyGrenades;
	int g_iStickyGrenadesReward[4];
	int g_iSurvivorDamage;
	int g_iSweepFist;
	int g_iSyringeDarts;
	int g_iSyringeDartsReward[4];
	int g_iTankDamage[MAXPLAYERS + 1];
	int g_iTankModel;
	int g_iTankNote;
	int g_iTankType;
#if defined _actions_included
	int g_iTargetID;
#endif
	int g_iTeammateLimit;
	int g_iThorns;
	int g_iThornsReward[4];
	int g_iThrownRock[2048];
	int g_iThrowRock;
	int g_iTire[2];
	int g_iTireColor[4];
	int g_iTransformType[10];
	int g_iUsefulRewards[4];
	int g_iUserID;
	int g_iUserID2;
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitch;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
	int g_iWeaponInfo[4];
	int g_iWeaponInfo2;
}

esPlayer g_esPlayer[MAXPLAYERS + 1];

enum struct esTeammate
{
	char g_sArmorCharacters[4];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sBoomerName[33];
	char g_sChargerName[33];
	char g_sComboSet[320];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sHunterName[33];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sJockeyName[33];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sRockColor[64];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sShieldCharacters[4];
	char g_sSkinColor[64];
	char g_sSmokerName[33];
	char g_sSpitterName[33];

	float g_flActionDurationReward[4];
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBodyChance[7];
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flComboChance[10];
	float g_flComboDamage[10];
	float g_flComboDeathChance[10];
	float g_flComboDeathRange[10];
	float g_flComboDelay[10];
	float g_flComboDuration[10];
	float g_flComboInterval[10];
	float g_flComboMaxRadius[10];
	float g_flComboMinRadius[10];
	float g_flComboRange[10];
	float g_flComboRangeChance[10];
	float g_flComboRockChance[10];
	float g_flComboSpeed[10];
	float g_flComboTypeChance[7];
	float g_flDamageBoostReward[4];
	float g_flDamageResistanceReward[4];
	float g_flDopamineRadiusReward[4];
	float g_flFireRateReward[4];
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmoReward[4];
	float g_flIncapDamageMultiplier;
	float g_flJumpHeightReward[4];
	float g_flLadyKillerReward[4];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadiusReward[4];
	float g_flOverdoseRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flPinDamage;
	float g_flPipeBombDurationReward[4];
	float g_flPunchResistanceReward[4];
	float g_flRandomDuration;
	float g_flRandomInterval;
	float g_flRapidPistolReward[4];
	float g_flRefillPercentReward[4];
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRockChance[4];
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamageReward[4];
	float g_flShoveRateReward[4];
	float g_flSledgehammerRoundsReward[4];
	float g_flSpecialInterval;
	float g_flSpeedBoostReward[4];
	float g_flSupplierReward[4];
	float g_flSwingRateReward[4];
	float g_flTransformDelay;
	float g_flTransformDuration;

	int g_iAmmoBoostReward[4];
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAutoHop;
	int g_iBaseHealth[7];
	int g_iBlazeHealthReward[4];
	int g_iBloodDonorReward[4];
	int g_iBodyEffects;
	int g_iBossEffects;
	int g_iBossHealth[4];
	int g_iBossStages;
	int g_iBossType[4];
	int g_iBulletImmunity;
	int g_iBunnyHopReward[4];
	int g_iBurstDoorsReward[4];
	int g_iCleanKillsReward[4];
	int g_iClusterBombsReward[4];
	int g_iComboCooldown[10];
	int g_iComboRangeCooldown[10];
	int g_iComboRockCooldown[10];
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth[7];
	int g_iFastRecoveryReward[4];
	int g_iFireImmunity;
	int g_iFriendlyFireReward[4];
	int g_iGhostBulletsReward[4];
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHumanMultiplierMode;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iKillMessage;
	int g_iLadderActionsReward[4];
	int g_iLaserSightReward[4];
	int g_iLifeLeechReward[4];
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeRangeReward[4];
	int g_iMidairDashesReward[4];
	int g_iMinimumHumans;
	int g_iMultiplyHealth;
	int g_iOverhealthReward[4];
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPersonalType[7];
	int g_iPrefsNotify[4];
	int g_iRandomSpecial;
	int g_iRecoilDampenerReward[4];
	int g_iRegenBurstsReward[4];
	int g_iRespawnLoadoutReward[4];
	int g_iReviveHealthReward[4];
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardVisual[4];
	int g_iRiotGearReward[4];
	int g_iRockColor[4];
	int g_iRockEffects;
	int g_iRockModel;
	int g_iSafetyBubbleReward[4];
	int g_iScreenColorVisual[4];
	int g_iShareRewards[4];
	int g_iShovePenaltyReward[4];
	int g_iSkinColor[4];
	int g_iSpawnProtection;
	int g_iSpawnType;
	int g_iSpecialAmmoReward[4];
	int g_iSpecialModel;
	int g_iSpecialNote;
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStickyGrenadesReward[4];
	int g_iSyringeDartsReward[4];
	int g_iThornsReward[4];
	int g_iThrowRock;
	int g_iTransformType[10];
	int g_iUsefulRewards[4];
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
}

esTeammate g_esTeammate[MAXPLAYERS + 1];

enum struct esInfected
{
	bool g_bBlood;
	bool g_bElectric;
	bool g_bFire;
	bool g_bIce;
	bool g_bMeteor;
	bool g_bRainbowColor;
	bool g_bSmoke;
	bool g_bSpit;

	int g_iDamageTaken;
	int g_iDeathModelOwner;
	int g_iTankType;
}

esInfected g_esInfected[2048];

enum struct esShooter
{
	bool g_bDeathModel;
	bool g_bInfected[MT_MAXTYPES + 1];
	bool g_bMixTypes;
	bool g_bProduced;
	bool g_bSurvivor;

	char g_sCarrierAttackVoicelines[1280];
	char g_sCarrierBaitVoicelines[1280];
	char g_sItemPassive[320];
	char g_sLastWeapon[32];
	char g_sSurvivorName[33];

	float g_flActionDurationPassive;
	float g_flAdrenalineTimePassive;
	float g_flAttackBoostPassive;
	float g_flCarrierChance;
	float g_flCarrierDamageMultiplier;
	float g_flCarrierDelay;
	float g_flCarrierHealthMultiplier;
	float g_flCarrierVoiceChance;
	float g_flCarrierVoiceInterval;
	float g_flDamageBoostPassive;
	float g_flDamageMultiplier;
	float g_flDamageResistancePassive;
	float g_flDeathModelDelay;
	float g_flDopamineRadiusPassive;
	float g_flFireRatePassive;
	float g_flGrenadeLauncherPassive;
	float g_flHealPercentPassive;
	float g_flHealthcareRadiusPassive;
	float g_flHealthMultiplier;
	float g_flHeartbeatPassive;
	float g_flHollowpointAmmoPassive;
	float g_flJumpHeightPassive;
	float g_flLadyKillerPassive;
	float g_flLuckyBulletPassive;
	float g_flMotivationRadiusPassive;
	float g_flOverdoseRadiusPassive;
	float g_flPipeBombDurationPassive;
	float g_flPunchResistancePassive;
	float g_flRapidPistolPassive;
	float g_flRefillPercentPassive;
	float g_flReloadRatePassive;
	float g_flShockwaveRadiusPassive;
	float g_flShoveDamagePassive;
	float g_flShoveRatePassive;
	float g_flSledgehammerRoundsPassive;
	float g_flSpeedBoostPassive;
	float g_flSupplierPassive;
	float g_flSwingRatePassive;

	Handle g_hCharacterTimer;

	int g_iAmmoBoostPassive;
	int g_iAmmoRefillPassive;
	int g_iAmmoRegenPassive;
	int g_iBlazeHealthPassive;
	int g_iBloodDonorPassive;
	int g_iBunnyHopPassive;
	int g_iBurstDoorsPassive;
	int g_iCarrierBody;
	int g_iCarrierBots;
	int g_iCarrierCleanse;
	int g_iCarrierEnabled;
	int g_iCarrierFilter;
	int g_iCarrierInfection;
	int g_iCarrierMaxType;
	int g_iCarrierMinType;
	int g_iCarrierMix;
	int g_iCarrierMode;
	int g_iCarrierTeleport;
	int g_iCarrierVoice;
	int g_iCharacter;
	int g_iCharacterType[2];
	int g_iCleanKillsPassive;
	int g_iClusterBombsPassive;
	int g_iDeathModel;
	int g_iEternalFlamesPassive;
	int g_iFastRecoveryPassive;
	int g_iFirstSpecial;
	int g_iFirstType;
	int g_iFriendlyFirePassive;
	int g_iGhostBulletsPassive;
	int g_iHealthRegenPassive;
	int g_iInfiniteAmmoPassive;
	int g_iKillerSpecial;
	int g_iKillerType;
	int g_iLadderActionsPassive;
	int g_iLaserSightPassive;
	int g_iLastSpecial;
	int g_iLastType;
	int g_iLeastDamage;
	int g_iLeastSpecial;
	int g_iLeastType;
	int g_iLifeLeechPassive;
	int g_iMedicalCutsPassive;
	int g_iMeleeRangePassive;
	int g_iMidairDashesPassive;
	int g_iMostDamage;
	int g_iMostSpecial;
	int g_iMostType;
	int g_iNotify;
	int g_iOverhealthPassive;
	int g_iPassiveBots;
	int g_iPassiveEnabled;
	int g_iPassiveNotify;
	int g_iPassiveTypes;
	int g_iRecoilDampenerPassive;
	int g_iRegenBurstsPassive;
	int g_iRespawnLoadoutPassive;
	int g_iReviveHealthPassive;
	int g_iRiotGearPassive;
	int g_iSafetyBubblePassive;
	int g_iShovePenaltyPassive;
	int g_iSpecialAmmoPassive;
	int g_iStickyGrenadesPassive;
	int g_iSyringeDartsPassive;
	int g_iThornsPassive;
	int g_iTotalPassives;
}

esShooter g_esShooter[MAXPLAYERS + 1];

enum struct esTank
{
	bool g_bDuplicateType[2];
	bool g_bRecordedType[2];
	bool g_bTypeCycled;
	bool g_bTypeCycled2;

	char g_sArmorCharacters[4];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sComboSet[320];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sFlameColor[64];
	char g_sFlashlightColor[64];
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sOzTankColor[64];
	char g_sPropTankColor[64];
	char g_sRockColor[64];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sShieldCharacters[4];
	char g_sSkinColor[64];
	char g_sTankClass[65];
	char g_sTankName[33];
	char g_sTireColor[64];

	float g_flActionDurationReward[4];
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBodyChance[7];
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flCloseAreasOnly;
	float g_flComboChance[10];
	float g_flComboDamage[10];
	float g_flComboDeathChance[10];
	float g_flComboDeathRange[10];
	float g_flComboDelay[10];
	float g_flComboDuration[10];
	float g_flComboInterval[10];
	float g_flComboMaxRadius[10];
	float g_flComboMinRadius[10];
	float g_flComboRange[10];
	float g_flComboRangeChance[10];
	float g_flComboRockChance[10];
	float g_flComboSpeed[10];
	float g_flComboTypeChance[7];
	float g_flDamageBoostReward[4];
	float g_flDamageResistanceReward[4];
	float g_flDopamineRadiusReward[4];
	float g_flFireRateReward[4];
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmoReward[4];
	float g_flIncapDamageMultiplier;
	float g_flJumpHeightReward[4];
	float g_flLadyKillerReward[4];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadiusReward[4];
	float g_flOpenAreasOnly;
	float g_flOverdoseRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flPipeBombDurationReward[4];
	float g_flPropsChance[9];
	float g_flPunchForce;
	float g_flPunchResistanceReward[4];
	float g_flPunchThrow;
	float g_flRandomDuration;
	float g_flRandomInterval;
	float g_flRapidPistolReward[4];
	float g_flRefillPercentReward[4];
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRockChance[4];
	float g_flRockDamage;
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamageReward[4];
	float g_flShoveRateReward[4];
	float g_flSledgehammerRoundsReward[4];
	float g_flSpeedBoostReward[4];
	float g_flSupplierReward[4];
	float g_flSwingRateReward[4];
	float g_flTankChance;
	float g_flThrowForce;
	float g_flThrowInterval;
	float g_flTransformDelay;
	float g_flTransformDuration;

	int g_iAbilityCount;
	int g_iAccessFlags;
	int g_iAmmoBoostReward[4];
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAutoAggravate;
	int g_iAutoHop;
	int g_iBaseHealth;
	int g_iBlazeHealthReward[4];
	int g_iBloodDonorReward[4];
	int g_iBodyEffects;
	int g_iBossBaseType;
	int g_iBossEffects;
	int g_iBossHealth[4];
	int g_iBossLimit;
	int g_iBossStages;
	int g_iBossType[4];
	int g_iBulletImmunity;
	int g_iBunnyHopReward[4];
	int g_iBurstDoorsReward[4];
	int g_iCheckAbilities;
	int g_iCleanKillsReward[4];
	int g_iClusterBombsReward[4];
	int g_iComboCooldown[10];
	int g_iComboRangeCooldown[10];
	int g_iComboRockCooldown[10];
	int g_iCrownColor[4];
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth;
	int g_iFastRecoveryReward[4];
	int g_iFinaleTank;
	int g_iFireImmunity;
	int g_iFlameColor[4];
	int g_iFlashlightColor[4];
	int g_iFootstepShake;
	int g_iFriendlyFireReward[4];
	int g_iGameType;
	int g_iGhostBulletsReward[4];
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iGroundPound;
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHumanMultiplierMode;
	int g_iHumanSupport;
	int g_iImmunityFlags;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iKillMessage;
	int g_iLadderActionsReward[4];
	int g_iLaserSightReward[4];
	int g_iLifeLeechReward[4];
	int g_iLightColor[4];
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeRangeReward[4];
	int g_iMenuEnabled;
	int g_iMidairDashesLimit;
	int g_iMidairDashesReward[4];
	int g_iMinimumHumans;
	int g_iMultiplyHealth;
	int g_iOverhealthReward[4];
	int g_iOzTankColor[4];
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPrefsNotify[4];
	int g_iPrioritizeThrows;
	int g_iPropsAttached;
	int g_iPropTankColor[4];
	int g_iRealType[2];
	int g_iRandomTank;
	int g_iRecoilDampenerReward[4];
	int g_iRecordedType[2];
	int g_iRegenBurstsReward[4];
	int g_iRequiresHumans;
	int g_iRespawnLoadoutReward[4];
	int g_iReviveHealthReward[4];
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardVisual[4];
	int g_iRiotGearReward[4];
	int g_iRockColor[4];
	int g_iRockEffects;
	int g_iRockModel;
	int g_iRockSound;
	int g_iSafetyBubbleReward[4];
	int g_iShareRewards[4];
	int g_iShovePenaltyReward[4];
	int g_iSkinColor[4];
	int g_iSkipIncap;
	int g_iSkipTaunt;
	int g_iSpawnEnabled;
	int g_iSpawnProtection;
	int g_iSpawnType;
	int g_iSpecialAmmoReward[4];
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStickyGrenadesReward[4];
	int g_iSweepFist;
	int g_iSyringeDartsReward[4];
	int g_iTankEnabled;
	int g_iTankModel;
	int g_iTankNote;
	int g_iTeammateLimit;
	int g_iThornsReward[4];
	int g_iThrowRock;
	int g_iTireColor[4];
	int g_iTransformType[10];
	int g_iTypeLimit;
	int g_iUsefulRewards[4];
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
}

esTank g_esTank[MT_MAXTYPES + 1];

enum struct esSpecial
{
	bool g_bTypeCycled[7];
	bool g_bTypeCycled2[7];

	char g_sArmorCharacters[4];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sBoomerClass[65];
	char g_sBoomerName[33];
	char g_sChargerClass[65];
	char g_sChargerName[33];
	char g_sComboSet[320];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sHunterClass[65];
	char g_sHunterName[33];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sJockeyClass[65];
	char g_sJockeyName[33];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sRockColor[64];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sShieldCharacters[4];
	char g_sSkinColor[64];
	char g_sSmokerClass[65];
	char g_sSmokerName[33];
	char g_sSpitterClass[65];
	char g_sSpitterName[33];

	float g_flActionDurationReward[4];
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBodyChance[7];
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flCloseAreasOnly;
	float g_flComboChance[10];
	float g_flComboDamage[10];
	float g_flComboDeathChance[10];
	float g_flComboDeathRange[10];
	float g_flComboDelay[10];
	float g_flComboDuration[10];
	float g_flComboInterval[10];
	float g_flComboMaxRadius[10];
	float g_flComboMinRadius[10];
	float g_flComboRange[10];
	float g_flComboRangeChance[10];
	float g_flComboRockChance[10];
	float g_flComboSpeed[10];
	float g_flComboTypeChance[7];
	float g_flDamageBoostReward[4];
	float g_flDamageResistanceReward[4];
	float g_flDopamineRadiusReward[4];
	float g_flFireRateReward[4];
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmoReward[4];
	float g_flIncapDamageMultiplier;
	float g_flJumpHeightReward[4];
	float g_flLadyKillerReward[4];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadiusReward[4];
	float g_flOpenAreasOnly;
	float g_flOverdoseRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flPinDamage;
	float g_flPipeBombDurationReward[4];
	float g_flPunchResistanceReward[4];
	float g_flRandomDuration;
	float g_flRandomInterval;
	float g_flRapidPistolReward[4];
	float g_flRefillPercentReward[4];
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRockChance[4];
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamageReward[4];
	float g_flShoveRateReward[4];
	float g_flSledgehammerRoundsReward[4];
	float g_flSpecialChance;
	float g_flSpecialInterval;
	float g_flSpeedBoostReward[4];
	float g_flSupplierReward[4];
	float g_flSwingRateReward[4];
	float g_flTransformDelay;
	float g_flTransformDuration;

	int g_iAmmoBoostReward[4];
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAutoHop;
	int g_iBaseHealth[7];
	int g_iBlazeHealthReward[4];
	int g_iBloodDonorReward[4];
	int g_iBodyEffects;
	int g_iBossBaseType;
	int g_iBossEffects;
	int g_iBossHealth[4];
	int g_iBossLimit;
	int g_iBossStages;
	int g_iBossType[4];
	int g_iBulletImmunity;
	int g_iBunnyHopReward[4];
	int g_iBurstDoorsReward[4];
	int g_iCleanKillsReward[4];
	int g_iClusterBombsReward[4];
	int g_iComboCooldown[10];
	int g_iComboRangeCooldown[10];
	int g_iComboRockCooldown[10];
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth[7];
	int g_iFastRecoveryReward[4];
	int g_iFinaleSpecial;
	int g_iFireImmunity;
	int g_iFriendlyFireReward[4];
	int g_iGameType;
	int g_iGhostBulletsReward[4];
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHumanMultiplierMode;
	int g_iHumanSupport;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iKillMessage;
	int g_iLadderActionsReward[4];
	int g_iLaserSightReward[4];
	int g_iLifeLeechReward[4];
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeRangeReward[4];
	int g_iMenuEnabled;
	int g_iMidairDashesReward[4];
	int g_iMinimumHumans;
	int g_iMultiplyHealth;
	int g_iOverhealthReward[4];
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPrefsNotify[4];
	int g_iRandomSpecial;
	int g_iRecoilDampenerReward[4];
	int g_iRegenBurstsReward[4];
	int g_iRequiresHumans;
	int g_iRespawnLoadoutReward[4];
	int g_iReviveHealthReward[4];
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardVisual[4];
	int g_iRiotGearReward[4];
	int g_iRockColor[4];
	int g_iRockEffects;
	int g_iRockModel;
	int g_iSafetyBubbleReward[4];
	int g_iShareRewards[4];
	int g_iShovePenaltyReward[4];
	int g_iSkinColor[4];
	int g_iSpawnEnabled;
	int g_iSpawnProtection;
	int g_iSpawnType;
	int g_iSpecialAmmoReward[4];
	int g_iSpecialModel;
	int g_iSpecialNote;
	int g_iSpecialTypes;
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStickyGrenadesReward[4];
	int g_iSyringeDartsReward[4];
	int g_iThornsReward[4];
	int g_iThrowRock;
	int g_iTransformType[10];
	int g_iTypeLimit;
	int g_iUsefulRewards[4];
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
}

esSpecial g_esSpecial[MT_MAXTYPES + 1];

enum struct esHorde
{
	char g_sCommonName[33];
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sSkinColor[64];
	char g_sWitchName[33];

	float g_flBodyChance[7];
	float g_flCommonBioChance;
	float g_flCommonChance;
	float g_flCommonDamagePoints;
	float g_flCommonDeathPoints;
	float g_flCommonGoal;
	float g_flWitchChance;
	float g_flWitchMutateChance;
	float g_flWitchRange;

	int g_iBodyEffects;
	int g_iCommonVariant;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iMobVariants;
	int g_iSkinColor[4];
	int g_iWitchFilter;
	int g_iWitchMode;
	int g_iWitchTypes;
}

esHorde g_esHorde[MT_MAXTYPES + 1];

enum struct esSurvivor
{
	char g_sCarrierAttackVoicelines[1280];
	char g_sCarrierBaitVoicelines[1280];
	char g_sItemPassive[320];

	float g_flActionDurationPassive;
	float g_flAdrenalineTimePassive;
	float g_flAttackBoostPassive;
	float g_flCarrierChance;
	float g_flCarrierDamageMultiplier;
	float g_flCarrierDelay;
	float g_flCarrierHealthMultiplier;
	float g_flCarrierVoiceChance;
	float g_flCarrierVoiceInterval;
	float g_flDamageBoostPassive;
	float g_flDamageResistancePassive;
	float g_flDopamineRadiusPassive;
	float g_flFireRatePassive;
	float g_flGrenadeLauncherPassive;
	float g_flHealPercentPassive;
	float g_flHealthcareRadiusPassive;
	float g_flHeartbeatPassive;
	float g_flHollowpointAmmoPassive;
	float g_flJumpHeightPassive;
	float g_flLadyKillerPassive;
	float g_flLuckyBulletPassive;
	float g_flMotivationRadiusPassive;
	float g_flOverdoseRadiusPassive;
	float g_flPipeBombDurationPassive;
	float g_flPunchResistancePassive;
	float g_flRapidPistolPassive;
	float g_flRefillPercentPassive;
	float g_flReloadRatePassive;
	float g_flShockwaveRadiusPassive;
	float g_flShoveDamagePassive;
	float g_flShoveRatePassive;
	float g_flSledgehammerRoundsPassive;
	float g_flSpeedBoostPassive;
	float g_flSupplierPassive;
	float g_flSwingRatePassive;

	int g_iAmmoBoostPassive;
	int g_iAmmoRefillPassive;
	int g_iAmmoRegenPassive;
	int g_iBlazeHealthPassive;
	int g_iBloodDonorPassive;
	int g_iBunnyHopPassive;
	int g_iBurstDoorsPassive;
	int g_iCarrierBody;
	int g_iCarrierBots;
	int g_iCarrierCleanse;
	int g_iCarrierEnabled;
	int g_iCarrierFilter;
	int g_iCarrierInfection;
	int g_iCarrierMaxType;
	int g_iCarrierMinType;
	int g_iCarrierMix;
	int g_iCarrierMode;
	int g_iCarrierTeleport;
	int g_iCarrierVoice;
	int g_iCleanKillsPassive;
	int g_iClusterBombsPassive;
	int g_iEternalFlamesPassive;
	int g_iFastRecoveryPassive;
	int g_iFriendlyFirePassive;
	int g_iGhostBulletsPassive;
	int g_iHealthRegenPassive;
	int g_iInfiniteAmmoPassive;
	int g_iLadderActionsPassive;
	int g_iLaserSightPassive;
	int g_iLifeLeechPassive;
	int g_iMedicalCutsPassive;
	int g_iMeleeRangePassive;
	int g_iMidairDashesPassive;
	int g_iOverhealthPassive;
	int g_iPassiveBots;
	int g_iPassiveEnabled;
	int g_iPassiveNotify;
	int g_iRecoilDampenerPassive;
	int g_iRegenBurstsPassive;
	int g_iRespawnLoadoutPassive;
	int g_iReviveHealthPassive;
	int g_iRiotGearPassive;
	int g_iSafetyBubblePassive;
	int g_iShovePenaltyPassive;
	int g_iSpecialAmmoPassive;
	int g_iStickyGrenadesPassive;
	int g_iSyringeDartsPassive;
	int g_iThornsPassive;
}

esSurvivor g_esSurvivor[MT_MAXSURVIVORS + 1];
#if defined _WeaponHandling_included
enum struct esWeapon
{
	char g_sItemPassive[320];
	char g_sWeaponName[320];

	float g_flActionDurationPassive;
	float g_flAdrenalineTimePassive;
	float g_flAttackBoostPassive;
	float g_flDamageBoostPassive;
	float g_flDamageResistancePassive;
	float g_flDopamineRadiusPassive;
	float g_flFireRatePassive;
	float g_flGrenadeLauncherPassive;
	float g_flHealPercentPassive;
	float g_flHealthcareRadiusPassive;
	float g_flHeartbeatPassive;
	float g_flHollowpointAmmoPassive;
	float g_flJumpHeightPassive;
	float g_flLadyKillerPassive;
	float g_flLuckyBulletPassive;
	float g_flMotivationRadiusPassive;
	float g_flOverdoseRadiusPassive;
	float g_flPipeBombDurationPassive;
	float g_flPunchResistancePassive;
	float g_flRapidPistolPassive;
	float g_flRefillPercentPassive;
	float g_flReloadRatePassive;
	float g_flShockwaveRadiusPassive;
	float g_flShoveDamagePassive;
	float g_flShoveRatePassive;
	float g_flSledgehammerRoundsPassive;
	float g_flSpeedBoostPassive;
	float g_flSupplierPassive;
	float g_flSwingRatePassive;

	int g_iAmmoBoostPassive;
	int g_iAmmoRefillPassive;
	int g_iAmmoRegenPassive;
	int g_iBlazeHealthPassive;
	int g_iBloodDonorPassive;
	int g_iBunnyHopPassive;
	int g_iBurstDoorsPassive;
	int g_iCleanKillsPassive;
	int g_iClusterBombsPassive;
	int g_iEternalFlamesPassive;
	int g_iFastRecoveryPassive;
	int g_iFriendlyFirePassive;
	int g_iGhostBulletsPassive;
	int g_iHealthRegenPassive;
	int g_iInfiniteAmmoPassive;
	int g_iLadderActionsPassive;
	int g_iLaserSightPassive;
	int g_iLifeLeechPassive;
	int g_iMedicalCutsPassive;
	int g_iMeleeRangePassive;
	int g_iMidairDashesPassive;
	int g_iOverhealthPassive;
	int g_iPassiveBots;
	int g_iPassiveEnabled;
	int g_iPassiveNotify;
	int g_iPassiveTypes;
	int g_iRecoilDampenerPassive;
	int g_iRegenBurstsPassive;
	int g_iRespawnLoadoutPassive;
	int g_iReviveHealthPassive;
	int g_iRiotGearPassive;
	int g_iSafetyBubblePassive;
	int g_iShovePenaltyPassive;
	int g_iSpecialAmmoPassive;
	int g_iStackPassives;
	int g_iStickyGrenadesPassive;
	int g_iSyringeDartsPassive;
	int g_iThornsPassive;
	int g_iWeaponCharacter;
	int g_iWeaponIndex;
}

esWeapon g_esWeapon[MT_MAXTYPES + 1];
#endif
enum struct esTankCache
{
	char g_sArmorCharacters[4];
	char g_sBodyColorVisual[64];
	char g_sBodyColorVisual2[64];
	char g_sBodyColorVisual3[64];
	char g_sBodyColorVisual4[64];
	char g_sBoomerName[33];
	char g_sChargerName[33];
	char g_sComboSet[320];
	char g_sFallVoicelineReward[64];
	char g_sFallVoicelineReward2[64];
	char g_sFallVoicelineReward3[64];
	char g_sFallVoicelineReward4[64];
	char g_sFlameColor[64];
	char g_sFlashlightColor[64];
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sHunterName[33];
	char g_sItemReward[320];
	char g_sItemReward2[320];
	char g_sItemReward3[320];
	char g_sItemReward4[320];
	char g_sJockeyName[33];
	char g_sLightColorVisual[64];
	char g_sLightColorVisual2[64];
	char g_sLightColorVisual3[64];
	char g_sLightColorVisual4[64];
	char g_sLoopingVoicelineVisual[64];
	char g_sLoopingVoicelineVisual2[64];
	char g_sLoopingVoicelineVisual3[64];
	char g_sLoopingVoicelineVisual4[64];
	char g_sOutlineColorVisual[64];
	char g_sOutlineColorVisual2[64];
	char g_sOutlineColorVisual3[64];
	char g_sOutlineColorVisual4[64];
	char g_sOzTankColor[64];
	char g_sPropTankColor[64];
	char g_sRockColor[64];
	char g_sScreenColorVisual[64];
	char g_sScreenColorVisual2[64];
	char g_sScreenColorVisual3[64];
	char g_sScreenColorVisual4[64];
	char g_sShieldCharacters[4];
	char g_sSkinColor[64];
	char g_sSmokerName[33];
	char g_sSpitterName[33];
	char g_sTankName[33];
	char g_sTireColor[64];

	float g_flActionDurationReward[4];
	float g_flAdrenalineTimeReward[4];
	float g_flArmorDuration;
	float g_flArmorPercentage;
	float g_flArmorResistance[2];
	float g_flAttackBoostReward[4];
	float g_flAttackInterval;
	float g_flBodyChance[7];
	float g_flBurnDuration;
	float g_flBurntSkin;
	float g_flClawDamage;
	float g_flComboChance[10];
	float g_flComboDamage[10];
	float g_flComboDeathChance[10];
	float g_flComboDeathRange[10];
	float g_flComboDelay[10];
	float g_flComboDuration[10];
	float g_flComboInterval[10];
	float g_flComboMaxRadius[10];
	float g_flComboMinRadius[10];
	float g_flComboRange[10];
	float g_flComboRangeChance[10];
	float g_flComboRockChance[10];
	float g_flComboSpeed[10];
	float g_flComboTypeChance[7];
	float g_flDamageBoostReward[4];
	float g_flDamageResistanceReward[4];
	float g_flDopamineRadiusReward[4];
	float g_flFireRateReward[4];
	float g_flGrenadeLauncherReward[4];
	float g_flHealPercentMultiplier;
	float g_flHealPercentReward[4];
	float g_flHealthcareRadiusReward[4];
	float g_flHeartbeatReward[4];
	float g_flHittableDamage;
	float g_flHollowpointAmmoReward[4];
	float g_flIncapDamageMultiplier;
	float g_flJumpHeightReward[4];
	float g_flLadyKillerReward[4];
	float g_flLoopingVoicelineInterval[4];
	float g_flLuckyBulletReward[4];
	float g_flMeleeHitValue;
	float g_flMotivationRadiusReward[4];
	float g_flOverdoseRadiusReward[4];
	float g_flPassiveDelay;
	float g_flPassiveInterval;
	float g_flPinDamage;
	float g_flPipeBombDurationReward[4];
	float g_flPropsChance[9];
	float g_flPunchForce;
	float g_flPunchResistanceReward[4];
	float g_flPunchThrow;
	float g_flRandomDuration;
	float g_flRandomInterval;
	float g_flRapidPistolReward[4];
	float g_flRefillPercentReward[4];
	float g_flReloadRateReward[4];
	float g_flRewardChance[4];
	float g_flRewardDuration[4];
	float g_flRewardPercentage[4];
	float g_flRockChance[4];
	float g_flRockDamage;
	float g_flRunSpeed;
	float g_flShieldDuration;
	float g_flShieldPercentage;
	float g_flShieldRate;
	float g_flShieldResistance;
	float g_flShockwaveRadiusReward[4];
	float g_flShoveDamageReward[4];
	float g_flShoveRateReward[4];
	float g_flSledgehammerRoundsReward[4];
	float g_flSpeedBoostReward[4];
	float g_flSpecialInterval;
	float g_flSupplierReward[4];
	float g_flSwingRateReward[4];
	float g_flThrowForce;
	float g_flThrowInterval;
	float g_flTransformDelay;
	float g_flTransformDuration;

	int g_iAmmoBoostReward[4];
	int g_iAmmoRefillReward[4];
	int g_iAmmoRegenReward[4];
	int g_iAnnounceArrival;
	int g_iAnnounceDeath;
	int g_iAnnounceKill;
	int g_iArrivalMessage;
	int g_iArrivalSound;
	int g_iAutoAggravate;
	int g_iAutoHop;
	int g_iBaseHealth;
	int g_iBlazeHealthReward[4];
	int g_iBloodDonorReward[4];
	int g_iBodyEffects;
	int g_iBossEffects;
	int g_iBossHealth[4];
	int g_iBossStages;
	int g_iBossType[4];
	int g_iBulletImmunity;
	int g_iBunnyHopReward[4];
	int g_iBurstDoorsReward[4];
	int g_iCheckAbilities;
	int g_iCleanKillsReward[4];
	int g_iClusterBombsReward[4];
	int g_iComboCooldown[10];
	int g_iComboRangeCooldown[10];
	int g_iComboRockCooldown[10];
	int g_iCrownColor[4];
	int g_iDeathDetails;
	int g_iDeathMessage;
	int g_iDeathRevert;
	int g_iDeathSound;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iEternalFlamesReward[4];
	int g_iExplosiveImmunity;
	int g_iExtraHealth;
	int g_iFastRecoveryReward[4];
	int g_iFireImmunity;
	int g_iFlameColor[4];
	int g_iFlashlightColor[4];
	int g_iFootstepShake;
	int g_iFriendlyFireReward[4];
	int g_iGhostBulletsReward[4];
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iGroundPound;
	int g_iHealthRegenReward[4];
	int g_iHittableImmunity;
	int g_iHumanMultiplierMode;
	int g_iInfiniteAmmoReward[4];
	int g_iIntangibleBody;
	int g_iKillMessage;
	int g_iLadderActionsReward[4];
	int g_iLaserSightReward[4];
	int g_iLifeLeechReward[4];
	int g_iLightColor[4];
	int g_iMedicalCutsReward[4];
	int g_iMeleeHitMode;
	int g_iMeleeImmunity;
	int g_iMeleeRangeReward[4];
	int g_iMidairDashesLimit;
	int g_iMidairDashesReward[4];
	int g_iMinimumHumans;
	int g_iMultiplyHealth;
	int g_iOverhealthReward[4];
	int g_iOzTankColor[4];
	int g_iParticleEffectVisual[4];
	int g_iPassiveHealth;
	int g_iPrefsNotify[4];
	int g_iPrioritizeThrows;
	int g_iPropsAttached;
	int g_iPropTankColor[4];
	int g_iRandomSpecial;
	int g_iRandomTank;
	int g_iRecoilDampenerReward[4];
	int g_iRegenBurstsReward[4];
	int g_iRespawnLoadoutReward[4];
	int g_iReviveHealthReward[4];
	int g_iRewardBots[4];
	int g_iRewardEffect[4];
	int g_iRewardEnabled[4];
	int g_iRewardNotify[4];
	int g_iRewardVisual[4];
	int g_iRiotGearReward[4];
	int g_iRockColor[4];
	int g_iRockEffects;
	int g_iRockModel;
	int g_iRockSound;
	int g_iSafetyBubbleReward[4];
	int g_iShareRewards[4];
	int g_iShovePenaltyReward[4];
	int g_iSkinColor[4];
	int g_iSkipIncap;
	int g_iSkipTaunt;
	int g_iSpawnEnabled;
	int g_iSpawnProtection;
	int g_iSpawnType;
	int g_iSpecialAmmoReward[4];
	int g_iSpecialModel;
	int g_iSpecialNote;
	int g_iSpecialTypes;
	int g_iStackLimits[8];
	int g_iStackRewards[4];
	int g_iStickyGrenadesReward[4];
	int g_iSyringeDartsReward[4];
	int g_iSweepFist;
	int g_iTankEnabled;
	int g_iTankModel;
	int g_iTankNote;
	int g_iTeammateLimit;
	int g_iThrowRock;
	int g_iThornsReward[4];
	int g_iTireColor[4];
	int g_iTransformType[10];
	int g_iUsefulRewards[4];
	int g_iVocalizeArrival;
	int g_iVocalizeDeath;
	int g_iVoicePitchVisual[4];
	int g_iVomitImmunity;
}

esTankCache g_esTankCache[MAXPLAYERS + 1];

enum struct esInfectedCache
{
	char g_sGlowColor[64];
	char g_sHealthCharacters[4];
	char g_sSkinColor[64];

	float g_flBodyChance[7];
	float g_flCommonDamagePoints;
	float g_flCommonDeathPoints;
	float g_flWitchMutateChance;
	float g_flWitchRange;

	int g_iBodyEffects;
	int g_iDisplayHealth;
	int g_iDisplayHealthType;
	int g_iGlowColor[3];
	int g_iGlowEnabled;
	int g_iGlowFlashing;
	int g_iGlowMaxRange;
	int g_iGlowMinRange;
	int g_iGlowType;
	int g_iMobVariants;
	int g_iSkinColor[4];
	int g_iWitchFilter;
	int g_iWitchMode;
	int g_iWitchTypes;
}

esInfectedCache g_esInfectedCache[2048];

enum struct esSurvivorCache
{
	char g_sCarrierAttackVoicelines[1280];
	char g_sCarrierBaitVoicelines[1280];
	char g_sItemPassive[320];

	float g_flActionDurationPassive;
	float g_flAdrenalineTimePassive;
	float g_flAttackBoostPassive;
	float g_flCarrierChance;
	float g_flCarrierDamageMultiplier;
	float g_flCarrierDelay;
	float g_flCarrierHealthMultiplier;
	float g_flCarrierVoiceChance;
	float g_flCarrierVoiceInterval;
	float g_flDamageBoostPassive;
	float g_flDamageResistancePassive;
	float g_flDopamineRadiusPassive;
	float g_flFireRatePassive;
	float g_flGrenadeLauncherPassive;
	float g_flHealPercentPassive;
	float g_flHealthcareRadiusPassive;
	float g_flHeartbeatPassive;
	float g_flHollowpointAmmoPassive;
	float g_flJumpHeightPassive;
	float g_flLadyKillerPassive;
	float g_flLuckyBulletPassive;
	float g_flMotivationRadiusPassive;
	float g_flOverdoseRadiusPassive;
	float g_flPipeBombDurationPassive;
	float g_flPunchResistancePassive;
	float g_flRapidPistolPassive;
	float g_flRefillPercentPassive;
	float g_flReloadRatePassive;
	float g_flShockwaveRadiusPassive;
	float g_flShoveDamagePassive;
	float g_flShoveRatePassive;
	float g_flSledgehammerRoundsPassive;
	float g_flSpeedBoostPassive;
	float g_flSupplierPassive;
	float g_flSwingRatePassive;

	int g_iAmmoBoostPassive;
	int g_iAmmoRefillPassive;
	int g_iAmmoRegenPassive;
	int g_iBlazeHealthPassive;
	int g_iBloodDonorPassive;
	int g_iBunnyHopPassive;
	int g_iBurstDoorsPassive;
	int g_iCarrierBody;
	int g_iCarrierBots;
	int g_iCarrierCleanse;
	int g_iCarrierEnabled;
	int g_iCarrierFilter;
	int g_iCarrierInfection;
	int g_iCarrierMaxType;
	int g_iCarrierMinType;
	int g_iCarrierMix;
	int g_iCarrierMode;
	int g_iCarrierTeleport;
	int g_iCarrierVoice;
	int g_iCleanKillsPassive;
	int g_iClusterBombsPassive;
	int g_iEternalFlamesPassive;
	int g_iFastRecoveryPassive;
	int g_iFriendlyFirePassive;
	int g_iGhostBulletsPassive;
	int g_iHealthRegenPassive;
	int g_iInfiniteAmmoPassive;
	int g_iLadderActionsPassive;
	int g_iLaserSightPassive;
	int g_iLifeLeechPassive;
	int g_iMedicalCutsPassive;
	int g_iMeleeRangePassive;
	int g_iMidairDashesPassive;
	int g_iOverhealthPassive;
	int g_iPassiveBots;
	int g_iPassiveEnabled;
	int g_iPassiveNotify;
	int g_iRecoilDampenerPassive;
	int g_iRegenBurstsPassive;
	int g_iRespawnLoadoutPassive;
	int g_iReviveHealthPassive;
	int g_iRiotGearPassive;
	int g_iSafetyBubblePassive;
	int g_iShovePenaltyPassive;
	int g_iSpecialAmmoPassive;
	int g_iStickyGrenadesPassive;
	int g_iSyringeDartsPassive;
	int g_iThornsPassive;
}

esSurvivorCache g_esSurvivorCache[MAXPLAYERS + 1];

enum struct esDetour
{
	bool g_bBypassNeeded;
	bool g_bInstalled;
	bool g_bLog;

	char g_sCvars[320];
	char g_sName[128];

	int g_iPostHook;
	int g_iPreHook;
	int g_iType;
}

esDetour g_esDetour[MT_DETOUR_LIMIT];

enum struct esPatch
{
	Address g_adPatch;

	bool g_bInstalled;
	bool g_bLog;
	bool g_bUpdateMemAccess;

	char g_sBypass[192];
	char g_sCvars[320];
	char g_sName[128];
	char g_sOffset[128];
	char g_sPatch[192];
	char g_sSignature[128];
	char g_sVerify[192];

	int g_iLength;
	int g_iOffset;
	int g_iOriginalBytes[MT_PATCH_MAXLEN];
	int g_iPatchBytes[MT_PATCH_MAXLEN];
	int g_iType;
}

esPatch g_esPatch[MT_PATCH_LIMIT];

enum struct esSignature
{
	Address g_adString;

	bool g_bLog;

	char g_sAfter[192];
	char g_sBefore[192];
	char g_sDynamicSig[1024];
	char g_sLibrary[32];
	char g_sName[128];
	char g_sOffset[128];
	char g_sSignature[1024];
	char g_sStart[192];

	SDKLibrary g_sdkLibrary;
}

esSignature g_esSignature[MT_SIGNATURE_LIMIT];

char g_sMobNames[][] =
{
	"Witch",
	"Common"
}, g_sSpecialNames[][] =
{
	"Special",
	"Smoker",
	"Boomer",
	"Hunter",
	"Spitter",
	"Jockey",
	"Charger"
}, g_sSurvivorNames[][] =
{
	"Nick",
	"Rochelle",
	"Coach",
	"Ellis",
	"Bill",
	"Zoey",
	"Francis",
	"Louis"
}, g_sUncommonModels[][] =
{
	"models/infected/common_male_ceda.mdl",
	"models/infected/common_male_clown.mdl",
	"models/infected/common_male_fallen_survivor.mdl",
	"models/infected/common_male_jimmy.mdl",
	"models/infected/common_male_mud.mdl",
	"models/infected/common_male_riot.mdl",
	"models/infected/common_male_roadcrew.mdl"
};

int g_iBossBeamSprite = -1, g_iBossHaloSprite = -1;

public void OnLibraryAdded(const char[] name)
{
	if (StrEqual(name, "LaggedMovement"))
	{
		g_esGeneral.g_bLaggedMovementInstalled = true;
	}
#if defined _mtclone_included
	if (StrEqual(name, "mt_clone"))
	{
		g_esGeneral.g_bCloneInstalled = true;
	}
#endif
#if defined _updater_included
	if (StrEqual(name, "updater"))
	{
		Updater_AddPlugin(MT_UPDATE_URL);
	}
#endif
}

public void OnLibraryRemoved(const char[] name)
{
	if (StrEqual(name, "LaggedMovement"))
	{
		g_esGeneral.g_bLaggedMovementInstalled = false;
	}
#if defined _mtclone_included
	if (StrEqual(name, "mt_clone"))
	{
		g_esGeneral.g_bCloneInstalled = false;
	}
#endif
}

public void OnAllPluginsLoaded()
{
	if (g_esGeneral.g_gdMutantTanks != null)
	{
		vRegisterDetours();
		vSetupDetours();

		vRegisterPatches();
		vInstallPermanentPatches();
	}
}

public void OnPluginStart()
{
	g_esGeneral.g_smCvars = new StringMap();
	g_esGeneral.g_alElevators = new ArrayList();
	g_esMob.g_flBioMassMeter = 0.0;

	char sDate[32];
	FormatTime(sDate, sizeof sDate, "%Y-%m-%d", GetTime());
	BuildPath(Path_SM, g_esGeneral.g_sLogFile, sizeof esGeneral::g_sLogFile, "logs/mutant_tanks_%s.log", sDate);

	for (int iDeveloper = 1; iDeveloper <= MaxClients; iDeveloper++)
	{
		vDeveloperSettings(iDeveloper);
	}

	LoadTranslations("common.phrases");
	LoadTranslations("mutant_tanks.phrases");
	LoadTranslations("mutant_tanks_names.phrases");

	vMultiTargetFilters(true);
	vRegisterCommands();
	vRegisterConVars();
	vReadGameData();
#if defined _clientprefs_included
	char sName[12], sDescription[36];
	for (int iPos = 0; iPos < (sizeof esGeneral::g_ckMTAdmin); iPos++)
	{
		FormatEx(sName, sizeof sName, "MTAdmin%i", (iPos + 1));
		FormatEx(sDescription, sizeof sDescription, "Mutant Tanks Admin Preference #%i", (iPos + 1));
		g_esGeneral.g_ckMTAdmin[iPos] = new Cookie(sName, sDescription, CookieAccess_Private);
	}

	g_esGeneral.g_ckMTPrefs = new Cookie("MTPrefs", "Mutant Tanks Preferences", CookieAccess_Private);
#endif
	char sSMPath[PLATFORM_MAX_PATH];
	g_esGeneral.g_cvMTConfigFile.GetString(g_esGeneral.g_sConfigPath, sizeof esGeneral::g_sConfigPath);
	BuildPath(Path_SM, sSMPath, sizeof sSMPath, MT_CONFIG_FILEPATH);
	CreateDirectory(sSMPath, 511);
	FormatEx(g_esGeneral.g_sSavePath, sizeof esGeneral::g_sSavePath, "%s%s%s", sSMPath, g_esGeneral.g_sConfigPath, ((StrContains(g_esGeneral.g_sConfigPath, ".cfg") != -1) ? "" : ".cfg"));

	switch (MT_FileExists(MT_CONFIG_FILEPATH, g_esGeneral.g_sConfigPath, g_esGeneral.g_sSavePath, g_esGeneral.g_sSavePath, sizeof esGeneral::g_sSavePath))
	{
		case true: g_esGeneral.g_iFileTimeOld[0] = GetFileTime(g_esGeneral.g_sSavePath, FileTime_LastChange);
		case false: SetFailState("Unable to load the \"%s\" config file.", g_esGeneral.g_sSavePath);
	}

	g_esGeneral.g_alFilePaths = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
	g_esGeneral.g_bUpdateDoJumpMemAccess = true;
	g_esGeneral.g_bUpdateWeaponInfoMemAccess = true;
	g_esGeneral.g_iPlayerCount[0] = 0;
	g_esGeneral.g_umSayText = GetUserMessageId("SayText");
	g_esGeneral.g_umSayText2 = GetUserMessageId("SayText2");

	vHookGlobalEvents();
	vLateLoad();
}

public void OnMapStart()
{
	g_esGeneral.g_bFinalMap = (g_esGeneral.g_hSDKIsMissionFinalMap != null && SDKCall(g_esGeneral.g_hSDKIsMissionFinalMap)) || bIsFinalMap();
	g_esGeneral.g_bNormalMap = bIsFirstMap() || bIsNormalMap();
	g_esGeneral.g_bSameMission = bIsSameMission();
	g_iBossBeamSprite = PrecacheModel(SPRITE_LASERBEAM, true);
	g_iBossHaloSprite = PrecacheModel(SPRITE_GLOW, true);

	for (int iPos = 0; iPos < (sizeof g_sUncommonModels); iPos++)
	{
		PrecacheModel(g_sUncommonModels[iPos], true);
	}

	PrecacheModel(MODEL_CONCRETE_CHUNK, true);
	PrecacheModel(MODEL_GASCAN, true);
	PrecacheModel(MODEL_OXYGENTANK, true);
	PrecacheModel(MODEL_PROPANETANK, true);
	PrecacheModel(MODEL_SHIELD, true);
	PrecacheModel(MODEL_TIRES, true);
	PrecacheModel(MODEL_TREE_TRUNK, true);
	PrecacheModel(MODEL_TANK_MAIN, true);
	PrecacheModel(MODEL_TANK_DLC, true);
	PrecacheModel(MODEL_SMOKER_MAIN, true);
	PrecacheModel(MODEL_BOOMER_MAIN, true);
	PrecacheModel(MODEL_HUNTER_MAIN, true);
	PrecacheModel(MODEL_WITCH, true);
	PrecacheModel(SPRITE_EXPLODE, true);
	PrecacheModel(SPRITE_LASER, true);

	iPrecacheParticle(PARTICLE_ACHIEVED);
	iPrecacheParticle(PARTICLE_BLOOD);
	iPrecacheParticle(PARTICLE_ELECTRICITY);
	iPrecacheParticle(PARTICLE_FIRE);
	iPrecacheParticle(PARTICLE_FIREWORK);
	iPrecacheParticle(PARTICLE_ICE);
	iPrecacheParticle(PARTICLE_METEOR);
	iPrecacheParticle(PARTICLE_SMOKE);

	switch (g_bSecondGame)
	{
		case true:
		{
			PrecacheModel(MODEL_FIREWORKCRATE, true);
			PrecacheModel(MODEL_TANK_L4D1, true);
			PrecacheModel(MODEL_SMOKER_L4D1, true);
			PrecacheModel(MODEL_BOOMER_L4D1, true);
			PrecacheModel(MODEL_BOOMETTE, true);
			PrecacheModel(MODEL_HUNTER_L4D1, true);
			PrecacheModel(MODEL_WITCHBRIDE, true);

			PrecacheSound(SOUND_EXPLOSION2, true);
			PrecacheSound(SOUND_EXPLOSION3, true);
			PrecacheSound(SOUND_SPIT, true);

			iPrecacheParticle(PARTICLE_GORE);
			iPrecacheParticle(PARTICLE_SPIT);
			iPrecacheParticle(PARTICLE_SPIT2);
		}
		case false: PrecacheSound(SOUND_EXPLOSION, true);
	}

	PrecacheSound(SOUND_ACHIEVEMENT, true);
	PrecacheSound(SOUND_DAMAGE, true);
	PrecacheSound(SOUND_DAMAGE2, true);
	PrecacheSound(SOUND_DEATH, true);
	PrecacheSound(SOUND_ELECTRICITY, true);
	PrecacheSound(SOUND_EMPTY, true);
	PrecacheSound(SOUND_HEARTBEAT, true);
	PrecacheSound(SOUND_METAL, true);
	PrecacheSound(SOUND_NULL, true);
	PrecacheSound(SOUND_SPAWN, true);
	PrecacheSound(SOUND_THROWN, true);

	vResetPlugin();
	vToggleLogging(1);

	AddNormalSoundHook(BlockSoundHook);
}

public void OnClientPutInServer(int client)
{
	g_esPlayer[client].g_iUserID = GetClientUserId(client);
	g_esPlayer[client].g_iUserID2 = g_esPlayer[client].g_iUserID;

	SDKHook(client, SDKHook_OnTakeDamage, OnCombineTakeDamage);
	SDKHook(client, SDKHook_OnTakeDamage, OnFriendlyTakeDamage);
	SDKHook(client, SDKHook_OnTakeDamage, OnPlayerTakeDamage);
	SDKHook(client, SDKHook_OnTakeDamagePost, OnPlayerTakeDamagePost);
	SDKHook(client, SDKHook_OnTakeDamageAlive, OnPlayerTakeDamageAlive);
	SDKHook(client, SDKHook_OnTakeDamageAlivePost, OnPlayerTakeDamageAlivePost);
	SDKHook(client, SDKHook_PostThink, OnInfectedPostThink);
	SDKHook(client, SDKHook_TouchPost, OnDoorTouchPost);
	SDKHook(client, SDKHook_WeaponEquipPost, OnWeaponEquipPost);
	SDKHook(client, SDKHook_WeaponSwitchPost, OnWeaponSwitchPost);
	g_esGeneral.g_dhWeaponShootPositionHook.HookEntity(Hook_Post, client, mreWeaponShootPositionPost);

	vResetTank2(client);
	vCacheTankSettings(client);
	vCacheSurvivorSettings(client);
	vResetCore(client);
	vRemoveLaserSight(client);
}

public void OnClientPostAdminCheck(int client)
{
	if (bIsValidClient(client))
	{
		if (bIsValidClient(client, MT_CHECK_FAKECLIENT))
		{
			vLoadConfigs(g_esGeneral.g_sSavePath, 3);

			if (g_esGeneral.g_iRushTypes > 0)
			{
				vAnnounceRush(client);
				MT_PrintToChat(client, "%s %t", MT_TAG3, ((g_esGeneral.g_iHardcoreMode == 1) ? "HardcoreModeOn" : "HardcoreModeOff"));

				if (bIsCoopMode() && g_esGeneral.g_bRushCoop)
				{
					vAnnounceRushWarning(client);
				}
			}
		}

		vLoadConfigs(g_esGeneral.g_sSavePath, 4);
	}

	GetClientAuthId(client, AuthId_Steam2, g_esPlayer[client].g_sSteamID32, sizeof esPlayer::g_sSteamID32);
	GetClientAuthId(client, AuthId_Steam3, g_esPlayer[client].g_sSteam3ID, sizeof esPlayer::g_sSteam3ID);
}

public void OnClientDisconnect(int client)
{
	if (bIsInfected(client) && !bIsValidClient(client, MT_CHECK_FAKECLIENT))
	{
		if (!bIsCustomTank(client))
		{
			if (bIsTank(client))
			{
				g_esGeneral.g_iTankCount--;
			}
			else if (bIsSpecialInfected(client))
			{
				g_esGeneral.g_iSpecialCount--;
			}
		}

		vCalculateDeath(client, 0);
	}

	if (bIsValidClient(client))
	{
		vResetPlayerStatus(client);
		vRemoveLaserSight(client);
	}
}

public void OnConfigsExecuted()
{
	g_esGeneral.g_bBlindType = false;
	g_esGeneral.g_iChosenType = 0;
	g_esGeneral.g_iRegularCount = 0;
	g_esGeneral.g_iSpecialCount = 0;
	g_esGeneral.g_iTankCount = 0;

	vDefaultConVarSettings();
	vLoadConfigs(g_esGeneral.g_sSavePath, 1);
	vSetupConfigs();
	vPluginStatus();
	vResetTimers();
	vToggleTankRushConVars();

	CreateTimer(1.0, tTimerPunishSurvivors, .flags = TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
	CreateTimer(0.1, tTimerRefreshRewards, .flags = TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
	CreateTimer(1.0, tTimerRegenerateAmmoHealth, .flags = TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
	CreateTimer(g_esGeneral.g_flConfigDelay, tTimerReloadConfigs, .flags = TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
	CreateTimer(1.0, tTimerTankRushUpdate, .flags = TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);

	if (g_esGeneral.g_cvMTSurvivorUpgrades != null)
	{
		g_esGeneral.g_cvMTSurvivorUpgrades.BoolValue = true;
	}
}

public void OnMapEnd()
{
	vResetElevatorsList();
	vResetPlugin();
	vToggleLogging(0);

	RemoveNormalSoundHook(BlockSoundHook);
}

public void OnPluginEnd()
{
	vRemoveCommandListeners();
	vMultiTargetFilters(false);
	vClearElevatorsList();
	vClearSectionList();
	vRemovePermanentPatches();
	vTogglePlugin(false);
	vToggleTankRushConVars();

	if (g_esGeneral.g_alFilePaths != null)
	{
		g_esGeneral.g_alFilePaths.Clear();

		delete g_esGeneral.g_alFilePaths;
	}

	for (int iTank = 1; iTank <= MaxClients; iTank++)
	{
		if (bIsInfected(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE))
		{
			vResetTank(iTank);
		}
	}

	Call_StartForward(g_esGeneral.g_gfPluginEndForward);
	Call_Finish();
}

public void OnEntityCreated(int entity, const char[] classname)
{
	if (g_esGeneral.g_bPluginEnabled && bIsValidEntity(entity))
	{
		g_esGeneral.g_bWitchKilled[entity] = false;
		g_esGeneral.g_iOwnerID[entity] = 0;
		g_esGeneral.g_iOwnerID2[entity] = 0;
		g_esGeneral.g_iTeamID[entity] = 0;
		g_esGeneral.g_iTeamID2[entity] = 0;

		if (StrEqual(classname, "tank_rock"))
		{
			RequestFrame(vRockThrowFrame, EntIndexToEntRef(entity));
		}
		else if (StrEqual(classname, "infected") || StrEqual(classname, "witch"))
		{
			SDKHook(entity, SDKHook_SpawnPost, OnInfectedSpawnPost);
		}
		else if (StrEqual(classname, "inferno") || (g_bSecondGame && (StrEqual(classname, "fire_cracker_blast") || StrEqual(classname, "grenade_launcher_projectile"))))
		{
			SDKHook(entity, SDKHook_SpawnPost, OnEffectSpawnPost);
		}
		else if (StrEqual(classname, "pipe_bomb_projectile"))
		{
			SDKHook(entity, SDKHook_SpawnPost, OnEffectSpawnPost);
			SDKHook(entity, SDKHook_Spawn, OnPipeBombSpawn);
		}
		else if (StrEqual(classname, "physics_prop") || StrEqual(classname, "prop_physics"))
		{
			SDKHook(entity, SDKHook_SpawnPost, OnPropSpawnPost);
		}
		else if (StrEqual(classname, "prop_fuel_barrel"))
		{
			SDKHook(entity, SDKHook_OnTakeDamage, OnPropTakeDamage);
		}
	}
}

public void OnEntityDestroyed(int entity)
{
	if (g_esGeneral.g_bPluginEnabled && bIsValidEntity(entity))
	{
		char sClassname[32];
		GetEntityClassname(entity, sClassname, sizeof sClassname);
		if (StrEqual(sClassname, "infected") || StrEqual(sClassname, "witch"))
		{
			vResetInfected(entity);
		}
		else if (StrEqual(sClassname, "grenade_launcher_projectile"))
		{
			int iOwner = g_esGeneral.g_iOwnerID[entity];
			if (iOwner > 0 && g_esPlayer[iOwner].g_bLadyKiller)
			{
				g_esPlayer[iOwner].g_bLadyKiller = false;
			}
		}
		else if (StrEqual(sClassname, "survivor_death_model"))
		{
			int iOwner = GetClientOfUserId(g_esInfected[entity].g_iDeathModelOwner);
			if (bIsValidClient(iOwner, MT_CHECK_INDEX))
			{
				g_esShooter[iOwner].g_iDeathModel = INVALID_ENT_REFERENCE;
			}

			g_esInfected[entity].g_iDeathModelOwner = 0;
		}
	}
}

public void OnGameFrame()
{
	if (!g_esGeneral.g_bPluginEnabled || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return;
	}
#if defined _actions_included
	bool bDeveloper = false, bSpectator = false;
#endif
	bool bHuman = false, bWitch = false;
	char sFinalName[64], sHealthBar[51], sHumanTag[128], sName[33], sSet[2][2], sSet2[2][2], sSet3[2][2], sTankName[64], sTypeName[10];
	float flArmorPercentage = 0.0, flHealthPercentage = 0.0, flHealthPercentage2 = 0.0, flShieldPercentage = 0.0;
	int iCount = 0, iTarget = 0, iHealth = 0, iMaxHealth = 0, iTotalHealth = 0, iType = 0;
	for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
	{
#if defined _actions_included
		bDeveloper = bIsDeveloper(iPlayer);
		bSpectator = bIsSpectator(iPlayer, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT);
		if (bIsHumanSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) || bSpectator || (bIsValidClient(iPlayer, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) && bDeveloper))
#else
		if (bIsValidClient(iPlayer, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
#endif
		{
			iTarget = GetClientAimTarget(iPlayer, false);
			if (bIsInfected(iTarget))
			{
#if defined _actions_included
				if ((!bSpectator && !bDeveloper && bIsInfectedIdle(iTarget, 3)) || !bIsVisibleToPlayer(iTarget, iPlayer, 1))
				{
					continue;
				}
#else
				if (bIsHumanSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && !bIsVisibleToPlayer(iTarget, iPlayer, 1))
				{
					continue;
				}
#endif
				sHealthBar[0] = '\0';
				iHealth = bIsPlayerIncapacitated(iTarget) ? 0 : GetEntProp(iTarget, Prop_Data, "m_iHealth");
				iMaxHealth = GetEntProp(iTarget, Prop_Data, "m_iMaxHealth");
				iTotalHealth = (iHealth > iMaxHealth) ? iHealth : iMaxHealth;
				flArmorPercentage = ((1.0 - g_esTankCache[iTarget].g_flArmorPercentage) * ((sizeof sHealthBar) - 1));
				flHealthPercentage = ((float(iHealth) / float(iTotalHealth)) * 100.0);
				flHealthPercentage2 = ((float(iHealth) / float(iTotalHealth)) * ((sizeof sHealthBar) - 1));
				flShieldPercentage = ((1.0 - g_esTankCache[iTarget].g_flArmorPercentage - g_esTankCache[iTarget].g_flShieldPercentage) * ((sizeof sHealthBar) - 1));

				ReplaceString(g_esTankCache[iTarget].g_sArmorCharacters, sizeof esTankCache::g_sArmorCharacters, " ", "");
				ExplodeString(g_esTankCache[iTarget].g_sArmorCharacters, ",", sSet, sizeof sSet, sizeof sSet[]);
				ReplaceString(g_esTankCache[iTarget].g_sShieldCharacters, sizeof esTankCache::g_sShieldCharacters, " ", "");
				ExplodeString(g_esTankCache[iTarget].g_sShieldCharacters, ",", sSet2, sizeof sSet2, sizeof sSet2[]);
				ReplaceString(g_esTankCache[iTarget].g_sHealthCharacters, sizeof esTankCache::g_sHealthCharacters, " ", "");
				ExplodeString(g_esTankCache[iTarget].g_sHealthCharacters, ",", sSet3, sizeof sSet3, sizeof sSet3[]);

				for (iCount = 0; iCount < flHealthPercentage2 && iCount < ((sizeof sHealthBar) - 1); iCount++)
				{
					switch (g_esTankCache[iTarget].g_flArmorPercentage > 0.0 && flArmorPercentage <= iCount < flHealthPercentage2)
					{
						case true: StrCat(sHealthBar, sizeof sHealthBar, sSet[0]);
						case false:
						{
							switch (g_esTankCache[iTarget].g_flShieldPercentage > 0.0 && flShieldPercentage <= iCount < flHealthPercentage2)
							{
								case true: StrCat(sHealthBar, sizeof sHealthBar, sSet2[0]);
								case false: StrCat(sHealthBar, sizeof sHealthBar, sSet3[0]);
							}
						}
					}
				}

				for (; iCount < ((sizeof sHealthBar) - 1); iCount++)
				{
					switch (g_esTankCache[iTarget].g_flArmorPercentage > 0.0 && flArmorPercentage <= iCount)
					{
						case true: StrCat(sHealthBar, sizeof sHealthBar, sSet[1]);
						case false:
						{
							switch (g_esTankCache[iTarget].g_flShieldPercentage > 0.0 && flShieldPercentage <= iCount)
							{
								case true: StrCat(sHealthBar, sizeof sHealthBar, sSet2[1]);
								case false: StrCat(sHealthBar, sizeof sHealthBar, sSet3[1]);
							}
						}
					}
				}

				bHuman = bIsValidClient(iTarget, MT_CHECK_FAKECLIENT);
				FormatEx(sHumanTag, sizeof sHumanTag, "%T", "HumanTag", iPlayer);

				switch (g_esShooter[iTarget].g_bSurvivor)
				{
					case true: FormatEx(sFinalName, sizeof sFinalName, "%s", g_esShooter[iTarget].g_sSurvivorName);
					case false:
					{
						vGetTankTranslatedName(sTankName, sizeof sTankName, iTarget, .survivor = g_esShooter[iTarget].g_bSurvivor, .character = g_esShooter[iTarget].g_iCharacter);
						FormatEx(sFinalName, sizeof sFinalName, "%t", sTankName);
					}
				}

				switch (g_esTankCache[iTarget].g_iDisplayHealthType)
				{
					case 1:
					{
						switch (g_esTankCache[iTarget].g_iDisplayHealth)
						{
							case 1: PrintHintText(iPlayer, "%s %s", sFinalName, (bHuman ? sHumanTag : ""));
							case 2: PrintHintText(iPlayer, "%i HP", iHealth);
							case 3: PrintHintText(iPlayer, "%i/%i HP (%.0f%s)", iHealth, iTotalHealth, flHealthPercentage, "%%");
							case 4: PrintHintText(iPlayer, "HP: |-<%s>-|", sHealthBar);
							case 5: PrintHintText(iPlayer, "%s %s (%i HP)", sFinalName, (bHuman ? sHumanTag : ""), iHealth);
							case 6: PrintHintText(iPlayer, "%s %s [%i/%i HP (%.0f%s)]", sFinalName, (bHuman ? sHumanTag : ""), iHealth, iTotalHealth, flHealthPercentage, "%%");
							case 7: PrintHintText(iPlayer, "%s %s\nHP: |-<%s>-|", sFinalName, (bHuman ? sHumanTag : ""), sHealthBar);
							case 8: PrintHintText(iPlayer, "%i HP\nHP: |-<%s>-|", iHealth, sHealthBar);
							case 9: PrintHintText(iPlayer, "%i/%i HP (%.0f%s)\nHP: |-<%s>-|", iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
							case 10: PrintHintText(iPlayer, "%s %s (%i HP)\nHP: |-<%s>-|", sFinalName, (bHuman ? sHumanTag : ""), iHealth, sHealthBar);
							case 11: PrintHintText(iPlayer, "%s %s [%i/%i HP (%.0f%s)]\nHP: |-<%s>-|", sFinalName, (bHuman ? sHumanTag : ""), iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
						}
					}
					case 2:
					{
						switch (g_esTankCache[iTarget].g_iDisplayHealth)
						{
							case 1: PrintCenterText(iPlayer, "%s %s", sFinalName, (bHuman ? sHumanTag : ""));
							case 2: PrintCenterText(iPlayer, "%i HP", iHealth);
							case 3: PrintCenterText(iPlayer, "%i/%i HP (%.0f%s)", iHealth, iTotalHealth, flHealthPercentage, "%%");
							case 4: PrintCenterText(iPlayer, "HP: |-<%s>-|", sHealthBar);
							case 5: PrintCenterText(iPlayer, "%s %s (%i HP)", sFinalName, (bHuman ? sHumanTag : ""), iHealth);
							case 6: PrintCenterText(iPlayer, "%s %s [%i/%i HP (%.0f%s)]", sFinalName, (bHuman ? sHumanTag : ""), iHealth, iTotalHealth, flHealthPercentage, "%%");
							case 7: PrintCenterText(iPlayer, "%s %s\nHP: |-<%s>-|", sFinalName, (bHuman ? sHumanTag : ""), sHealthBar);
							case 8: PrintCenterText(iPlayer, "%i HP\nHP: |-<%s>-|", iHealth, sHealthBar);
							case 9: PrintCenterText(iPlayer, "%i/%i HP (%.0f%s)\nHP: |-<%s>-|", iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
							case 10: PrintCenterText(iPlayer, "%s %s (%i HP)\nHP: |-<%s>-|", sFinalName, (bHuman ? sHumanTag : ""), iHealth, sHealthBar);
							case 11: PrintCenterText(iPlayer, "%s %s [%i/%i HP (%.0f%s)]\nHP: |-<%s>-|", sFinalName, (bHuman ? sHumanTag : ""), iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
						}
					}
				}
			}
			else if (bIsValidEntity(iTarget))
			{
				if (bIsHumanSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && !bIsVisibleToPlayer(iPlayer))
				{
					continue;
				}

				sName[0] = '\0';
				bWitch = bIsWitch(iTarget);
				iType = g_esTank[g_esInfected[iTarget].g_iTankType].g_iRealType[0];
				if (bIsCommonInfected(iTarget) || bWitch)
				{
					sHealthBar[0] = '\0';
					iHealth = GetEntProp(iTarget, Prop_Data, "m_iHealth");
					iHealth = (iHealth <= 0) ? 0 : iHealth;
					iMaxHealth = GetEntProp(iTarget, Prop_Data, "m_iMaxHealth");
					iTotalHealth = (iHealth > iMaxHealth) ? iHealth : iMaxHealth;
					flHealthPercentage = ((float(iHealth) / float(iTotalHealth)) * 100.0);

					ReplaceString(g_esInfectedCache[iTarget].g_sHealthCharacters, sizeof esTankCache::g_sHealthCharacters, " ", "");
					ExplodeString(g_esInfectedCache[iTarget].g_sHealthCharacters, ",", sSet, sizeof sSet, sizeof sSet[]);

					for (iCount = 0; iCount < ((float(iHealth) / float(iTotalHealth)) * ((sizeof sHealthBar) - 1)) && iCount < ((sizeof sHealthBar) - 1); iCount++)
					{
						StrCat(sHealthBar, sizeof sHealthBar, sSet[0]);
					}

					for (; iCount < ((sizeof sHealthBar) - 1); iCount++)
					{
						StrCat(sHealthBar, sizeof sHealthBar, sSet[1]);
					}

					switch (bWitch)
					{
						case true:
						{
							FormatEx(sTypeName, sizeof sTypeName, g_sMobNames[0]);
							FormatEx(sName, sizeof sName, g_esHorde[iType].g_sWitchName);
						}
						case false:
						{
							FormatEx(sTypeName, sizeof sTypeName, g_sMobNames[1]);
							FormatEx(sName, sizeof sName, g_esHorde[iType].g_sCommonName);
						}
					}

					FormatEx(sTankName, sizeof sTankName, "%s #%i Name", sTypeName, iType);

					if (sTankName[0] != '\0' && !TranslationPhraseExists(sTankName))
					{
						FormatEx(sTankName, sizeof sTankName, "%s Name", sName);
					}

					if (sTankName[0] != '\0' && !TranslationPhraseExists(sTankName))
					{
						FormatEx(sTankName, sizeof sTankName, "%s #%i", sTypeName, iType);
					}

					if (sTankName[0] != '\0' && !TranslationPhraseExists(sTankName))
					{
						strcopy(sTankName, sizeof sTankName, sName);
					}

					if (sTankName[0] == '\0' || !TranslationPhraseExists(sTankName))
					{
						FormatEx(sTankName, sizeof sTankName, "NoName%s", sTypeName);
					}

					switch (g_esInfectedCache[iTarget].g_iDisplayHealthType)
					{
						case 1:
						{
							switch (g_esInfectedCache[iTarget].g_iDisplayHealth)
							{
								case 1: PrintHintText(iPlayer, "%t", sTankName);
								case 2: PrintHintText(iPlayer, "%i HP", iHealth);
								case 3: PrintHintText(iPlayer, "%i/%i HP (%.0f%s)", iHealth, iTotalHealth, flHealthPercentage, "%%");
								case 4: PrintHintText(iPlayer, "HP: |-<%s>-|", sHealthBar);
								case 5: PrintHintText(iPlayer, "%t (%i HP)", sTankName, iHealth);
								case 6: PrintHintText(iPlayer, "%t [%i/%i HP (%.0f%s)]", sTankName, iHealth, iTotalHealth, flHealthPercentage, "%%");
								case 7: PrintHintText(iPlayer, "%t\nHP: |-<%s>-|", sTankName, sHealthBar);
								case 8: PrintHintText(iPlayer, "%i HP\nHP: |-<%s>-|", iHealth, sHealthBar);
								case 9: PrintHintText(iPlayer, "%i/%i HP (%.0f%s)\nHP: |-<%s>-|", iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
								case 10: PrintHintText(iPlayer, "%t (%i HP)\nHP: |-<%s>-|", sTankName, iHealth, sHealthBar);
								case 11: PrintHintText(iPlayer, "%t [%i/%i HP (%.0f%s)]\nHP: |-<%s>-|", sTankName, iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
							}
						}
						case 2:
						{
							switch (g_esInfectedCache[iTarget].g_iDisplayHealth)
							{
								case 1: PrintCenterText(iPlayer, "%t", sTankName);
								case 2: PrintCenterText(iPlayer, "%i HP", iHealth);
								case 3: PrintCenterText(iPlayer, "%i/%i HP (%.0f%s)", iHealth, iTotalHealth, flHealthPercentage, "%%");
								case 4: PrintCenterText(iPlayer, "HP: |-<%s>-|", sHealthBar);
								case 5: PrintCenterText(iPlayer, "%t (%i HP)", sTankName, iHealth);
								case 6: PrintCenterText(iPlayer, "%t [%i/%i HP (%.0f%s)]", sTankName, iHealth, iTotalHealth, flHealthPercentage, "%%");
								case 7: PrintCenterText(iPlayer, "%t\nHP: |-<%s>-|", sTankName, sHealthBar);
								case 8: PrintCenterText(iPlayer, "%i HP\nHP: |-<%s>-|", iHealth, sHealthBar);
								case 9: PrintCenterText(iPlayer, "%i/%i HP (%.0f%s)\nHP: |-<%s>-|", iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
								case 10: PrintCenterText(iPlayer, "%t (%i HP)\nHP: |-<%s>-|", sTankName, iHealth, sHealthBar);
								case 11: PrintCenterText(iPlayer, "%t [%i/%i HP (%.0f%s)]\nHP: |-<%s>-|", sTankName, iHealth, iTotalHealth, flHealthPercentage, "%%", sHealthBar);
							}
						}
					}
				}
			}
		}
	}
}

public Action OnPlayerRunCmd(int client, int &buttons, int &impulse, float vel[3], float angles[3], int &weapon)
{
	if (!g_esGeneral.g_bPluginEnabled || !bIsValidClient(client))
	{
		return Plugin_Continue;
	}

	Action aResult = Plugin_Continue;
	if (bIsSurvivor(client, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		if (bIsValidClient(client, MT_CHECK_ALIVE))
		{
			g_esGeneral.g_bIgnoreWeaponShotPosition = true;
			SDKCall(g_esGeneral.g_hSDKWeaponShootPosition, client, g_esPlayer[client].g_flLastWeaponShotPosition);
			g_esGeneral.g_bIgnoreWeaponShotPosition = false;

			bool bDeveloper = bIsDeveloper(client, 0), bDeveloper2 = bIsDeveloper(client, 5), bDeveloper3 = bIsDeveloper(client, 6), bDeveloper4 = bIsDeveloper(client, 11);
			if ((bDeveloper4 || (((g_esShooter[client].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[client].g_iSafetyBubble == 1)) && (buttons & IN_JUMP))
			{
				vReviveSurvivor(client);
				vSaveCaughtSurvivor(client);
			}

			if ((bDeveloper2 || (g_esShooter[client].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[client].g_iMidairDashesCount > 0)
			{
				if (!(buttons & IN_JUMP) && !g_esPlayer[client].g_bReleasedJump)
				{
					g_esPlayer[client].g_bReleasedJump = true;
				}

				if (bIsEntityGrounded(client))
				{
					g_esPlayer[client].g_iMidairDashesCount = 0;
				}
			}

			if ((bDeveloper3 || (((g_esShooter[client].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[client].g_iShovePenalty == 1)) && (buttons & IN_ATTACK2))
			{
				SetEntProp(client, Prop_Send, "m_iShovePenalty", 0, 1);
			}

			if (bDeveloper || bIsDeveloper(client, 7) || (g_esShooter[client].g_iTotalPassives & MT_PASSIVE_INFAMMO) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_INFAMMO))
			{
				vRefillGunAmmo(client, true);
			}

			if (g_esGeneral.g_hSDKLaunchGrenade != null && (bDeveloper || (((g_esShooter[client].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[client].g_flLadyKiller > 0.0) || (((g_esShooter[client].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_AMMO)) && g_esPlayer[client].g_flGrenadeLauncher > 0.0)) && !bIsSurvivorDisabled(client))
			{
				int iTarget = GetClientAimTarget(client, false);
				if (!bIsValidClient(client, MT_CHECK_FAKECLIENT) && bIsVisibleToPlayer(client) && (bIsInfected(iTarget) || (bIsWitch(iTarget) && g_esPlayer[client].g_flLadyKiller > 0.0)) && GetRandomFloat(0.1, 100.0) <= MT_GRENADE_CHANCE)
				{
					if (!(buttons & IN_USE))
					{
						buttons |= IN_USE;
					}

					if (!(buttons & IN_ZOOM))
					{
						buttons |= IN_ZOOM;
					}
				}

				if ((buttons & IN_USE) && (buttons & IN_ZOOM))
				{
					int iActiveWeapon = iGetSurvivorActiveWeapon(client);
					if (bIsValidEntity(iActiveWeapon))
					{
						int iAmmoType = GetEntProp(iActiveWeapon, Prop_Send, "m_iPrimaryAmmoType");
						if (iAmmoType > 0)
						{
							float flPortion = (bDeveloper && g_esDeveloper[client].g_flDevGrenadeLauncher > g_esPlayer[client].g_flGrenadeLauncher) ? g_esDeveloper[client].g_flDevGrenadeLauncher : g_esPlayer[client].g_flGrenadeLauncher,
								flPortion2 = (bDeveloper && g_esDeveloper[client].g_flDevLadyKiller > g_esPlayer[client].g_flLadyKiller) ? g_esDeveloper[client].g_flDevLadyKiller : g_esPlayer[client].g_flLadyKiller,
								flFinalPortion = (((flPortion > flPortion2) ? flPortion : flPortion2) / 100.0), flCurrentTime = GetGameTime();

							int iAmmo = GetEntProp(client, Prop_Send, "m_iAmmo", .element = iAmmoType), iMaxAmmo = iGetMaxAmmo(client, 0, iActiveWeapon, true), iPortion = RoundToCeil(iMaxAmmo * flFinalPortion);
							if (iAmmo >= iPortion)
							{
								float flCooldown = (bDeveloper ? 3.5 : 5.0);
								if (g_esPlayer[client].g_flLastGrenadeTime > (flCurrentTime + flCooldown))
								{
									g_esPlayer[client].g_flLastGrenadeTime = 0.0;
								}

								if (g_esPlayer[client].g_flLastGrenadeTime <= flCurrentTime)
								{
									g_esPlayer[client].g_bLadyKiller = (flPortion2 > 0.0);

									SDKCall(g_esGeneral.g_hSDKLaunchGrenade, iActiveWeapon, client);
									EmitSoundToAll(SOUND_EXPLOSION3, iActiveWeapon);

									float flRecoil[3];
									GetEntPropVector(client, Prop_Data, "m_vecPunchAngle", flRecoil);
									flRecoil[0] -= 9.5;
									SetEntPropVector(client, Prop_Data, "m_vecPunchAngle", flRecoil);

									g_esPlayer[client].g_flLastGrenadeTime = (flCurrentTime + flCooldown);
									SetEntPropFloat(iActiveWeapon, Prop_Send, "m_flNextPrimaryAttack", (flCurrentTime + 0.5));

									iAmmo -= iPortion;
									iAmmo = iClamp(iAmmo, 0);
									SetEntProp(client, Prop_Send, "m_iAmmo", iAmmo, .element = iAmmoType);
								}
							}
							else if (g_esPlayer[client].g_flLastClickTime <= flCurrentTime)
							{
								g_esPlayer[client].g_flLastClickTime = (flCurrentTime + 1.5);
								EmitSoundToClient(client, SOUND_EMPTY);
							}
						}
					}
				}
			}

			if (!bIsEntityGrounded(client))
			{
				float flVelocity[3];
				GetEntPropVector(client, Prop_Data, "m_vecVelocity", flVelocity);
				if (flVelocity[2] < 0.0)
				{
					if (!g_esPlayer[client].g_bFallTracked)
					{
						float flOrigin[3];
						GetEntPropVector(client, Prop_Data, "m_vecOrigin", flOrigin);
						g_esPlayer[client].g_flPreFallZ = flOrigin[2];
						g_esPlayer[client].g_bFallTracked = true;

						return Plugin_Continue;
					}
				}
				else if (g_esPlayer[client].g_bFalling || g_esPlayer[client].g_bFallTracked)
				{
					g_esPlayer[client].g_bFalling = false;
					g_esPlayer[client].g_bFallTracked = false;
					g_esPlayer[client].g_flPreFallZ = 0.0;
				}
			}
			else if (g_esPlayer[client].g_bFalling || g_esPlayer[client].g_bFallTracked)
			{
				g_esPlayer[client].g_bFalling = false;
				g_esPlayer[client].g_bFallTracked = false;
				g_esPlayer[client].g_flPreFallZ = 0.0;
			}
		}
		else if (bIsDeveloper(client, 10) && (buttons & IN_JUMP))
		{
			RequestFrame(vRespawnFrame, GetClientUserId(client));
		}
	}
	else if (bIsInfected(client))
	{
		if (bIsSpecialSupported(client, MT_CHECK_FAKECLIENT))
		{
			int iButton = 0;
			for (int iBit = 0; iBit < 26; iBit++)
			{
				iButton = (1 << iBit);
				if (buttons & iButton)
				{
					if (!(g_esPlayer[client].g_iLastButtons & iButton))
					{
						Call_StartForward(g_esGeneral.g_gfButtonPressedForward);
						Call_PushCell(client);
						Call_PushCell(iButton);
						Call_Finish();
					}
				}
				else if (g_esPlayer[client].g_iLastButtons & iButton)
				{
					Call_StartForward(g_esGeneral.g_gfButtonReleasedForward);
					Call_PushCell(client);
					Call_PushCell(iButton);
					Call_Finish();
				}
			}

			g_esPlayer[client].g_iLastButtons = buttons;
		}

		if (bIsHumanInfected(client))
		{
			bool bGhost = bIsInfectedGhost(client);
			if (bGhost && (buttons & IN_ATTACK) && (g_esGeneral.g_bRushCooldown || g_esGeneral.g_bRushEnded || g_esPlayer[client].g_bRushWaiting))
			{
				buttons &= ~IN_ATTACK;
				aResult = Plugin_Changed;
			}
			else if (!bGhost && (buttons & IN_SPEED) && g_esPlayer[client].g_iRushDespawnCount < 3)
			{
				g_esPlayer[client].g_bRushDespawning = true;
			}
		}

		if (bIsTank(client) && (buttons & IN_ATTACK) && !(buttons & IN_ATTACK2) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[client].g_flPunchThrow)
		{
			buttons |= IN_ATTACK2;
			aResult = Plugin_Changed;
		}
	}

	if (bIsValidClient(client))
	{
		if (bIsEntityGrounded(client))
		{
			bool bDeveloper = bIsDeveloper(client, 5), bDeveloper2 = bIsDeveloper(client, 6), bInfected = (bIsInfected(client) && g_esTankCache[client].g_iAutoHop == 1), bSurvivor = (bIsSurvivor(client) && !bIsSurvivorDisabled(client) && !bIsSurvivorCaught(client) && (bDeveloper || bDeveloper2 || (((g_esShooter[client].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[client].g_iBunnyHop == 1)));
			if (bSurvivor || bInfected)
			{
				if (bInfected && !bIsValidClient(client, MT_CHECK_FAKECLIENT) && !(buttons & IN_JUMP))
				{
					buttons |= IN_JUMP;
				}

				if (buttons & IN_JUMP)
				{
					buttons |= IN_DUCK;

					float flHeight = (bDeveloper && g_esDeveloper[client].g_flDevJumpHeight > g_esPlayer[client].g_flJumpHeight) ? g_esDeveloper[client].g_flDevJumpHeight : g_esPlayer[client].g_flJumpHeight;
					flHeight = ((!bDeveloper && bDeveloper2) || flHeight <= 0.0 || bInfected) ? MT_JUMP_DEFAULTHEIGHT : flHeight;
					if (flHeight > 0.0)
					{
						vPushPlayer(client, {-90.0, 0.0, 0.0}, ((flHeight + 100.0) * 2.0));
					}

					float flAngles[3];
					GetClientEyeAngles(client, flAngles);
					flAngles[0] = 0.0;
					if (buttons & IN_BACK)
					{
						flAngles[1] += 180.0;
					}

					if (buttons & IN_MOVELEFT)
					{
						flAngles[1] += 90.0;
					}

					if (buttons & IN_MOVERIGHT)
					{
						flAngles[1] += -90.0;
					}

					vPushPlayer(client, flAngles, MT_JUMP_FORWARDBOOST);
				}
			}
		}

		if (GetEntityMoveType(client) & MOVETYPE_LADDER)
		{
			buttons &= ~IN_JUMP;
			buttons &= ~IN_DUCK;
			aResult = Plugin_Changed;
		}
	}

	return aResult;
}

/**
 * Plugin status functions & callbacks
 **/

void vInitialReset(int client)
{
	g_esPlayer[client].g_bBlindTank = false;
	g_esPlayer[client].g_iHudPanelPage = 0;
	g_esPlayer[client].g_iHudPanelPages = 0;
	g_esPlayer[client].g_iPersonalType = 0;

	for (int iSpecType = 0; iSpecType < (sizeof g_sSpecialNames); iSpecType++)
	{
		g_esTeammate[client].g_iPersonalType[iSpecType] = 0;
	}
}

void vLateLoad()
{
	if (g_bLateLoad)
	{
#if defined _adminmenu_included
		TopMenu tmAdminMenu = null;

		if (LibraryExists("adminmenu") && ((tmAdminMenu = GetAdminTopMenu()) != null))
		{
			OnAdminMenuReady(tmAdminMenu);
		}
#endif
		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			if (bIsValidClient(iPlayer, MT_CHECK_INGAME))
			{
				OnClientPutInServer(iPlayer);
				OnClientPostAdminCheck(iPlayer);
#if defined _clientprefs_included
				if (bIsValidClient(iPlayer, MT_CHECK_FAKECLIENT) && AreClientCookiesCached(iPlayer))
				{
					OnClientCookiesTankCached(iPlayer);
				}
#endif
				if (bIsInfected(iPlayer, MT_CHECK_ALIVE))
				{
					SDKHook(iPlayer, SDKHook_PostThinkPost, OnTankPostThinkPost);
				}
			}
		}

		int iEntity = -1;
		while ((iEntity = FindEntityByClassname(iEntity, "infected")) != INVALID_ENT_REFERENCE)
		{
			SDKHook(iEntity, SDKHook_OnTakeDamage, OnInfectedTakeDamage);
			SDKHook(iEntity, SDKHook_OnTakeDamage, OnPlayerTakeDamage);
			SDKHook(iEntity, SDKHook_OnTakeDamagePost, OnPlayerTakeDamagePost);
		}

		iEntity = -1;
		while ((iEntity = FindEntityByClassname(iEntity, "witch")) != INVALID_ENT_REFERENCE)
		{
			SDKHook(iEntity, SDKHook_OnTakeDamage, OnInfectedTakeDamage);
			SDKHook(iEntity, SDKHook_OnTakeDamage, OnPlayerTakeDamage);
			SDKHook(iEntity, SDKHook_OnTakeDamagePost, OnPlayerTakeDamagePost);
		}

		iEntity = -1;
		char sModel[64];
		while ((iEntity = FindEntityByClassname(iEntity, "prop_physics")) != INVALID_ENT_REFERENCE)
		{
			GetEntPropString(iEntity, Prop_Data, "m_ModelName", sModel, sizeof sModel);
			if (StrEqual(sModel, MODEL_OXYGENTANK) || StrEqual(sModel, MODEL_PROPANETANK) || StrEqual(sModel, MODEL_GASCAN) || (g_bSecondGame && StrEqual(sModel, MODEL_FIREWORKCRATE)))
			{
				SDKHook(iEntity, SDKHook_OnTakeDamage, OnPropTakeDamage);
			}
		}

		g_bLateLoad = false;
	}
}

void vPluginStatus()
{
	bool bPluginAllowed = bIsPluginEnabled();
	if (!g_esGeneral.g_bPluginEnabled && bPluginAllowed)
	{
		vTogglePlugin(bPluginAllowed);

		if (bIsCompetitiveModeRound(0))
		{
			g_esGeneral.g_alCompTypes[0] = new ArrayList();
			g_esGeneral.g_alCompTypes[1] = new ArrayList();
		}
	}
	else if (g_esGeneral.g_bPluginEnabled && !bPluginAllowed)
	{
		vTogglePlugin(bPluginAllowed);
	}
}

void vResetCore(int client)
{
#if defined _actions_included
	g_esPlayer[client].g_sActionName[0] = '\0';
#endif
	g_esPlayer[client].g_bAdminMenu = false;
	g_esPlayer[client].g_bCustomLaser = false;
	g_esPlayer[client].g_bDied = false;
	g_esPlayer[client].g_bIgnoreCmd = false;
	g_esPlayer[client].g_bInitialRound = g_esGeneral.g_bNextRound;
	g_esPlayer[client].g_bLastLife[0] = false;
	g_esPlayer[client].g_bLastLife[1] = false;
	g_esPlayer[client].g_bMutantMenu = false;
	g_esPlayer[client].g_bPunisher = false;
	g_esPlayer[client].g_bRushGhost = false;
	g_esPlayer[client].g_bRushWaiting = false;
	g_esPlayer[client].g_bRushDespawning = false;
	g_esPlayer[client].g_bStasis = false;
	g_esPlayer[client].g_bStickied = false;
	g_esPlayer[client].g_bThirdPerson = false;
#if defined _ThirdPersonShoulder_Detect_included
	g_esPlayer[client].g_bThirdPerson2 = false;
#endif
	g_esPlayer[client].g_iGrenadeCount = 0;
	g_esPlayer[client].g_iIncapCount = 0;
	g_esPlayer[client].g_iLastButtons = 0;
	g_esPlayer[client].g_iMaxClip[0] = 0;
	g_esPlayer[client].g_iMaxClip[1] = 0;
	g_esPlayer[client].g_iReviveCount = 0;
	g_esPlayer[client].g_iRushDespawnCount = 0;
	g_esPlayer[client].g_iRushDespawningTick = 0;
	g_esPlayer[client].g_iRushWaitingTick = 0;

	vResetTankDamage(client);

	delete g_esPlayer[client].g_hHudTimer;
	delete g_esShooter[client].g_hCharacterTimer;
}

void vResetPlugin()
{
	g_esGeneral.g_iPlayerCount[1] = iGetHumanCount();
	g_esGeneral.g_iPlayerCount[2] = iGetHumanCount(true);

	vResetRound();
	vClearAbilityList();
	vClearClassKeysList();
	vClearColorKeysList();
	vClearCompTypesList();
	vClearPluginList();
}

void vResetRound()
{
	g_esGeneral.g_bBlindType = false;
	g_esGeneral.g_bFinaleEnded = false;
	g_esGeneral.g_bForceSpawned = false;
	g_esGeneral.g_bRushCooldown = false;
	g_esGeneral.g_bRushCoop = false;
	g_esGeneral.g_bRushCountdown = false;
	g_esGeneral.g_bRushEnded = false;
	g_esGeneral.g_bRushFirst = false;
	g_esGeneral.g_bRushRested = false;
	g_esGeneral.g_bRushSpawning = false;
	g_esGeneral.g_bRushStarted = false;
	g_esGeneral.g_bUsedParser = false;
	g_esGeneral.g_iChosenType = 0;
	g_esGeneral.g_iParserViewer = 0;
	g_esGeneral.g_iRegularCount = 0;
	g_esGeneral.g_iRushCooldownTick = 0;
	g_esGeneral.g_iRushCoopTick = 0;
	g_esGeneral.g_iRushCountdownTick = 0;
	g_esGeneral.g_iRushSpawnTick = 0;
	g_esGeneral.g_iSurvivalBlock = 0;
	g_esGeneral.g_iSpecialCount = 0;
	g_esGeneral.g_iTankCount = 0;
	g_esGeneral.g_iTankWave = 0;

	for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
	{
		if (bIsValidClient(iPlayer, MT_CHECK_INGAME))
		{
			vResetPlayerStatus(iPlayer);
		}
	}

	delete g_esGeneral.g_hRegularWavesTimer;
	delete g_esGeneral.g_hSurvivalTimer;
	delete g_esGeneral.g_hTankWaveTimer;
	delete g_esMob.g_hBioMassTimer;
}

void vTogglePlugin(bool toggle)
{
	g_esGeneral.g_bPluginEnabled = toggle;

	vHookEvents(toggle);
	vToggleDetours(toggle);
}

bool bIsPluginEnabled()
{
	if (!g_esGeneral.g_cvMTPluginEnabled.BoolValue || g_esGeneral.g_iPluginEnabled <= 0 || (!g_bDedicated && !g_esGeneral.g_cvMTListenSupport.BoolValue && g_esGeneral.g_iListenSupport <= 0) || g_esGeneral.g_cvMTGameMode == null)
	{
		return false;
	}

	g_esGeneral.g_iCurrentMode = 0;

	if ((g_esGeneral.g_hSDKIsCoopMode != null && SDKCall(g_esGeneral.g_hSDKIsCoopMode)) || (g_bSecondGame && ((g_esGeneral.g_hSDKIsRealismMode != null && SDKCall(g_esGeneral.g_hSDKIsRealismMode)) || (g_esGeneral.g_hSDKHasConfigurableDifficultySetting != null && SDKCall(g_esGeneral.g_hSDKHasConfigurableDifficultySetting)))))
	{
		g_esGeneral.g_iCurrentMode = 1;
	}
	else if (g_esGeneral.g_hSDKIsVersusMode != null && SDKCall(g_esGeneral.g_hSDKIsVersusMode))
	{
		g_esGeneral.g_iCurrentMode = 2;
	}
	else if (g_esGeneral.g_hSDKIsSurvivalMode != null && SDKCall(g_esGeneral.g_hSDKIsSurvivalMode))
	{
		g_esGeneral.g_iCurrentMode = 4;
	}
	else if (g_bSecondGame && g_esGeneral.g_hSDKIsScavengeMode != null && SDKCall(g_esGeneral.g_hSDKIsScavengeMode))
	{
		g_esGeneral.g_iCurrentMode = 8;
	}

	int iMode = (g_esGeneral.g_iGameModeTypes <= 0) ? g_esGeneral.g_cvMTGameModeTypes.IntValue : g_esGeneral.g_iGameModeTypes;
	if (iMode != 0 && (g_esGeneral.g_iCurrentMode == 0 || !(iMode & g_esGeneral.g_iCurrentMode)))
	{
		return false;
	}

	char sFixed[32], sGameMode[32], sGameModes[513], sGameModesCvar[513], sList[513], sListCvar[513];
	g_esGeneral.g_cvMTGameMode.GetString(sGameMode, sizeof sGameMode);
	FormatEx(sFixed, sizeof sFixed, ",%s,", sGameMode);

	strcopy(sGameModes, sizeof sGameModes, g_esGeneral.g_sEnabledGameModes);
	g_esGeneral.g_cvMTEnabledGameModes.GetString(sGameModesCvar, sizeof sGameModesCvar);
	if (sGameModes[0] != '\0' || sGameModesCvar[0] != '\0')
	{
		if (sGameModes[0] != '\0')
		{
			FormatEx(sList, sizeof sList, ",%s,", sGameModes);
		}

		if (sGameModesCvar[0] != '\0')
		{
			FormatEx(sListCvar, sizeof sListCvar, ",%s,", sGameModesCvar);
		}

		if ((sList[0] != '\0' && StrContains(sList, sFixed, false) == -1) && (sListCvar[0] != '\0' && StrContains(sListCvar, sFixed, false) == -1))
		{
			return false;
		}
	}

	strcopy(sGameModes, sizeof sGameModes, g_esGeneral.g_sDisabledGameModes);
	g_esGeneral.g_cvMTDisabledGameModes.GetString(sGameModesCvar, sizeof sGameModesCvar);
	if (sGameModes[0] != '\0' || sGameModesCvar[0] != '\0')
	{
		if (sGameModes[0] != '\0')
		{
			FormatEx(sList, sizeof sList, ",%s,", sGameModes);
		}

		if (sGameModesCvar[0] != '\0')
		{
			FormatEx(sListCvar, sizeof sListCvar, ",%s,", sGameModesCvar);
		}

		if ((sList[0] != '\0' && StrContains(sList, sFixed, false) != -1) || (sListCvar[0] != '\0' && StrContains(sListCvar, sFixed, false) != -1))
		{
			return false;
		}
	}

	return true;
}

/**
 * Mutant Tanks Library
 **/

void vRegisterForwards()
{
	g_esGeneral.g_gfAbilityActivatedForward = new GlobalForward("MT_OnAbilityActivated", ET_Ignore, Param_Cell);
	g_esGeneral.g_gfAbilityCheckForward = new GlobalForward("MT_OnAbilityCheck", ET_Ignore, Param_Cell, Param_Cell, Param_Cell, Param_Cell);
	g_esGeneral.g_gfButtonPressedForward = new GlobalForward("MT_OnButtonPressed", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfButtonReleasedForward = new GlobalForward("MT_OnButtonReleased", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfChangeTypeForward = new GlobalForward("MT_OnChangeType", ET_Ignore, Param_Cell, Param_Cell, Param_Cell, Param_Cell);
	g_esGeneral.g_gfCombineAbilitiesForward = new GlobalForward("MT_OnCombineAbilities", ET_Ignore, Param_Cell, Param_Cell, Param_Float, Param_String, Param_Cell, Param_Cell, Param_String);
	g_esGeneral.g_gfConfigsLoadForward = new GlobalForward("MT_OnConfigsLoad", ET_Ignore, Param_Cell);
	g_esGeneral.g_gfConfigsLoadedForward = new GlobalForward("MT_OnConfigsLoaded", ET_Ignore, Param_String, Param_String, Param_String, Param_Cell, Param_Cell, Param_Cell, Param_Cell, Param_String);
	g_esGeneral.g_gfCopyStatsForward = new GlobalForward("MT_OnCopyStats", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfDisplayMenuForward = new GlobalForward("MT_OnDisplayMenu", ET_Ignore, Param_Cell);
	g_esGeneral.g_gfEventFiredForward = new GlobalForward("MT_OnEventFired", ET_Ignore, Param_Cell, Param_String, Param_Cell);
	g_esGeneral.g_gfFatalFallingForward = new GlobalForward("MT_OnFatalFalling", ET_Event, Param_Cell);
	g_esGeneral.g_gfHookEventForward = new GlobalForward("MT_OnHookEvent", ET_Ignore, Param_Cell);
	g_esGeneral.g_gfLogMessageForward = new GlobalForward("MT_OnLogMessage", ET_Event, Param_Cell, Param_String);
	g_esGeneral.g_gfMenuItemDisplayedForward = new GlobalForward("MT_OnMenuItemDisplayed", ET_Ignore, Param_Cell, Param_String, Param_String, Param_Cell);
	g_esGeneral.g_gfMenuItemSelectedForward = new GlobalForward("MT_OnMenuItemSelected", ET_Ignore, Param_Cell, Param_String);
	g_esGeneral.g_gfPlayerEventKilledForward = new GlobalForward("MT_OnPlayerEventKilled", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfPlayerHitByVomitJarForward = new GlobalForward("MT_OnPlayerHitByVomitJar", ET_Event, Param_Cell, Param_Cell);
	g_esGeneral.g_gfPlayerShovedBySurvivorForward = new GlobalForward("MT_OnPlayerShovedBySurvivor", ET_Event, Param_Cell, Param_Cell, Param_Array);
	g_esGeneral.g_gfPluginCheckForward = new GlobalForward("MT_OnPluginCheck", ET_Ignore, Param_Cell);
	g_esGeneral.g_gfPluginEndForward = new GlobalForward("MT_OnPluginEnd", ET_Ignore);
	g_esGeneral.g_gfPostTankSpawnForward = new GlobalForward("MT_OnPostTankSpawn", ET_Ignore, Param_Cell);
	g_esGeneral.g_gfResetTimersForward = new GlobalForward("MT_OnResetTimers", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfRewardSurvivorForward = new GlobalForward("MT_OnRewardSurvivor", ET_Event, Param_Cell, Param_Cell, Param_CellByRef, Param_Cell, Param_FloatByRef, Param_Cell);
	g_esGeneral.g_gfRockBreakForward = new GlobalForward("MT_OnRockBreak", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfRockThrowForward = new GlobalForward("MT_OnRockThrow", ET_Ignore, Param_Cell, Param_Cell);
	g_esGeneral.g_gfSettingsCachedForward = new GlobalForward("MT_OnSettingsCached", ET_Ignore, Param_Cell, Param_Cell, Param_Cell);
	g_esGeneral.g_gfToggleSurvivorPassiveForward = new GlobalForward("MT_OnToggleSurvivorPassive", ET_Event, Param_Cell, Param_CellByRef, Param_Cell, Param_Cell, Param_Cell);
	g_esGeneral.g_gfTypeChosenForward = new GlobalForward("MT_OnTypeChosen", ET_Event, Param_CellByRef, Param_Cell);
#if defined _updater_included
	g_esGeneral.g_gfPluginUpdateForward = new GlobalForward("MT_OnPluginUpdate", ET_Ignore);
#endif
}

void vRegisterNatives()
{
	CreateNative("MT_CanTypeSpawn", aNative_CanTypeSpawn);
	CreateNative("MT_DeafenPlayer", aNative_DeafenPlayer);
	CreateNative("MT_DetonateTankRock", aNative_DetonateTankRock);
	CreateNative("MT_DoesSurvivorHavePassiveType", aNative_DoesSurvivorHavePassiveType);
	CreateNative("MT_DoesSurvivorHaveRewardType", aNative_DoesSurvivorHaveRewardType);
	CreateNative("MT_DoesTypeRequireHumans", aNative_DoesTypeRequireHumans);
	CreateNative("MT_GetAccessFlags", aNative_GetAccessFlags);
	CreateNative("MT_GetCombinationSetting", aNative_GetCombinationSetting);
	CreateNative("MT_GetConfigColors", aNative_GetConfigColors);
	CreateNative("MT_GetCurrentFinaleWave", aNative_GetCurrentFinaleWave);
	CreateNative("MT_GetGlowRange", aNative_GetGlowRange);
	CreateNative("MT_GetGlowType", aNative_GetGlowType);
	CreateNative("MT_GetGraphicsLevel", aNative_GetGraphicsLevel);
	CreateNative("MT_GetImmunityFlags", aNative_GetImmunityFlags);
	CreateNative("MT_GetMaxType", aNative_GetMaxType);
	CreateNative("MT_GetMinType", aNative_GetMinType);
	CreateNative("MT_GetPropColors", aNative_GetPropColors);
	CreateNative("MT_GetRecordedTankType", aNative_GetRecordedTankType);
	CreateNative("MT_GetRunSpeed", aNative_GetRunSpeed);
	CreateNative("MT_GetScaledDamage", aNative_GetScaledDamage);
	CreateNative("MT_GetSpawnType", aNative_GetSpawnType);
	CreateNative("MT_GetTankColors", aNative_GetTankColors);
	CreateNative("MT_GetTankName", aNative_GetTankName);
	CreateNative("MT_GetTankType", aNative_GetTankType);
	CreateNative("MT_HasAdminAccess", aNative_HasAdminAccess);
	CreateNative("MT_HasChanceToSpawn", aNative_HasChanceToSpawn);
	CreateNative("MT_HideEntity", aNative_HideEntity);
	CreateNative("MT_IsAdminImmune", aNative_IsAdminImmune);
	CreateNative("MT_IsCorePluginEnabled", aNative_IsCorePluginEnabled);
	CreateNative("MT_IsCustomTankSupported", aNative_IsCustomTankSupported);
	CreateNative("MT_IsFinaleType", aNative_IsFinaleType);
	CreateNative("MT_IsGlowEnabled", aNative_IsGlowEnabled);
	CreateNative("MT_IsGlowFlashing", aNative_IsGlowFlashing);
	CreateNative("MT_IsNonFinaleType", aNative_IsNonFinaleType);
	CreateNative("MT_IsTankIdle", aNative_IsTankIdle);
	CreateNative("MT_IsTankSupported", aNative_IsTankSupported);
	CreateNative("MT_IsTypeEnabled", aNative_IsTypeEnabled);
	CreateNative("MT_LogMessage", aNative_LogMessage);
	CreateNative("MT_RespawnSurvivor", aNative_RespawnSurvivor);
	CreateNative("MT_SetTankType", aNative_SetTankType);
	CreateNative("MT_ShoveBySurvivor", aNative_ShoveBySurvivor);
	CreateNative("MT_SpawnTank", aNative_SpawnTank);
	CreateNative("MT_StaggerPlayer", aNative_StaggerPlayer);
	CreateNative("MT_TankMaxHealth", aNative_TankMaxHealth);
	CreateNative("MT_UnvomitPlayer", aNative_UnvomitPlayer);
	CreateNative("MT_VomitPlayer", aNative_VomitPlayer);
}

/**
 * Native callbacks
 **/

any aNative_CanTypeSpawn(Handle plugin, int numParams)
{
	int iType = iClamp(GetNativeCell(1), 1, MT_MAXTYPES), iSpecType = iClamp(GetNativeCell(2), 1, 8);
	iType = g_esTank[iType].g_iRecordedType[0];
	return (bIsSpawnEnabled(iType, iSpecType) && bCanTypeSpawn(iType, iSpecType) && bIsRightGame(iType, iSpecType));
}

any aNative_DeafenPlayer(Handle plugin, int numParams)
{
	int iPlayer = GetNativeCell(1);
	if (bIsValidClient(iPlayer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && g_esGeneral.g_hSDKDeafen != null)
	{
		SDKCall(g_esGeneral.g_hSDKDeafen, iPlayer, 1.0, 0.0, 0.01);
	}

	return 0;
}

any aNative_DetonateTankRock(Handle plugin, int numParams)
{
	int iRock = GetNativeCell(1);
	if (bIsValidEntity(iRock))
	{
		RequestFrame(vDetonateRockFrame, EntIndexToEntRef(iRock));
	}

	return 0;
}

any aNative_DoesSurvivorHavePassiveType(Handle plugin, int numParams)
{
	int iSurvivor = GetNativeCell(1), iType = GetNativeCell(2);
	if (bIsSurvivor(iSurvivor) && iType > 0)
	{
		if (iType & MT_PASSIVE_HEALTH)
		{
			return (bIsDeveloper(iSurvivor, 6) || bIsDeveloper(iSurvivor, 7) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_SPEEDBOOST)
		{
			return (bIsDeveloper(iSurvivor, 5) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_DAMAGEBOOST)
		{
			return (bIsDeveloper(iSurvivor, 4) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_ATTACKBOOST)
		{
			return (bIsDeveloper(iSurvivor, 6) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_AMMO)
		{
			return (bIsDeveloper(iSurvivor, 4) || bIsDeveloper(iSurvivor, 6) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_ITEM)
		{
			return !!(g_esShooter[iSurvivor].g_iTotalPassives & iType);
		}
		else if (iType & MT_PASSIVE_GODMODE)
		{
			return (bIsDeveloper(iSurvivor, 11) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_REFILL)
		{
			return !!(g_esShooter[iSurvivor].g_iTotalPassives & iType);
		}
		else if (iType & MT_PASSIVE_RESPAWN)
		{
			return (bIsDeveloper(iSurvivor, 10) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else if (iType & MT_PASSIVE_INFAMMO)
		{
			return (bIsDeveloper(iSurvivor, 0) || bIsDeveloper(iSurvivor, 7) || !!(g_esShooter[iSurvivor].g_iTotalPassives & iType));
		}
		else
		{
			for (int iBit = 10; iBit <= 21; iBit++)
			{
				if (iType & (1 << iBit) && bIsDeveloper(iSurvivor, (iBit - 10)))
				{
					return true;
				}
			}
		}
	}

	return false;
}

any aNative_DoesSurvivorHaveRewardType(Handle plugin, int numParams)
{
	int iSurvivor = GetNativeCell(1), iType = GetNativeCell(2);
	if (bIsSurvivor(iSurvivor) && iType > 0)
	{
		if (iType & MT_REWARD_HEALTH)
		{
			return (bIsDeveloper(iSurvivor, 6) || bIsDeveloper(iSurvivor, 7) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_SPEEDBOOST)
		{
			return (bIsDeveloper(iSurvivor, 5) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_DAMAGEBOOST)
		{
			return (bIsDeveloper(iSurvivor, 4) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_ATTACKBOOST)
		{
			return (bIsDeveloper(iSurvivor, 6) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_AMMO)
		{
			return (bIsDeveloper(iSurvivor, 4) || bIsDeveloper(iSurvivor, 6) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_ITEM)
		{
			return !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType);
		}
		else if (iType & MT_REWARD_GODMODE)
		{
			return (bIsDeveloper(iSurvivor, 11) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_REFILL)
		{
			return !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType);
		}
		else if (iType & MT_REWARD_RESPAWN)
		{
			return (bIsDeveloper(iSurvivor, 10) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else if (iType & MT_REWARD_INFAMMO)
		{
			return (bIsDeveloper(iSurvivor, 7) || !!(g_esPlayer[iSurvivor].g_iRewardTypes & iType));
		}
		else
		{
			for (int iBit = 10; iBit <= 21; iBit++)
			{
				if (iType & (1 << iBit) && bIsDeveloper(iSurvivor, (iBit - 10)))
				{
					return true;
				}
			}
		}
	}

	return false;
}

any aNative_DoesTypeRequireHumans(Handle plugin, int numParams)
{
	int iType = iClamp(GetNativeCell(1), 1, MT_MAXTYPES), iTank = GetNativeCell(2);
	return bAreHumansRequired(g_esTank[iType].g_iRecordedType[0], g_esPlayer[iTank].g_iInfectedType);
}

any aNative_GetAccessFlags(Handle plugin, int numParams)
{
	int iMode = iClamp(GetNativeCell(1), 1, 4), iType = iClamp(GetNativeCell(2), 1, MT_MAXTYPES), iAdmin = GetNativeCell(3);
	iType = g_esTank[iType].g_iRecordedType[0];

	switch (iMode)
	{
		case 1: return g_esGeneral.g_iAccessFlags;
		case 2: return g_esTank[iType].g_iAccessFlags;
		case 3: return (bIsValidClient(iAdmin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esPlayer[iAdmin].g_iAccessFlags : 0);
		case 4: return (bIsValidClient(iAdmin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esAdmin[iType].g_iAccessFlags[iAdmin] : 0);
	}

	return 0;
}

any aNative_GetCombinationSetting(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = iClamp(GetNativeCell(2), 1, 16), iPos = iClamp(GetNativeCell(3), 0, 9);
	if (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		switch (iType)
		{
			case 1: return g_esTankCache[iTank].g_flComboChance[iPos];
			case 2: return float(g_esTankCache[iTank].g_iComboCooldown[iPos]);
			case 3: return g_esTankCache[iTank].g_flComboDamage[iPos];
			case 4: return g_esTankCache[iTank].g_flComboDelay[iPos];
			case 5: return g_esTankCache[iTank].g_flComboDuration[iPos];
			case 6: return g_esTankCache[iTank].g_flComboInterval[iPos];
			case 7: return g_esTankCache[iTank].g_flComboMinRadius[iPos];
			case 8: return g_esTankCache[iTank].g_flComboMaxRadius[iPos];
			case 9: return g_esTankCache[iTank].g_flComboRange[iPos];
			case 10: return g_esTankCache[iTank].g_flComboRangeChance[iPos];
			case 11: return float(g_esTankCache[iTank].g_iComboRangeCooldown[iPos]);
			case 12: return g_esTankCache[iTank].g_flComboDeathChance[iPos];
			case 13: return g_esTankCache[iTank].g_flComboDeathRange[iPos];
			case 14: return g_esTankCache[iTank].g_flComboRockChance[iPos];
			case 15: return float(g_esTankCache[iTank].g_iComboRockCooldown[iPos]);
			case 16: return g_esTankCache[iTank].g_flComboSpeed[iPos];
		}
	}

	return 0.0;
}

any aNative_GetConfigColors(Handle plugin, int numParams)
{
	int iSize = GetNativeCell(2);
	char[] sColor = new char[iSize], sValue = new char[iSize];
	GetNativeString(3, sColor, iSize);
	vGetConfigColors(sValue, iSize, sColor);
	SetNativeString(1, sValue, iSize);

	return 0;
}

any aNative_GetCurrentFinaleWave(Handle plugin, int numParams)
{
	return g_esGeneral.g_iTankWave;
}

any aNative_GetGlowRange(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	bool bMode = GetNativeCell(2);
	if (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		switch (bMode)
		{
			case true: return g_esTankCache[iTank].g_iGlowMaxRange;
			case false: return g_esTankCache[iTank].g_iGlowMinRange;
		}
	}

	return 0;
}

any aNative_GetGlowType(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) ? g_esTankCache[iTank].g_iGlowType : 0);
}

any aNative_GetGraphicsLevel(Handle plugin, int numParams)
{
	return ((g_esGeneral.g_iGraphicsLevel > 0) ? g_esGeneral.g_iGraphicsLevel : g_esGeneral.g_cvMTGraphicsLevel.IntValue);
}

any aNative_GetImmunityFlags(Handle plugin, int numParams)
{
	int iMode = iClamp(GetNativeCell(1), 1, 4), iType = iClamp(GetNativeCell(2), 1, MT_MAXTYPES), iAdmin = GetNativeCell(3);
	iType = g_esTank[iType].g_iRecordedType[0];

	switch (iMode)
	{
		case 1: return g_esGeneral.g_iImmunityFlags;
		case 2: return g_esTank[iType].g_iImmunityFlags;
		case 3: return (bIsValidClient(iAdmin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esPlayer[iAdmin].g_iImmunityFlags : 0);
		case 4: return (bIsValidClient(iAdmin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esAdmin[iType].g_iImmunityFlags[iAdmin] : 0);
	}

	return 0;
}

any aNative_GetMaxType(Handle plugin, int numParams)
{
	return g_esGeneral.g_iMaxType;
}

any aNative_GetMinType(Handle plugin, int numParams)
{
	return g_esGeneral.g_iMinType;
}

any aNative_GetPropColors(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = iClamp(GetNativeCell(2), 1, 8);
	if (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		bool bRainbow[6] = {false, false, false, false, false, false};
		bRainbow[0] = StrEqual(g_esTankCache[iTank].g_sOzTankColor, "rainbow", false);
		bRainbow[1] = StrEqual(g_esTankCache[iTank].g_sFlameColor, "rainbow", false);
		bRainbow[2] = StrEqual(g_esTankCache[iTank].g_sRockColor, "rainbow", false);
		bRainbow[3] = StrEqual(g_esTankCache[iTank].g_sTireColor, "rainbow", false);
		bRainbow[4] = StrEqual(g_esTankCache[iTank].g_sPropTankColor, "rainbow", false);
		bRainbow[5] = StrEqual(g_esTankCache[iTank].g_sFlashlightColor, "rainbow", false);

		int iColor[4] = {0, 0, 0, 0};
		for (int iPos = 0; iPos < (sizeof iColor); iPos++)
		{
			switch (iType)
			{
				case 1: iGetRandomColor(g_esTankCache[iTank].g_iLightColor[iPos]);
				case 2: iColor[iPos] = bRainbow[iType - 2] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iOzTankColor[iPos]);
				case 3: iColor[iPos] = bRainbow[iType - 2] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iFlameColor[iPos]);
				case 4: iColor[iPos] = bRainbow[iType - 2] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iRockColor[iPos]);
				case 5: iColor[iPos] = bRainbow[iType - 2] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iTireColor[iPos]);
				case 6: iColor[iPos] = bRainbow[iType - 2] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iPropTankColor[iPos]);
				case 7: iColor[iPos] = bRainbow[iType - 2] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iFlashlightColor[iPos]);
				case 8: iGetRandomColor(g_esTankCache[iTank].g_iCrownColor[iPos]);
			}

			SetNativeCellRef((iPos + 3), iColor[iPos]);
		}
	}

	return 0;
}

any aNative_GetRecordedTankType(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = GetNativeCell(2);
	iType = (iType > 0) ? g_esTank[iType].g_iRecordedType[0] : g_esPlayer[iTank].g_iTankType;
	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) ? iType : 0);
}

any aNative_GetRunSpeed(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	if (bIsInfected(iTank))
	{
		return ((g_esTankCache[iTank].g_flRunSpeed > 0.0) ? g_esTankCache[iTank].g_flRunSpeed : 1.0);
	}

	return 0.0;
}

any aNative_GetScaledDamage(Handle plugin, int numParams)
{
	return flGetScaledDamage(GetNativeCell(1));
}

any aNative_GetSpawnType(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = GetNativeCell(2), iSpecType = GetNativeCell(3);
	iType = g_esTank[iType].g_iRecordedType[0];
	int iSetting = (iSpecType > 0 && iSpecType != 8) ? iGetSettingValue(true, true, g_esSpecial[iType].g_iSpawnType, g_esTank[iType].g_iSpawnType, 1) : g_esTank[iType].g_iSpawnType,
		iSpawnType = (iType > 0) ? iSetting : g_esTankCache[iTank].g_iSpawnType;

	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) ? iSpawnType : 0);
}

any aNative_GetTankColors(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = iClamp(GetNativeCell(2), 1, 2);
	if (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		bool bRainbow[2] = {false, false};
		bRainbow[0] = StrEqual(g_esTankCache[iTank].g_sSkinColor, "rainbow", false);
		bRainbow[1] = StrEqual(g_esTankCache[iTank].g_sGlowColor, "rainbow", false);

		int iColor[4] = {0, 0, 0, 0};
		for (int iPos = 0; iPos < (sizeof iColor); iPos++)
		{
			switch (iType)
			{
				case 1: iColor[iPos] = (bRainbow[iType - 1] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iSkinColor[iPos]));
				case 2:
				{
					if (iPos < (sizeof esTankCache::g_iGlowColor))
					{
						iColor[iPos] = (bRainbow[iType - 1] ? -2 : iGetRandomColor(g_esTankCache[iTank].g_iGlowColor[iPos]));
					}
				}
			}

			SetNativeCellRef((iPos + 3), iColor[iPos]);
		}
	}

	return 0;
}

any aNative_GetTankName(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	if (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		char sTankName[64];
		vGetTankTranslatedName(sTankName, sizeof sTankName, iTank);
		SetNativeString(2, sTankName, sizeof sTankName);
	}

	return 0;
}

any aNative_GetTankType(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = GetNativeCell(2);
	iType = (iType > 0) ? iType : g_esPlayer[iTank].g_iTankType;
	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) ? g_esTank[iType].g_iRealType[0] : 0);
}

any aNative_HasAdminAccess(Handle plugin, int numParams)
{
	int iAdmin = GetNativeCell(1);
	return (bIsSpecialSupported(iAdmin, MT_CHECK_INDEX|MT_CHECK_INGAME) && bHasCoreAdminAccess(iAdmin));
}

any aNative_HasChanceToSpawn(Handle plugin, int numParams)
{
	int iType = iClamp(GetNativeCell(1), 1, MT_MAXTYPES), iTank = GetNativeCell(2);
	iType = g_esTank[iType].g_iRecordedType[0];
	return (flGetTypeChance(iTank, iType) > 0.0);
}

any aNative_HideEntity(Handle plugin, int numParams)
{
	int iEntity = GetNativeCell(1);
	bool bMode = GetNativeCell(2);
	if (bIsValidEntity(iEntity))
	{
		switch (bMode)
		{
			case true: SDKHook(iEntity, SDKHook_SetTransmit, OnPropSetTransmit);
			case false: SDKUnhook(iEntity, SDKHook_SetTransmit, OnPropSetTransmit);
		}
	}

	return 0;
}

any aNative_IsAdminImmune(Handle plugin, int numParams)
{
	int iSurvivor = GetNativeCell(1), iTank = GetNativeCell(2);
	return (bIsHumanSurvivor(iSurvivor) && bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsCoreAdminImmune(iSurvivor, iTank));
}

any aNative_IsCorePluginEnabled(Handle plugin, int numParams)
{
	return g_esGeneral.g_bPluginEnabled;
}

any aNative_IsCustomTankSupported(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsCustomTankSupported(iTank));
}

any aNative_IsFinaleType(Handle plugin, int numParams)
{
	int iType = iClamp(GetNativeCell(1), 1, MT_MAXTYPES), iTank = GetNativeCell(2);
	iType = g_esTank[iType].g_iRecordedType[0];
	return (iGetFinaleType(iType, g_esPlayer[iTank].g_iInfectedType) == 1);
}

any aNative_IsGlowEnabled(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esTankCache[iTank].g_iGlowEnabled == 1);
}

any aNative_IsGlowFlashing(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	return (bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esTankCache[iTank].g_iGlowFlashing == 1);
}

any aNative_IsNonFinaleType(Handle plugin, int numParams)
{
	int iType = iClamp(GetNativeCell(1), 1, MT_MAXTYPES), iTank = GetNativeCell(2);
	iType = g_esTank[iType].g_iRecordedType[0];
	return (iGetFinaleType(iType, g_esPlayer[iTank].g_iInfectedType) == 2);
}

any aNative_IsTankIdle(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = iClamp(GetNativeCell(2), 0, 2);
	return (bIsInfected(iTank) && bIsInfectedIdle(iTank, iType));
}

any aNative_IsTankSupported(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1);
	return (bIsInfected(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsSpecialSupported(iTank, GetNativeCell(2)));
}

any aNative_IsTypeEnabled(Handle plugin, int numParams)
{
	int iType = iClamp(GetNativeCell(1), 1, MT_MAXTYPES), iTank = GetNativeCell(2);
	iType = g_esTank[iType].g_iRecordedType[0];
	bool bCheck = bIsTank(iTank) ? bIsTankEnabled(iType) : (bIsInfectedEnabled(iTank) || bIsSpecialEnabled(iType));
	return (bCheck && bIsTypeAvailable(iType, iTank));
}

any aNative_LogMessage(Handle plugin, int numParams)
{
	int iType = GetNativeCell(1);
	if (g_esGeneral.g_iLogMessages > 0 && iType > 0 && (g_esGeneral.g_iLogMessages & iType))
	{
		char sBuffer[PLATFORM_MAX_PATH];
		int iSize = 0, iResult = FormatNativeString(0, 2, 3, sizeof sBuffer, iSize, sBuffer);
		if (iResult == SP_ERROR_NONE)
		{
			vLogMessage(iType, _, sBuffer);
		}
	}

	return 0;
}

any aNative_RespawnSurvivor(Handle plugin, int numParams)
{
	int iSurvivor = GetNativeCell(1);
	if (bIsSurvivor(iSurvivor, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esGeneral.g_hSDKRoundRespawn != null)
	{
		vRespawnSurvivor(iSurvivor);
	}

	return 0;
}

any aNative_SetTankType(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = iClamp(GetNativeCell(2), 1, MT_MAXTYPES);
	bool bMode = GetNativeCell(3);
	iType = g_esTank[iType].g_iRecordedType[0];
	if (bIsInfected(iTank))
	{
		switch (bMode)
		{
			case true:
			{
				vSetTankColor(iTank, iType, .revert = (g_esPlayer[iTank].g_iTankType == iType));
				vTankSpawn(iTank, 5);
			}
			case false:
			{
				vResetTank3(iTank);
				vChangeTypeForward(iTank, g_esPlayer[iTank].g_iTankType, iType, (g_esPlayer[iTank].g_iTankType == iType));

				g_esPlayer[iTank].g_iOldTankType = g_esPlayer[iTank].g_iTankType;
				g_esPlayer[iTank].g_iTankType = iType;

				vCacheTankSettings(iTank);
			}
		}
	}

	return 0;
}

any aNative_ShoveBySurvivor(Handle plugin, int numParams)
{
	int iSpecial = GetNativeCell(1), iSurvivor = GetNativeCell(2);
	float flDirection[3];
	GetNativeArray(3, flDirection, sizeof flDirection);
	if (bIsInfected(iSpecial) && bIsSurvivor(iSurvivor) && g_esGeneral.g_hSDKShovedBySurvivor != null)
	{
		SDKCall(g_esGeneral.g_hSDKShovedBySurvivor, iSpecial, iSurvivor, flDirection);
	}

	return 0;
}

any aNative_SpawnTank(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iType = iClamp(GetNativeCell(2), 1, MT_MAXTYPES), iSpecType = GetNativeCell(3);
	if (bIsInfected(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		iSpecType = (iSpecType > 0) ? iClamp(iSpecType, 1, 8) : g_esPlayer[iTank].g_iInfectedType;
		vQueueTank(iTank, iSpecType, iType, .log = false);
	}

	return 0;
}

any aNative_StaggerPlayer(Handle plugin, int numParams)
{
	int iPlayer = GetNativeCell(1), iPusher = GetNativeCell(2);
	float flDirection[3];
	GetNativeArray(3, flDirection, sizeof flDirection);
	if (bIsValidClient(iPlayer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && bIsValidClient(iPusher, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && g_esGeneral.g_hSDKStagger != null)
	{
		if (IsNativeParamNullVector(3))
		{
			GetClientAbsOrigin(iPusher, flDirection);
		}

		SDKCall(g_esGeneral.g_hSDKStagger, iPlayer, iPusher, flDirection);
	}

	return 0;
}

any aNative_TankMaxHealth(Handle plugin, int numParams)
{
	int iTank = GetNativeCell(1), iMode = iClamp(GetNativeCell(2), 1, 3), iNewHealth = GetNativeCell(3);
	if (bIsInfected(iTank))
	{
		switch (iMode)
		{
			case 1: return g_esPlayer[iTank].g_iSpecialMaxHealth;
			case 2: return GetEntProp(iTank, Prop_Data, "m_iMaxHealth");
			case 3: g_esPlayer[iTank].g_iSpecialMaxHealth = iNewHealth;
			case 4:
			{
				SetEntProp(iTank, Prop_Data, "m_iMaxHealth", iNewHealth);

				g_esPlayer[iTank].g_iSpecialMaxHealth = GetEntProp(iTank, Prop_Data, "m_iMaxHealth");
			}
		}
	}

	return 0;
}

any aNative_UnvomitPlayer(Handle plugin, int numParams)
{
	int iPlayer = GetNativeCell(1);
	if (bIsValidClient(iPlayer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && GetClientTeam(iPlayer) > 1 && g_esPlayer[iPlayer].g_bVomited)
	{
		vUnvomitPlayer(iPlayer);
	}

	return 0;
}

any aNative_VomitPlayer(Handle plugin, int numParams)
{
	int iPlayer = GetNativeCell(1), iBoomer = GetNativeCell(2);
	if (bIsValidClient(iPlayer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && GetClientTeam(iPlayer) > 1 && bIsValidClient(iBoomer, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esGeneral.g_hSDKVomitedUpon != null)
	{
		switch (g_bSecondGame)
		{
			case true: SDKCall(g_esGeneral.g_hSDKVomitedUpon, iPlayer, iBoomer, false);
			case false: SDKCall(g_esGeneral.g_hSDKVomitedUpon, iPlayer, iBoomer, false, false);
		}
	}

	return 0;
}

/**
 * Client cookies functions & callbacks
 **/

#if defined _clientprefs_included
public void OnClientCookiesTankCached(int client)
{
	char sColor[16];
	for (int iPos = 0; iPos < (sizeof esGeneral::g_ckMTAdmin); iPos++)
	{
		g_esGeneral.g_ckMTAdmin[iPos].Get(client, sColor, sizeof sColor);
		if (sColor[0] != '\0')
		{
			switch (iPos)
			{
				case 0: g_esDeveloper[client].g_iDevAccess = (g_esDeveloper[client].g_iDevAccess < 2) ? StringToInt(sColor) : g_esDeveloper[client].g_iDevAccess;
				case 1: g_esDeveloper[client].g_iDevParticle = StringToInt(sColor);
				case 2: strcopy(g_esDeveloper[client].g_sDevGlowOutline, sizeof esDeveloper::g_sDevGlowOutline, sColor);
				case 3: strcopy(g_esDeveloper[client].g_sDevFlashlight, sizeof esDeveloper::g_sDevFlashlight, sColor);
				case 4: strcopy(g_esDeveloper[client].g_sDevSkinColor, sizeof esDeveloper::g_sDevSkinColor, sColor);
				case 5: g_esDeveloper[client].g_iDevVoicePitch = StringToInt(sColor);
			}
		}
	}

	char sValue[4];
	g_esGeneral.g_ckMTPrefs.Get(client, sValue, sizeof sValue);
	if (sValue[0] != '\0')
	{
		g_esPlayer[client].g_iRewardVisuals = StringToInt(sValue);
		g_esPlayer[client].g_bApplyVisuals[0] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_SCREEN);
		g_esPlayer[client].g_bApplyVisuals[1] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_PARTICLE);
		g_esPlayer[client].g_bApplyVisuals[2] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_VOICELINE);
		g_esPlayer[client].g_bApplyVisuals[3] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_VOICEPITCH);
		g_esPlayer[client].g_bApplyVisuals[4] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_LIGHT);
		g_esPlayer[client].g_bApplyVisuals[5] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_BODY);
		g_esPlayer[client].g_bApplyVisuals[6] = !!(g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_GLOW);
	}
}
#endif

void vDefaultCookieSettings(int client)
{
	g_esPlayer[client].g_iRewardVisuals = MT_VISUAL_SCREEN|MT_VISUAL_PARTICLE|MT_VISUAL_VOICELINE|MT_VISUAL_VOICEPITCH|MT_VISUAL_LIGHT|MT_VISUAL_BODY|MT_VISUAL_GLOW;

	for (int iPos = 0; iPos < (sizeof esPlayer::g_bApplyVisuals); iPos++)
	{
		g_esPlayer[client].g_bApplyVisuals[iPos] = true;
	}
}

/**
 * Command functions & callbacks
 **/

void vListAbilities(int admin)
{
	bool bHuman = bIsValidClient(admin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT);
	if (g_esGeneral.g_alPlugins != null)
	{
		int iLength = g_esGeneral.g_alPlugins.Length, iListSize = (iLength > 0) ? iLength : 0;
		if (iListSize > 0)
		{
			char sFilename[PLATFORM_MAX_PATH];
			for (int iPos = 0; iPos < iListSize; iPos++)
			{
				g_esGeneral.g_alPlugins.GetString(iPos, sFilename, sizeof sFilename);

				switch (bHuman)
				{
					case true: MT_PrintToChat(admin, "%s %t", MT_TAG3, "AbilityInstalled", sFilename);
					case false: MT_PrintToServer("%s %T", MT_TAG, "AbilityInstalled2", LANG_SERVER, sFilename);
				}
			}
		}
		else
		{
			switch (bHuman)
			{
				case true: MT_PrintToChat(admin, "%s %t", MT_TAG2, "NoAbilities");
				case false: MT_PrintToServer("%s %T", MT_TAG, "NoAbilities", LANG_SERVER);
			}
		}
	}
	else
	{
		switch (bHuman)
		{
			case true: MT_PrintToChat(admin, "%s %t", MT_TAG2, "NoAbilities");
			case false: MT_PrintToServer("%s %T", MT_TAG, "NoAbilities", LANG_SERVER);
		}
	}
}

void vRegisterCommands()
{
	vRegisterCommandListeners();

	RegAdminCmd("sm_mt_admin", cmdMTAdmin, ADMFLAG_ROOT, "View the Mutant Tanks admin panel.");
	RegAdminCmd("sm_mt_config", cmdMTConfig, ADMFLAG_ROOT, "View a section of the config file.");
	RegConsoleCmd("sm_mt_dev", cmdMTDev, "Used only by and for the developer.");
	RegAdminCmd("sm_mt_edit", cmdMTEdit, ADMFLAG_ROOT, "Edit a setting in the config file.");
	RegConsoleCmd("sm_mt_info", cmdMTInfo, "View information about Mutant Tanks.");
	RegAdminCmd("sm_mt_list", cmdMTList, ADMFLAG_ROOT, "View a list of installed abilities.");
	RegConsoleCmd("sm_mt_prefs", cmdMTPrefs, "Set your Mutant Tanks preferences.");
	RegAdminCmd("sm_mt_reload", cmdMTReload, ADMFLAG_ROOT, "Reload the config file.");
	RegAdminCmd("sm_mt_version", cmdMTVersion, ADMFLAG_ROOT, "Find out the current version of Mutant Tanks.");
	RegAdminCmd("sm_tank", cmdTank, ADMFLAG_ROOT, "Spawn a Mutant Tank.");
	RegAdminCmd("sm_mt_tank", cmdTank, ADMFLAG_ROOT, "Spawn a Mutant Tank.");
	RegAdminCmd("sm_smoker", cmdSmoker, ADMFLAG_ROOT, "Spawn a Mutant Smoker.");
	RegAdminCmd("sm_mt_smoker", cmdSmoker, ADMFLAG_ROOT, "Spawn a Mutant Smoker.");
	RegAdminCmd("sm_boomer", cmdBoomer, ADMFLAG_ROOT, "Spawn a Mutant Boomer.");
	RegAdminCmd("sm_mt_boomer", cmdBoomer, ADMFLAG_ROOT, "Spawn a Mutant Boomer.");
	RegAdminCmd("sm_hunter", cmdHunter, ADMFLAG_ROOT, "Spawn a Mutant Hunter.");
	RegAdminCmd("sm_mt_hunter", cmdHunter, ADMFLAG_ROOT, "Spawn a Mutant Hunter.");
	RegAdminCmd("sm_spitter", cmdSpitter, ADMFLAG_ROOT, "Spawn a Mutant Spitter.");
	RegAdminCmd("sm_mt_spitter", cmdSpitter, ADMFLAG_ROOT, "Spawn a Mutant Spitter.");
	RegAdminCmd("sm_jockey", cmdJockey, ADMFLAG_ROOT, "Spawn a Mutant Jockey.");
	RegAdminCmd("sm_mt_jockey", cmdJockey, ADMFLAG_ROOT, "Spawn a Mutant Jockey.");
	RegAdminCmd("sm_charger", cmdCharger, ADMFLAG_ROOT, "Spawn a Mutant Charger.");
	RegAdminCmd("sm_mt_charger", cmdCharger, ADMFLAG_ROOT, "Spawn a Mutant Charger.");
	RegConsoleCmd("sm_mtank", cmdMutantTank, "Choose a Mutant Tank.");
	RegConsoleCmd("sm_mutanttank", cmdMutantTank, "Choose a Mutant Tank.");
	RegConsoleCmd("sm_msmoker", cmdMutantSmoker, "Choose a Mutant Smoker.");
	RegConsoleCmd("sm_mutantsmoker", cmdMutantSmoker, "Choose a Mutant Smoker.");
	RegConsoleCmd("sm_mboomer", cmdMutantBoomer, "Choose a Mutant Boomer.");
	RegConsoleCmd("sm_mutantboomer", cmdMutantBoomer, "Choose a Mutant Boomer.");
	RegConsoleCmd("sm_mhunter", cmdMutantHunter, "Choose a Mutant Hunter.");
	RegConsoleCmd("sm_mutanthunter", cmdMutantHunter, "Choose a Mutant Hunter.");
	RegConsoleCmd("sm_mspitter", cmdMutantSpitter, "Choose a Mutant Spitter.");
	RegConsoleCmd("sm_mutantspitter", cmdMutantSpitter, "Choose a Mutant Spitter.");
	RegConsoleCmd("sm_mjockey", cmdMutantJockey, "Choose a Mutant Jockey.");
	RegConsoleCmd("sm_mutantjockey", cmdMutantJockey, "Choose a Mutant Jockey.");
	RegConsoleCmd("sm_mcharger", cmdMutantCharger, "Choose a Mutant Charger.");
	RegConsoleCmd("sm_mutantcharger", cmdMutantCharger, "Choose a Mutant Charger.");
}

void vRegisterCommandListeners()
{
	AddCommandListener(cmdMTCommandListener, "give");
	AddCommandListener(cmdMTCommandListener2, "go_away_from_keyboard");
	AddCommandListener(cmdMTCommandListener2, "vocalize");
	AddCommandListener(cmdMTCommandListener3, "sm_mt_dev");
	AddCommandListener(cmdMTCommandListener4);
}

void vReloadConfig(int admin)
{
	vCheckConfig(true);

	switch (bIsValidClient(admin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		case true: MT_PrintToChat(admin, "%s %t", MT_TAG3, "ReloadedConfig");
		case false: MT_PrintToServer("%s %T", MT_TAG, "ReloadedConfig", LANG_SERVER);
	}
}

void vRemoveCommandListeners()
{
	RemoveCommandListener(cmdMTCommandListener4);
	RemoveCommandListener(cmdMTCommandListener3, "sm_mt_dev");
	RemoveCommandListener(cmdMTCommandListener2, "vocalize");
	RemoveCommandListener(cmdMTCommandListener2, "go_away_from_keyboard");
	RemoveCommandListener(cmdMTCommandListener, "give");
}

Action cmdMTCommandListener(int client, const char[] command, int argc)
{
	if (argc > 0)
	{
		char sArg[7];
		GetCmdArg(1, sArg, sizeof sArg);
		if (StrEqual(sArg, "health"))
		{
			g_esPlayer[client].g_bLastLife[0] = false;
			g_esPlayer[client].g_iReviveCount = 0;

			if (g_esSurvivorCache[client].g_iCarrierCleanse == 1)
			{
				vRemoveInfection(client);
			}
		}
	}

	return Plugin_Continue;
}

Action cmdMTCommandListener2(int client, const char[] command, int argc)
{
	if (g_esGeneral.g_bPluginEnabled && !bIsSurvivor(client))
	{
		vLogMessage(MT_LOG_SERVER, _, "%s The \"%s\" command was intercepted to prevent errors.", MT_TAG, command);

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action cmdMTCommandListener3(int client, const char[] command, int argc)
{
	if (!bIsValidClient(client) || !bIsDeveloper(client, .real = true) || CheckCommandAccess(client, "sm_mt_dev", ADMFLAG_ROOT, false))
	{
		return Plugin_Continue;
	}

	char sCommand[10];
	GetCmdArg(0, sCommand, sizeof sCommand);
	if (StrEqual(sCommand, "sm_mt_dev", false))
	{
		switch (argc)
		{
			case 2:
			{
				char sKeyword[32], sCode[128];
				GetCmdArg(1, sKeyword, sizeof sKeyword);
				GetCmdArg(2, sCode, sizeof sCode);
				vSetupGuest(client, sKeyword, sCode);

				switch (StrContains(sKeyword, "access", false) != -1)
				{
					case true: MT_ReplyToCommand(client, "%s %N{mint}, your current access level for testing has been set to{yellow} %i{mint}.", MT_TAG5, client, g_esDeveloper[client].g_iDevAccess);
					case false: MT_ReplyToCommand(client, "%s Set perk{yellow} %s{mint} to{olive} %s{mint}.", MT_TAG3, sKeyword, sCode);
				}
			}
			default:
			{
				switch (IsVoteInProgress())
				{
					case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
					case false:
					{
						vDeveloperPanel(client);
						vListDeveloperCodes(client);
					}
				}
			}
		}
	}

	return Plugin_Stop;
}

Action cmdMTCommandListener4(int client, const char[] command, int argc)
{
	if (client > 0 || (!g_esGeneral.g_cvMTListenSupport.BoolValue && g_esGeneral.g_iListenSupport <= 0) || GetCmdReplySource() != SM_REPLY_TO_CONSOLE || g_bDedicated)
	{
		return Plugin_Continue;
	}

	if (!strncmp(command, "sm_", 3) && strncmp(command, "sm_mt_", 6) == -1)
	{
		client = iGetListenServerHost(client, g_bDedicated);
		if (bIsValidClient(client) && bIsDeveloper(client, .real = true) && !g_esPlayer[client].g_bIgnoreCmd)
		{
			g_esPlayer[client].g_bIgnoreCmd = true;

			if (argc > 0)
			{
				char sArgs[PLATFORM_MAX_PATH];
				GetCmdArgString(sArgs, sizeof sArgs);
				FakeClientCommand(client, "%s %s", command, sArgs);
			}
			else
			{
				FakeClientCommand(client, command);
			}

			return Plugin_Stop;
		}
		else
		{
			g_esPlayer[client].g_bIgnoreCmd = false;
		}
	}

	return Plugin_Continue;
}

Action cmdMTAdmin(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	switch (args)
	{
		case 1:
		{
			char sValue[2];
			GetCmdArg(1, sValue, sizeof sValue);
			g_esDeveloper[client].g_iDevAccess = iClamp(StringToInt(sValue), 0, 1);

			vSetupPerks(client, (g_esDeveloper[client].g_iDevAccess == 1));
			MT_ReplyToCommand(client, "%s %N{mint}, your visual effects are{yellow} %s{mint}.", MT_TAG5, client, ((g_esDeveloper[client].g_iDevAccess == 1) ? "on" : "off"));
#if defined _clientprefs_included
			g_esGeneral.g_ckMTAdmin[0].Set(client, sValue);
#endif
		}
		case 2:
		{
			char sKeyword[32], sValue[16];
			GetCmdArg(1, sKeyword, sizeof sKeyword);
			GetCmdArg(2, sValue, sizeof sValue);
			MT_ReplyToCommand(client, "%s Set perk{yellow} %s{mint} to{olive} %s{mint}.", MT_TAG3, sKeyword, sValue);
			vSetupAdmin(client, sKeyword, sValue);
		}
		default:
		{
			switch (IsVoteInProgress())
			{
				case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
				case false:
				{
					vAdminPanel(client);
					MT_ReplyToCommand(client, "%s Usage: sm_mt_admin <0: OFF|1: ON|\"keyword\"> \"value\"", MT_TAG2);
				}
			}
		}
	}

	return Plugin_Handled;
}

Action cmdMTConfig(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (args < 1)
	{
		if (bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
		{
			switch (IsVoteInProgress())
			{
				case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
				case false: vPathMenu(client);
			}

			vLogCommand(client, MT_CMD_CONFIG, "%s %N:{default} Opened the config file viewer.", MT_TAG5, client);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the config file viewer.", MT_TAG, client);
		}
		else
		{
			MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");
		}

		return Plugin_Handled;
	}

	char sSection[PLATFORM_MAX_PATH];
	GetCmdArg(1, sSection, sizeof sSection);

	switch (!strncmp(sSection, "Plugin", 6, false) || !strncmp(sSection, MT_CONFIG_SECTION_SETTINGS4, strlen(MT_CONFIG_SECTION_SETTINGS4), false) || !strncmp(sSection, "Surv", 4, false) || !strncmp(sSection, "STEAM_", 6, false) || (!strncmp(sSection, "[U:", 3) && sSection[strlen(sSection) - 1] == ']') || StrEqual(sSection, "all", false) || FindCharInString(sSection, ',') != -1 || FindCharInString(sSection, '-') != -1)
	{
		case true: g_esGeneral.g_sSection = sSection;
		case false:
		{
			int iStartPos = iGetConfigSectionNumber(sSection, sizeof sSection);
			strcopy(g_esGeneral.g_sSection, sizeof esGeneral::g_sSection, sSection[iStartPos]);
			g_esGeneral.g_iSection = StringToInt(sSection[iStartPos]);
		}
	}

	switch (args)
	{
		case 1: BuildPath(Path_SM, g_esGeneral.g_sChosenPath, sizeof esGeneral::g_sChosenPath, "%s%s", MT_CONFIG_FILEPATH, g_esGeneral.g_sConfigPath);
		case 2:
		{
			char sFilename[PLATFORM_MAX_PATH];
			GetCmdArg(2, sFilename, sizeof sFilename);

			switch (StrContains(sFilename, MT_CONFIG_FILE_DETOURS, false) != -1 || StrContains(sFilename, MT_CONFIG_FILE_PATCHES, false) != -1 || StrContains(sFilename, MT_CONFIG_FILE_SIGNATURES, false) != -1)
			{
				case true: BuildPath(Path_SM, g_esGeneral.g_sChosenPath, sizeof esGeneral::g_sChosenPath, "%s%s", MT_CONFIG_FILEPATH, g_esGeneral.g_sConfigPath);
				case false:
				{
					BuildPath(Path_SM, g_esGeneral.g_sChosenPath, sizeof esGeneral::g_sChosenPath, "%s%s.cfg", MT_CONFIG_FILEPATH, sFilename);
					if (!FileExists(g_esGeneral.g_sChosenPath, true))
					{
						BuildPath(Path_SM, g_esGeneral.g_sChosenPath, sizeof esGeneral::g_sChosenPath, "%s%s", MT_CONFIG_FILEPATH, g_esGeneral.g_sConfigPath);
					}
				}
			}
		}
	}

	switch (g_esGeneral.g_bUsedParser)
	{
		case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "StillParsing");
		case false: vParseConfig(client);
	}

	char sFilePath[PLATFORM_MAX_PATH];
	int iIndex = StrContains(g_esGeneral.g_sChosenPath, "mutant_tanks", false);
	FormatEx(sFilePath, sizeof sFilePath, "%s", g_esGeneral.g_sChosenPath[iIndex + 13]);
	vLogCommand(client, MT_CMD_CONFIG, "%s %N:{default} Viewed the{mint} %s{default} section of the{olive} %s{default} config file.", MT_TAG5, client, sSection, sFilePath);
	vLogMessage(MT_LOG_SERVER, _, "%s %N: Viewed the \"%s\" section of the \"%s\" config file.", MT_TAG, client, sSection, sFilePath);

	return Plugin_Handled;
}

Action cmdMTDev(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) || (!bIsDeveloper(client, .real = true) && !CheckCommandAccess(client, "sm_mt_dev", ADMFLAG_ROOT, true)))
	{
		MT_ReplyToCommand(client, "%s This command is only for the developer.", MT_TAG2);

		return Plugin_Handled;
	}

	switch (args)
	{
		case 1:
		{
			char sCode[5];
			GetCmdArg(1, sCode, sizeof sCode);

			switch (StrEqual(sCode, "hud", false))
			{
				case true: vSetupGuest(client, sCode, "0");
				case false:
				{
					vSetupGuest(client, "access", sCode);
					MT_ReplyToCommand(client, "%s %N{mint}, your current access level for testing has been set to{yellow} %i{mint}.", MT_TAG5, client, g_esDeveloper[client].g_iDevAccess);
				}
			}
		}
		case 2:
		{
			char sKeyword[32], sCode[128];
			GetCmdArg(1, sKeyword, sizeof sKeyword);
			GetCmdArg(2, sCode, sizeof sCode);
			vSetupGuest(client, sKeyword, sCode);

			switch (StrContains(sKeyword, "access", false) != -1)
			{
				case true: MT_ReplyToCommand(client, "%s %N{mint}, your current access level for testing has been set to{yellow} %i{mint}.", MT_TAG5, client, g_esDeveloper[client].g_iDevAccess);
				case false: MT_ReplyToCommand(client, "%s Set perk{yellow} %s{mint} to{olive} %s{mint}.", MT_TAG3, sKeyword, sCode);
			}
		}
		case 3:
		{
			if (!bIsDeveloper(client, .real = true))
			{
				MT_ReplyToCommand(client, "%s This command is only for the developer.", MT_TAG2);

				return Plugin_Handled;
			}

			bool tn_is_ml;
			char target[32], target_name[32], sKeyword[32], sCode[128];
			int target_list[MAXPLAYERS], target_count;
			GetCmdArg(1, target, sizeof target);
			GetCmdArg(2, sKeyword, sizeof sKeyword);
			GetCmdArg(3, sCode, sizeof sCode);
			if ((target_count = ProcessTargetString(target, client, target_list, MAXPLAYERS, COMMAND_FILTER_NO_IMMUNITY, target_name, sizeof target_name, tn_is_ml)) <= 0)
			{
				ReplyToTargetError(client, target_count);

				return Plugin_Handled;
			}

			for (int iPlayer = 0; iPlayer < target_count; iPlayer++)
			{
				if (bIsValidClient(target_list[iPlayer]))
				{
					vSetupGuest(target_list[iPlayer], sKeyword, sCode);

					switch (StrContains(sKeyword, "access", false) != -1)
					{
						case true:
						{
							MT_PrintToChat(target_list[iPlayer], "%s %N{mint}, your current access level for testing has been set to{yellow} %i{mint}.", MT_TAG5, target_list[iPlayer], g_esDeveloper[target_list[iPlayer]].g_iDevAccess);
							MT_ReplyToCommand(client, "%s You gave{olive} %N{default} developer access level{yellow} %i{default}.", MT_TAG2, target_list[iPlayer], g_esDeveloper[target_list[iPlayer]].g_iDevAccess);
						}
						case false:
						{
							MT_PrintToChat(target_list[iPlayer], "%s Set perk{yellow} %s{mint} to{olive} %s{mint}.", MT_TAG3, sKeyword, sCode);
							MT_ReplyToCommand(client, "%s You set{olive} %N's{yellow} %s{default} perk to{mint} %s{default}.", MT_TAG2, target_list[iPlayer], sKeyword, sCode);
						}
					}
				}
			}
		}
		case 5:
		{
			char sKeyword[32], sSection[32], sSubSection[32], sKey[32], sValue[128];
			GetCmdArg(1, sKeyword, sizeof sKeyword);
			GetCmdArg(2, sSection, sizeof sSection);
			GetCmdArg(3, sSubSection, sizeof sSubSection);
			GetCmdArg(4, sKey, sizeof sKey);
			GetCmdArg(5, sValue, sizeof sValue);
			vSetupGuest(client, sKeyword, "0", sSection, sSubSection, .key = sKey, .value = sValue);
		}
		case 6:
		{
			char sKeyword[32], sSection[32], sSubSection[32], sSpecSection[32], sKey[32], sValue[128];
			GetCmdArg(1, sKeyword, sizeof sKeyword);
			GetCmdArg(2, sSection, sizeof sSection);
			GetCmdArg(3, sSubSection, sizeof sSubSection);
			GetCmdArg(4, sSpecSection, sizeof sSpecSection);
			GetCmdArg(5, sKey, sizeof sKey);
			GetCmdArg(6, sValue, sizeof sValue);
			vSetupGuest(client, sKeyword, "0", sSection, sSubSection, sSpecSection, sKey, sValue);
		}
		default:
		{
			switch (IsVoteInProgress())
			{
				case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
				case false:
				{
					vDeveloperPanel(client);
					vListDeveloperCodes(client);
					MT_ReplyToCommand(client, "%s Usage: sm_mt_dev \"keyword\" \"value\"", MT_TAG2);
				}
			}
		}
	}

	return Plugin_Handled;
}

Action cmdMTEdit(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);

	switch (args)
	{
		case 4:
		{
			char sSection[32], sSubSection[32], sKey[32], sValue[128];
			GetCmdArg(1, sSection, sizeof sSection);
			GetCmdArg(2, sSubSection, sizeof sSubSection);
			GetCmdArg(3, sKey, sizeof sKey);
			GetCmdArg(4, sValue, sizeof sValue);
			vSetTankSettings(-1, sSection, sSubSection, sKey, sValue);
			vLogCommand(client, MT_CMD_CONFIG, "%s %N:{default} Set the value of{mint} %s/%s/%s{default} to{yellow} %s{default}.", MT_TAG5, client, sSection, sSubSection, sKey, sValue);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Set the value of \"%s/%s/%s\" to \"%s\".", MT_TAG, client, sSection, sSubSection, sKey, sValue);
		}
		case 5:
		{
			char sSection[32], sSubSection[32], sSpecSection[32], sKey[32], sValue[128];
			GetCmdArg(1, sSection, sizeof sSection);
			GetCmdArg(2, sSubSection, sizeof sSubSection);
			GetCmdArg(3, sSpecSection, sizeof sSpecSection);
			GetCmdArg(4, sKey, sizeof sKey);
			GetCmdArg(5, sValue, sizeof sValue);
			vSetSpecialSettings(-1, sSection, sSubSection, sSpecSection, sKey, sValue);
			vLogCommand(client, MT_CMD_CONFIG, "%s %N:{default} Set the value of{mint} %s/%s/%s/%s{default} to{yellow} %s{default}.", MT_TAG5, client, sSection, sSubSection, sSpecSection, sKey, sValue);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Set the value of \"%s/%s/%s/%s\" to \"%s\".", MT_TAG, client, sSection, sSubSection, sSpecSection, sKey, sValue);
		}
		default: MT_ReplyToCommand(client, "%s Usage: sm_mt_edit \"section\" \"subsection\" \"optional: special section\" \"key/setting\" \"value\"", MT_TAG2);
	}

	return Plugin_Handled;
}

Action cmdMTInfo(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	switch (IsVoteInProgress())
	{
		case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
		case false: vInfoMenu(client);
	}

	return Plugin_Handled;
}

Action cmdMTList(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	vListAbilities(client);
	vLogCommand(client, MT_CMD_LIST, "%s %N:{default} Checked the list of abilities installed.", MT_TAG5, client);
	vLogMessage(MT_LOG_SERVER, _, "%s %N: Checked the list of abilities installed.", MT_TAG, client);

	return Plugin_Handled;
}

Action cmdMTPrefs(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if (g_esPlayer[client].g_iPrefsAccess <= 0)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	switch (IsVoteInProgress())
	{
		case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
		case false: vPrefsMenu(client);
	}

	return Plugin_Handled;
}

Action cmdMTReload(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);

	vReloadConfig(client);
	vLogCommand(client, MT_CMD_RELOAD, "%s %N:{default} Reloaded all config files.", MT_TAG5, client);
	vLogMessage(MT_LOG_SERVER, _, "%s %N: Reloaded all config files.", MT_TAG, client);

	return Plugin_Handled;
}

Action cmdMTVersion(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);

	MT_ReplyToCommand(client, "%s %s{yellow} v%s{mint}, by{olive} %s", MT_TAG3, MT_CONFIG_SECTION_MAIN, MT_VERSION, MT_AUTHOR);
	vLogCommand(client, MT_CMD_VERSION, "%s %N:{default} Checked the current version of{mint} %s{default}.", MT_TAG5, client, MT_CONFIG_SECTION_MAIN);
	vLogMessage(MT_LOG_SERVER, _, "%s %N: Checked the current version of %s.", MT_TAG, client, MT_CONFIG_SECTION_MAIN);

	return Plugin_Handled;
}

Action cmdTank(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = 8;
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_MAIN);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_MAIN);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iType = iClamp(StringToInt(sType), -1, g_esGeneral.g_iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > g_esGeneral.g_iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, g_esGeneral.g_iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsTankEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sTankName[64];
			vGetTankTranslatedName(sTankName, sizeof sTankName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledType", sTankName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdSmoker(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = 1;
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_SUB);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_SUB);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsSmokerEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sSmokerName[64];
			vGetTankTranslatedName(sSmokerName, sizeof sSmokerName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeSmoker", sSmokerName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdBoomer(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = 2;
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_SUB2);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_SUB2);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsBoomerEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sBoomerName[64];
			vGetTankTranslatedName(sBoomerName, sizeof sBoomerName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeBoomer", sBoomerName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdHunter(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = 3;
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_SUB3);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_SUB3);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsHunterEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sHunterName[64];
			vGetTankTranslatedName(sHunterName, sizeof sHunterName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeHunter", sHunterName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdSpitter(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled || !g_bSecondGame)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = (g_bSecondGame ? 4 : 2);
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_SUB4);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_SUB4);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsSpitterEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sSpitterName[64];
			vGetTankTranslatedName(sSpitterName, sizeof sSpitterName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeSpitter", sSpitterName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdJockey(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled || !g_bSecondGame)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = (g_bSecondGame ? 5 : 3);
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_SUB5);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_SUB5);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsJockeyEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sJockeyName[64];
			vGetTankTranslatedName(sJockeyName, sizeof sJockeyName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeJockey", sJockeyName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdCharger(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled || !g_bSecondGame)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	int iSpecType = (g_bSecondGame ? 6 : 1);
	if (args < 1)
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		vLogCommand(client, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, client, MT_CONFIG_SECTION_SUB6);
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, client, MT_CONFIG_SECTION_SUB6);

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsChargerEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sChargerName[64];
			vGetTankTranslatedName(sChargerName, sizeof sChargerName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeCharger", sChargerName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantTank(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsTank(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esPlayer[client].g_iPersonalType = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = 8;
	if (args < 1 || !bIsTank(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iType = iClamp(StringToInt(sType), -1, g_esGeneral.g_iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > g_esGeneral.g_iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, g_esGeneral.g_iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsTankEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sTankName[64];
			vGetTankTranslatedName(sTankName, sizeof sTankName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledType", sTankName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantSmoker(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsSmoker(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esTeammate[client].g_iPersonalType[1] = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = 1;
	if (args < 1 || !bIsSmoker(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsSmokerEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sSmokerName[64];
			vGetTankTranslatedName(sSmokerName, sizeof sSmokerName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeSmoker", sSmokerName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantBoomer(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsBoomer(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esTeammate[client].g_iPersonalType[2] = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = 2;
	if (args < 1 || !bIsBoomer(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsBoomerEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sBoomerName[64];
			vGetTankTranslatedName(sBoomerName, sizeof sBoomerName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeBoomer", sBoomerName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantHunter(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsHunter(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esTeammate[client].g_iPersonalType[3] = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = 3;
	if (args < 1 || !bIsHunter(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsHunterEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sHunterName[64];
			vGetTankTranslatedName(sHunterName, sizeof sHunterName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeHunter", sHunterName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantSpitter(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled || !g_bSecondGame)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsSpitter(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esTeammate[client].g_iPersonalType[4] = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = (g_bSecondGame ? 4 : 2);
	if (args < 1 || !bIsSpitter(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsSpitterEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sSpitterName[64];
			vGetTankTranslatedName(sSpitterName, sizeof sSpitterName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeSpitter", sSpitterName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantJockey(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled || !g_bSecondGame)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsJockey(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esTeammate[client].g_iPersonalType[5] = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = (g_bSecondGame ? 5 : 3);
	if (args < 1 || !bIsJockey(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsJockeyEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sJockeyName[64];
			vGetTankTranslatedName(sJockeyName, sizeof sJockeyName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeJockey", sJockeyName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

Action cmdMutantCharger(int client, int args)
{
	client = iGetListenServerHost(client, g_bDedicated);
	if (!bIsValidClient(client, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG, "Command is in-game only");

		return Plugin_Handled;
	}

	if (!g_esGeneral.g_bPluginEnabled || !g_bSecondGame)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG5, "PluginDisabled");

		return Plugin_Handled;
	}

	if ((!bIsCompetitiveMode() || g_esGeneral.g_iSpawnMode == 2 || !bIsInfected(client) || (!bIsCharger(client) && g_esGeneral.g_iSpawnMode < 2)) && !bIsDeveloper(client, .real = true))
	{
		g_esTeammate[client].g_iPersonalType[6] = 0;

		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "NoCommandAccess");

		return Plugin_Handled;
	}

	int iSpecType = (g_bSecondGame ? 6 : 1);
	if (args < 1 || !bIsCharger(client))
	{
		switch (IsVoteInProgress())
		{
			case true: MT_ReplyToCommand(client, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vMutantMenu(client, iSpecType);
		}

		return Plugin_Handled;
	}

	char sCmd[15], sType[33];
	GetCmdArg(0, sCmd, sizeof sCmd);
	GetCmdArg(1, sType, sizeof sType);

	int iMaxType = iGetMaxType(iSpecType), iType = iClamp(StringToInt(sType), -1, iMaxType), iLimit = (StrEqual(sType, "mt_dev_access", false) ? MT_DEV_MAXLEVEL : 32), iAmount = iClamp(GetCmdArgInt(2), 1, iLimit), iMode = iClamp(GetCmdArgInt(3), 0, 1), iBlind = iClamp(GetCmdArgInt(4), 0, 1);
	if ((IsCharNumeric(sType[0]) && (iType < -1 || iType > iMaxType)) || iAmount > iLimit || iMode < 0 || iMode > 1 || iBlind < 0 || iBlind > 1 || args > 4)
	{
		MT_ReplyToCommand(client, "%s %t", MT_TAG2, "CommandUsage", sCmd, -1, iMaxType);

		return Plugin_Handled;
	}

	if (iType > 0 && IsCharNumeric(sType[0]))
	{
		int iRealType = g_esTank[iType].g_iRecordedType[0];
		if (!bIsChargerEnabled(iRealType) || !bIsMenuEnabled(iRealType, iSpecType) || !bIsTypeAvailable(iRealType, client) || bAreHumansRequired(iRealType, iSpecType) || !bCanTypeSpawn(iRealType, iSpecType) || !bIsRightGame(iRealType, iSpecType) || !bHasCoreAdminAccess(client, iRealType))
		{
			char sChargerName[64];
			vGetTankTranslatedName(sChargerName, sizeof sChargerName, .type = iType, .specType = iSpecType);
			MT_ReplyToCommand(client, "%s %t", MT_TAG5, "DisabledTypeCharger", sChargerName, iRealType, iType);

			return Plugin_Handled;
		}
	}

	vSetupTankSpawn(client, iSpecType, ((sType[0] == '0') ? "random" : sType), .amount = iAmount, .mode = iMode, .blind = !!iBlind);

	return Plugin_Handled;
}

/**
 * ConVar functions & callbacks
 **/

void vDefaultConVarSettings()
{
	g_esGeneral.g_cvMTGunVerticalPunch.GetString(g_esGeneral.g_sDefaultGunVerticalPunch, sizeof esGeneral::g_sDefaultGunVerticalPunch);
	g_esGeneral.g_flDefaultAmmoPackUseDuration = -1.0;
	g_esGeneral.g_flDefaultColaBottlesUseDuration = -1.0;
	g_esGeneral.g_flDefaultDefibrillatorUseDuration = -1.0;
	g_esGeneral.g_flDefaultFirstAidHealPercent = -1.0;
	g_esGeneral.g_flDefaultFirstAidKitUseDuration = -1.0;
	g_esGeneral.g_flDefaultGasCanUseDuration = -1.0;
	g_esGeneral.g_flDefaultGunSwingInterval = -1.0;
	g_esGeneral.g_flDefaultPhysicsPushScale = -1.0;
	g_esGeneral.g_flDefaultPipeBombDuration = -1.0;
	g_esGeneral.g_flDefaultTankThrowForce = -1.0;
	g_esGeneral.g_flDefaultSurvivorReviveDuration = -1.0;
	g_esGeneral.g_flDefaultUpgradePackUseDuration = -1.0;
	g_esGeneral.g_iDefaultMeleeRange = -1;
	g_esGeneral.g_iDefaultSurvivorReviveHealth = -1;
	g_esGeneral.g_iDefaultTankIncapHealth = -1;
}

void vRegisterConVars()
{
#if defined _autoexecconfig_included
	AutoExecConfig_SetFile("mutant_tanks");
	AutoExecConfig_SetCreateFile(true);
	vSetupConVar(g_esGeneral.g_cvMTAutoUpdate, "mt_autoupdate", "0", "Automatically update Mutant Tanks.\nRequires \"Updater\": https://github.com/Teamkiller324/Updater\n0: OFF\n1: ON", FCVAR_NOTIFY, true, 0.0, true, 1.0);
	vSetupConVar(g_esGeneral.g_cvMTConfigFile, "mt_configfile", MT_CONFIG_FILE_MAIN, "The config filename used by Mutant Tanks to read settings from.\nEmpty: None\nNot empty: The custom config filename to use.", FCVAR_NOTIFY);
	vSetupConVar(g_esGeneral.g_cvMTDisabledGameModes, "mt_disabledgamemodes", "", "Disable Mutant Tanks in these game modes.\nSeparate by commas.\nEmpty: None\nNot empty: Disabled only in these game modes.", FCVAR_NOTIFY);
	vSetupConVar(g_esGeneral.g_cvMTEnabledGameModes, "mt_enabledgamemodes", "", "Enable Mutant Tanks in these game modes.\nSeparate by commas.\nEmpty: All\nNot empty: Enabled only in these game modes.", FCVAR_NOTIFY);
	vSetupConVar(g_esGeneral.g_cvMTGameModeTypes, "mt_gamemodetypes", "0", "Enable Mutant Tanks in these game mode types.\n0 OR 15: All game mode types.\n1: Co-Op modes only.\n2: Versus modes only.\n4: Survival modes only.\n8: Scavenge modes only. (Only available in Left 4 Dead 2.)", FCVAR_NOTIFY, true, 0.0, true, 15.0);
	vSetupConVar(g_esGeneral.g_cvMTGraphicsLevel, "mt_graphicslevel", "3", "Sets the graphics level of the plugin to help with server performance.\n0: OFF\n1: Low\n2: Medium\n3: High", FCVAR_NOTIFY, true, 0.0, true, 3.0);
	vSetupConVar(g_esGeneral.g_cvMTListenSupport, "mt_listensupport", (g_bDedicated ? "0" : "1"), "Enable Mutant Tanks on listen servers.\n0: OFF\n1: ON", FCVAR_NOTIFY, true, 0.0, true, 1.0);
	vSetupConVar(g_esGeneral.g_cvMTPluginEnabled, "mt_pluginenabled", "1", "Enable Mutant Tanks.\n0: OFF\n1: ON", FCVAR_NOTIFY, true, 0.0, true, 1.0);
	AutoExecConfig_CreateConVar("mt_pluginversion", MT_VERSION, "Mutant Tanks Version", FCVAR_DONTRECORD|FCVAR_NOTIFY|FCVAR_REPLICATED|FCVAR_SPONLY);
	AutoExecConfig_ExecuteFile();
	AutoExecConfig_CleanFile();
#else
	vSetupConVar(g_esGeneral.g_cvMTAutoUpdate, "mt_autoupdate", "0", "Automatically update Mutant Tanks.\nRequires Updater: https://forums.alliedmods.net/showthread.php?t=169095\n0: OFF\n1: ON", FCVAR_NOTIFY, true, 0.0, true, 1.0);
	vSetupConVar(g_esGeneral.g_cvMTConfigFile, "mt_configfile", MT_CONFIG_FILE_MAIN, "The config filename used by Mutant Tanks to read settings from.\nEmpty: None\nNot empty: The custom config filename to use.", FCVAR_NOTIFY);
	vSetupConVar(g_esGeneral.g_cvMTDisabledGameModes, "mt_disabledgamemodes", "", "Disable Mutant Tanks in these game modes.\nSeparate by commas.\nEmpty: None\nNot empty: Disabled only in these game modes.", FCVAR_NOTIFY);
	vSetupConVar(g_esGeneral.g_cvMTEnabledGameModes, "mt_enabledgamemodes", "", "Enable Mutant Tanks in these game modes.\nSeparate by commas.\nEmpty: All\nNot empty: Enabled only in these game modes.", FCVAR_NOTIFY);
	vSetupConVar(g_esGeneral.g_cvMTGameModeTypes, "mt_gamemodetypes", "0", "Enable Mutant Tanks in these game mode types.\n0 OR 15: All game mode types.\n1: Co-Op modes only.\n2: Versus modes only.\n4: Survival modes only.\n8: Scavenge modes only. (Only available in Left 4 Dead 2.)", FCVAR_NOTIFY, true, 0.0, true, 15.0);
	vSetupConVar(g_esGeneral.g_cvMTGraphicsLevel, "mt_graphicslevel", "3", "Sets the graphics level of the plugin to help with server performance.\n0: OFF\n1: Low\n2: Medium\n3: High", FCVAR_NOTIFY, true, 0.0, true, 3.0);
	vSetupConVar(g_esGeneral.g_cvMTListenSupport, "mt_listensupport", (g_bDedicated ? "0" : "1"), "Enable Mutant Tanks on listen servers.\n0: OFF\n1: ON", FCVAR_NOTIFY, true, 0.0, true, 1.0);
	vSetupConVar(g_esGeneral.g_cvMTPluginEnabled, "mt_pluginenabled", "1", "Enable Mutant Tanks.\n0: OFF\n1: ON", FCVAR_NOTIFY, true, 0.0, true, 1.0);
	CreateConVar("mt_pluginversion", MT_VERSION, "Mutant Tanks Version", FCVAR_DONTRECORD|FCVAR_NOTIFY|FCVAR_REPLICATED|FCVAR_SPONLY);
	AutoExecConfig(true, "mutant_tanks");
#endif

	g_esGeneral.g_cvMTAssaultRifleAmmo = FindConVar("ammo_assaultrifle_max");
	g_esGeneral.g_cvMTAutoShotgunAmmo = (g_bSecondGame ? FindConVar("ammo_autoshotgun_max") : FindConVar("ammo_buckshot_max"));
	g_esGeneral.g_cvMTBlind = FindConVar("nb_blind");
	g_esGeneral.g_cvMTCommonLimit = FindConVar("z_common_limit");
	g_esGeneral.g_cvMTDifficulty = FindConVar("z_difficulty");
	g_esGeneral.g_cvMTDirectorNoBosses = FindConVar("director_no_bosses");
	g_esGeneral.g_cvMTDirectorNoMobs = FindConVar("director_no_mobs");
	g_esGeneral.g_cvMTFirstAidHealPercent = FindConVar("first_aid_heal_percent");
	g_esGeneral.g_cvMTFirstAidKitUseDuration = FindConVar("first_aid_kit_use_duration");
	g_esGeneral.g_cvMTHuntingRifleAmmo = FindConVar("ammo_huntingrifle_max");
	g_esGeneral.g_cvMTGameMode = FindConVar("mp_gamemode");
	g_esGeneral.g_cvMTGameTypes = FindConVar("sv_gametypes");
	g_esGeneral.g_cvMTGhostSpeed = FindConVar("z_ghost_speed");
	g_esGeneral.g_cvMTGhostTravelDistance = FindConVar("z_ghost_travel_distance");
	g_esGeneral.g_cvMTGunSwingInterval = FindConVar("z_gun_swing_interval");
	g_esGeneral.g_cvMTGunVerticalPunch = FindConVar("z_gun_vertical_punch");
	g_esGeneral.g_cvMTPainPillsDecayRate = FindConVar("pain_pills_decay_rate");
	g_esGeneral.g_cvMTPainPillsHealthValue = FindConVar("pain_pills_health_value");
	g_esGeneral.g_cvMTPipeBombDuration = FindConVar("pipe_bomb_timer_duration");
	g_esGeneral.g_cvMTShotgunAmmo = (g_bSecondGame ? FindConVar("ammo_shotgun_max") : FindConVar("ammo_buckshot_max"));
	g_esGeneral.g_cvMTSMGAmmo = FindConVar("ammo_smg_max");
	g_esGeneral.g_cvMTSniperRifleAmmo = FindConVar("ammo_sniperrifle_max");
	g_esGeneral.g_cvMTSurvivorMaxIncapCount = FindConVar("survivor_max_incapacitated_count");
	g_esGeneral.g_cvMTSurvivorReviveDuration = FindConVar("survivor_revive_duration");
	g_esGeneral.g_cvMTSurvivorReviveHealth = FindConVar("survivor_revive_health");
	g_esGeneral.g_cvMTTankFrustration = FindConVar("z_frustration");
	g_esGeneral.g_cvMTTankIncapHealth = FindConVar("z_tank_incapacitated_health");
	g_esGeneral.g_cvMTTankThrowForce = FindConVar("z_tank_throw_force");

	if (g_bSecondGame)
	{
		g_esGeneral.g_cvMTAdrenalineDuration = FindConVar("adrenaline_duration");
		g_esGeneral.g_cvMTAmmoPackUseDuration = FindConVar("ammo_pack_use_duration");
		g_esGeneral.g_cvMTColaBottlesUseDuration = FindConVar("cola_bottles_use_duration");
		g_esGeneral.g_cvMTDefibrillatorUseDuration = FindConVar("defibrillator_use_duration");
		g_esGeneral.g_cvMTGasCanUseDuration = FindConVar("gas_can_use_duration");
		g_esGeneral.g_cvMTGrenadeLauncherAmmo = FindConVar("ammo_grenadelauncher_max");
		g_esGeneral.g_cvMTMeleeRange = FindConVar("melee_range");
		g_esGeneral.g_cvMTPhysicsPushScale = FindConVar("phys_pushscale");
		g_esGeneral.g_cvMTUpgradePackUseDuration = FindConVar("upgrade_pack_use_duration");
	}
	else
	{
		g_esGeneral.g_cvMTSurvivorUpgrades = FindConVar("survivor_upgrades");
	}

	g_esGeneral.g_cvMTGameMode.AddChangeHook(vUpdateCvar);
	g_esGeneral.g_cvMTDifficulty.AddChangeHook(vUpdateCvar);
	g_esGeneral.g_cvMTGunVerticalPunch.AddChangeHook(vUpdateCvar);
}

void vSetDurationCvars(int item, bool reset, float duration = 1.0)
{
	if (g_esGeneral.g_hSDKGetUseAction != null)
	{
		int iType = SDKCall(g_esGeneral.g_hSDKGetUseAction, item);
		if (reset)
		{
			switch (iType)
			{
				case 1:
				{
					if (g_esGeneral.g_flDefaultFirstAidKitUseDuration != -1.0)
					{
						g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue = g_esGeneral.g_flDefaultFirstAidKitUseDuration;
						g_esGeneral.g_flDefaultFirstAidKitUseDuration = -1.0;
					}
				}
				case 2:
				{
					if (g_esGeneral.g_flDefaultAmmoPackUseDuration != -1.0)
					{
						g_esGeneral.g_cvMTAmmoPackUseDuration.FloatValue = g_esGeneral.g_flDefaultAmmoPackUseDuration;
						g_esGeneral.g_flDefaultAmmoPackUseDuration = -1.0;
					}
				}
				case 4:
				{
					if (g_esGeneral.g_flDefaultDefibrillatorUseDuration != -1.0)
					{
						g_esGeneral.g_cvMTDefibrillatorUseDuration.FloatValue = g_esGeneral.g_flDefaultDefibrillatorUseDuration;
						g_esGeneral.g_flDefaultDefibrillatorUseDuration = -1.0;
					}
				}
				case 6, 7:
				{
					if (g_esGeneral.g_flDefaultUpgradePackUseDuration != -1.0)
					{
						g_esGeneral.g_cvMTUpgradePackUseDuration.FloatValue = g_esGeneral.g_flDefaultUpgradePackUseDuration;
						g_esGeneral.g_flDefaultUpgradePackUseDuration = -1.0;
					}
				}
				case 8:
				{
					if (g_esGeneral.g_flDefaultGasCanUseDuration != -1.0)
					{
						g_esGeneral.g_cvMTGasCanUseDuration.FloatValue = g_esGeneral.g_flDefaultGasCanUseDuration;
						g_esGeneral.g_flDefaultGasCanUseDuration = -1.0;
					}
				}
				case 9:
				{
					if (g_esGeneral.g_flDefaultColaBottlesUseDuration != -1.0)
					{
						g_esGeneral.g_cvMTColaBottlesUseDuration.FloatValue = g_esGeneral.g_flDefaultColaBottlesUseDuration;
						g_esGeneral.g_flDefaultColaBottlesUseDuration = -1.0;
					}
				}
			}
		}
		else
		{
			switch (iType)
			{
				case 1:
				{
					if (g_esGeneral.g_cvMTFirstAidKitUseDuration != null)
					{
						g_esGeneral.g_flDefaultFirstAidKitUseDuration = g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue;
						g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue = duration;
					}
				}
				case 2:
				{
					if (g_esGeneral.g_cvMTAmmoPackUseDuration != null)
					{
						g_esGeneral.g_flDefaultAmmoPackUseDuration = g_esGeneral.g_cvMTAmmoPackUseDuration.FloatValue;
						g_esGeneral.g_cvMTAmmoPackUseDuration.FloatValue = duration;
					}
				}
				case 4:
				{
					if (g_esGeneral.g_cvMTDefibrillatorUseDuration != null)
					{
						g_esGeneral.g_flDefaultDefibrillatorUseDuration = g_esGeneral.g_cvMTDefibrillatorUseDuration.FloatValue;
						g_esGeneral.g_cvMTDefibrillatorUseDuration.FloatValue = duration;
					}
				}
				case 6, 7:
				{
					if (g_esGeneral.g_cvMTUpgradePackUseDuration != null)
					{
						g_esGeneral.g_flDefaultUpgradePackUseDuration = g_esGeneral.g_cvMTUpgradePackUseDuration.FloatValue;
						g_esGeneral.g_cvMTUpgradePackUseDuration.FloatValue = duration;
					}
				}
				case 8:
				{
					if (g_esGeneral.g_cvMTGasCanUseDuration != null)
					{
						g_esGeneral.g_flDefaultGasCanUseDuration = g_esGeneral.g_cvMTGasCanUseDuration.FloatValue;
						g_esGeneral.g_cvMTGasCanUseDuration.FloatValue = duration;
					}
				}
				case 9:
				{
					if (g_esGeneral.g_cvMTColaBottlesUseDuration != null)
					{
						g_esGeneral.g_flDefaultColaBottlesUseDuration = g_esGeneral.g_cvMTColaBottlesUseDuration.FloatValue;
						g_esGeneral.g_cvMTColaBottlesUseDuration.FloatValue = duration;
					}
				}
			}
		}
	}
}

void vSetHealPercentCvar(bool reset, int survivor = 0)
{
	if (reset)
	{
		if (g_esGeneral.g_flDefaultFirstAidHealPercent != -1.0)
		{
			g_esGeneral.g_cvMTFirstAidHealPercent.FloatValue = g_esGeneral.g_flDefaultFirstAidHealPercent;
			g_esGeneral.g_flDefaultFirstAidHealPercent = -1.0;
		}
	}
	else
	{
		bool bDeveloper = bIsDeveloper(survivor, 8);
		if (bDeveloper || (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_HEALTH))
		{
			float flPercent = (bDeveloper && g_esDeveloper[survivor].g_flDevHealPercent > g_esPlayer[survivor].g_flHealPercent) ? g_esDeveloper[survivor].g_flDevHealPercent : g_esPlayer[survivor].g_flHealPercent;
			if (flPercent > 0.0)
			{
				g_esGeneral.g_flDefaultFirstAidHealPercent = g_esGeneral.g_cvMTFirstAidHealPercent.FloatValue;
				g_esGeneral.g_cvMTFirstAidHealPercent.FloatValue = flPercent / 100.0;
			}
		}
	}
}

void vSetReviveDurationCvar(int survivor)
{
	bool bDeveloper = bIsDeveloper(survivor, 6);
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[survivor].g_flActionDuration > 0.0))
	{
		float flDuration = (bDeveloper && g_esDeveloper[survivor].g_flDevActionDuration > g_esPlayer[survivor].g_flActionDuration) ? g_esDeveloper[survivor].g_flDevActionDuration : g_esPlayer[survivor].g_flActionDuration;
		if (flDuration > 0.0)
		{
			g_esGeneral.g_flDefaultSurvivorReviveDuration = g_esGeneral.g_cvMTSurvivorReviveDuration.FloatValue;
			g_esGeneral.g_cvMTSurvivorReviveDuration.FloatValue = flDuration;
		}
	}
}

void vSetupConVar(ConVar &convar, const char[] name, const char[] value, const char[] details, int flags = 0, bool hasMin = false, float min = 0.0, bool hasMax = false, float max = 0.0)
{
#if defined _autoexecconfig_included
	convar = AutoExecConfig_CreateConVar(name, value, details, flags, hasMin, min, hasMax, max);
#else
	convar = CreateConVar(name, value, details, flags, hasMin, min, hasMax, max);
#endif
	convar.AddChangeHook(vUpdateCvar);
}

void vUpdateCvar(ConVar convar, const char[] oldValue, const char[] newValue)
{
	char sName[64], sValue[64];
	convar.GetName(sName, sizeof sName);
	FormatEx(sValue, sizeof sValue, "%s", newValue);
	TrimString(sValue);

	if (StrContains(newValue, "-l-") == 0)
	{
		strcopy(sValue, sizeof sValue, sValue[3]);
		TrimString(sValue);
		g_esGeneral.g_smCvars.SetString(sName, sValue, true);
	}
	else if (StrContains(newValue, "-u-") == 0)
	{
		strcopy(sValue, sizeof sValue, sValue[3]);
		TrimString(sValue);
		g_esGeneral.g_smCvars.Remove(sName);
	}

	g_esGeneral.g_smCvars.GetString(sName, sValue, sizeof sValue);

	if (!StrEqual(newValue, sValue))
	{
		convar.SetString(sValue);

		return;
	}

	if (StrEqual(sName, "mt_configfile"))
	{
		char sSMPath[PLATFORM_MAX_PATH];
		strcopy(g_esGeneral.g_sConfigPath, sizeof esGeneral::g_sConfigPath, newValue);
		BuildPath(Path_SM, sSMPath, sizeof sSMPath, MT_CONFIG_FILEPATH);
		FormatEx(g_esGeneral.g_sSavePath, sizeof esGeneral::g_sSavePath, "%s%s%s", sSMPath, g_esGeneral.g_sConfigPath, ((StrContains(g_esGeneral.g_sConfigPath, ".cfg") != -1) ? "" : ".cfg"));

		switch (MT_FileExists(MT_CONFIG_FILEPATH, g_esGeneral.g_sConfigPath, g_esGeneral.g_sSavePath, g_esGeneral.g_sSavePath, sizeof esGeneral::g_sSavePath))
		{
			case true:
			{
				g_esGeneral.g_iFileTimeOld[0] = GetFileTime(g_esGeneral.g_sSavePath, FileTime_LastChange);

				vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, g_esGeneral.g_sSavePath);
				vLoadConfigs(g_esGeneral.g_sSavePath, 1);
				vPluginStatus();
				vResetTimers();
				vToggleTankRushConVars();
				vToggleLogging();
			}
			case false: LogError("%s Unable to load the \"%s\" config file.", MT_TAG, g_esGeneral.g_sSavePath);
		}
	}
	else if (StrEqual(sName, "mt_disabledgamemodes") || StrEqual(sName, "mt_enabledgamemodes") || StrEqual(sName, "mt_gamemodetypes") || StrEqual(sName, "mt_pluginenabled") || StrEqual(sName, "mp_gamemode"))
	{
		vPluginStatus();
	}
	else if (StrEqual(sName, "z_difficulty"))
	{
		if ((g_esGeneral.g_iConfigExecute & MT_CONFIG_DIFFICULTY) && g_esGeneral.g_iConfigEnable == 1)
		{
			char sDifficultyConfig[PLATFORM_MAX_PATH];
			if (bIsDifficultyConfigFound(sDifficultyConfig, sizeof sDifficultyConfig))
			{
				vCustomConfig(sDifficultyConfig);
				g_esGeneral.g_iFileTimeOld[1] = GetFileTime(sDifficultyConfig, FileTime_LastChange);
				g_esGeneral.g_iFileTimeNew[1] = g_esGeneral.g_iFileTimeOld[1];
			}
		}
	}
	else if (StrEqual(sName, "z_gun_vertical_punch"))
	{
		g_esGeneral.g_cvMTGunVerticalPunch.GetString(g_esGeneral.g_sDefaultGunVerticalPunch, sizeof esGeneral::g_sDefaultGunVerticalPunch);

		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			if (bIsHumanSurvivor(iPlayer) && (bIsDeveloper(iPlayer, 4) || (((g_esShooter[iPlayer].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iPlayer].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[iPlayer].g_iRecoilDampener == 1)))
			{
				vToggleWeaponVerticalPunch(iPlayer, true);
			}
		}
	}
}

void vViewDistanceQuery(QueryCookie cookie, int client, ConVarQueryResult result, const char[] cvarName, const char[] cvarValue)
{
	switch (bIsValidClient(client) && cookie != QUERYCOOKIE_FAILED && StrEqual(cvarName, "z_view_distance") && result == ConVarQuery_Okay)
	{
		case true: g_esPlayer[client].g_bThirdPerson = (StringToInt(cvarValue) <= -1);
		case false: g_esPlayer[client].g_bThirdPerson = false;
	}
}

/**
 * Menu functions & callbacks
 **/

#if defined _adminmenu_included
public void OnAdminMenuReady(Handle topmenu)
{
	TopMenu tmMTMenu = TopMenu.FromHandle(topmenu);
	if (topmenu == g_esGeneral.g_tmMTMenu)
	{
		return;
	}

	g_esGeneral.g_tmMTMenu = tmMTMenu;
	TopMenuObject tmoCommands = g_esGeneral.g_tmMTMenu.AddCategory(MT_CONFIG_SECTION_MAIN2, vMTAdminMenuHandler, "mt_adminmenu", ADMFLAG_GENERIC);
	if (tmoCommands != INVALID_TOPMENUOBJECT)
	{
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_tank", vMutantTanksMenu, tmoCommands, "sm_mt_tank", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_smoker", vMutantSmokersMenu, tmoCommands, "sm_mt_smoker", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_boomer", vMutantBoomersMenu, tmoCommands, "sm_mt_boomer", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_hunter", vMutantHuntersMenu, tmoCommands, "sm_mt_hunter", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_spitter", vMutantSpittersMenu, tmoCommands, "sm_mt_spitter", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_jockey", vMutantJockeysMenu, tmoCommands, "sm_mt_jockey", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_charger", vMutantChargersMenu, tmoCommands, "sm_mt_charger", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_config", vMTConfigMenu, tmoCommands, "sm_mt_config", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_info", vMTInfoMenu, tmoCommands, "sm_mt_info", ADMFLAG_GENERIC);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_list", vMTListMenu, tmoCommands, "sm_mt_list", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_reload", vMTReloadMenu, tmoCommands, "sm_mt_reload", ADMFLAG_ROOT);
		g_esGeneral.g_tmMTMenu.AddItem("sm_mt_version", vMTVersionMenu, tmoCommands, "sm_mt_version", ADMFLAG_ROOT);
	}
}

void vMTAdminMenuHandler(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayTitle, TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", MT_CONFIG_SECTION_MAIN2, param);
	}
}

void vMutantTanksMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenu", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, 8, true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMutantSmokersMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenuSmoker", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, 1, true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMutantBoomersMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenuBoomer", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, 2, true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMutantHuntersMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenuHunter", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, 3, true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMutantSpittersMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenuSpitter", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, (g_bSecondGame ? 4 : 2), true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMutantJockeysMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenuJockey", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, (g_bSecondGame ? 5 : 3), true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMutantChargersMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTListMenuCharger", param);
		case TopMenuAction_SelectOption:
		{
			vMutantMenu(param, (g_bSecondGame ? 6 : 1), true);
			vLogCommand(param, MT_CMD_SPAWN, "%s %N:{default} Opened the{mint} %s{default} menu.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the %s menu.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);
		}
	}
}

void vMTConfigMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTPathMenu", param);
		case TopMenuAction_SelectOption:
		{
			vPathMenu(param, true);
			vLogCommand(param, MT_CMD_CONFIG, "%s %N:{default} Opened the config file viewer.", MT_TAG5, param);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Opened the config file viewer.", MT_TAG, param);
		}
	}
}

void vMTInfoMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTInfoMenu", param);
		case TopMenuAction_SelectOption: vInfoMenu(param, true);
	}
}

void vMTListMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTAbilitiesMenu", param);
		case TopMenuAction_SelectOption:
		{
			vListAbilities(param);
			vLogCommand(param, MT_CMD_LIST, "%s %N:{default} Checked the list of abilities installed.", MT_TAG5, param);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Checked the list of abilities installed.", MT_TAG, param);

			if (bIsValidClient(param, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && g_esGeneral.g_tmMTMenu != null)
			{
				g_esGeneral.g_tmMTMenu.Display(param, TopMenuPosition_LastCategory);
			}
		}
	}
}

void vMTReloadMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTReloadMenu", param);
		case TopMenuAction_SelectOption:
		{
			vReloadConfig(param);
			vLogCommand(param, MT_CMD_RELOAD, "%s %N:{default} Reloaded all config files.", MT_TAG5, param);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Reloaded all config files.", MT_TAG, param);

			if (bIsValidClient(param, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && g_esGeneral.g_tmMTMenu != null)
			{
				g_esGeneral.g_tmMTMenu.Display(param, TopMenuPosition_LastCategory);
			}
		}
	}
}

void vMTVersionMenu(TopMenu topmenu, TopMenuAction action, TopMenuObject object_id, int param, char[] buffer, int maxlength)
{
	switch (action)
	{
		case TopMenuAction_DisplayOption: FormatEx(buffer, maxlength, "%T", "MTVersionMenu", param);
		case TopMenuAction_SelectOption:
		{
			MT_PrintToChat(param, "%s %s{yellow} v%s{mint}, by{olive} %s", MT_TAG3, MT_CONFIG_SECTION_MAIN, MT_VERSION, MT_AUTHOR);
			vLogCommand(param, MT_CMD_VERSION, "%s %N:{default} Checked the current version of{mint} %s{default}.", MT_TAG5, param, MT_CONFIG_SECTION_MAIN);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Checked the current version of %s.", MT_TAG, param, MT_CONFIG_SECTION_MAIN);

			if (bIsValidClient(param, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && g_esGeneral.g_tmMTMenu != null)
			{
				g_esGeneral.g_tmMTMenu.Display(param, TopMenuPosition_LastCategory);
			}
		}
	}
}
#endif

void vAdminPanel(int admin)
{
	char sDisplay[PLATFORM_MAX_PATH];
	FormatEx(sDisplay, sizeof sDisplay, "%s Admin Panel v%s", MT_CONFIG_SECTION_MAIN, MT_VERSION);

	Panel pAdminPanel = new Panel();
	pAdminPanel.SetTitle(sDisplay);
	pAdminPanel.DrawItem("", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);

	FormatEx(sDisplay, sizeof sDisplay, "Flashlight Color (\"light\" / \"flash\"): %s", g_esDeveloper[admin].g_sDevFlashlight);
	pAdminPanel.DrawText(sDisplay);

	if (g_bSecondGame)
	{
		FormatEx(sDisplay, sizeof sDisplay, "Glow Outline (\"glow\" / \"outline\"): %s", g_esDeveloper[admin].g_sDevGlowOutline);
		pAdminPanel.DrawText(sDisplay);
	}

	FormatEx(sDisplay, sizeof sDisplay, "Particle Effect(s) (\"effect\" / \"particle\"): %i", g_esDeveloper[admin].g_iDevParticle);
	pAdminPanel.DrawText(sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Skin Color (\"skin\" / \"color\"): %s", g_esDeveloper[admin].g_sDevSkinColor);
	pAdminPanel.DrawText(sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Voice Pitch (\"voice\" / \"pitch\"): %i%%", g_esDeveloper[admin].g_iDevVoicePitch);
	pAdminPanel.DrawText(sDisplay);

	pAdminPanel.DrawItem("", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
	pAdminPanel.CurrentKey = 10;
	pAdminPanel.DrawItem("Exit", ITEMDRAW_CONTROL);
	pAdminPanel.Send(admin, iAdminMenuHandler, MENU_TIME_FOREVER);

	delete pAdminPanel;
}

int iAdminMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	return 0;
}

void vConfigMenu(int admin, int item = 0)
{
	Menu mConfigMenu = new Menu(iConfigMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display|MenuAction_DisplayItem);
	mConfigMenu.SetTitle("Config Parser Menu");

	int iCount = 0;

	vClearSectionList();

	g_esGeneral.g_alSections = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
	if (g_esGeneral.g_alSections != null)
	{
		SMCParser smcConfig = smcSetupParser(g_esGeneral.g_sChosenPath, SMCParseStart_Config, SMCNewSection_Config, SMCKeyValues_Config, SMCEndSection_Config, SMCRawLine_Config, SMCParseEnd_Config);

		switch (smcConfig != null)
		{
			case true: delete smcConfig;
			case false:
			{
				delete mConfigMenu;

				return;
			}
		}

		int iLength = g_esGeneral.g_alSections.Length, iListSize = (iLength > 0) ? iLength : 0;
		if (iListSize > 0)
		{
			char sSection[PLATFORM_MAX_PATH], sDisplay[PLATFORM_MAX_PATH];
			int iStartPos = 0, iIndex = 0, iType = 0;
			for (int iPos = 0; iPos < iListSize; iPos++)
			{
				g_esGeneral.g_alSections.GetString(iPos, sSection, sizeof sSection);
				if (sSection[0] != '\0')
				{
					switch (!strncmp(sSection, "Plugin", 6, false) || !strncmp(sSection, "Surv", 4, false) || !strncmp(sSection, MT_CONFIG_SECTION_SETTINGS4, strlen(MT_CONFIG_SECTION_SETTINGS4), false) || !strncmp(sSection, "STEAM_", 6, false) || (!strncmp(sSection, "[U:", 3) && sSection[strlen(sSection) - 1] == ']') || StrEqual(sSection, "all", false) || FindCharInString(sSection, ',') != -1 || FindCharInString(sSection, '-') != -1)
					{
						case true: mConfigMenu.AddItem(sSection, sSection);
						case false:
						{
							iStartPos = iGetConfigSectionNumber(sSection, sizeof sSection), iIndex = StringToInt(sSection[iStartPos]);
							if (iIndex <= MT_MAXTYPES)
							{
								iType = g_esTank[iIndex].g_iRecordedType[0];
								FormatEx(sDisplay, sizeof sDisplay, "%s (Tank #%i) [%s]", g_esTank[iType].g_sTankName, iType, sSection);
								mConfigMenu.AddItem(sSection, sDisplay);
							}
						}
					}

					iCount++;
				}
			}
		}

		vClearSectionList();
	}

	mConfigMenu.ExitBackButton = true;

	if (iCount > 0)
	{
		mConfigMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
	}
	else
	{
		MT_PrintToChat(admin, "%s %t", MT_TAG2, "NoItems");

		delete mConfigMenu;
#if defined _adminmenu_included
		if (g_esPlayer[admin].g_bAdminMenu && bIsValidClient(admin, MT_CHECK_INGAME) && g_esGeneral.g_tmMTMenu != null)
		{
			g_esGeneral.g_tmMTMenu.Display(admin, TopMenuPosition_LastCategory);
		}
#endif
	}
}

int iConfigMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
			{
				vPathMenu(param1, g_esPlayer[param1].g_bAdminMenu);
			}
		}
		case MenuAction_Select:
		{
			char sInfo[PLATFORM_MAX_PATH];
			menu.GetItem(param2, sInfo, sizeof sInfo);

			switch (!strncmp(sInfo, "Plugin", 6, false) || !strncmp(sInfo, "Surv", 4, false) || !strncmp(sInfo, MT_CONFIG_SECTION_SETTINGS4, strlen(MT_CONFIG_SECTION_SETTINGS4), false) || !strncmp(sInfo, "STEAM_", 6, false) || (!strncmp(sInfo, "[U:", 3) && sInfo[strlen(sInfo) - 1] == ']') || StrEqual(sInfo, "all", false) || FindCharInString(sInfo, ',') != -1 || FindCharInString(sInfo, '-') != -1)
			{
				case true: g_esGeneral.g_sSection = sInfo;
				case false:
				{
					int iStartPos = iGetConfigSectionNumber(sInfo, sizeof sInfo);
					strcopy(g_esGeneral.g_sSection, sizeof esGeneral::g_sSection, sInfo[iStartPos]);
					g_esGeneral.g_iSection = StringToInt(sInfo[iStartPos]);
				}
			}

			switch (g_esGeneral.g_bUsedParser)
			{
				case true: MT_PrintToChat(param1, "%s %t", MT_TAG2, "StillParsing");
				case false: vParseConfig(param1);
			}

			char sFilePath[PLATFORM_MAX_PATH];
			int iIndex = StrContains(g_esGeneral.g_sChosenPath, "mutant_tanks", false);
			FormatEx(sFilePath, sizeof sFilePath, "%s", g_esGeneral.g_sChosenPath[iIndex + 13]);
			vLogCommand(param1, MT_CMD_CONFIG, "%s %N:{default} Viewed the{mint} %s{default} section of the{olive} %s{default} config file.", MT_TAG5, param1, sInfo, sFilePath);
			vLogMessage(MT_LOG_SERVER, _, "%s %N: Viewed the \"%s\" section of the \"%s\" config file.", MT_TAG, param1, sInfo, sFilePath);

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vConfigMenu(param1, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pConfig = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTConfigMenu", param1);
			pConfig.SetTitle(sMenuTitle);
		}
		case MenuAction_DisplayItem:
		{
			char sMenuOption[PLATFORM_MAX_PATH], sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			if (StrEqual(sInfo, MT_CONFIG_SECTION_SETTINGS2, false))
			{
				FormatEx(sMenuOption, sizeof sMenuOption, "%T", "MTSettingsItem", param1);

				return RedrawMenuItem(sMenuOption);
			}
		}
	}

	return 0;
}

void vDeveloperPanel(int developer, int page = 0)
{
	g_esDeveloper[developer].g_iDevPanelPage = page;
	g_esDeveloper[developer].g_iDevPanelPages = 4;

	char sDisplay[PLATFORM_MAX_PATH];
	FormatEx(sDisplay, sizeof sDisplay, "%s Developer Panel v%s", MT_CONFIG_SECTION_MAIN, MT_VERSION);
	float flValue = 0.0;

	Panel pDevPanel = new Panel();
	pDevPanel.SetTitle(sDisplay);
	pDevPanel.DrawItem("", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);

	switch (page)
	{
		case 0:
		{
			FormatEx(sDisplay, sizeof sDisplay, "Access Level: %i", g_esDeveloper[developer].g_iDevAccess);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Action Duration: %.2f second(s)", g_esDeveloper[developer].g_flDevActionDuration);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Adrenaline Time: %.2f second(s)", g_esDeveloper[developer].g_flDevAdrenalineTime);
				pDevPanel.DrawText(sDisplay);
			}

			FormatEx(sDisplay, sizeof sDisplay, "Ammo Regen: %i Bullet/s", g_esDeveloper[developer].g_iDevAmmoRegen);
			pDevPanel.DrawText(sDisplay);
#if defined _WeaponHandling_included
			flValue = g_esDeveloper[developer].g_flDevAttackBoost;
			FormatEx(sDisplay, sizeof sDisplay, "Attack Boost: +%.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);
#endif
			FormatEx(sDisplay, sizeof sDisplay, "Blaze Health: %i HPS", g_esDeveloper[developer].g_iDevBlazeHealth);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Cluster Bomb(s): %i (Max: 5)", g_esDeveloper[developer].g_iDevClusterBombs);
			pDevPanel.DrawText(sDisplay);
		}
		case 1:
		{
			flValue = g_esDeveloper[developer].g_flDevDamageBoost;
			FormatEx(sDisplay, sizeof sDisplay, "Damage Boost: +%.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);

			flValue = g_esDeveloper[developer].g_flDevDamageResistance;
			FormatEx(sDisplay, sizeof sDisplay, "Damage Resistance: %.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Dopamine Radius: %.2f%%", g_esDeveloper[developer].g_flDevDopamineRadius);
				pDevPanel.DrawText(sDisplay);
			}

			FormatEx(sDisplay, sizeof sDisplay, "Fall Scream Voiceline: %s", g_esDeveloper[developer].g_sDevFallVoiceline);
			pDevPanel.DrawText(sDisplay);
#if defined _WeaponHandling_included
			flValue = g_esDeveloper[developer].g_flDevFireRate;
			FormatEx(sDisplay, sizeof sDisplay, "Fire Rate: +%.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);
#endif
			FormatEx(sDisplay, sizeof sDisplay, "Flashlight Color: %s", g_esDeveloper[developer].g_sDevFlashlight);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Glow Outline: %s", g_esDeveloper[developer].g_sDevGlowOutline);
				pDevPanel.DrawText(sDisplay);
			}
		}
		case 2:
		{
			FormatEx(sDisplay, sizeof sDisplay, "Grenade Launcher: %.2f%%", g_esDeveloper[developer].g_flDevGrenadeLauncher);
			pDevPanel.DrawText(sDisplay);

			flValue = g_esDeveloper[developer].g_flDevHealPercent;
			FormatEx(sDisplay, sizeof sDisplay, "Heal Percentage: %.2f%% (%.2f)", flValue, (flValue / 100.0));
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Healthcare Radius: %.2f%%", g_esDeveloper[developer].g_flDevHealthcareRadius);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Health Regen: %i HP/s", g_esDeveloper[developer].g_iDevHealthRegen);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Infinite Ammo Slots: %i (0: OFF, 31: ALL)", g_esDeveloper[developer].g_iDevInfiniteAmmo);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Jump Height: %.2f HMU (Dashes: %i)", g_esDeveloper[developer].g_flDevJumpHeight, g_esDeveloper[developer].g_iDevMidairDashes);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Lady Killer: %.2f%%", g_esDeveloper[developer].g_flDevLadyKiller);
			pDevPanel.DrawText(sDisplay);
		}
		case 3:
		{
			FormatEx(sDisplay, sizeof sDisplay, "Life Leech: %i HP/Hit", g_esDeveloper[developer].g_iDevLifeLeech);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Loadout: %s", g_esDeveloper[developer].g_sDevLoadout);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Medical Cuts: %i HPS", g_esDeveloper[developer].g_iDevMedicalCuts);
				pDevPanel.DrawText(sDisplay);

				FormatEx(sDisplay, sizeof sDisplay, "Melee Range: %i HMU", g_esDeveloper[developer].g_iDevMeleeRange);
				pDevPanel.DrawText(sDisplay);
			}

			FormatEx(sDisplay, sizeof sDisplay, "Motivation Radius: %.2f%%", g_esDeveloper[developer].g_flDevMotivationRadius);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Overdose Radius: %.2f%%", g_esDeveloper[developer].g_flDevOverdoseRadius);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Overhealth: ~%i HP", g_esDeveloper[developer].g_iDevOverhealth);
			pDevPanel.DrawText(sDisplay);
		}
		case 4:
		{
			FormatEx(sDisplay, sizeof sDisplay, "Particle Effect(s): %i", g_esDeveloper[developer].g_iDevParticle);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Passive Type(s): %i", g_esDeveloper[developer].g_iDevPassiveTypes);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Pipe Bomb Duration: %.2f", g_esDeveloper[developer].g_flDevPipeBombDuration);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Punch Resistance: %.2f", g_esDeveloper[developer].g_flDevPunchResistance);
			pDevPanel.DrawText(sDisplay);

			flValue = g_esDeveloper[developer].g_flDevRapidPistol;
			FormatEx(sDisplay, sizeof sDisplay, "Rapid Pistol Fire Rate: %.2f%% (%.2f)", flValue, (flValue / 100.0));
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Regen Bursts: %i HPS", g_esDeveloper[developer].g_iDevRegenBursts);
			pDevPanel.DrawText(sDisplay);
#if defined _WeaponHandling_included
			flValue = g_esDeveloper[developer].g_flDevReloadRate;
			FormatEx(sDisplay, sizeof sDisplay, "Reload Rate: +%.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);
#endif
		}
		case 5:
		{
			FormatEx(sDisplay, sizeof sDisplay, "Revive Health: %i HP", g_esDeveloper[developer].g_iDevReviveHealth);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Reward Duration: %.2f second(s)", g_esDeveloper[developer].g_flDevRewardDuration);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Reward Type(s): %i", g_esDeveloper[developer].g_iDevRewardTypes);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Shockwave Radius: %.2f%%", g_esDeveloper[developer].g_flDevShockwaveRadius);
				pDevPanel.DrawText(sDisplay);
			}

			flValue = g_esDeveloper[developer].g_flDevShoveDamage;
			FormatEx(sDisplay, sizeof sDisplay, "Shove Damage: %.2f%% (%.2f)", (flValue * 100.0), flValue);
			pDevPanel.DrawText(sDisplay);

			flValue = g_esDeveloper[developer].g_flDevShoveRate;
			FormatEx(sDisplay, sizeof sDisplay, "Shove Rate: %.2f%% (%.2f)", (flValue * 100.0), flValue);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Special Ammo Type(s): %i (1: Incendiary, 2: Explosive, 3: Random)", g_esDeveloper[developer].g_iDevSpecialAmmo);
				pDevPanel.DrawText(sDisplay);
			}
		}
		case 6:
		{
			flValue = g_esDeveloper[developer].g_flDevSpeedBoost;
			FormatEx(sDisplay, sizeof sDisplay, "Speed Boost: x%.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Survivor Skin Color: %s", g_esDeveloper[developer].g_sDevSkinColor);
			pDevPanel.DrawText(sDisplay);
#if defined _WeaponHandling_included
			flValue = g_esDeveloper[developer].g_flDevSwingRate;
			FormatEx(sDisplay, sizeof sDisplay, "Swing Rate: +%.2f%% (%.2f)", ((flValue * 100.0) - 100.0), flValue);
			pDevPanel.DrawText(sDisplay);
#endif
			FormatEx(sDisplay, sizeof sDisplay, "Syringe Darts: %i HPS", g_esDeveloper[developer].g_iDevSyringeDarts);
			pDevPanel.DrawText(sDisplay);

			FormatEx(sDisplay, sizeof sDisplay, "Voice Pitch: %i%%", g_esDeveloper[developer].g_iDevVoicePitch);
			pDevPanel.DrawText(sDisplay);

			if (g_bSecondGame)
			{
				FormatEx(sDisplay, sizeof sDisplay, "Weapon Skin: %i (Max: %i)", g_esDeveloper[developer].g_iDevWeaponSkin, iGetMaxWeaponSkins(developer));
				pDevPanel.DrawText(sDisplay);
			}
		}
	}

	pDevPanel.DrawItem("", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
	pDevPanel.CurrentKey = 8;
	pDevPanel.DrawItem("Prev Page", ITEMDRAW_CONTROL);
	pDevPanel.CurrentKey = 9;
	pDevPanel.DrawItem("Next Page", ITEMDRAW_CONTROL);
	pDevPanel.CurrentKey = 10;
	pDevPanel.DrawItem("Exit", ITEMDRAW_CONTROL);
	pDevPanel.Send(developer, iDeveloperMenuHandler, MENU_TIME_FOREVER);

	delete pDevPanel;
}

int iDeveloperMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	if (action == MenuAction_Select)
	{
		switch (param2)
		{
			case 8:
			{
				g_esDeveloper[param1].g_iDevPanelPage--;
				int iPage = g_esDeveloper[param1].g_iDevPanelPage;

				switch (g_esDeveloper[param1].g_iDevPanelPages > 0)
				{
					case true: g_esDeveloper[param1].g_iDevPanelPage = (iPage < 0) ? g_esDeveloper[param1].g_iDevPanelPages : iPage;
					case false: g_esDeveloper[param1].g_iDevPanelPage = 0;
				}

				vDeveloperPanel(param1, g_esDeveloper[param1].g_iDevPanelPage);
			}
			case 9:
			{
				g_esDeveloper[param1].g_iDevPanelPage++;
				int iPage = g_esDeveloper[param1].g_iDevPanelPage;

				switch (g_esDeveloper[param1].g_iDevPanelPages > 0)
				{
					case true: g_esDeveloper[param1].g_iDevPanelPage = (iPage > g_esDeveloper[param1].g_iDevPanelPages) ? 0 : iPage;
					case false: g_esDeveloper[param1].g_iDevPanelPage = 0;
				}

				vDeveloperPanel(param1, g_esDeveloper[param1].g_iDevPanelPage);
			}
			case 10: g_esDeveloper[param1].g_iDevPanelPage = 0;
		}
	}

	return 0;
}

void vListDeveloperCodes(int developer)
{
	MT_ReplyToCommand(developer, "%s Developer Perk Keywords:", MT_TAG5);
	MT_ReplyToCommand(developer, "%s Access Level:{mint} access{default} /{mint} dev{default} /{mint} level{default} ({olive}Min: 0{default},{olive} Max: 4095{default})", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Action Duration:{mint} action{default} /{mint} actdur", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Adrenaline Time:{mint} adrenaline{default} /{mint} shot", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Ammo Regen:{mint} ammoregen{default} /{mint} regenammo", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Attack Boost:{mint} attack", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Blaze Health:{mint} blazehp{default} /{mint} firehp", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Cluster Bomb(s):{mint} cluster{default} /{mint} bomb{default} (Max:{olive} 5{default})", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Damage Boost:{mint} dmgboost{default} /{mint} damageboost", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Damage Resistance:{mint} dmgres{default} /{mint} damageres", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Dopamine Radius:{mint} dopamine{default} /{mint} rush", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Fall Scream Voiceline:{mint} fall{default} /{mint} scream", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Fire Rate:{mint} firerate{default} /{mint} frate", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Flashlight Color:{mint} light{default} /{mint} flash", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Glow Outline:{mint} glow{default} /{mint} outline", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Grenade Launcher:{mint} grenade{default} /{mint} launcher", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Heal Percentage:{mint} healper{default} /{mint} hppercent", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Healthcare Radius:{mint} healthcare{default} /{mint} hpcare{default} /{mint} medkit", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Health Regen:{mint} hpregen{default} /{mint} regenhp", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Tank HUD:{mint} hud", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Infinite Ammo Slots:{mint} infammo{default} /{mint} infinite{default} ({olive}0: OFF{default},{olive} 31: ALL{default})", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Jump Height:{mint} jump{default} /{mint} height", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Lady Killer:{mint} lady{default} /{mint} killer", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Life Leech:{mint} leech{default} /{mint} life", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Loadout:{mint} loadout{default} /{mint} weapon", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Medical Cuts:{mint} medic{default} /{mint} medcuts /{mint} meleehp", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Melee Range:{mint} longmelee{default} /{mint} range", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Midair Dashes:{mint} midair{default} /{mint} dash", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Motivation Radius:{mint} motiv", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Overdose Radius:{mint} overdose{default} /{mint} pills", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Overhealth:{mint} overheal{default} /{mint} extrahp", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Particle Effect(s):{mint} effect{default} /{mint} particle", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Passive Type(s):{mint} pstypes{default} /{mint} passtypes", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Pipe Bomb Duration:{mint} pipe{default} /{mint} pipedur", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Punch Resistance:{mint} punch{default} /{mint} punchres", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Rapid Pistol Fire Rate:{mint} rapid{default} /{mint} pistol{default} /{mint} aprate", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Regen Bursts:{mint} bursthp{default} /{mint} regbursts /{mint} blasthp", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Reload Rate:{mint} reload{default} /{mint} relrate", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Revive Health:{mint} revivehp{default} /{mint} hprevive", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Reward Duration:{mint} rdur{default} /{mint} rewarddur", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Reward Type(s):{mint} rtypes{default} /{mint} rewardtypes", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Shockwave Radius:{mint} defib{default} /{mint} shock", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Shove Damage:{mint} sdmg{default} /{mint} shovedmg", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Shove Rate:{mint} srate{default} /{mint} shoverate", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Stuck:{mint} stuck{default} /{mint} repos", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Special Ammo Type(s):{mint} specammo{default} /{mint} special{default} ({olive}1: Incendiary{default},{olive} 2: Explosive{default},{olive} 3: Random{default})", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Speed Boost:{mint} speed{default} /{mint} run{default} /{mint} move", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Survivor Skin Color:{mint} survskin{default} /{mint} color", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Swing Rate:{mint} swing{default} /{mint} swrate", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Syringe Darts:{mint} syringe{default} /{mint} dart /{mint} bullethp", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Voice Pitch:{mint} voice{default} /{mint} pitch", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Weapon Skin:{mint} wepskin{default} /{mint} skin", MT_TAG2);
	MT_ReplyToCommand(developer, "%s View Config:{mint} config", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Edit Config:{mint} edit", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Abilities List:{mint} list", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Spawn Mutant:{mint} smoker{default} /{mint} boomer{default} /{mint} hunter{default} /{mint} spitter{default} /{mint} jockey{default} /{mint} charger{default} /{mint} tank", MT_TAG2);
	MT_ReplyToCommand(developer, "%s Check Version:{mint} version", MT_TAG2);
}

void vFavoriteMenu(int admin, int specType)
{
	Menu mFavoriteMenu = new Menu(iFavoriteMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display|MenuAction_DisplayItem);

	switch (specType)
	{
		case 1: mFavoriteMenu.SetTitle("Use your favorite Mutant Smoker type?");
		case 2: mFavoriteMenu.SetTitle("Use your favorite Mutant Boomer type?");
		case 3: mFavoriteMenu.SetTitle("Use your favorite Mutant Hunter type?");
		case 4: mFavoriteMenu.SetTitle("Use your favorite Mutant Spitter type?");
		case 5: mFavoriteMenu.SetTitle("Use your favorite Mutant Jockey type?");
		case 6: mFavoriteMenu.SetTitle("Use your favorite Mutant Charger type?");
		default: mFavoriteMenu.SetTitle("Use your favorite Mutant Tank type?");
	}

	mFavoriteMenu.AddItem("Yes", "Yes");
	mFavoriteMenu.AddItem("No", "No");
	mFavoriteMenu.Display(admin, MENU_TIME_FOREVER);
}

int iFavoriteMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Select:
		{
			switch (param2)
			{
				case 0: vQueueTank(param1, g_esPlayer[param1].g_iInfectedType, g_esPlayer[param1].g_iFavoriteType, false, false);
				case 1:
				{
					switch (g_esPlayer[param1].g_iInfectedType)
					{
						case 1: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnusedSmoker");
						case 2: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnusedBoomer");
						case 3: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnusedHunter");
						case 4: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnusedSpitter");
						case 5: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnusedJockey");
						case 6: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnusedCharger");
						default: MT_PrintToChat(param1, "%s %t", MT_TAG3, "FavoriteUnused");
					}
				}
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pFavorite = view_as<Panel>(param2);

			switch (g_esPlayer[param1].g_iInfectedType)
			{
				case 1: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenuSmoker", param1);
				case 2: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenuBoomer", param1);
				case 3: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenuHunter", param1);
				case 4: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenuSpitter", param1);
				case 5: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenuJockey", param1);
				case 6: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenuCharger", param1);
				default: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTFavoriteMenu", param1);
			}

			pFavorite.SetTitle(sMenuTitle);
		}
		case MenuAction_DisplayItem:
		{
			char sMenuOption[PLATFORM_MAX_PATH];

			switch (param2)
			{
				case 0: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "OptionYes", param1);
				case 1: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "OptionNo", param1);
			}

			return RedrawMenuItem(sMenuOption);
		}
	}

	return 0;
}

void vHudPanel(int developer, int page = 0)
{
	if (iGetTankCount(true, true) <= 0)
	{
		MT_PrintToChat(developer, "%s There are no{olive} %s{default} right now.", MT_TAG2, MT_CONFIG_SECTION_MAIN);

		delete g_esPlayer[developer].g_hHudTimer;

		return;
	}

	g_esPlayer[developer].g_iHudPanelPage = page;
	g_esPlayer[developer].g_iHudPanelPages = 0;

	bool bHuman = false;
	char sDisplay[PLATFORM_MAX_PATH], sDisplay2[PLATFORM_MAX_PATH], sDisplay3[PLATFORM_MAX_PATH], sDisplay4[PLATFORM_MAX_PATH], sFrustration[10], sRealName[33], sStatus[32], sTankName[64];
	int iHealth = 0, iMaxHealth = 0, iTankCount = 0, iTanks[MAXPLAYERS + 1];
	for (int iTank = 1; iTank <= MaxClients; iTank++)
	{
		if (bIsTank(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
		{
			iTanks[iTankCount] = iTank;
			iTankCount++;
		}
	}

	g_esPlayer[developer].g_iHudPanelPages = (RoundToNearest(float(iTankCount / 2)) - 1);
	FormatEx(sDisplay, sizeof sDisplay, "%s HUD Panel v%s", MT_CONFIG_SECTION_MAIN, MT_VERSION);

	Panel pHudPanel = new Panel();
	pHudPanel.SetTitle(sDisplay);
	pHudPanel.DrawItem("", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);

	int iStartPos = (g_esPlayer[developer].g_iHudPanelPage * 2), iTank = 0, iType = 0;
	for (int iPos = iStartPos; iPos < (iStartPos + 2); iPos++)
	{
		iTank = iTanks[iPos];
		if (bIsTank(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME))
		{
			bHuman = bIsValidClient(iTank, MT_CHECK_FAKECLIENT);
			iType = g_esPlayer[iTank].g_iTankType;
			vGetTankTranslatedName(sTankName, sizeof sTankName, iTank, .survivor = g_esShooter[iTank].g_bSurvivor, .character = g_esShooter[iTank].g_iCharacter);
			SetGlobalTransTarget(developer);
			FormatEx(sRealName, sizeof sRealName, "%T", "MTItem", developer, sTankName, iType, g_esTank[iType].g_iRealType[0]);

			switch (bIsValidClient(iTank, MT_CHECK_ALIVE))
			{
				case true:
				{
					switch (bIsPlayerIncapacitated(iTank))
					{
						case true: sStatus = "INCAPPED";
						case false:
						{
							iHealth = GetEntProp(iTank, Prop_Data, "m_iHealth");
							iMaxHealth = GetEntProp(iTank, Prop_Data, "m_iMaxHealth");
							FormatEx(sStatus, sizeof sStatus, "%i/%i HP (%.0f%%)", iHealth, iMaxHealth, (iHealth / iMaxHealth));
						}
					}
				}
				case false: sStatus = "DEAD";
			}

			FormatEx(sDisplay, sizeof sDisplay, "%i. %s - %s [%s]", (iPos + 1), sRealName, sStatus, (bIsCustomTank(iTank) ? "Clone" : "Original"));
			pHudPanel.DrawText(sDisplay);

			FormatEx(sDisplay2, sizeof sDisplay2, "- Punches: %i HP (%ix) | Rocks: %i HP (%ix) | Props: %i HP (%ix)", g_esPlayer[iTank].g_iClawDamage, g_esPlayer[iTank].g_iClawCount, g_esPlayer[iTank].g_iRockDamage, g_esPlayer[iTank].g_iRockCount, g_esPlayer[iTank].g_iPropDamage, g_esPlayer[iTank].g_iPropCount);
			pHudPanel.DrawText(sDisplay2);

			FormatEx(sDisplay3, sizeof sDisplay3, "- Misc: %i HP (%ix) | Incaps: %ix | Kills: %ix", g_esPlayer[iTank].g_iMiscDamage, g_esPlayer[iTank].g_iMiscCount, g_esPlayer[iTank].g_iIncapCount, g_esPlayer[iTank].g_iKillCount);
			pHudPanel.DrawText(sDisplay3);

			FormatEx(sFrustration, sizeof sFrustration, "%i%%", (100 - GetEntProp(iTank, Prop_Send, "m_frustration")));
			FormatEx(sDisplay4, sizeof sDisplay4, "- Control: %N | Frustration: %s | Total Damage: %i HP", iTank, (bHuman ? sFrustration : "AI"), g_esPlayer[iTank].g_iSurvivorDamage);
			pHudPanel.DrawText(sDisplay4);
		}
	}

	pHudPanel.DrawItem("", ITEMDRAW_SPACER|ITEMDRAW_RAWLINE);
	pHudPanel.CurrentKey = 8;
	pHudPanel.DrawItem("Prev Page", ITEMDRAW_CONTROL);
	pHudPanel.CurrentKey = 9;
	pHudPanel.DrawItem("Next Page", ITEMDRAW_CONTROL);
	pHudPanel.CurrentKey = 10;
	pHudPanel.DrawItem("Exit", ITEMDRAW_CONTROL);
	pHudPanel.Send(developer, iHudMenuHandler, 1);

	delete pHudPanel;
}

int iHudMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	if (action == MenuAction_Select)
	{
		switch (param2)
		{
			case 8:
			{
				g_esPlayer[param1].g_iHudPanelPage--;
				int iPage = g_esPlayer[param1].g_iHudPanelPage;

				switch (g_esPlayer[param1].g_iHudPanelPages > 0)
				{
					case true: g_esPlayer[param1].g_iHudPanelPage = (iPage < 0) ? g_esPlayer[param1].g_iHudPanelPages : iPage;
					case false: g_esPlayer[param1].g_iHudPanelPage = 0;
				}

				vHudPanel(param1, g_esPlayer[param1].g_iHudPanelPage);
			}
			case 9:
			{
				g_esPlayer[param1].g_iHudPanelPage++;
				int iPage = g_esPlayer[param1].g_iHudPanelPage;

				switch (g_esPlayer[param1].g_iHudPanelPages > 0)
				{
					case true: g_esPlayer[param1].g_iHudPanelPage = (iPage > g_esPlayer[param1].g_iHudPanelPages) ? 0 : iPage;
					case false: g_esPlayer[param1].g_iHudPanelPage = 0;
				}

				vHudPanel(param1, g_esPlayer[param1].g_iHudPanelPage);
			}
			case 10:
			{
				g_esPlayer[param1].g_iHudPanelPage = 0;

				delete g_esPlayer[param1].g_hHudTimer;
			}
		}
	}

	return 0;
}

void vInfoMenu(int client, bool adminmenu = false, int item = 0)
{
	Menu mInfoMenu = new Menu(iInfoMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display|MenuAction_DisplayItem);
	mInfoMenu.SetTitle("%s Information", MT_CONFIG_SECTION_MAIN);
	mInfoMenu.AddItem("Status", "Status");
	mInfoMenu.AddItem("Details", "Details");
	mInfoMenu.AddItem("Human Support", "Human Support");

	Call_StartForward(g_esGeneral.g_gfDisplayMenuForward);
	Call_PushCell(mInfoMenu);
	Call_Finish();

	g_esPlayer[client].g_bAdminMenu = adminmenu;
	mInfoMenu.ExitBackButton = g_esPlayer[client].g_bAdminMenu;
	mInfoMenu.DisplayAt(client, item, MENU_TIME_FOREVER);
}

int iInfoMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;
#if defined _adminmenu_included
				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack && g_esGeneral.g_tmMTMenu != null)
				{
					g_esGeneral.g_tmMTMenu.Display(param1, TopMenuPosition_LastCategory);
				}
#endif
			}
		}
		case MenuAction_Select:
		{
			switch (param2)
			{
				case 0: MT_PrintToChat(param1, "%s %t", MT_TAG3, (!g_esGeneral.g_bPluginEnabled ? "AbilityStatus1" : "AbilityStatus2"));
				case 1: MT_PrintToChat(param1, "%s %t", MT_TAG3, "GeneralDetails");
				case 2: MT_PrintToChat(param1, "%s %t", MT_TAG3, (!bIsHumanSupported(param1)) ? "AbilityHumanSupport1" : "AbilityHumanSupport2");
			}

			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			Call_StartForward(g_esGeneral.g_gfMenuItemSelectedForward);
			Call_PushCell(param1);
			Call_PushString(sInfo);
			Call_Finish();

			if (param2 < 3 && bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vInfoMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pInfo = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTInfoMenu", param1);
			pInfo.SetTitle(sMenuTitle);
		}
		case MenuAction_DisplayItem:
		{
			char sMenuOption[PLATFORM_MAX_PATH];

			switch (param2)
			{
				case 0: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "Status", param1);
				case 1: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "Details", param1);
				case 2: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "HumanSupport", param1);
				default:
				{
					char sInfo[33];
					menu.GetItem(param2, sInfo, sizeof sInfo);

					Call_StartForward(g_esGeneral.g_gfMenuItemDisplayedForward);
					Call_PushCell(param1);
					Call_PushString(sInfo);
					Call_PushString(sMenuOption);
					Call_PushCell(sizeof sMenuOption);
					Call_Finish();
				}
			}

			if (sMenuOption[0] != '\0')
			{
				return RedrawMenuItem(sMenuOption);
			}
		}
	}

	return 0;
}

void vPathMenu(int admin, bool adminmenu = false, int item = 0)
{
	Menu mPathMenu = new Menu(iPathMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mPathMenu.SetTitle("File Path Menu");

	int iCount = 0;
	if (g_esGeneral.g_alFilePaths != null)
	{
		int iLength = g_esGeneral.g_alFilePaths.Length, iListSize = (iLength > 0) ? iLength : 0;
		if (iListSize > 0)
		{
			char sFilePath[PLATFORM_MAX_PATH], sMenuName[64];
			int iIndex = -1;
			for (int iPos = 0; iPos < iListSize; iPos++)
			{
				g_esGeneral.g_alFilePaths.GetString(iPos, sFilePath, sizeof sFilePath);
				iIndex = StrContains(sFilePath, "mutant_tanks", false);
				FormatEx(sMenuName, sizeof sMenuName, "%s", sFilePath[iIndex + 13]);
				mPathMenu.AddItem(sFilePath, sMenuName);
				iCount++;
			}
		}
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mPathMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;

	if (iCount > 0)
	{
		mPathMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
	}
	else
	{
		MT_PrintToChat(admin, "%s %t", MT_TAG2, "NoItems");

		delete mPathMenu;
#if defined _adminmenu_included
		if (g_esPlayer[admin].g_bAdminMenu && bIsValidClient(admin, MT_CHECK_INGAME) && g_esGeneral.g_tmMTMenu != null)
		{
			g_esGeneral.g_tmMTMenu.Display(admin, TopMenuPosition_LastCategory);
		}
#endif
	}
}

int iPathMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;
#if defined _adminmenu_included
				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack && g_esGeneral.g_tmMTMenu != null)
				{
					g_esGeneral.g_tmMTMenu.Display(param1, TopMenuPosition_LastCategory);
				}
#endif
			}
		}
		case MenuAction_Select:
		{
			char sInfo[PLATFORM_MAX_PATH];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			g_esGeneral.g_sChosenPath = sInfo;

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vConfigMenu(param1);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pPath = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTPathMenu", param1);
			pPath.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

void vPrefsMenu(int client, int item = 0)
{
	Menu mPrefsMenu = new Menu(iPrefsMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display|MenuAction_DisplayItem);
	mPrefsMenu.SetTitle("Mutant Tanks Preferences Menu");

	char sDisplay[PLATFORM_MAX_PATH], sInfo[3];
	FormatEx(sDisplay, sizeof sDisplay, "Screen Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_SCREEN) ? "ON" : "OFF"));
	IntToString(MT_VISUAL_SCREEN, sInfo, sizeof sInfo);
	mPrefsMenu.AddItem(sInfo, sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Particle Effect Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_PARTICLE) ? "ON" : "OFF"));
	IntToString(MT_VISUAL_PARTICLE, sInfo, sizeof sInfo);
	mPrefsMenu.AddItem(sInfo, sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Looping Voiceline Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_VOICELINE) ? "ON" : "OFF"));
	IntToString(MT_VISUAL_VOICELINE, sInfo, sizeof sInfo);
	mPrefsMenu.AddItem(sInfo, sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Voice Pitch Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_VOICEPITCH) ? "ON" : "OFF"));
	IntToString(MT_VISUAL_VOICEPITCH, sInfo, sizeof sInfo);
	mPrefsMenu.AddItem(sInfo, sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Light Color Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_LIGHT) ? "ON" : "OFF"));
	IntToString(MT_VISUAL_LIGHT, sInfo, sizeof sInfo);
	mPrefsMenu.AddItem(sInfo, sDisplay);

	FormatEx(sDisplay, sizeof sDisplay, "Body Color Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_BODY) ? "ON" : "OFF"));
	IntToString(MT_VISUAL_BODY, sInfo, sizeof sInfo);
	mPrefsMenu.AddItem(sInfo, sDisplay);

	if (g_bSecondGame)
	{
		FormatEx(sDisplay, sizeof sDisplay, "Glow Outline Visual: %s", ((g_esPlayer[client].g_iRewardVisuals & MT_VISUAL_GLOW) ? "ON" : "OFF"));
		IntToString(MT_VISUAL_GLOW, sInfo, sizeof sInfo);
		mPrefsMenu.AddItem(sInfo, sDisplay);
	}

	mPrefsMenu.DisplayAt(client, item, MENU_TIME_FOREVER);
}

int iPrefsMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Select:
		{
			char sInfo[3];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iFlag = StringToInt(sInfo);
			if (g_esPlayer[param1].g_bApplyVisuals[param2] && (g_esPlayer[param1].g_iRewardVisuals & iFlag))
			{
				g_esPlayer[param1].g_bApplyVisuals[param2] = false;
				g_esPlayer[param1].g_iRewardVisuals &= ~iFlag;
#if defined _clientprefs_included
				char sValue[4];
				IntToString(g_esPlayer[param1].g_iRewardVisuals, sValue, sizeof sValue);
				g_esGeneral.g_ckMTPrefs.Set(param1, sValue);
#endif
				vToggleSurvivorEffects(param1, .type = param2, .toggle = false);
			}
			else if (!g_esPlayer[param1].g_bApplyVisuals[param2] && !(g_esPlayer[param1].g_iRewardVisuals & iFlag))
			{
				g_esPlayer[param1].g_bApplyVisuals[param2] = true;
				g_esPlayer[param1].g_iRewardVisuals |= iFlag;
#if defined _clientprefs_included
				char sValue[4];
				IntToString(g_esPlayer[param1].g_iRewardVisuals, sValue, sizeof sValue);
				g_esGeneral.g_ckMTPrefs.Set(param1, sValue);
#endif
				vToggleSurvivorEffects(param1, .type = param2);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vPrefsMenu(param1, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pPrefs = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTPrefsMenu", param1);
			pPrefs.SetTitle(sMenuTitle);
		}
		case MenuAction_DisplayItem:
		{
			char sMenuOption[PLATFORM_MAX_PATH];

			switch (param2)
			{
				case 0: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_SCREEN) ? "ScreenVisualOn" : "ScreenVisualOff"), param1);
				case 1: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_PARTICLE) ? "ParticleVisualOn" : "ParticleVisualOff"), param1);
				case 2: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_VOICELINE) ? "VoicelineVisualOn" : "VoicelineVisualOff"), param1);
				case 3: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_VOICEPITCH) ? "PitchVisualOn" : "PitchVisualOff"), param1);
				case 4: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_LIGHT) ? "LightVisualOn" : "LightVisualOff"), param1);
				case 5: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_BODY) ? "BodyVisualOn" : "BodyVisualOff"), param1);
				case 6: FormatEx(sMenuOption, sizeof sMenuOption, "%T", ((g_esPlayer[param1].g_iRewardVisuals & MT_VISUAL_GLOW) ? "GlowVisualOn" : "GlowVisualOff"), param1);
			}

			return RedrawMenuItem(sMenuOption);
		}
	}

	return 0;
}

void vMutantMenu(int admin, int specType, bool adminmenu = false, int item = 0)
{
	g_esPlayer[admin].g_iSpecTypeMenu = specType;
	Menu mMutantMenu = new Menu(iMutantMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display|MenuAction_DisplayItem);

	switch (specType)
	{
		case 1: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_SUB);
		case 2: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_SUB2);
		case 3: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_SUB3);
		case 4: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_SUB4);
		case 5: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_SUB5);
		case 6: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_SUB6);
		default: mMutantMenu.SetTitle("%s List", MT_CONFIG_SECTION_MAIN);
	}

	mMutantMenu.AddItem("AllTypes", "All Types");
	mMutantMenu.AddItem("IndoorTypes", "Indoor Types");
	mMutantMenu.AddItem("OutdoorTypes", "Outdoor Types");
	mMutantMenu.AddItem("Human-dependentTypes", "Human-dependent Types");
	mMutantMenu.AddItem("Bot-dependentTypes", "Bot-dependent Types");
	mMutantMenu.AddItem("SpawnableTypes", "Spawnable Types");
	mMutantMenu.AddItem("UnspawnableTypes", "Unspawnable Types");

	if (bIsCompetitiveMode())
	{
		mMutantMenu.AddItem("Competitive Types", "Competitive Types");
	}

	g_esPlayer[admin].g_sMenuTitle[0] = '\0';
	g_esPlayer[admin].g_bMutantMenu = adminmenu;
	g_esPlayer[admin].g_iMenuFlags = 0;
	mMutantMenu.ExitBackButton = g_esPlayer[admin].g_bMutantMenu;
	mMutantMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

int iMutantMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bMutantMenu)
			{
				g_esPlayer[param1].g_bMutantMenu = false;
#if defined _adminmenu_included
				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack && g_esGeneral.g_tmMTMenu != null)
				{
					g_esGeneral.g_tmMTMenu.Display(param1, TopMenuPosition_LastCategory);
				}
#endif
			}

			g_esPlayer[param1].g_sMenuTitle[0] = '\0';
			g_esPlayer[param1].g_iMenuFlags = 0;
		}
		case MenuAction_Select:
		{
			menu.GetItem(param2, g_esPlayer[param1].g_sMenuTitle, sizeof esPlayer::g_sMenuTitle);
			g_esPlayer[param1].g_iMenuFlags = (1 << param2);

			switch (g_esPlayer[param1].g_iSpecTypeMenu)
			{
				case 1: vSmokerMenu(param1, true);
				case 2: vBoomerMenu(param1, true);
				case 3: vHunterMenu(param1, true);
				case 4: vSpitterMenu(param1, true);
				case 5: vJockeyMenu(param1, true);
				case 6: vChargerMenu(param1, true);
				default: vTankMenu(param1, true);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);

			switch (g_esPlayer[param1].g_iSpecTypeMenu)
			{
				case 1: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenuSmoker", param1);
				case 2: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenuBoomer", param1);
				case 3: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenuHunter", param1);
				case 4: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenuSpitter", param1);
				case 5: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenuJockey", param1);
				case 6: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenuCharger", param1);
				default: FormatEx(sMenuTitle, sizeof sMenuTitle, "%T", "MTListMenu", param1);
			}

			pList.SetTitle(sMenuTitle);
		}
		case MenuAction_DisplayItem:
		{
			char sMenuOption[PLATFORM_MAX_PATH];

			switch (param2)
			{
				case 0: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "AllTypes", param1);
				case 1: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "IndoorTypes", param1);
				case 2: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "OutdoorTypes", param1);
				case 3: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "Human-dependentTypes", param1);
				case 4: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "Bot-dependentTypes", param1);
				case 5: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "SpawnableTypes", param1);
				case 6: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "UnspawnableTypes", param1);
				case 7: FormatEx(sMenuOption, sizeof sMenuOption, "%T", "CompetitiveTypes", param1);
			}

			return RedrawMenuItem(sMenuOption);
		}
	}

	return 0;
}

void vTankMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sTankName[64];
	Menu mTankMenu = new Menu(iTankMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mTankMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_MAIN, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsTank(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItem", admin, "MTDefaultItem", 0, 0);
			mTankMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItem", admin, "NoName", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mTankMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 8, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsTankEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sTankName, sizeof sTankName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItem", admin, sTankName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mTankMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mTankMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mTankMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

void vSmokerMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sSmokerName[64];
	Menu mSmokerMenu = new Menu(iSmokerMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mSmokerMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_SUB, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsSmoker(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemSmoker", admin, "MTDefaultItemSmoker", 0, 0);
			mSmokerMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemSmoker", admin, "NoNameSmoker", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mSmokerMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 1, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsSmokerEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sSmokerName, sizeof sSmokerName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemSmoker", admin, sSmokerName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mSmokerMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mSmokerMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mSmokerMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

void vBoomerMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sBoomerName[64];
	Menu mBoomerMenu = new Menu(iBoomerMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mBoomerMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_SUB2, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsBoomer(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemBoomer", admin, "MTDefaultItemBoomer", 0, 0);
			mBoomerMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemBoomer", admin, "NoNameBoomer", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mBoomerMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 2, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsBoomerEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sBoomerName, sizeof sBoomerName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemBoomer", admin, sBoomerName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mBoomerMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mBoomerMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mBoomerMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

void vHunterMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sHunterName[64];
	Menu mHunterMenu = new Menu(iHunterMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mHunterMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_SUB3, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsHunter(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemHunter", admin, "MTDefaultItemHunter", 0, 0);
			mHunterMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemHunter", admin, "NoNameHunter", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mHunterMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 3, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsHunterEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sHunterName, sizeof sHunterName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemHunter", admin, sHunterName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mHunterMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mHunterMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mHunterMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

void vSpitterMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sSpitterName[64];
	Menu mSpitterMenu = new Menu(iSpitterMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mSpitterMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_SUB4, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsSpitter(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemSpitter", admin, "MTDefaultItemSpitter", 0, 0);
			mSpitterMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemSpitter", admin, "NoNameSpitter", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mSpitterMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 4, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsSpitterEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sSpitterName, sizeof sSpitterName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemSpitter", admin, sSpitterName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mSpitterMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mSpitterMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mSpitterMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

void vJockeyMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sJockeyName[64];
	Menu mJockeyMenu = new Menu(iJockeyMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mJockeyMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_SUB5, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsJockey(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemJockey", admin, "MTDefaultItemJockey", 0, 0);
			mJockeyMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemJockey", admin, "NoNameJockey", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mJockeyMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 5, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsJockeyEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sJockeyName, sizeof sJockeyName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemJockey", admin, sJockeyName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mJockeyMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mJockeyMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mJockeyMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

void vChargerMenu(int admin, bool adminmenu = false, int item = 0)
{
	char sIndex[5], sMenuItem[64], sChargerName[64];
	Menu mChargerMenu = new Menu(iChargerMenuHandler, MENU_ACTIONS_DEFAULT|MenuAction_Display);
	mChargerMenu.SetTitle("%s List (%s)", MT_CONFIG_SECTION_SUB6, g_esPlayer[admin].g_sMenuTitle);

	switch (bIsCharger(admin))
	{
		case true:
		{
			SetGlobalTransTarget(admin);
			FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemCharger", admin, "MTDefaultItemCharger", 0, 0);
			mChargerMenu.AddItem("Default", sMenuItem, ((g_esPlayer[admin].g_iTankType > 0) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
		}
		case false:
		{
			for (int iIndex = -1; iIndex <= 0; iIndex++)
			{
				SetGlobalTransTarget(admin);
				FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemCharger", admin, "NoNameCharger", iIndex, iIndex);
				IntToString(iIndex, sIndex, sizeof sIndex);
				mChargerMenu.AddItem(sIndex, sMenuItem);
			}
		}
	}

	int iSpecType = 6, iType = 0;
	for (int iIndex = iGetMinType(iSpecType); iIndex <= iGetMaxType(iSpecType); iIndex++)
	{
		iType = g_esTank[iIndex].g_iRecordedType[0];
		if (iIndex <= 0 || iType <= 0 || !bIsChargerEnabled(iType) || !bHasCoreAdminAccess(admin, iType) || !bIsMenuEnabled(iType, iSpecType) || !bIsTypeShown(admin, iType, iSpecType) || !bIsTypeAvailable(iType, admin) || !bIsRightGame(iType, iSpecType))
		{
			continue;
		}

		vGetTankTranslatedName(sChargerName, sizeof sChargerName, .type = iIndex, .specType = iSpecType);
		SetGlobalTransTarget(admin);
		FormatEx(sMenuItem, sizeof sMenuItem, "%T", "MTItemCharger", admin, sChargerName, iType, iIndex);
		IntToString(iIndex, sIndex, sizeof sIndex);
		mChargerMenu.AddItem(sIndex, sMenuItem, ((g_esPlayer[admin].g_iTankType != iType) ? ITEMDRAW_DEFAULT : ITEMDRAW_DISABLED));
	}

	g_esPlayer[admin].g_bAdminMenu = adminmenu;
	mChargerMenu.ExitBackButton = g_esPlayer[admin].g_bAdminMenu;
	mChargerMenu.DisplayAt(admin, item, MENU_TIME_FOREVER);
}

int iTankMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 8, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 8;
			if (StrEqual(sInfo, "Default", false) && bIsTank(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsTankEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vTankMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenu", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

int iSmokerMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 1, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 1;
			if (StrEqual(sInfo, "Default", false) && bIsSmoker(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsSmokerEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vSmokerMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenuSmoker", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

int iBoomerMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 2, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 2;
			if (StrEqual(sInfo, "Default", false) && bIsBoomer(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsBoomerEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vBoomerMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenuBoomer", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

int iHunterMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 3, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 3;
			if (StrEqual(sInfo, "Default", false) && bIsHunter(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsHunterEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vHunterMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenuHunter", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

int iSpitterMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 4, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 4;
			if (StrEqual(sInfo, "Default", false) && bIsSpitter(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsSpitterEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vSpitterMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenuSpitter", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

int iJockeyMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 5, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 5;
			if (StrEqual(sInfo, "Default", false) && bIsJockey(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsJockeyEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vJockeyMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenuJockey", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

int iChargerMenuHandler(Menu menu, MenuAction action, int param1, int param2)
{
	switch (action)
	{
		case MenuAction_End: delete menu;
		case MenuAction_Cancel:
		{
			if (g_esPlayer[param1].g_bAdminMenu)
			{
				g_esPlayer[param1].g_bAdminMenu = false;

				if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE) && param2 == MenuCancel_ExitBack)
				{
					vMutantMenu(param1, 6, true);
				}
			}
		}
		case MenuAction_Select:
		{
			char sInfo[33];
			menu.GetItem(param2, sInfo, sizeof sInfo);
			int iIndex = StringToInt(sInfo), iType = (iIndex > 0) ? g_esTank[iIndex].g_iRecordedType[0] : 0, iSpecType = 6;
			if (StrEqual(sInfo, "Default", false) && bIsCharger(param1))
			{
				vQueueTank(param1, iSpecType, g_esTank[g_esPlayer[param1].g_iTankType].g_iRealType[0], false);
			}
			else if (iIndex <= 0)
			{
				switch (iIndex)
				{
					case -1: vQueueTank(param1, iSpecType, iIndex, false);
					case 0: vSetupTankSpawn(param1, iSpecType, "random", false);
				}
			}
			else if (bIsChargerEnabled(iType) && bHasCoreAdminAccess(param1, iType) && bIsMenuEnabled(iType, iSpecType) && bIsTypeAvailable(iType, param1) && bIsRightGame(iType, iSpecType) && bIsTypeShown(param1, iType, iSpecType))
			{
				vQueueTank(param1, iSpecType, iIndex, false);
			}

			if (bIsValidClient(param1, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT|MT_CHECK_INKICKQUEUE))
			{
				vChargerMenu(param1, g_esPlayer[param1].g_bAdminMenu, menu.Selection);
			}
		}
		case MenuAction_Display:
		{
			char sMenuTitle[PLATFORM_MAX_PATH];
			Panel pList = view_as<Panel>(param2);
			FormatEx(sMenuTitle, sizeof sMenuTitle, "%T (%T)", "MTListMenuCharger", param1, g_esPlayer[param1].g_sMenuTitle, param1);
			pList.SetTitle(sMenuTitle);
		}
	}

	return 0;
}

/**
 * Event functions & callbacks
 **/

void vEventHandler(Event event, const char[] name, bool dontBroadcast)
{
	if (g_esGeneral.g_bPluginEnabled)
	{
		if (StrEqual(name, "ability_use"))
		{
			int iSpecialId = event.GetInt("userid"), iSpecial = GetClientOfUserId(iSpecialId);
			if (bIsInfected(iSpecial))
			{
				vSetTankThrowInterval(iSpecial);
			}
		}
		else if (StrEqual(name, "adrenaline_used"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId);
			if (bIsSurvivor(iSurvivor))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 8);
				if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH))
				{
					float flRadius = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevDopamineRadius > g_esPlayer[iSurvivor].g_flDopamineRadius) ? g_esDeveloper[iSurvivor].g_flDevDopamineRadius : g_esPlayer[iSurvivor].g_flDopamineRadius;
					if (flRadius > 0.0)
					{
						vSetupProximityReward(iSurvivor, iSurvivor, flRadius, 3, {255, 100, 100, 150});
					}
				}
			}
		}
		else if (StrEqual(name, "bot_player_replace"))
		{
			int iBotId = event.GetInt("bot"), iBot = GetClientOfUserId(iBotId),
				iPlayerId = event.GetInt("player"), iPlayer = GetClientOfUserId(iPlayerId);
			if (bIsValidClient(iBot))
			{
				if (bIsTank(iPlayer))
				{
					vSetupTankControl(iBot, iPlayer);
				}
				else if (bIsSurvivor(iPlayer))
				{
					vRemoveSurvivorEffects(iBot);
					vSetupDeveloper(iPlayer, .usual = true);
					vCopyInfectionStats(iBot, iPlayer);
					vRemoveInfection(iBot);
					vCopySurvivorStats(iBot, iPlayer);
					vResetSurvivorStats(iBot, false);
					vToggleSurvivorEffects(iPlayer);
				}
			}
		}
		else if (StrEqual(name, "choke_start") || StrEqual(name, "lunge_pounce") || StrEqual(name, "tongue_grab") || StrEqual(name, "charger_carry_start") || StrEqual(name, "charger_pummel_start") || StrEqual(name, "jockey_ride"))
		{
			int iSpecialId = event.GetInt("userid"), iSpecial = GetClientOfUserId(iSpecialId),
				iSurvivorId = event.GetInt("victim"), iSurvivor = GetClientOfUserId(iSurvivorId);
			if (bIsSpecialInfected(iSpecial) && bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1)))
			{
				vSaveCaughtSurvivor(iSurvivor, iSpecial);
				EmitSoundToAll(SOUND_METAL, iSurvivor);
			}
		}
		else if (StrEqual(name, "create_panic_event"))
		{
			if (bIsSurvivalMode() && g_esGeneral.g_iSurvivalBlock <= 0)
			{
				delete g_esGeneral.g_hSurvivalTimer;

				g_esGeneral.g_iSurvivalBlock = 1;
				g_esGeneral.g_hSurvivalTimer = CreateTimer(g_esGeneral.g_flSurvivalDelay, tTimerDelaySurvival);
			}
		}
		else if (StrEqual(name, "dead_survivor_visible"))
		{
			int iSurvivorId = event.GetInt("deadplayer"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iBody = event.GetInt("subject");
			if (bIsValidClient(iSurvivor) && bIsValidEntity(iBody) && g_esShooter[iSurvivor].g_bDeathModel)
			{
				g_esInfected[iBody].g_iDeathModelOwner = GetClientUserId(iSurvivor);
				g_esShooter[iSurvivor].g_iDeathModel = EntIndexToEntRef(iBody);
				CreateTimer(g_esShooter[iSurvivor].g_flDeathModelDelay, tTimerHideDeathModel, g_esShooter[iSurvivor].g_iDeathModel, TIMER_FLAG_NO_MAPCHANGE);
				g_esShooter[iSurvivor].g_flDeathModelDelay = 0.0;
			}
		}
		else if (StrEqual(name, "defibrillator_used"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iTargetId = event.GetInt("subject"), iTarget = GetClientOfUserId(iTargetId);
			if (bIsSurvivor(iSurvivor) && bIsValidClient(iTarget))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 8);
				if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH))
				{
					float flRadius = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevShockwaveRadius > g_esPlayer[iSurvivor].g_flShockwaveRadius) ? g_esDeveloper[iSurvivor].g_flDevShockwaveRadius : g_esPlayer[iSurvivor].g_flShockwaveRadius;
					if (flRadius > 0.0)
					{
						vSetupProximityReward(iSurvivor, iTarget, flRadius, 2, {80, 175, 255, 150}, MT_CHECK_INGAME);
					}
				}
			}
		}
		else if (StrEqual(name, "entity_shoved"))
		{
			int iSurvivorId = event.GetInt("attacker"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iWitch = event.GetInt("entityid");
			if (bIsWitch(iWitch) && bIsSurvivor(iSurvivor))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 9);
				if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flShoveDamage > 0.0))
				{
					float flMultiplier = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevShoveDamage > g_esPlayer[iSurvivor].g_flShoveDamage) ? g_esDeveloper[iSurvivor].g_flDevShoveDamage : g_esPlayer[iSurvivor].g_flShoveDamage;
					if (flMultiplier > 0.0)
					{
						SDKHooks_TakeDamage(iWitch, iSurvivor, iSurvivor, (float(GetEntProp(iWitch, Prop_Data, "m_iMaxHealth")) * flMultiplier), DMG_CLUB);
					}
				}
			}
		}
		else if (StrEqual(name, "finale_escape_start") || StrEqual(name, "finale_vehicle_incoming") || StrEqual(name, "finale_vehicle_ready"))
		{
			g_esGeneral.g_iTankWave = 3;

			vExecuteFinaleConfigs(name);
		}
		else if (StrEqual(name, "finale_vehicle_leaving"))
		{
			g_esGeneral.g_bFinaleEnded = true;
			g_esGeneral.g_bRoundEnded = true;
			g_esGeneral.g_iTankWave = 4;

			vExecuteFinaleConfigs(name);
		}
		else if (StrEqual(name, "finale_rush") || StrEqual(name, "finale_radio_start") || StrEqual(name, "finale_radio_damaged") || StrEqual(name, "finale_bridge_lowering"))
		{
			vExecuteFinaleConfigs(name);
		}
		else if (StrEqual(name, "finale_start") || StrEqual(name, "gauntlet_finale_start"))
		{
			vExecuteFinaleConfigs(name);

			g_esGeneral.g_iTankWave = 1;
			g_esGeneral.g_bRushCountdown = (g_esGeneral.g_iRushTypes > 0);
		}
		else if (StrEqual(name, "finale_win"))
		{
			g_esMob.g_flBioMassMeter = MT_GetRandomFloat(0.0, 10000.0);

			vExecuteFinaleConfigs(name);
		}
		else if (StrEqual(name, "ghost_spawn_time"))
		{
			int iSpecialId = event.GetInt("userid"), iSpecial = GetClientOfUserId(iSpecialId);
			if (bIsInfected(iSpecial, MT_CHECK_INDEX|MT_CHECK_INGAME) && !bIsValidClient(iSpecial, MT_CHECK_ALIVE) && !bIsInfectedGhost(iSpecial) && g_esGeneral.g_iRushTypes > 0)
			{
				g_esPlayer[iSpecial].g_bRushWaiting = true;

				vRespawnInfectedGhost(iSpecial);
			}
		}
		else if (StrEqual(name, "grenade_bounce"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId);
			if (bIsSurvivor(iSurvivor))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 5) || bIsDeveloper(iSurvivor, 7);
				if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_AMMO))
				{
					int iLimit = (bDeveloper && g_esDeveloper[iSurvivor].g_iDevClusterBombs > g_esPlayer[iSurvivor].g_iClusterBombs) ? g_esDeveloper[iSurvivor].g_iDevClusterBombs : g_esPlayer[iSurvivor].g_iClusterBombs;
					if (g_esGeneral.g_hSDKPipeBombProjectileCreate != null && iLimit > 0 && g_esPlayer[iSurvivor].g_iGrenadeCount < iLimit)
					{
						int iGrenade = -1;
						while ((iGrenade = FindEntityByClassname(iGrenade, "pipe_bomb_projectile")) != INVALID_ENT_REFERENCE)
						{
							if (iGrenade > MaxClients && GetEntPropEnt(iGrenade, Prop_Data, "m_hThrower") == iSurvivor)
							{
								break;
							}
						}

						int iHammerID = GetPlayerWeaponSlot(iSurvivor, 2);
						if (iHammerID > MaxClients)
						{
							iHammerID = GetEntProp(iHammerID, Prop_Data, "m_iHammerID");
							if (iHammerID <= 0)
							{
								if (iGrenade > MaxClients)
								{
									float flOrigin[3], flVelocity[3];
									GetEntPropVector(iGrenade, Prop_Data, "m_vecOrigin", flOrigin);
									flVelocity[0] = MT_GetRandomFloat(-1.0, 1.0) * 150.0;
									flVelocity[1] = MT_GetRandomFloat(-1.0, 1.0) * 150.0;
									flVelocity[2] = MT_GetRandomFloat(0.0, 1.0) * 150.0;

									iGrenade = SDKCall(g_esGeneral.g_hSDKPipeBombProjectileCreate, flOrigin, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, {0.0, 0.0, 0.0}, iSurvivor, 2.0);
									if (iGrenade > MaxClients)
									{
										g_esPlayer[iSurvivor].g_iGrenadeCount++;

										TeleportEntity(iGrenade, .velocity = flVelocity);
										SetEntProp(iGrenade, Prop_Send, "m_nSolidType", 1);
										SetEntProp(iGrenade, Prop_Send, "m_CollisionGroup", 0);
									}
								}
							}
						}
					}
				}
			}
		}
		else if (StrEqual(name, "heal_success"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iTargetId = event.GetInt("subject"), iTarget = GetClientOfUserId(iTargetId);
			if (bIsSurvivor(iSurvivor) && bIsSurvivor(iTarget))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 8);
				if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH))
				{
					float flRadius = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevHealthcareRadius > g_esPlayer[iSurvivor].g_flHealthcareRadius) ? g_esDeveloper[iSurvivor].g_flDevHealthcareRadius : g_esPlayer[iSurvivor].g_flHealthcareRadius,
						flRadius2 = (bDeveloper && g_esDeveloper[iTarget].g_flDevHealthcareRadius > g_esPlayer[iTarget].g_flHealthcareRadius) ? g_esDeveloper[iTarget].g_flDevHealthcareRadius : g_esPlayer[iTarget].g_flHealthcareRadius,
						flFinalRadius = (flRadius > 0.0) ? flRadius : flRadius2;

					if (flFinalRadius > 0.0)
					{
						vSetupProximityReward(iSurvivor, iTarget, flFinalRadius, 1, {0, 255, 0, 150});
					}
				}

				g_esPlayer[iSurvivor].g_bLastLife[0] = false;
				g_esPlayer[iSurvivor].g_iReviveCount = 0;

				if (g_esSurvivorCache[iSurvivor].g_iCarrierCleanse == 1)
				{
					vRemoveInfection(iSurvivor);
				}

				if (g_esGeneral.g_iRushTypes > 0 && g_esPlayer[iSurvivor].g_bLastLife[1])
				{
					vSetSurvivorLastLife(iSurvivor, g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue, false);
				}
			}
		}
		else if (StrEqual(name, "infected_hurt"))
		{
			int iSurvivorId = event.GetInt("attacker"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iInfected = event.GetInt("entityid"), iDamage = event.GetInt("amount"),
				iDamageType = event.GetInt("type");

			if (bIsSurvivor(iSurvivor) && iDamage > 0)
			{
				vSetupProcReward(iSurvivor);

				if (bIsCommonInfectedSupported(iInfected))
				{
					g_esInfected[iInfected].g_iDamageTaken += iDamage;
				}

				if (bIsWitch(iInfected) && !g_esGeneral.g_bWitchKilled[iInfected] && (iDamageType & DMG_BLAST))
				{
					bool bDeveloper = bIsDeveloper(iSurvivor, 11);
					if (bDeveloper || g_esPlayer[iSurvivor].g_bLadyKiller)
					{
						g_esGeneral.g_bWitchKilled[iInfected] = true;
						g_esPlayer[iSurvivor].g_bLadyKiller = false;

						SDKHooks_TakeDamage(iInfected, iSurvivor, iSurvivor, float(GetEntProp(iInfected, Prop_Data, "m_iHealth")), iDamageType);
						EmitSoundToClient(iSurvivor, SOUND_LADYKILLER, iSurvivor, SNDCHAN_AUTO, SNDLEVEL_NORMAL);
					}
				}
			}
		}
		else if (StrEqual(name, "item_pickup"))
		{
			int iSpecialId = event.GetInt("userid"), iSpecial = GetClientOfUserId(iSpecialId);
			if (bIsHumanInfected(iSpecial) && g_esGeneral.g_iRushTypes > 0)
			{
				char sItem[32];
				event.GetString("item", sItem, sizeof sItem);
				if (StrContains(sItem, "claw") != -1 && bIsWrongRushType(sItem))
				{
					vChangeInfectedToGhost(iSpecial);
					vChangeInfectedToRandom(iSpecial);
					vChangeInfectedToTank(iSpecial);
				}
			}
		}
		else if (StrEqual(name, "mission_lost"))
		{
			g_esGeneral.g_bRoundEnded = true;

			vResetRound();
		}
		else if (StrEqual(name, "pills_used"))
		{
			int iSurvivorId = event.GetInt("subject"), iSurvivor = GetClientOfUserId(iSurvivorId);
			if (bIsSurvivor(iSurvivor))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 8);
				if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH))
				{
					float flRadius = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevOverdoseRadius > g_esPlayer[iSurvivor].g_flOverdoseRadius) ? g_esDeveloper[iSurvivor].g_flDevOverdoseRadius : g_esPlayer[iSurvivor].g_flOverdoseRadius;
					if (flRadius > 0.0)
					{
						vSetupProximityReward(iSurvivor, iSurvivor, flRadius, 4, {255, 225, 100, 150});
					}
				}
			}
		}
		else if (StrEqual(name, "player_bot_replace"))
		{
			int iPlayerId = event.GetInt("player"), iPlayer = GetClientOfUserId(iPlayerId),
				iBotId = event.GetInt("bot"), iBot = GetClientOfUserId(iBotId);
			if (bIsValidClient(iPlayer))
			{
				if (bIsTank(iBot))
				{
					vSetupTankControl(iPlayer, iBot);
				}
				else if (bIsSurvivor(iBot))
				{
					vRemoveSurvivorEffects(iPlayer);
					vSetupDeveloper(iPlayer, false);
					vCopyInfectionStats(iPlayer, iBot);
					vRemoveInfection(iPlayer);
					vCopySurvivorStats(iPlayer, iBot);
					vResetSurvivorStats(iPlayer, false);
					vToggleSurvivorEffects(iBot);
				}
			}
		}
		else if (StrEqual(name, "player_connect") || StrEqual(name, "player_disconnect"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId);
			vInitialReset(iSurvivor);
			vDeveloperSettings(iSurvivor);
			vResetTank2(iSurvivor);
		}
		else if (StrEqual(name, "player_death"))
		{
			int iVictimId = event.GetInt("userid"), iVictim = GetClientOfUserId(iVictimId),
				iAttackerId = event.GetInt("attacker"), iAttacker = GetClientOfUserId(iAttackerId),
				iVictimEntity = event.GetInt("entityid");

			if (bIsInfected(iVictim, MT_CHECK_INDEX|MT_CHECK_INGAME))
			{
				g_esPlayer[iVictim].g_bDied = true;
#if defined _actions_included
				g_esPlayer[iVictim].g_sActionName[0] = '\0';
#endif
				if (g_esGeneral.g_iRushTypes > 0 && g_esGeneral.g_bRushSpawning)
				{
					switch (g_esGeneral.g_iHealthKills)
					{
						case 1: vHealAllSurvivors();
						case 2:
						{
							int iNewHealth = 0, iOldHealth = 0, iNewMaxHealth = 0, iOldMaxHealth = 0, iRecipient = 0, iQuotient = 0;
							for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
							{
								if (bIsSurvivor(iSurvivor, MT_CHECK_INGAME|MT_CHECK_ALIVE))
								{
									if (bIsPlayerIncapacitated(iSurvivor))
									{
										iNewHealth = GetEntProp(iSurvivor, Prop_Data, "m_iHealth");
										if (iRecipient <= 0 || (iNewHealth < iOldHealth))
										{
											iOldHealth = iNewHealth;
											iRecipient = iSurvivor;
										}
									}
									else
									{
										iNewHealth = iGetPlayerHealth(iSurvivor, g_esGeneral.g_cvMTPainPillsDecayRate.FloatValue);
										iNewMaxHealth = GetEntProp(iSurvivor, Prop_Data, "m_iMaxHealth");
										iQuotient = (iOldHealth <= 0 || iOldMaxHealth <= 0) ? 0 : (iOldHealth / iOldMaxHealth);
										if (iRecipient <= 0 || ((iNewHealth / iNewMaxHealth) < iQuotient))
										{
											iOldHealth = iNewHealth;
											iOldMaxHealth = iNewMaxHealth;
											iRecipient = iSurvivor;
										}
									}
								}
							}

							if (iRecipient > 0)
							{
								vCheatCommand(iRecipient, "give", "health");

								if (g_esPlayer[iRecipient].g_bLastLife[1])
								{
									vSetSurvivorLastLife(iRecipient, g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue, false);
								}
							}
							else
							{
								vHealAllSurvivors();
							}
						}
					}
				}

				SDKUnhook(iVictim, SDKHook_PostThinkPost, OnTankPostThinkPost);
				vCalculateDeath(iVictim, iAttacker);
				CreateTimer(0.5, tTimerResetType, iVictimId, TIMER_FLAG_NO_MAPCHANGE);

				if (g_esPlayer[iVictim].g_iTankType > 0)
				{
					if (g_esTankCache[iVictim].g_iDeathRevert == 1)
					{
						int iType = g_esPlayer[iVictim].g_iTankType;
						vSetTankColor(iVictim, .revert = true);
						g_esPlayer[iVictim].g_iTankType = iType;
					}

					vResetTank(iVictim, (g_esTankCache[iVictim].g_iDeathRevert == 1));
				}

				int iCount = iGetTankCount(true);
				if (iCount <= 0)
				{
					vResetRegularWavesTimer(false);
				}
			}
			else if (bIsSurvivor(iVictim, MT_CHECK_INDEX|MT_CHECK_INGAME))
			{
				vRemoveLaserSight(iVictim);
				vStopHeartbeat(iVictim, SOUND_HEARTBEAT);

				if (bIsValidClient(iVictim, MT_CHECK_FAKECLIENT) && g_esGeneral.g_iRushTypes > 0 && g_esGeneral.g_iHardcoreMode == 1)
				{
					PrintHintText(iVictim, "%s %t", MT_TAG, "HardcoreModeWarning");
				}

				if (bIsInfected(iAttacker, MT_CHECK_INDEX|MT_CHECK_INGAME))
				{
					g_esPlayer[iAttacker].g_iKillCount++;

					if (g_esTankCache[iAttacker].g_iAnnounceKill == 1)
					{
						int iOption = iGetMessageType(g_esTankCache[iAttacker].g_iKillMessage);
						if (iOption > 0)
						{
							char sPhrase[32], sTankName[64];
							FormatEx(sPhrase, sizeof sPhrase, "Kill%i", iOption);
							vGetTankTranslatedName(sTankName, sizeof sTankName, iAttacker, .survivor = g_esShooter[iAttacker].g_bSurvivor, .character = g_esShooter[iAttacker].g_iCharacter);
							MT_PrintToChatAll("%s %t", MT_TAG2, sPhrase, sTankName, iVictim);
							vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, sPhrase, LANG_SERVER, sTankName, iVictim);
						}
					}
				}

				vRemoveSurvivorEffects(iVictim, true);
			}
			else if (bIsCommonInfectedSupported(iVictimEntity))
			{
				if (g_esInfectedCache[iVictimEntity].g_flCommonDeathPoints > 0.0)
				{
					g_esMob.g_flBioMassMeter += g_esInfectedCache[iVictimEntity].g_flCommonDeathPoints;
					g_esMob.g_flBioMassMeter = flClamp(g_esMob.g_flBioMassMeter, 0.0, float(MT_MAXHEALTH));
				}

				if (g_esInfectedCache[iVictimEntity].g_flCommonDamagePoints >= float(g_esInfected[iVictimEntity].g_iDamageTaken) > 0.0)
				{
					g_esMob.g_flBioMassMeter += g_esInfectedCache[iVictimEntity].g_flCommonDamagePoints;
					g_esMob.g_flBioMassMeter = flClamp(g_esMob.g_flBioMassMeter, 0.0, float(MT_MAXHEALTH));
				}
			}
		}
		else if (StrEqual(name, "player_first_spawn"))
		{
			int iSpecialId = event.GetInt("userid"), iSpecial = GetClientOfUserId(iSpecialId);
			if (bIsHumanInfected(iSpecial, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esGeneral.g_iRushTypes > 0)
			{
				vSetTankPlayer(iSpecial);
			}
		}
		else if (StrEqual(name, "player_hurt"))
		{
			int iVictimId = event.GetInt("userid"), iVictim = GetClientOfUserId(iVictimId),
				iAttackerId = event.GetInt("attacker"), iAttacker = GetClientOfUserId(iAttackerId),
				iAttackerEntity = event.GetInt("attackerentid"), iDamage = event.GetInt("dmg_health");

			if (bIsInfected(iVictim) && !bIsPlayerIncapacitated(iVictim) && bIsSurvivor(iAttacker))
			{
				g_esPlayer[iAttacker].g_iTankDamage[iVictim] += iDamage;

				vSetupProcReward(iAttacker);
			}
			else if (bIsSurvivor(iVictim) && iDamage > 0)
			{
				bool bHuman = bIsValidClient(iVictim, MT_CHECK_FAKECLIENT);
				int iEnabled = (bHuman ? g_esSurvivorCache[iVictim].g_iCarrierEnabled : g_esSurvivorCache[iVictim].g_iCarrierBots),
					iInfection = g_esSurvivorCache[iVictim].g_iCarrierInfection;

				if (iEnabled > 0)
				{
					if (bIsInfected(iAttacker, MT_CHECK_INDEX|MT_CHECK_INGAME) && !bIsMutationUnpredictable(iAttacker) && g_esTank[g_esInfected[iAttacker].g_iTankType].g_iSpawnType <= 0)
					{
						int iBit = g_esPlayer[iAttacker].g_iInfectedType;
						if (iInfection > 0 && !(iInfection & (1 << iBit)))
						{
							return;
						}

						g_esShooter[iVictim].g_bInfected[g_esPlayer[iAttacker].g_iTankType] = true;
						g_esShooter[iVictim].g_iLastSpecial = g_esPlayer[iAttacker].g_iInfectedType;
						g_esShooter[iVictim].g_iLastType = g_esPlayer[iAttacker].g_iTankType;

						if (g_esShooter[iVictim].g_iFirstSpecial <= 0)
						{
							g_esShooter[iVictim].g_iFirstSpecial = g_esPlayer[iAttacker].g_iInfectedType;
						}

						if (g_esShooter[iVictim].g_iFirstType <= 0)
						{
							g_esShooter[iVictim].g_iFirstType = g_esPlayer[iAttacker].g_iTankType;
						}

						if (g_esShooter[iVictim].g_iMostDamage <= 0 || iDamage > g_esShooter[iVictim].g_iMostDamage)
						{
							g_esShooter[iVictim].g_iMostDamage = iDamage;
							g_esShooter[iVictim].g_iMostSpecial = g_esPlayer[iAttacker].g_iInfectedType;
							g_esShooter[iVictim].g_iMostType = g_esPlayer[iAttacker].g_iTankType;
						}

						if (g_esShooter[iVictim].g_iLeastDamage <= 0 || iDamage < g_esShooter[iVictim].g_iLeastDamage)
						{
							g_esShooter[iVictim].g_iLeastDamage = iDamage;
							g_esShooter[iVictim].g_iLeastSpecial = g_esPlayer[iAttacker].g_iInfectedType;
							g_esShooter[iVictim].g_iLeastType = g_esPlayer[iAttacker].g_iTankType;
						}
					}
					else if (bIsValidEntity(iAttackerEntity) && g_esTank[g_esInfected[iAttackerEntity].g_iTankType].g_iSpawnType <= 0)
					{
						if ((bIsCommonInfected(iAttackerEntity) && (iInfection == 0 || (iInfection & MT_SURVINF_COMMON))) || (bIsWitch(iAttackerEntity) && (iInfection == 0 || (iInfection & MT_SURVINF_WITCH))))
						{
							g_esShooter[iVictim].g_bInfected[g_esInfected[iAttackerEntity].g_iTankType] = true;
							g_esShooter[iVictim].g_iLastType = g_esInfected[iAttackerEntity].g_iTankType;

							if (g_esShooter[iVictim].g_iFirstType <= 0)
							{
								g_esShooter[iVictim].g_iFirstType = g_esInfected[iAttackerEntity].g_iTankType;
							}

							if (g_esShooter[iVictim].g_iMostDamage <= 0 || iDamage > g_esShooter[iVictim].g_iMostDamage)
							{
								g_esShooter[iVictim].g_iMostDamage = iDamage;
								g_esShooter[iVictim].g_iMostType = g_esInfected[iAttackerEntity].g_iTankType;
							}

							if (g_esShooter[iVictim].g_iLeastDamage <= 0 || iDamage < g_esShooter[iVictim].g_iLeastDamage)
							{
								g_esShooter[iVictim].g_iLeastDamage = iDamage;
								g_esShooter[iVictim].g_iLeastType = g_esInfected[iAttackerEntity].g_iTankType;
							}
						}
					}
				}
			}
		}
		else if (StrEqual(name, "player_incapacitated"))
		{
			int iVictimId = event.GetInt("userid"), iVictim = GetClientOfUserId(iVictimId);
			if (bIsTank(iVictim, MT_CHECK_INDEX|MT_CHECK_INGAME))
			{
				g_esPlayer[iVictim].g_bDied = false;

				CreateTimer(10.0, tTimerKillStuckTank, iVictimId, TIMER_FLAG_NO_MAPCHANGE);
				vCombineAbilitiesForward(iVictim, MT_COMBO_UPONINCAP);
			}
			else if (bIsSurvivor(iVictim))
			{
				int iAttackerId = event.GetInt("attacker"), iAttacker = GetClientOfUserId(iAttackerId);
				if (bIsInfected(iAttacker, MT_CHECK_INDEX|MT_CHECK_INGAME))
				{
					g_esPlayer[iAttacker].g_iIncapCount++;
				}

				if (g_esGeneral.g_iRushTypes > 0)
				{
					g_esPlayer[iVictim].g_iIncapCount++;

					if (0 <= g_esGeneral.g_iSurvivorIncaps <= g_esPlayer[iVictim].g_iIncapCount)
					{
						g_esPlayer[iVictim].g_bLastLife[1] = true;
					}
				}
			}
		}
		else if (StrEqual(name, "player_now_it"))
		{
			int iPlayerId = event.GetInt("userid"), iPlayer = GetClientOfUserId(iPlayerId);
			if (bIsInfected(iPlayer) || bIsSurvivor(iPlayer))
			{
				vRemovePlayerGlow(iPlayer);
			}

			if (bIsValidClient(iPlayer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && !g_esPlayer[iPlayer].g_bVomited)
			{
				g_esPlayer[iPlayer].g_bVomited = true;
			}
		}
		else if (StrEqual(name, "player_no_longer_it"))
		{
			int iPlayerId = event.GetInt("userid"), iPlayer = GetClientOfUserId(iPlayerId);
			vRestorePlayerGlow(iPlayer);

			if (bIsValidClient(iPlayer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && g_esPlayer[iPlayer].g_bVomited)
			{
				g_esPlayer[iPlayer].g_bVomited = false;
			}
		}
		else if (StrEqual(name, "player_shoved"))
		{
			int iSpecialId = event.GetInt("userid"), iSpecial = GetClientOfUserId(iSpecialId),
				iSurvivorId = event.GetInt("attacker"), iSurvivor = GetClientOfUserId(iSurvivorId);
			if ((bIsTank(iSpecial) || bIsCharger(iSpecial)) && bIsSurvivor(iSurvivor))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 9);
				if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flShoveDamage > 0.0))
				{
					float flMultiplier = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevShoveDamage > g_esPlayer[iSurvivor].g_flShoveDamage) ? g_esDeveloper[iSurvivor].g_flDevShoveDamage : g_esPlayer[iSurvivor].g_flShoveDamage;
					if (flMultiplier > 0.0)
					{
						SDKHooks_TakeDamage(iSpecial, iSurvivor, iSurvivor, (float(GetEntProp(iSpecial, Prop_Data, "m_iMaxHealth")) * flMultiplier), DMG_CLUB);
					}
				}
			}
		}
		else if (StrEqual(name, "player_spawn"))
		{
			int iPlayerId = event.GetInt("userid"), iPlayer = GetClientOfUserId(iPlayerId);
			if (bIsValidClient(iPlayer))
			{
				bool bBlind = g_esGeneral.g_bBlindType;
				int iType = g_esGeneral.g_iChosenType;

				g_esPlayer[iPlayer].g_bFinalFall = false;
				g_esPlayer[iPlayer].g_iInfectedType = iGetInfectedType(iPlayer);

				if (g_esPlayer[iPlayer].g_iInfectedType > 0)
				{
					SDKUnhook(iPlayer, SDKHook_PostThinkPost, OnTankPostThinkPost);

					switch (g_esPlayer[iPlayer].g_iInfectedType == 8)
					{
						case true: iType = (g_esPlayer[iPlayer].g_iPersonalType > 0) ? g_esPlayer[iPlayer].g_iPersonalType : iType;
						case false:
						{
							int iSpecType = g_esPlayer[iPlayer].g_iInfectedType;
							iType = (g_esTeammate[iPlayer].g_iPersonalType[iSpecType] > 0) ? g_esTeammate[iPlayer].g_iPersonalType[iSpecType] : iType;
						}
					}
				}

				DataPack dpPlayerSpawn = new DataPack();
				dpPlayerSpawn.WriteCell(iPlayerId);
				dpPlayerSpawn.WriteCell(iType);
				dpPlayerSpawn.WriteCell(g_esPlayer[iPlayer].g_iInfectedType);
				dpPlayerSpawn.WriteCell(bBlind);
				RequestFrame(vPlayerSpawnFrame, dpPlayerSpawn);
			}
		}
		else if (StrEqual(name, "player_team"))
		{
			int iPlayerId = event.GetInt("userid"), iPlayer = GetClientOfUserId(iPlayerId);
			if (bIsValidClient(iPlayer))
			{
				vRemoveSurvivorEffects(iPlayer);
			}
		}
		else if (StrEqual(name, "revive_success"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iTargetId = event.GetInt("subject"), iTarget = GetClientOfUserId(iTargetId);
			if (bIsSurvivor(iSurvivor) && bIsSurvivor(iTarget))
			{
				bool bDeveloper = bIsDeveloper(iSurvivor, 8);
				if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH))
				{
					float flRadius = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevMotivationRadius > g_esPlayer[iSurvivor].g_flMotivationRadius) ? g_esDeveloper[iSurvivor].g_flDevMotivationRadius : g_esPlayer[iSurvivor].g_flMotivationRadius,
						flRadius2 = (bDeveloper && g_esDeveloper[iTarget].g_flDevMotivationRadius > g_esPlayer[iTarget].g_flMotivationRadius) ? g_esDeveloper[iTarget].g_flDevMotivationRadius : g_esPlayer[iTarget].g_flMotivationRadius,
						flFinalRadius = (flRadius > 0.0) ? flRadius : flRadius2;

					if (flFinalRadius > 0.0)
					{
						vSetupProximityReward(iSurvivor, iTarget, flFinalRadius, 7, {175, 100, 255, 150});
					}
				}

				g_esPlayer[iTarget].g_bLastLife[0] = event.GetBool("lastlife");
				g_esPlayer[iTarget].g_iReviveCount++;
				g_esPlayer[iTarget].g_iReviver = 0;

				if (g_esGeneral.g_iRushTypes > 0 && g_esPlayer[iTarget].g_bLastLife[1])
				{
					vSetSurvivorLastLife(iTarget, g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue, false);
				}
			}
		}
		else if (StrEqual(name, "round_end"))
		{
			g_esGeneral.g_bRoundEnded = true;

			vResetElevatorsList();
			vResetRound();

			if (g_esGeneral.g_iRushTypes > 0)
			{
				vKickInfectedBots();
				vChangeInfectedToGhosts();

				g_esGeneral.g_bRushEnded = true;
			}
		}
		else if (StrEqual(name, "round_start"))
		{
			g_esGeneral.g_bNextRound = !!GameRules_GetProp("m_bInSecondHalfOfRound");
			g_esGeneral.g_bRoundEnded = false;

			vResetElevatorsList();

			if (g_esGeneral.g_alElevators != null)
			{
				int iElevator = -1;
				while ((iElevator = FindEntityByClassname(iElevator, "func_elevator")) != INVALID_ENT_REFERENCE)
				{
					g_esGeneral.g_alElevators.Push(EntIndexToEntRef(iElevator));
				}
			}

			vResetRound();
		}
		else if (StrEqual(name, "round_start_pre_entity"))
		{
			g_esGeneral.g_bRoundEnded = false;

			if (g_esGeneral.g_iRushTypes > 0)
			{
				vRespawnInfectedPlayers(false);
			}
		}
		else if (StrEqual(name, "weapon_given"))
		{
			int iSurvivorId = event.GetInt("userid"), iSurvivor = GetClientOfUserId(iSurvivorId),
				iWeapon = event.GetInt("weapon");
			if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 6) || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && (iWeapon == 15 || iWeapon == 23))
			{
				SDKHook(iSurvivor, SDKHook_WeaponCanSwitchTo, OnWeaponCanSwitchTo);
			}
		}
		else if (StrEqual(name, "witch_harasser_set"))
		{
			int iHarasserId = event.GetInt("userid"), iHarasser = GetClientOfUserId(iHarasserId),
				iWitch = event.GetInt("witchid");
			if (bIsSurvivor(iHarasser, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsWitchSupported(iWitch))
			{
				vMutateWitch(iWitch, MT_WITCHTRIGGER_STARTLED);
			}

			for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
			{
				if (bIsSurvivor(iSurvivor) && g_esPlayer[iSurvivor].g_flLadyKiller > 0.0)
				{
					vSetupLadyKillerReminder(iSurvivor, (g_esPlayer[iSurvivor].g_flLadyKiller / 100.0), true);
				}
			}
		}
		else if (StrEqual(name, "witch_killed"))
		{
			bool bCrowned = event.GetBool("oneshot");
			int iAttackerId = event.GetInt("userid"), iAttacker = GetClientOfUserId(iAttackerId),
				iWitch = event.GetInt("witchid");

			if (bIsSurvivor(iAttacker, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsWitchSupported(iWitch))
			{
				switch (bCrowned)
				{
					case true: vMutateWitch(iWitch, MT_WITCHTRIGGER_CROWNED);
					case false: vMutateWitch(iWitch, MT_WITCHTRIGGER_KILLED);
				}
			}

			g_esGeneral.g_bWitchKilled[iWitch] = false;
		}

		Call_StartForward(g_esGeneral.g_gfEventFiredForward);
		Call_PushCell(event);
		Call_PushString(name);
		Call_PushCell(dontBroadcast);
		Call_Finish();
	}
}

void vHookEvents(bool hook)
{
	static bool bHooked, bCheck[47];
	if (hook && !bHooked)
	{
		bHooked = true;

		bCheck[0] = HookEventEx("ability_use", vEventHandler);
		bCheck[1] = HookEventEx("bot_player_replace", vEventHandler, EventHookMode_Pre);
		bCheck[2] = HookEventEx("choke_start", vEventHandler);
		bCheck[3] = HookEventEx("create_panic_event", vEventHandler);
		bCheck[4] = HookEventEx("entity_shoved", vEventHandler);
		bCheck[5] = HookEventEx("finale_escape_start", vEventHandler);
		bCheck[6] = HookEventEx("finale_start", vEventHandler, EventHookMode_Pre);
		bCheck[7] = HookEventEx("finale_vehicle_leaving", vEventHandler);
		bCheck[8] = HookEventEx("finale_vehicle_ready", vEventHandler);
		bCheck[9] = HookEventEx("finale_rush", vEventHandler);
		bCheck[10] = HookEventEx("finale_radio_start", vEventHandler);
		bCheck[11] = HookEventEx("finale_radio_damaged", vEventHandler);
		bCheck[12] = HookEventEx("finale_win", vEventHandler);
		bCheck[13] = HookEventEx("ghost_spawn_time", vEventHandler);
		bCheck[14] = HookEventEx("grenade_bounce", vEventHandler);
		bCheck[15] = HookEventEx("heal_success", vEventHandler, EventHookMode_Pre);
		bCheck[16] = HookEventEx("infected_hurt", vEventHandler, EventHookMode_Pre);
		bCheck[17] = HookEventEx("item_pickup", vEventHandler);
		bCheck[18] = HookEventEx("lunge_pounce", vEventHandler);
		bCheck[19] = HookEventEx("mission_lost", vEventHandler);
		bCheck[20] = HookEventEx("pills_used", vEventHandler, EventHookMode_Pre);
		bCheck[21] = HookEventEx("player_bot_replace", vEventHandler, EventHookMode_Pre);
		bCheck[22] = HookEventEx("player_connect", vEventHandler, EventHookMode_Pre);
		bCheck[23] = HookEventEx("player_death", vEventHandler, EventHookMode_Pre);
		bCheck[24] = HookEventEx("player_disconnect", vEventHandler, EventHookMode_Pre);
		bCheck[25] = HookEventEx("player_first_spawn", vEventHandler);
		bCheck[26] = HookEventEx("player_hurt", vEventHandler);
		bCheck[27] = HookEventEx("player_incapacitated", vEventHandler);
		bCheck[28] = HookEventEx("player_now_it", vEventHandler);
		bCheck[29] = HookEventEx("player_no_longer_it", vEventHandler);
		bCheck[30] = HookEventEx("player_shoved", vEventHandler);
		bCheck[31] = HookEventEx("player_spawn", vEventHandler);
		bCheck[32] = HookEventEx("player_team", vEventHandler);
		bCheck[33] = HookEventEx("revive_success", vEventHandler);
		bCheck[34] = HookEventEx("tongue_grab", vEventHandler);
		bCheck[35] = HookEventEx("weapon_given", vEventHandler);
		bCheck[36] = HookEventEx("witch_harasser_set", vEventHandler, EventHookMode_Pre);
		bCheck[37] = HookEventEx("witch_killed", vEventHandler, EventHookMode_Pre);

		if (g_bSecondGame)
		{
			bCheck[38] = HookEventEx("adrenaline_used", vEventHandler, EventHookMode_Pre);
			bCheck[39] = HookEventEx("charger_carry_start", vEventHandler);
			bCheck[40] = HookEventEx("charger_pummel_start", vEventHandler);
			bCheck[41] = HookEventEx("dead_survivor_visible", vEventHandler);
			bCheck[42] = HookEventEx("defibrillator_used", vEventHandler, EventHookMode_Pre);
			bCheck[43] = HookEventEx("finale_vehicle_incoming", vEventHandler);
			bCheck[44] = HookEventEx("finale_bridge_lowering", vEventHandler);
			bCheck[45] = HookEventEx("gauntlet_finale_start", vEventHandler);
			bCheck[46] = HookEventEx("jockey_ride", vEventHandler);
		}

		vHookEventForward(true);
		vHookUserMessages(true);
	}
	else if (!hook && bHooked)
	{
		bHooked = false;
		bool bPreHook[48];
		char sEvent[32];

		for (int iPos = 0; iPos < (sizeof bCheck); iPos++)
		{
			switch (iPos)
			{
				case 0: sEvent = "ability_use";
				case 1: sEvent = "bot_player_replace";
				case 2: sEvent = "choke_start";
				case 3: sEvent = "create_panic_event";
				case 4: sEvent = "entity_shoved";
				case 5: sEvent = "finale_escape_start";
				case 6: sEvent = "finale_start";
				case 7: sEvent = "finale_vehicle_leaving";
				case 8: sEvent = "finale_vehicle_ready";
				case 9: sEvent = "finale_rush";
				case 10: sEvent = "finale_radio_start";
				case 11: sEvent = "finale_radio_damaged";
				case 12: sEvent = "finale_win";
				case 13: sEvent = "ghost_spawn_time";
				case 14: sEvent = "grenade_bounce";
				case 15: sEvent = "heal_success";
				case 16: sEvent = "infected_hurt";
				case 17: sEvent = "item_pickup";
				case 18: sEvent = "lunge_pounce";
				case 19: sEvent = "mission_lost";
				case 20: sEvent = "pills_used";
				case 21: sEvent = "player_bot_replace";
				case 22: sEvent = "player_connect";
				case 23: sEvent = "player_death";
				case 24: sEvent = "player_disconnect";
				case 25: sEvent = "player_first_spawn";
				case 26: sEvent = "player_hurt";
				case 27: sEvent = "player_incapacitated";
				case 28: sEvent = "player_now_it";
				case 29: sEvent = "player_no_longer_it";
				case 30: sEvent = "player_shoved";
				case 31: sEvent = "player_spawn";
				case 32: sEvent = "player_team";
				case 33: sEvent = "revive_success";
				case 34: sEvent = "tongue_grab";
				case 35: sEvent = "weapon_given";
				case 36: sEvent = "witch_harasser_set";
				case 37: sEvent = "witch_killed";
				case 38: sEvent = "adrenaline_used";
				case 39: sEvent = "charger_carry_start";
				case 40: sEvent = "charger_pummel_start";
				case 41: sEvent = "dead_survivor_visible";
				case 42: sEvent = "defibrillator_used";
				case 43: sEvent = "finale_vehicle_incoming";
				case 44: sEvent = "finale_bridge_lowering";
				case 45: sEvent = "gauntlet_finale_start";
				case 46: sEvent = "jockey_ride";
			}

			if (bCheck[iPos])
			{
				if (!g_bSecondGame && iPos >= 38 && iPos <= 46)
				{
					continue;
				}

				bCheck[iPos] = false;
				bPreHook[iPos] = (iPos == 1 || iPos == 6 || iPos == 15 || iPos == 16 || (iPos >= 20 && iPos <= 24) || (iPos >= 36 && iPos <= 38) || iPos == 42);

				UnhookEvent(sEvent, vEventHandler, (bPreHook[iPos] ? EventHookMode_Pre : EventHookMode_Post));
			}
		}

		vHookEventForward(false);
		vHookUserMessages(false);
	}
}

void vHookGlobalEvents()
{
	HookEvent("round_start", vEventHandler);
	HookEvent("round_start_pre_entity", vEventHandler);
	HookEvent("round_end", vEventHandler);
}

/**
 * Game Data functions
 **/

void vReadGameData()
{
	g_esGeneral.g_gdMutantTanks = new GameData(MT_GAMEDATA);

	switch (g_esGeneral.g_gdMutantTanks == null)
	{
		case true: SetFailState("Unable to load the \"%s\" gamedata file.", MT_GAMEDATA);
		case false:
		{
			g_esGeneral.g_iPlatformType = iGetGameDataOffset("OS");
			if (g_esGeneral.g_iPlatformType == 0)
			{
				vRegisterSignatures();
				vSetupSignatureAddresses();
				vSetupSignatures();
			}

			if (g_bSecondGame)
			{
				g_esGeneral.g_hSDKGetUseAction = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Entity, SDKConf_Virtual, .name = "CBaseBackpackItem::GetUseAction");
				g_esGeneral.g_hSDKHasConfigurableDifficultySetting = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::HasConfigurableDifficultySetting");
				g_esGeneral.g_hSDKIsFirstMapInScenario = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Raw, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CDirector::IsFirstMapInScenario", .dynamicSig = true, .signature = "MTSignature_IsFirstMapInScenario");
				g_esGeneral.g_hSDKIsInStasis = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Virtual, .returnType = SDKType_Bool, .name = "CBaseEntity::IsInStasis");
				g_esGeneral.g_hSDKIsRealismMode = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::IsRealismMode", .dynamicSig = true, .signature = "MTSignature_IsRealismMode");
				g_esGeneral.g_hSDKIsScavengeMode = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::IsScavengeMode", .dynamicSig = true, .signature = "MTSignature_IsScavengeMode");
				g_esGeneral.g_iMeleeOffset = iGetGameDataOffset("CTerrorPlayer::OnIncapacitatedAsSurvivor::HiddenMeleeWeapon");

				StartPrepSDKCall(SDKCall_Entity);
				if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CGrenadeLauncher::LaunchGrenade"))
				{
					LogError("%s Failed to find signature: CGrenadeLauncher::LaunchGrenade", MT_TAG);
				}
				else
				{
					PrepSDKCall_AddParameter(SDKType_CBasePlayer, SDKPass_Pointer);
					g_esGeneral.g_hSDKLaunchGrenade = EndPrepSDKCall();
					if (g_esGeneral.g_hSDKLaunchGrenade == null)
					{
						LogError("%s Your \"CGrenadeLauncher::LaunchGrenade\" signature is outdated.", MT_TAG);
					}
				}
			}

			g_esGeneral.g_adDirector = adGetGameDataAddress("CDirector");
			g_esGeneral.g_adDoJumpValue = adGetCombinedGameDataAddress("CTerrorGameMovement::DoJump::Value", "DoJumpValueRead", "PlayerLocomotion::GetMaxJumpHeight", "PlayerLocomotion::GetMaxJumpHeight::Call", "PlayerLocomotion::GetMaxJumpHeight::Add", "PlayerLocomotion::GetMaxJumpHeight::Value");
			g_esGeneral.g_hSDKGetRefEHandle = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Raw, SDKConf_Virtual, .name = "CBaseEntity::GetRefEHandle");
			g_esGeneral.g_hSDKWeaponShootPosition = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Virtual, .returnType = SDKType_Vector, .method = SDKPass_ByValue, .name = "CBasePlayer::Weapon_ShootPosition");
			g_esGeneral.g_hSDKHasAnySurvivorLeftSafeArea = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Raw, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CDirector::HasAnySurvivorLeftSafeArea");
			g_esGeneral.g_hSDKGetWeaponID = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Entity, SDKConf_Virtual, .name = "CPainPills::GetWeaponID");
			g_esGeneral.g_hSDKRockDetonate = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Entity, SDKConf_Signature, false, .name = "CTankRock::Detonate");
			g_esGeneral.g_hSDKGetMissionInfo = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .name = "CTerrorGameRules::GetMissionInfo");
			g_esGeneral.g_hSDKIsCoopMode = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::IsCoopMode", .dynamicSig = true, .signature = "MTSignature_IsCoopMode");
			g_esGeneral.g_hSDKIsMissionFinalMap = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::IsMissionFinalMap", .dynamicSig = true, .signature = "MTSignature_IsMissionFinalMap");
			g_esGeneral.g_hSDKIsSurvivalMode = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::IsSurvivalMode", .dynamicSig = true, .signature = "MTSignature_IsSurvivalMode");
			g_esGeneral.g_hSDKIsVersusMode = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_GameRules, SDKConf_Signature, .returnType = SDKType_Bool, .name = "CTerrorGameRules::IsVersusMode", .dynamicSig = true, .signature = "MTSignature_IsVersusMode");
			g_esGeneral.g_hSDKGetLastKnownArea = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Virtual, .name = "CTerrorPlayer::GetLastKnownArea");
			g_esGeneral.g_hSDKITExpired = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Signature, false, .name = "CTerrorPlayer::OnITExpired");
			g_esGeneral.g_hSDKMaterializeFromGhost = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Signature, .name = "CTerrorPlayer::MaterializeFromGhost", .dynamicSig = true, .signature = "MTSignature_MaterializeFromGhost");
			g_esGeneral.g_hSDKRevive = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Signature, false, .name = "CTerrorPlayer::OnRevived");
			g_esGeneral.g_hSDKRoundRespawn = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Signature, false, .name = "CTerrorPlayer::RoundRespawn");
			g_esGeneral.g_hSDKLeaveStasis = hGetSimpleSDKCall(g_esGeneral.g_gdMutantTanks, SDKCall_Player, SDKConf_Signature, .name = "Tank::LeaveStasis");
			g_esGeneral.g_hSDKFirstContainedResponder = hGetVirtualCall(SDKCall_Raw, .name = "Action<Tank>::FirstContainedResponder");
			g_esGeneral.g_hSDKGetMaxClip1 = hGetVirtualCall(SDKCall_Entity, .method = SDKPass_ByValue, .name = "CBaseCombatWeapon::GetMaxClip1");
			g_esGeneral.g_hSDKGetName = hGetVirtualCall(SDKCall_Raw, SDKType_String, .name = "TankIdle::GetName");
			g_esGeneral.g_iAttackerOffset = iGetGameDataOffset("CTerrorPlayer::Event_Killed::Attacker");
			g_esGeneral.g_iFlowOffset = iGetGameDataOffset("CTerrorPlayer::GetFlowDistance::m_flow");
			g_esGeneral.g_iIntentionOffset = iGetGameDataOffset("Tank::GetIntentionInterface::Intention");
			g_esGeneral.g_iVerticalPunchOffset = iGetGameDataOffset("CTerrorWeaponInfo::Parse::VerticalPunch");

			StartPrepSDKCall(SDKCall_Static);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CBaseAbility::CreateForPlayer"))
			{
				LogError("%s Failed to find signature: CBaseAbility::CreateForPlayer", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_CBasePlayer, SDKPass_Pointer);
				PrepSDKCall_SetReturnInfo(SDKType_CBaseEntity, SDKPass_Pointer);
				g_esGeneral.g_hSDKCreateForPlayer = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKCreateForPlayer == null)
				{
					LogError("%s Your \"CBaseAbility::CreateForPlayer\" signature is outdated.", MT_TAG);
				}
			}

			int iOffset = iGetGameDataOffset("CBasePlayer::Weapon_ShootPosition");
			g_esGeneral.g_dhWeaponShootPositionHook = new DynamicHook(iOffset, HookType_Entity, ReturnType_Vector, ThisPointer_CBaseEntity);
			if (g_esGeneral.g_dhWeaponShootPositionHook == null)
			{
				LogError("%s Failed to hook: CBasePlayer::Weapon_ShootPosition", MT_TAG);
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CCSPlayer::State_Transition"))
			{
				LogError("%s Failed to find signature: CCSPlayer::State_Transition", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain);
				g_esGeneral.g_hSDKStateTransition = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKStateTransition == null)
				{
					LogError("%s Your \"CCSPlayer::State_Transition\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Static);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CPipeBombProjectile::Create"))
			{
				LogError("%s Failed to find signature: CPipeBombProjectile::Create", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_Vector, SDKPass_ByRef);
				PrepSDKCall_AddParameter(SDKType_Vector, SDKPass_ByRef);
				PrepSDKCall_AddParameter(SDKType_Vector, SDKPass_ByRef);
				PrepSDKCall_AddParameter(SDKType_Vector, SDKPass_ByRef);
				PrepSDKCall_AddParameter(SDKType_CBaseEntity, SDKPass_Pointer, VDECODE_FLAG_ALLOWWORLD);
				PrepSDKCall_AddParameter(SDKType_Float, SDKPass_Plain);
				PrepSDKCall_SetReturnInfo(SDKType_CBaseEntity, SDKPass_Pointer);

				g_esGeneral.g_hSDKPipeBombProjectileCreate = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKPipeBombProjectileCreate == null)
				{
					LogError("%s Your \"CPipeBombProjectile::Create\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Static);
			int iIndex = iGetSignatureIndex("MTSignature_GetMissionFirstMap");
			if (iIndex == -1 || g_esGeneral.g_iPlatformType > 0)
			{
				if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorGameRules::GetMissionFirstMap"))
				{
					LogError("%s Failed to find signature: CTerrorGameRules::GetMissionFirstMap", MT_TAG);
				}
			}
			else
			{
				char sSignature[1024];
				int iCount = 0;
				vGetBinariesFromSignature(g_esSignature[iIndex].g_sDynamicSig, sSignature, sizeof sSignature, iCount);
				if (!PrepSDKCall_SetSignature(g_esSignature[iIndex].g_sdkLibrary, sSignature, iCount))
				{
					LogError("%s Failed to find dynamic signature: MTSignature_GetMissionFirstMap", MT_TAG);

					if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorGameRules::GetMissionFirstMap"))
					{
						LogError("%s Failed to find signature: CTerrorGameRules::GetMissionFirstMap", MT_TAG);
					}
				}
			}

			PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain, VDECODE_FLAG_ALLOWWORLD);
			PrepSDKCall_SetReturnInfo(SDKType_PlainOldData, SDKPass_Plain);
			g_esGeneral.g_hSDKGetMissionFirstMap = EndPrepSDKCall();
			if (g_esGeneral.g_hSDKGetMissionFirstMap == null)
			{
				LogError("%s Your \"CTerrorGameRules::GetMissionFirstMap\" signature is outdated.", MT_TAG);
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::AddUpgrade"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::AddUpgrade", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_ByValue);
				g_esGeneral.g_hSDKAddUpgrade = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKAddUpgrade == null)
				{
					LogError("%s Your \"CTerrorPlayer::AddUpgrade\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::BecomeGhost"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::BecomeGhost", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain);
				g_esGeneral.g_hSDKBecomeGhost = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKBecomeGhost == null)
				{
					LogError("%s Your \"CTerrorPlayer::BecomeGhost\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Virtual, "CTerrorPlayer::Deafen"))
			{
				LogError("%s Failed to load offset: CTerrorPlayer::Deafen", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_Float, SDKPass_Plain);
				PrepSDKCall_AddParameter(SDKType_Float, SDKPass_Plain);
				PrepSDKCall_AddParameter(SDKType_Float, SDKPass_Plain);

				g_esGeneral.g_hSDKDeafen = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKDeafen == null)
				{
					LogError("%s Your \"CTerrorPlayer::Deafen\" offsets are outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::OnShovedBySurvivor"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::OnShovedBySurvivor", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_CBaseEntity, SDKPass_Pointer);
				PrepSDKCall_AddParameter(SDKType_Vector, SDKPass_ByRef);
				g_esGeneral.g_hSDKShovedBySurvivor = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKShovedBySurvivor == null)
				{
					LogError("%s Your \"CTerrorPlayer::OnShovedBySurvivor\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::OnStaggered"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::OnStaggered", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_CBaseEntity, SDKPass_Pointer);
				PrepSDKCall_AddParameter(SDKType_Vector, SDKPass_Pointer);
				g_esGeneral.g_hSDKStagger = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKStagger == null)
				{
					LogError("%s Your \"CTerrorPlayer::OnStaggered\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::OnVomitedUpon"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::OnVomitedUpon", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_CBasePlayer, SDKPass_Pointer);
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain);
				if (!g_bSecondGame)
				{
					PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain);
				}

				g_esGeneral.g_hSDKVomitedUpon = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKVomitedUpon == null)
				{
					LogError("%s Your \"CTerrorPlayer::OnVomitedUpon\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::PlayerZombieAbortControl"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::PlayerZombieAbortControl", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_Float, SDKPass_Plain);
				g_esGeneral.g_hSDKPlayerZombieAbortControl = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKPlayerZombieAbortControl == null)
				{
					LogError("%s Your \"CTerrorPlayer::PlayerZombieAbortControl\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::RemoveUpgrade"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::RemoveUpgrade", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_ByValue);
				g_esGeneral.g_hSDKRemoveUpgrade = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKRemoveUpgrade == null)
				{
					LogError("%s Your \"CTerrorPlayer::RemoveUpgrade\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Player);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorPlayer::SetClass"))
			{
				LogError("%s Failed to find signature: CTerrorPlayer::SetClass", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain);
				g_esGeneral.g_hSDKSetClass = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKSetClass == null)
				{
					LogError("%s Your \"CTerrorPlayer::SetClass\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Entity);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "CTerrorWeapon::StartAttackTimer"))
			{
				LogError("%s Failed to find signature: CTerrorWeapon::StartAttackTimer", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_Float, SDKPass_Plain);
				g_esGeneral.g_hSDKStartAttackTimer = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKStartAttackTimer == null)
				{
					LogError("%s Your \"CTerrorWeapon::StartAttackTimer\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Static);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "GetWeaponInfo"))
			{
				LogError("%s Failed to find signature: GetWeaponInfo", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_PlainOldData, SDKPass_Plain);
				PrepSDKCall_SetReturnInfo(SDKType_PlainOldData, SDKPass_Plain);
				g_esGeneral.g_hSDKGetWeaponInfo = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKGetWeaponInfo == null)
				{
					LogError("%s Your \"GetWeaponInfo\" signature is outdated.", MT_TAG);
				}
			}

			StartPrepSDKCall(SDKCall_Raw);
			if (!PrepSDKCall_SetFromConf(g_esGeneral.g_gdMutantTanks, SDKConf_Signature, "KeyValues::GetString"))
			{
				LogError("%s Failed to find signature: KeyValues::GetString", MT_TAG);
			}
			else
			{
				PrepSDKCall_AddParameter(SDKType_String, SDKPass_Pointer);
				PrepSDKCall_AddParameter(SDKType_String, SDKPass_Pointer);
				PrepSDKCall_SetReturnInfo(SDKType_String, SDKPass_Pointer);
				g_esGeneral.g_hSDKKeyValuesGetString = EndPrepSDKCall();
				if (g_esGeneral.g_hSDKKeyValuesGetString == null)
				{
					LogError("%s Your \"KeyValues::GetString\" signature is outdated.", MT_TAG);
				}
			}
		}
	}
}

Handle hGetSimpleSDKCall(GameData dataHandle, SDKCallType callType, SDKFuncConfSource source, bool setType = true, SDKType returnType = SDKType_PlainOldData, SDKPassMethod method = SDKPass_Plain, const char[] name, bool dynamicSig = false, const char[] signature = "")
{
	StartPrepSDKCall(callType);
	if (dynamicSig && g_esGeneral.g_iPlatformType == 0)
	{
		int iIndex = iGetSignatureIndex(signature);
		if (iIndex == -1)
		{
			if (!PrepSDKCall_SetFromConf(dataHandle, source, name))
			{
				LogError("%s Failed to find signature: %s", MT_TAG, name);
			}
		}
		else
		{
			char sSignature[1024];
			int iCount = 0;
			vGetBinariesFromSignature(g_esSignature[iIndex].g_sDynamicSig, sSignature, sizeof sSignature, iCount);
			if (!PrepSDKCall_SetSignature(g_esSignature[iIndex].g_sdkLibrary, sSignature, iCount))
			{
				LogError("%s Failed to find dynamic signature: %s", MT_TAG, signature);

				if (!PrepSDKCall_SetFromConf(dataHandle, source, name))
				{
					LogError("%s Failed to find signature: %s", MT_TAG, name);
				}
			}
		}
	}
	else if (!PrepSDKCall_SetFromConf(dataHandle, source, name))
	{
		LogError("%s Failed to find signature: %s", MT_TAG, name);
	}

	if (setType)
	{
		PrepSDKCall_SetReturnInfo(returnType, method);
	}

	Handle hSDKCall = EndPrepSDKCall();
	if (hSDKCall == null)
	{
		LogError("%s Your \"%s\" signature is outdated.", MT_TAG, name);
	}

	return hSDKCall;
}

Handle hGetVirtualCall(SDKCallType callType, SDKType returnType = SDKType_PlainOldData, SDKPassMethod method = SDKPass_Plain, const char[] name)
{
	int iOffset = iGetGameDataOffset(name);
	StartPrepSDKCall(callType);
	PrepSDKCall_SetVirtual(iOffset);
	PrepSDKCall_SetReturnInfo(returnType, method);
	Handle hSDKCall = EndPrepSDKCall();
	if (hSDKCall == null)
	{
		LogError("%s Your \"%s\" offsets are outdated.", MT_TAG, name);
	}

	return hSDKCall;
}

Address adGetCombinedGameDataAddress(const char[] name, const char[] backup, const char[] start, const char[] offset1, const char[] offset2, const char[] offset3)
{
	Address adResult = g_esGeneral.g_gdMutantTanks.GetMemSig(name);
	if (adResult == Address_Null)
	{
		LogError("%s Failed to find address from \"%s\". Retrieving from \"%s\" instead.", MT_TAG, name, backup);

		if (g_bSecondGame || g_esGeneral.g_iPlatformType < 2)
		{
			adResult = g_esGeneral.g_gdMutantTanks.GetAddress(backup);
			if (adResult == Address_Null)
			{
				LogError("%s Failed to find address from \"%s\". Failed to retrieve address from both methods.", MT_TAG, backup);
			}
		}
		else
		{
			Address adValue[4] = {Address_Null, Address_Null, Address_Null, Address_Null};
			adValue[0] = g_esGeneral.g_gdMutantTanks.GetMemSig(start);

			int iOffset[3] = {-1, -1, -1};
			iOffset[0] = iGetGameDataOffset(offset1);
			iOffset[1] = iGetGameDataOffset(offset2);
			iOffset[2] = iGetGameDataOffset(offset3);

			if (adValue[0] == Address_Null || iOffset[0] == -1 || iOffset[1] == -1 || iOffset[2] == -1)
			{
				LogError("%s Failed to find address from \"%s\". Failed to retrieve address from both methods.", MT_TAG, backup);
			}
			else
			{
				adValue[1] = adValue[0] + view_as<Address>(iOffset[0]);
				adValue[2] = LoadFromAddress((adValue[0] + view_as<Address>(iOffset[1])), NumberType_Int32);
				adValue[3] = LoadFromAddress((adValue[0] + view_as<Address>(iOffset[2])), NumberType_Int32);
				adResult = (adValue[1] + adValue[2] + adValue[3]);
			}
		}
	}

	return adResult;
}

Address adGetGameDataAddress(const char[] name)
{
	Address adAddress = g_esGeneral.g_gdMutantTanks.GetAddress(name);
	if (adAddress == Address_Null)
	{
		LogError("%s Failed to find address: %s", MT_TAG, name);
	}

	return adAddress;
}

int iGetGameDataOffset(const char[] name)
{
	int iOffset = g_esGeneral.g_gdMutantTanks.GetOffset(name);
	if (iOffset == -1)
	{
		LogError("%s Failed to load offset: %s", MT_TAG, name);
	}

	return iOffset;
}

/**
 * Forward functions
 **/

void vChangeTypeForward(int tank, int oldType, int newType, bool revert)
{
	Call_StartForward(g_esGeneral.g_gfChangeTypeForward);
	Call_PushCell(tank);
	Call_PushCell(oldType);
	Call_PushCell(newType);
	Call_PushCell(revert);
	Call_Finish();
}

void vCombineAbilitiesForward(int tank, int type, int survivor = 0, int weapon = 0, const char[] classname = "")
{
	if (bIsSpecialSupported(tank) && bIsCustomTankSupported(tank) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flComboTypeChance[type] && g_esPlayer[tank].g_bCombo)
	{
		Call_StartForward(g_esGeneral.g_gfCombineAbilitiesForward);
		Call_PushCell(tank);
		Call_PushCell(type);
		Call_PushFloat(GetRandomFloat(0.1, 100.0));
		Call_PushString(g_esTankCache[tank].g_sComboSet);
		Call_PushCell(survivor);
		Call_PushCell(weapon);
		Call_PushString(classname);
		Call_Finish();
	}
}

void vHookEventForward(bool mode)
{
	Call_StartForward(g_esGeneral.g_gfHookEventForward);
	Call_PushCell(mode);
	Call_Finish();
}

void vResetTimersForward(int mode = 0, int tank = 0)
{
	Call_StartForward(g_esGeneral.g_gfResetTimersForward);
	Call_PushCell(mode);
	Call_PushCell(tank);
	Call_Finish();
}

void vRewardSurvivorForward(int survivor, int tank, int type, int priority, float time, bool apply, Action &result)
{
	Call_StartForward(g_esGeneral.g_gfRewardSurvivorForward);
	Call_PushCell(survivor);
	Call_PushCell(tank);
	Call_PushCellRef(type);
	Call_PushCell(priority);
	Call_PushFloatRef(time);
	Call_PushCell(apply);
	Call_Finish(result);
}

void vRockThrowForward(int tank, int rock)
{
	Call_StartForward(g_esGeneral.g_gfRockThrowForward);
	Call_PushCell(tank);
	Call_PushCell(rock);
	Call_Finish();
}

void vToggleSurvivorPassiveForward(int survivor, int type, bool apply, bool weaponOnly, int weaponIndex, Action &result)
{
	Call_StartForward(g_esGeneral.g_gfToggleSurvivorPassiveForward);
	Call_PushCell(survivor);
	Call_PushCellRef(type);
	Call_PushCell(apply);
	Call_PushCell(weaponOnly);
	Call_PushCell(weaponIndex);
	Call_Finish(result);
}

/**
 * Passive system functions
 **/

void vCheckSurvivorPassive(int survivor)
{
	int iSetting = bIsValidClient(survivor, MT_CHECK_FAKECLIENT) ? g_esSurvivorCache[survivor].g_iPassiveEnabled : g_esSurvivorCache[survivor].g_iPassiveBots,
		iPassiveType = iSetting;
	iPassiveType = (iSetting == 0) ? (1 << MT_GetRandomInt(0, 7)) : iSetting;
	if (bIsDeveloper(survivor, 0))
	{
		iPassiveType = g_esDeveloper[survivor].g_iDevPassiveTypes;
	}

	vToggleSurvivorPassive(survivor, iPassiveType, true);
}

void vEndPassives(int survivor, bool force)
{
	bool bCheck = false;
	int iType = 0;
	for (int iPos = 0; iPos < 7; iPos++)
	{
		switch (iPos)
		{
			case 0: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_HEALTH);
			case 1: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST);
			case 2: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST);
			case 3: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST);
			case 4: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_AMMO);
			case 5: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_GODMODE);
			case 6: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_REFILL);
			case 7: bCheck = !!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_INFAMMO);
		}

		if (bCheck && (g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded || force || g_esShooter[survivor].g_iCharacterType[0] != GetEntProp(survivor, Prop_Send, "m_survivorCharacter")))
		{
			switch (iPos)
			{
				case 0: iType |= MT_PASSIVE_HEALTH;
				case 1: iType |= MT_PASSIVE_SPEEDBOOST;
				case 2: iType |= MT_PASSIVE_DAMAGEBOOST;
				case 3: iType |= MT_PASSIVE_ATTACKBOOST;
				case 4: iType |= MT_PASSIVE_AMMO;
				case 5: iType |= MT_PASSIVE_GODMODE;
				case 6: iType |= MT_PASSIVE_REFILL;
				case 7: iType |= MT_PASSIVE_INFAMMO;
			}
		}
	}

	if (iType > 0)
	{
		vToggleSurvivorPassive(survivor, iType);
	}
}

void vPassiveLadyKillerMessage(int survivor, bool weaponOnly, int weaponIndex)
{
	if (!bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		return;
	}

	float flPassive = g_esSurvivorCache[survivor].g_flLadyKillerPassive, flPassive2 = flPassive;
	if (weaponOnly && weaponIndex > 0)
	{
#if defined _WeaponHandling_included
		switch (g_esWeapon[weaponIndex].g_iStackPassives & MT_PASSIVE_DAMAGEBOOST)
		{
			case true:
			{
				flPassive2 = g_esWeapon[weaponIndex].g_flLadyKillerPassive;
				flPassive2 = flClamp(flPassive2, 0.0, 100.0);
			}
			case false: flPassive2 = flPassive;
		}
#endif
	}

	vSetupLadyKillerReminder(survivor, (flPassive2 / 100.0), (g_esShooter[survivor].g_iNotify == 1));
}

void vPassiveMessage(int survivor, int count, const char[] list)
{
	if (!bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) || count <= 0 || g_esShooter[survivor].g_iNotify <= 0)
	{
		return;
	}

	MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardReceived", list);
}

void vResetPassives(int survivor, int type, bool weaponOnly = false)
{
	switch (type)
	{
		case MT_PASSIVE_HEALTH:
		{
			g_esPlayer[survivor].g_flDopamineRadius = (weaponOnly ? g_esSurvivorCache[survivor].g_flDopamineRadiusPassive : 0.0);
			g_esPlayer[survivor].g_flHealPercent = (weaponOnly ? g_esSurvivorCache[survivor].g_flHealPercentPassive : 0.0);
			g_esPlayer[survivor].g_flHealthcareRadius = (weaponOnly ? g_esSurvivorCache[survivor].g_flHealthcareRadiusPassive : 0.0);
			g_esPlayer[survivor].g_flHeartbeat = (weaponOnly ? g_esSurvivorCache[survivor].g_flHeartbeatPassive : 0.0);
			g_esPlayer[survivor].g_flHeartbeatCooldown = -1.0;
			g_esPlayer[survivor].g_flMotivationRadius = (weaponOnly ? g_esSurvivorCache[survivor].g_flMotivationRadiusPassive : 0.0);
			g_esPlayer[survivor].g_flOverdoseRadius = (weaponOnly ? g_esSurvivorCache[survivor].g_flOverdoseRadiusPassive : 0.0);
			g_esPlayer[survivor].g_flRefillPercent = (weaponOnly ? g_esSurvivorCache[survivor].g_flRefillPercentPassive : 0.0);
			g_esPlayer[survivor].g_flShockwaveRadius = (weaponOnly ? g_esSurvivorCache[survivor].g_flShockwaveRadiusPassive : 0.0);
			g_esPlayer[survivor].g_iBlazeHealth = (weaponOnly ? g_esSurvivorCache[survivor].g_iBlazeHealthPassive : 0);
			g_esPlayer[survivor].g_iBloodDonor = (weaponOnly ? g_esSurvivorCache[survivor].g_iBloodDonorPassive : 0);
			g_esPlayer[survivor].g_iHealthRegen = (weaponOnly ? g_esSurvivorCache[survivor].g_iHealthRegenPassive : 0);
			g_esPlayer[survivor].g_iLifeLeech = (weaponOnly ? g_esSurvivorCache[survivor].g_iLifeLeechPassive : 0);
			g_esPlayer[survivor].g_iMedicalCuts = (weaponOnly ? g_esSurvivorCache[survivor].g_iMedicalCutsPassive : 0);
			g_esPlayer[survivor].g_iOverhealth = (weaponOnly ? g_esSurvivorCache[survivor].g_iOverhealthPassive : 0);
			g_esPlayer[survivor].g_iRegenBursts = (weaponOnly ? g_esSurvivorCache[survivor].g_iRegenBurstsPassive : 0);
			g_esPlayer[survivor].g_iReviveHealth = (weaponOnly ? g_esSurvivorCache[survivor].g_iReviveHealthPassive : 0);
			g_esPlayer[survivor].g_iSyringeDarts = (weaponOnly ? g_esSurvivorCache[survivor].g_iSyringeDartsPassive : 0);
		}
		case MT_PASSIVE_SPEEDBOOST:
		{
			g_esPlayer[survivor].g_flAdrenalineTime = (weaponOnly ? g_esSurvivorCache[survivor].g_flAdrenalineTimePassive : 0.0);
			g_esPlayer[survivor].g_flJumpHeight = (weaponOnly ? g_esSurvivorCache[survivor].g_flJumpHeightPassive : 0.0);
			g_esPlayer[survivor].g_flSpeedBoost = (weaponOnly ? g_esSurvivorCache[survivor].g_flSpeedBoostPassive : 0.0);
			g_esPlayer[survivor].g_iBunnyHop = (weaponOnly ? g_esSurvivorCache[survivor].g_iBunnyHopPassive : 0);
			g_esPlayer[survivor].g_iFallPasses = (weaponOnly ? 0 : MT_JUMP_FALLPASSES);
			g_esPlayer[survivor].g_iMidairDashesLimit = (weaponOnly ? g_esSurvivorCache[survivor].g_iMidairDashesPassive : 0);
			g_esPlayer[survivor].g_iStickyGrenades = (weaponOnly ? g_esSurvivorCache[survivor].g_iStickyGrenadesPassive : 0);
		}
		case MT_PASSIVE_DAMAGEBOOST:
		{
			g_esPlayer[survivor].g_flDamageBoost = (weaponOnly ? g_esSurvivorCache[survivor].g_flDamageBoostPassive : 0.0);
			g_esPlayer[survivor].g_flDamageResistance = (weaponOnly ? g_esSurvivorCache[survivor].g_flDamageResistancePassive : 0.0);
			g_esPlayer[survivor].g_flHollowpointAmmo = (weaponOnly ? g_esSurvivorCache[survivor].g_flHollowpointAmmoPassive : 0.0);
			g_esPlayer[survivor].g_flLadyKiller = (weaponOnly ? g_esSurvivorCache[survivor].g_flLadyKillerPassive : 0.0);
			g_esPlayer[survivor].g_flPipeBombDuration = (weaponOnly ? g_esSurvivorCache[survivor].g_flPipeBombDurationPassive : 0.0);
			g_esPlayer[survivor].g_flSledgehammerRounds = (weaponOnly ? g_esSurvivorCache[survivor].g_flSledgehammerRoundsPassive : 0.0);
			g_esPlayer[survivor].g_iEternalFlames = (weaponOnly ? g_esSurvivorCache[survivor].g_iEternalFlamesPassive : 0);
			g_esPlayer[survivor].g_iFriendlyFire = (weaponOnly ? g_esSurvivorCache[survivor].g_iFriendlyFirePassive : 0);
			g_esPlayer[survivor].g_iGhostBullets = (weaponOnly ? g_esSurvivorCache[survivor].g_iGhostBulletsPassive : 0);
			g_esPlayer[survivor].g_iLaserSight = (weaponOnly ? g_esSurvivorCache[survivor].g_iLaserSightPassive : 0);
			g_esPlayer[survivor].g_iMeleeRange = (weaponOnly ? g_esSurvivorCache[survivor].g_iMeleeRangePassive : 0);
			g_esPlayer[survivor].g_iRecoilDampener = (weaponOnly ? g_esSurvivorCache[survivor].g_iRecoilDampenerPassive : 0);
			g_esPlayer[survivor].g_iThorns = (weaponOnly ? g_esSurvivorCache[survivor].g_iThornsPassive : 0);
		}
		case MT_PASSIVE_ATTACKBOOST:
		{
			g_esPlayer[survivor].g_flActionDuration = (weaponOnly ? g_esSurvivorCache[survivor].g_flActionDurationPassive : 0.0);
			g_esPlayer[survivor].g_flAttackBoost = (weaponOnly ? g_esSurvivorCache[survivor].g_flAttackBoostPassive : 0.0);
			g_esPlayer[survivor].g_flFireRate = (weaponOnly ? g_esSurvivorCache[survivor].g_flFireRatePassive : 0.0);
			g_esPlayer[survivor].g_flRapidPistol = (weaponOnly ? g_esSurvivorCache[survivor].g_flRapidPistolPassive : 0.0);
			g_esPlayer[survivor].g_flReloadRate = (weaponOnly ? g_esSurvivorCache[survivor].g_flReloadRatePassive : 0.0);
			g_esPlayer[survivor].g_flShoveDamage = (weaponOnly ? g_esSurvivorCache[survivor].g_flShoveDamagePassive : 0.0);
			g_esPlayer[survivor].g_flShoveRate = (weaponOnly ? g_esSurvivorCache[survivor].g_flShoveRatePassive : 0.0);
			g_esPlayer[survivor].g_flSwingRate = (weaponOnly ? g_esSurvivorCache[survivor].g_flSwingRatePassive : 0.0);
			g_esPlayer[survivor].g_iBurstDoors = (weaponOnly ? g_esSurvivorCache[survivor].g_iBurstDoorsPassive : 0);
			g_esPlayer[survivor].g_iFastRecovery = (weaponOnly ? g_esSurvivorCache[survivor].g_iFastRecoveryPassive : 0);
			g_esPlayer[survivor].g_iLadderActions = (weaponOnly ? g_esSurvivorCache[survivor].g_iLadderActionsPassive : 0);
			g_esPlayer[survivor].g_iShovePenalty = (weaponOnly ? g_esSurvivorCache[survivor].g_iShovePenaltyPassive : 0);
		}
		case MT_PASSIVE_AMMO:
		{
			g_esPlayer[survivor].g_flGrenadeLauncher = (weaponOnly ? g_esSurvivorCache[survivor].g_flGrenadeLauncherPassive : 0.0);
			g_esPlayer[survivor].g_flLuckyBullet = (weaponOnly ? g_esSurvivorCache[survivor].g_flLuckyBulletPassive : 0.0);
			g_esPlayer[survivor].g_flSupplier = (weaponOnly ? g_esSurvivorCache[survivor].g_flSupplierPassive : 0.0);
			g_esPlayer[survivor].g_flSupplierCooldown = -1.0;
			g_esPlayer[survivor].g_iAmmoBoost = (weaponOnly ? g_esSurvivorCache[survivor].g_iAmmoBoostPassive : 0);
			g_esPlayer[survivor].g_iAmmoRefill = (weaponOnly ? g_esSurvivorCache[survivor].g_iAmmoRefillPassive : 0);
			g_esPlayer[survivor].g_iAmmoRegen = (weaponOnly ? g_esSurvivorCache[survivor].g_iAmmoRegenPassive : 0);
			g_esPlayer[survivor].g_iClusterBombs = (weaponOnly ? g_esSurvivorCache[survivor].g_iClusterBombsPassive : 0);
			g_esPlayer[survivor].g_iSpecialAmmo = (weaponOnly ? g_esSurvivorCache[survivor].g_iSpecialAmmoPassive : 0);
		}
		case MT_PASSIVE_GODMODE:
		{
			g_esPlayer[survivor].g_flPunchResistance = (weaponOnly ? g_esSurvivorCache[survivor].g_flPunchResistancePassive : 0.0);
			g_esPlayer[survivor].g_iCleanKills = (weaponOnly ? g_esSurvivorCache[survivor].g_iCleanKillsPassive : 0);
			g_esPlayer[survivor].g_iRiotGear = (weaponOnly ? g_esSurvivorCache[survivor].g_iRiotGearPassive : 0);
			g_esPlayer[survivor].g_iSafetyBubble = (weaponOnly ? g_esSurvivorCache[survivor].g_iSafetyBubblePassive : 0);
		}
		case MT_PASSIVE_REFILL:
		{
			g_esPlayer[survivor].g_flRefillPercent = (weaponOnly ? g_esSurvivorCache[survivor].g_flRefillPercentPassive : 0.0);
			g_esPlayer[survivor].g_iAmmoRefill = (weaponOnly ? g_esSurvivorCache[survivor].g_iAmmoRefillPassive : 0);
		}
		case MT_PASSIVE_INFAMMO: g_esPlayer[survivor].g_iInfiniteAmmo = (weaponOnly ? g_esSurvivorCache[survivor].g_iInfiniteAmmoPassive : 0);
	}
}

void vSetupAmmoPassive(int survivor, bool weaponOnly, int weaponIndex)
{
	vSetupPassives(survivor, MT_PASSIVE_AMMO, weaponOnly, weaponIndex);

	if (!weaponOnly && g_esPlayer[survivor].g_iAmmoRefill == 1)
	{
		vCheckGunClipSizes(survivor);
		vRefillGunAmmo(survivor);
	}

	vGiveGunSpecialAmmo(survivor);
}

void vSetupHealthPassive(int survivor, bool weaponOnly, int weaponIndex)
{
	vSetupPassives(survivor, MT_PASSIVE_HEALTH, weaponOnly, weaponIndex);

	if (!weaponOnly)
	{
		vSaveCaughtSurvivor(survivor);
		vRefillSurvivorHealth(survivor);
	}
}

void vSetupItemPassive(int survivor, char[] buffer, int size)
{
	bool bListed = false;
	char sLoadout[320], sItems[5][64], sList[320];
	strcopy(sLoadout, sizeof sLoadout, g_esSurvivorCache[survivor].g_sItemPassive);
	if (FindCharInString(sLoadout, ';') != -1)
	{
		int iItemCount = 0;
		ExplodeString(sLoadout, ";", sItems, sizeof sItems, sizeof sItems[]);
		for (int iPos = 0; iPos < (sizeof sItems); iPos++)
		{
			if (sItems[iPos][0] != '\0')
			{
				iItemCount++;

				vCheatCommand(survivor, "give", sItems[iPos]);
				ReplaceString(sItems[iPos], sizeof sItems[], "_", " ");

				switch (bListed)
				{
					case true:
					{
						switch (iPos < ((sizeof sItems) - 1) && sItems[iPos + 1][0] != '\0')
						{
							case true: Format(sList, sizeof sList, "%s{default}, {yellow}%s", sList, sItems[iPos]);
							case false:
							{
								switch (iItemCount == 2 && buffer[0] == '\0')
								{
									case true: Format(sList, sizeof sList, "%s{default} %T{yellow} %s", sList, "AndConjunction", survivor, sItems[iPos]);
									case false: Format(sList, sizeof sList, "%s{default}, %T{yellow} %s", sList, "AndConjunction", survivor, sItems[iPos]);
								}
							}
						}
					}
					case false:
					{
						bListed = true;

						FormatEx(sList, sizeof sList, "%s", sItems[iPos]);
					}
				}
			}
		}

		vRewardItemMessage(survivor, sList, buffer, size, true);
	}
	else
	{
		vCheatCommand(survivor, "give", sLoadout);
		ReplaceString(sLoadout, sizeof sLoadout, "_", " ");
		vRewardItemMessage(survivor, sLoadout, buffer, size, false);
	}
}

void vSetupPassives(int survivor, int type, bool weaponOnly = false, int weaponIndex = 0)
{
	switch (type)
	{
		case MT_PASSIVE_HEALTH:
		{
			g_esPlayer[survivor].g_flDopamineRadius = g_esSurvivorCache[survivor].g_flDopamineRadiusPassive;
			g_esPlayer[survivor].g_flHealPercent = g_esSurvivorCache[survivor].g_flHealPercentPassive;
			g_esPlayer[survivor].g_flHealthcareRadius = g_esSurvivorCache[survivor].g_flHealthcareRadiusPassive;
			g_esPlayer[survivor].g_flHeartbeat = g_esSurvivorCache[survivor].g_flHeartbeatPassive;
			g_esPlayer[survivor].g_flHeartbeatCooldown = -1.0;
			g_esPlayer[survivor].g_flMotivationRadius = g_esSurvivorCache[survivor].g_flMotivationRadiusPassive;
			g_esPlayer[survivor].g_flOverdoseRadius = g_esSurvivorCache[survivor].g_flOverdoseRadiusPassive;
			g_esPlayer[survivor].g_flRefillPercent = g_esSurvivorCache[survivor].g_flRefillPercentPassive;
			g_esPlayer[survivor].g_flShockwaveRadius = g_esSurvivorCache[survivor].g_flShockwaveRadiusPassive;
			g_esPlayer[survivor].g_iBlazeHealth = g_esSurvivorCache[survivor].g_iBlazeHealthPassive;
			g_esPlayer[survivor].g_iBloodDonor = g_esSurvivorCache[survivor].g_iBloodDonorPassive;
			g_esPlayer[survivor].g_iHealthRegen = g_esSurvivorCache[survivor].g_iHealthRegenPassive;
			g_esPlayer[survivor].g_iLifeLeech = g_esSurvivorCache[survivor].g_iLifeLeechPassive;
			g_esPlayer[survivor].g_iMedicalCuts = g_esSurvivorCache[survivor].g_iMedicalCutsPassive;
			g_esPlayer[survivor].g_iOverhealth = g_esSurvivorCache[survivor].g_iOverhealthPassive;
			g_esPlayer[survivor].g_iRegenBursts = g_esSurvivorCache[survivor].g_iRegenBurstsPassive;
			g_esPlayer[survivor].g_iReviveHealth = g_esSurvivorCache[survivor].g_iReviveHealthPassive;
			g_esPlayer[survivor].g_iSyringeDarts = g_esSurvivorCache[survivor].g_iSyringeDartsPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flDopamineRadius += g_esWeapon[weaponIndex].g_flDopamineRadiusPassive;
					g_esPlayer[survivor].g_flDopamineRadius = flClamp(g_esPlayer[survivor].g_flDopamineRadius, 0.0, 100.0);
					g_esPlayer[survivor].g_flHealPercent += g_esWeapon[weaponIndex].g_flHealPercentPassive;
					g_esPlayer[survivor].g_flHealPercent = flClamp(g_esPlayer[survivor].g_flHealPercent, 0.0, 100.0);
					g_esPlayer[survivor].g_flHealthcareRadius += g_esWeapon[weaponIndex].g_flHealthcareRadiusPassive;
					g_esPlayer[survivor].g_flHealthcareRadius = flClamp(g_esPlayer[survivor].g_flHealthcareRadius, 0.0, 100.0);
					g_esPlayer[survivor].g_flHeartbeat += g_esWeapon[weaponIndex].g_flHeartbeatPassive;
					g_esPlayer[survivor].g_flHeartbeat = flClamp(g_esPlayer[survivor].g_flHeartbeat, 0.0, 99999.0);
					g_esPlayer[survivor].g_flMotivationRadius += g_esWeapon[weaponIndex].g_flMotivationRadiusPassive;
					g_esPlayer[survivor].g_flMotivationRadius = flClamp(g_esPlayer[survivor].g_flMotivationRadius, 0.0, 100.0);
					g_esPlayer[survivor].g_flOverdoseRadius += g_esWeapon[weaponIndex].g_flOverdoseRadiusPassive;
					g_esPlayer[survivor].g_flOverdoseRadius = flClamp(g_esPlayer[survivor].g_flOverdoseRadius, 0.0, 100.0);
					g_esPlayer[survivor].g_flRefillPercent += g_esWeapon[weaponIndex].g_flRefillPercentPassive;
					g_esPlayer[survivor].g_flRefillPercent = flClamp(g_esPlayer[survivor].g_flRefillPercent, 0.0, 100.0);
					g_esPlayer[survivor].g_flShockwaveRadius += g_esWeapon[weaponIndex].g_flShockwaveRadiusPassive;
					g_esPlayer[survivor].g_flShockwaveRadius = flClamp(g_esPlayer[survivor].g_flShockwaveRadius, 0.0, 100.0);
					g_esPlayer[survivor].g_iBlazeHealth += g_esWeapon[weaponIndex].g_iBlazeHealthPassive;
					g_esPlayer[survivor].g_iBlazeHealth = iClamp(g_esPlayer[survivor].g_iBlazeHealth, 0, 99999);
					g_esPlayer[survivor].g_iBloodDonor += g_esWeapon[weaponIndex].g_iBloodDonorPassive;
					g_esPlayer[survivor].g_iBloodDonor = iClamp(g_esPlayer[survivor].g_iBloodDonor, 0, 99999);
					g_esPlayer[survivor].g_iHealthRegen += g_esWeapon[weaponIndex].g_iHealthRegenPassive;
					g_esPlayer[survivor].g_iHealthRegen = iClamp(g_esPlayer[survivor].g_iHealthRegen, 0, MT_MAXHEALTH);
					g_esPlayer[survivor].g_iLifeLeech += g_esWeapon[weaponIndex].g_iLifeLeechPassive;
					g_esPlayer[survivor].g_iLifeLeech = iClamp(g_esPlayer[survivor].g_iLifeLeech, 0, MT_MAXHEALTH);
					g_esPlayer[survivor].g_iMedicalCuts += g_esWeapon[weaponIndex].g_iMedicalCutsPassive;
					g_esPlayer[survivor].g_iMedicalCuts = iClamp(g_esPlayer[survivor].g_iMedicalCuts, 0, 99999);
					g_esPlayer[survivor].g_iOverhealth += g_esWeapon[weaponIndex].g_iOverhealthPassive;
					g_esPlayer[survivor].g_iOverhealth = iClamp(g_esPlayer[survivor].g_iOverhealth, 0, MT_MAXHEALTH);
					g_esPlayer[survivor].g_iRegenBursts += g_esWeapon[weaponIndex].g_iRegenBurstsPassive;
					g_esPlayer[survivor].g_iRegenBursts = iClamp(g_esPlayer[survivor].g_iRegenBursts, 0, 99999);
					g_esPlayer[survivor].g_iReviveHealth += g_esWeapon[weaponIndex].g_iReviveHealthPassive;
					g_esPlayer[survivor].g_iReviveHealth = iClamp(g_esPlayer[survivor].g_iReviveHealth, 0, MT_MAXHEALTH);
					g_esPlayer[survivor].g_iSyringeDarts += g_esWeapon[weaponIndex].g_iSyringeDartsPassive;
					g_esPlayer[survivor].g_iSyringeDarts = iClamp(g_esPlayer[survivor].g_iSyringeDarts, 0, 99999);
				}
				else
				{
					g_esPlayer[survivor].g_flDopamineRadius = g_esWeapon[weaponIndex].g_flDopamineRadiusPassive;
					g_esPlayer[survivor].g_flHealPercent = g_esWeapon[weaponIndex].g_flHealPercentPassive;
					g_esPlayer[survivor].g_flHealthcareRadius = g_esWeapon[weaponIndex].g_flHealthcareRadiusPassive;
					g_esPlayer[survivor].g_flHeartbeat = g_esWeapon[weaponIndex].g_flHeartbeatPassive;
					g_esPlayer[survivor].g_flMotivationRadius = g_esWeapon[weaponIndex].g_flMotivationRadiusPassive;
					g_esPlayer[survivor].g_flOverdoseRadius = g_esWeapon[weaponIndex].g_flOverdoseRadiusPassive;
					g_esPlayer[survivor].g_flRefillPercent = g_esWeapon[weaponIndex].g_flRefillPercentPassive;
					g_esPlayer[survivor].g_flShockwaveRadius = g_esWeapon[weaponIndex].g_flShockwaveRadiusPassive;
					g_esPlayer[survivor].g_iBlazeHealth = g_esWeapon[weaponIndex].g_iBlazeHealthPassive;
					g_esPlayer[survivor].g_iBloodDonor = g_esWeapon[weaponIndex].g_iBloodDonorPassive;
					g_esPlayer[survivor].g_iHealthRegen = g_esWeapon[weaponIndex].g_iHealthRegenPassive;
					g_esPlayer[survivor].g_iLifeLeech = g_esWeapon[weaponIndex].g_iLifeLeechPassive;
					g_esPlayer[survivor].g_iMedicalCuts = g_esWeapon[weaponIndex].g_iMedicalCutsPassive;
					g_esPlayer[survivor].g_iOverhealth = g_esWeapon[weaponIndex].g_iOverhealthPassive;
					g_esPlayer[survivor].g_iRegenBursts = g_esWeapon[weaponIndex].g_iRegenBurstsPassive;
					g_esPlayer[survivor].g_iReviveHealth = g_esWeapon[weaponIndex].g_iReviveHealthPassive;
					g_esPlayer[survivor].g_iSyringeDarts = g_esWeapon[weaponIndex].g_iSyringeDartsPassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_SPEEDBOOST:
		{
			g_esPlayer[survivor].g_flAdrenalineTime = g_esSurvivorCache[survivor].g_flAdrenalineTimePassive;
			g_esPlayer[survivor].g_flJumpHeight = g_esSurvivorCache[survivor].g_flJumpHeightPassive;
			g_esPlayer[survivor].g_flSpeedBoost = g_esSurvivorCache[survivor].g_flSpeedBoostPassive;
			g_esPlayer[survivor].g_iBunnyHop = g_esSurvivorCache[survivor].g_iBunnyHopPassive;
			g_esPlayer[survivor].g_iFallPasses = 0;
			g_esPlayer[survivor].g_iMidairDashesLimit = g_esSurvivorCache[survivor].g_iMidairDashesPassive;
			g_esPlayer[survivor].g_iStickyGrenades = g_esSurvivorCache[survivor].g_iStickyGrenadesPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flAdrenalineTime += g_esWeapon[weaponIndex].g_flAdrenalineTimePassive;
					g_esPlayer[survivor].g_flAdrenalineTime = flClamp(g_esPlayer[survivor].g_flAdrenalineTime, 0.0, 99999.0);
					g_esPlayer[survivor].g_flJumpHeight += g_esWeapon[weaponIndex].g_flJumpHeightPassive;
					g_esPlayer[survivor].g_flJumpHeight = flClamp(g_esPlayer[survivor].g_flJumpHeight, 0.0, 99999.0);
					g_esPlayer[survivor].g_flSpeedBoost += g_esWeapon[weaponIndex].g_flSpeedBoostPassive;
					g_esPlayer[survivor].g_flSpeedBoost = flClamp(g_esPlayer[survivor].g_flSpeedBoost, 0.0, 99999.0);
					g_esPlayer[survivor].g_iBunnyHop += g_esWeapon[weaponIndex].g_iBunnyHopPassive;
					g_esPlayer[survivor].g_iBunnyHop = iClamp(g_esPlayer[survivor].g_iBunnyHop, 0, 1);
					g_esPlayer[survivor].g_iFallPasses = 0;
					g_esPlayer[survivor].g_iMidairDashesLimit += g_esWeapon[weaponIndex].g_iMidairDashesPassive;
					g_esPlayer[survivor].g_iMidairDashesLimit = iClamp(g_esPlayer[survivor].g_iMidairDashesLimit, 0, 99999);
					g_esPlayer[survivor].g_iStickyGrenades += g_esSurvivorCache[survivor].g_iStickyGrenadesPassive;
					g_esPlayer[survivor].g_iStickyGrenades = iClamp(g_esPlayer[survivor].g_iStickyGrenades, 0, 1);
				}
				else
				{
					g_esPlayer[survivor].g_flAdrenalineTime = g_esWeapon[weaponIndex].g_flAdrenalineTimePassive;
					g_esPlayer[survivor].g_flJumpHeight = g_esWeapon[weaponIndex].g_flJumpHeightPassive;
					g_esPlayer[survivor].g_flSpeedBoost = g_esWeapon[weaponIndex].g_flSpeedBoostPassive;
					g_esPlayer[survivor].g_iBunnyHop = g_esWeapon[weaponIndex].g_iBunnyHopPassive;
					g_esPlayer[survivor].g_iMidairDashesLimit = g_esWeapon[weaponIndex].g_iMidairDashesPassive;
					g_esPlayer[survivor].g_iStickyGrenades = g_esSurvivorCache[survivor].g_iStickyGrenadesPassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_DAMAGEBOOST:
		{
			g_esPlayer[survivor].g_flDamageBoost = g_esSurvivorCache[survivor].g_flDamageBoostPassive;
			g_esPlayer[survivor].g_flDamageResistance = g_esSurvivorCache[survivor].g_flDamageResistancePassive;
			g_esPlayer[survivor].g_flHollowpointAmmo = g_esSurvivorCache[survivor].g_flHollowpointAmmoPassive;
			g_esPlayer[survivor].g_flLadyKiller = g_esSurvivorCache[survivor].g_flLadyKillerPassive;
			g_esPlayer[survivor].g_flPipeBombDuration = g_esSurvivorCache[survivor].g_flPipeBombDurationPassive;
			g_esPlayer[survivor].g_flSledgehammerRounds = g_esSurvivorCache[survivor].g_flSledgehammerRoundsPassive;
			g_esPlayer[survivor].g_iEternalFlames = g_esSurvivorCache[survivor].g_iEternalFlamesPassive;
			g_esPlayer[survivor].g_iFriendlyFire = g_esSurvivorCache[survivor].g_iFriendlyFirePassive;
			g_esPlayer[survivor].g_iGhostBullets = g_esSurvivorCache[survivor].g_iGhostBulletsPassive;
			g_esPlayer[survivor].g_iLaserSight = g_esSurvivorCache[survivor].g_iLaserSightPassive;
			g_esPlayer[survivor].g_iMeleeRange = g_esSurvivorCache[survivor].g_iMeleeRangePassive;
			g_esPlayer[survivor].g_iRecoilDampener = g_esSurvivorCache[survivor].g_iRecoilDampenerPassive;
			g_esPlayer[survivor].g_iThorns = g_esSurvivorCache[survivor].g_iThornsPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flDamageBoost += g_esWeapon[weaponIndex].g_flDamageBoostPassive;
					g_esPlayer[survivor].g_flDamageBoost = flClamp(g_esPlayer[survivor].g_flDamageBoost, 0.0, 99999.0);
					g_esPlayer[survivor].g_flDamageResistance -= g_esWeapon[weaponIndex].g_flDamageResistancePassive;
					g_esPlayer[survivor].g_flDamageResistance = flClamp(g_esPlayer[survivor].g_flDamageResistance, 0.0, 99999.0);
					g_esPlayer[survivor].g_flHollowpointAmmo += g_esWeapon[weaponIndex].g_flHollowpointAmmoPassive;
					g_esPlayer[survivor].g_flHollowpointAmmo = flClamp(g_esPlayer[survivor].g_flHollowpointAmmo, 0.0, 100.0);
					g_esPlayer[survivor].g_flLadyKiller -= g_esWeapon[weaponIndex].g_flLadyKillerPassive;
					g_esPlayer[survivor].g_flLadyKiller = flClamp(g_esPlayer[survivor].g_flLadyKiller, 0.0, 100.0);
					g_esPlayer[survivor].g_flPipeBombDuration += g_esWeapon[weaponIndex].g_flPipeBombDurationPassive;
					g_esPlayer[survivor].g_flPipeBombDuration = flClamp(g_esPlayer[survivor].g_flPipeBombDuration, 0.0, 99999.0);
					g_esPlayer[survivor].g_flSledgehammerRounds += g_esWeapon[weaponIndex].g_flSledgehammerRoundsPassive;
					g_esPlayer[survivor].g_flSledgehammerRounds = flClamp(g_esPlayer[survivor].g_flSledgehammerRounds, 0.0, 100.0);
					g_esPlayer[survivor].g_iEternalFlames += g_esWeapon[weaponIndex].g_iEternalFlamesPassive;
					g_esPlayer[survivor].g_iEternalFlames = iClamp(g_esPlayer[survivor].g_iEternalFlames, 0, 1);
					g_esPlayer[survivor].g_iFriendlyFire += g_esWeapon[weaponIndex].g_iFriendlyFirePassive;
					g_esPlayer[survivor].g_iFriendlyFire = iClamp(g_esPlayer[survivor].g_iFriendlyFire, 0, 1);
					g_esPlayer[survivor].g_iGhostBullets += g_esWeapon[weaponIndex].g_iGhostBulletsPassive;
					g_esPlayer[survivor].g_iGhostBullets = iClamp(g_esPlayer[survivor].g_iGhostBullets, 0, 1);
					g_esPlayer[survivor].g_iLaserSight += g_esWeapon[weaponIndex].g_iLaserSightPassive;
					g_esPlayer[survivor].g_iLaserSight = iClamp(g_esPlayer[survivor].g_iLaserSight, 0, 1);
					g_esPlayer[survivor].g_iMeleeRange += g_esWeapon[weaponIndex].g_iMeleeRangePassive;
					g_esPlayer[survivor].g_iMeleeRange = iClamp(g_esPlayer[survivor].g_iMeleeRange, 0, 99999);
					g_esPlayer[survivor].g_iRecoilDampener += g_esWeapon[weaponIndex].g_iRecoilDampenerPassive;
					g_esPlayer[survivor].g_iRecoilDampener = iClamp(g_esPlayer[survivor].g_iRecoilDampener, 0, 1);
					g_esPlayer[survivor].g_iThorns += g_esWeapon[weaponIndex].g_iThornsPassive;
					g_esPlayer[survivor].g_iThorns = iClamp(g_esPlayer[survivor].g_iThorns, 0, 1);
				}
				else
				{
					g_esPlayer[survivor].g_flDamageBoost = g_esWeapon[weaponIndex].g_flDamageBoostPassive;
					g_esPlayer[survivor].g_flDamageResistance = g_esWeapon[weaponIndex].g_flDamageResistancePassive;
					g_esPlayer[survivor].g_flHollowpointAmmo = g_esWeapon[weaponIndex].g_flHollowpointAmmoPassive;
					g_esPlayer[survivor].g_flLadyKiller = g_esWeapon[weaponIndex].g_flLadyKillerPassive;
					g_esPlayer[survivor].g_flPipeBombDuration = g_esWeapon[weaponIndex].g_flPipeBombDurationPassive;
					g_esPlayer[survivor].g_flSledgehammerRounds = g_esWeapon[weaponIndex].g_flSledgehammerRoundsPassive;
					g_esPlayer[survivor].g_iEternalFlames = g_esWeapon[weaponIndex].g_iEternalFlamesPassive;
					g_esPlayer[survivor].g_iFriendlyFire = g_esWeapon[weaponIndex].g_iFriendlyFirePassive;
					g_esPlayer[survivor].g_iGhostBullets = g_esWeapon[weaponIndex].g_iGhostBulletsPassive;
					g_esPlayer[survivor].g_iLaserSight = g_esWeapon[weaponIndex].g_iLaserSightPassive;
					g_esPlayer[survivor].g_iMeleeRange = g_esWeapon[weaponIndex].g_iMeleeRangePassive;
					g_esPlayer[survivor].g_iRecoilDampener = g_esWeapon[weaponIndex].g_iRecoilDampenerPassive;
					g_esPlayer[survivor].g_iThorns = g_esWeapon[weaponIndex].g_iThornsPassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_ATTACKBOOST:
		{
			g_esPlayer[survivor].g_flActionDuration = g_esSurvivorCache[survivor].g_flActionDurationPassive;
			g_esPlayer[survivor].g_flAttackBoost = g_esSurvivorCache[survivor].g_flAttackBoostPassive;
			g_esPlayer[survivor].g_flFireRate = g_esSurvivorCache[survivor].g_flFireRatePassive;
			g_esPlayer[survivor].g_flRapidPistol = g_esSurvivorCache[survivor].g_flRapidPistolPassive;
			g_esPlayer[survivor].g_flReloadRate = g_esSurvivorCache[survivor].g_flReloadRatePassive;
			g_esPlayer[survivor].g_flShoveDamage = g_esSurvivorCache[survivor].g_flShoveDamagePassive;
			g_esPlayer[survivor].g_flShoveRate = g_esSurvivorCache[survivor].g_flShoveRatePassive;
			g_esPlayer[survivor].g_flSwingRate = g_esSurvivorCache[survivor].g_flSwingRatePassive;
			g_esPlayer[survivor].g_iBurstDoors = g_esSurvivorCache[survivor].g_iBurstDoorsPassive;
			g_esPlayer[survivor].g_iFastRecovery = g_esSurvivorCache[survivor].g_iFastRecoveryPassive;
			g_esPlayer[survivor].g_iLadderActions = g_esSurvivorCache[survivor].g_iLadderActionsPassive;
			g_esPlayer[survivor].g_iShovePenalty = g_esSurvivorCache[survivor].g_iShovePenaltyPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flActionDuration -= g_esWeapon[weaponIndex].g_flActionDurationPassive;
					g_esPlayer[survivor].g_flActionDuration = flClamp(g_esPlayer[survivor].g_flActionDuration, 0.0, 99999.0);
					g_esPlayer[survivor].g_flAttackBoost += g_esWeapon[weaponIndex].g_flAttackBoostPassive;
					g_esPlayer[survivor].g_flAttackBoost = flClamp(g_esPlayer[survivor].g_flAttackBoost, 0.0, 99999.0);
					g_esPlayer[survivor].g_flFireRate += g_esWeapon[weaponIndex].g_flFireRatePassive;
					g_esPlayer[survivor].g_flFireRate = flClamp(g_esPlayer[survivor].g_flFireRate, 0.0, 99999.0);
					g_esPlayer[survivor].g_flRapidPistol -= g_esWeapon[weaponIndex].g_flRapidPistolPassive;
					g_esPlayer[survivor].g_flRapidPistol = flClamp(g_esPlayer[survivor].g_flRapidPistol, 0.0, 99999.0);
					g_esPlayer[survivor].g_flReloadRate += g_esWeapon[weaponIndex].g_flReloadRatePassive;
					g_esPlayer[survivor].g_flReloadRate = flClamp(g_esPlayer[survivor].g_flReloadRate, 0.0, 99999.0);
					g_esPlayer[survivor].g_flShoveDamage += g_esWeapon[weaponIndex].g_flShoveDamagePassive;
					g_esPlayer[survivor].g_flShoveDamage = flClamp(g_esPlayer[survivor].g_flShoveDamage, 0.0, 99999.0);
					g_esPlayer[survivor].g_flShoveRate -= g_esWeapon[weaponIndex].g_flShoveRatePassive;
					g_esPlayer[survivor].g_flShoveRate = flClamp(g_esPlayer[survivor].g_flShoveRate, 0.0, 99999.0);
					g_esPlayer[survivor].g_flSwingRate += g_esWeapon[weaponIndex].g_flSwingRatePassive;
					g_esPlayer[survivor].g_flSwingRate = flClamp(g_esPlayer[survivor].g_flSwingRate, 0.0, 99999.0);
					g_esPlayer[survivor].g_iBurstDoors += g_esWeapon[weaponIndex].g_iBurstDoorsPassive;
					g_esPlayer[survivor].g_iBurstDoors = iClamp(g_esPlayer[survivor].g_iBurstDoors, 0, 1);
					g_esPlayer[survivor].g_iFastRecovery += g_esWeapon[weaponIndex].g_iFastRecoveryPassive;
					g_esPlayer[survivor].g_iFastRecovery = iClamp(g_esPlayer[survivor].g_iFastRecovery, 0, 1);
					g_esPlayer[survivor].g_iLadderActions += g_esWeapon[weaponIndex].g_iLadderActionsPassive;
					g_esPlayer[survivor].g_iLadderActions = iClamp(g_esPlayer[survivor].g_iLadderActions, 0, 1);
					g_esPlayer[survivor].g_iShovePenalty += g_esWeapon[weaponIndex].g_iShovePenaltyPassive;
					g_esPlayer[survivor].g_iShovePenalty = iClamp(g_esPlayer[survivor].g_iShovePenalty, 0, 1);
				}
				else
				{
					g_esPlayer[survivor].g_flActionDuration = g_esWeapon[weaponIndex].g_flActionDurationPassive;
					g_esPlayer[survivor].g_flAttackBoost = g_esWeapon[weaponIndex].g_flAttackBoostPassive;
					g_esPlayer[survivor].g_flFireRate = g_esWeapon[weaponIndex].g_flFireRatePassive;
					g_esPlayer[survivor].g_flRapidPistol = g_esWeapon[weaponIndex].g_flRapidPistolPassive;
					g_esPlayer[survivor].g_flReloadRate = g_esWeapon[weaponIndex].g_flReloadRatePassive;
					g_esPlayer[survivor].g_flShoveDamage = g_esWeapon[weaponIndex].g_flShoveDamagePassive;
					g_esPlayer[survivor].g_flShoveRate = g_esWeapon[weaponIndex].g_flShoveRatePassive;
					g_esPlayer[survivor].g_flSwingRate = g_esWeapon[weaponIndex].g_flSwingRatePassive;
					g_esPlayer[survivor].g_iBurstDoors = g_esWeapon[weaponIndex].g_iBurstDoorsPassive;
					g_esPlayer[survivor].g_iFastRecovery = g_esWeapon[weaponIndex].g_iFastRecoveryPassive;
					g_esPlayer[survivor].g_iLadderActions = g_esWeapon[weaponIndex].g_iLadderActionsPassive;
					g_esPlayer[survivor].g_iShovePenalty = g_esWeapon[weaponIndex].g_iShovePenaltyPassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_AMMO:
		{
			g_esPlayer[survivor].g_flGrenadeLauncher = g_esSurvivorCache[survivor].g_flGrenadeLauncherPassive;
			g_esPlayer[survivor].g_flLuckyBullet = g_esSurvivorCache[survivor].g_flLuckyBulletPassive;
			g_esPlayer[survivor].g_flSupplier = g_esSurvivorCache[survivor].g_flSupplierPassive;
			g_esPlayer[survivor].g_flSupplierCooldown = -1.0;
			g_esPlayer[survivor].g_iAmmoBoost = g_esSurvivorCache[survivor].g_iAmmoBoostPassive;
			g_esPlayer[survivor].g_iAmmoRefill = g_esSurvivorCache[survivor].g_iAmmoRefillPassive;
			g_esPlayer[survivor].g_iAmmoRegen = g_esSurvivorCache[survivor].g_iAmmoRegenPassive;
			g_esPlayer[survivor].g_iClusterBombs = g_esSurvivorCache[survivor].g_iClusterBombsPassive;
			g_esPlayer[survivor].g_iSpecialAmmo = g_esSurvivorCache[survivor].g_iSpecialAmmoPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flGrenadeLauncher -= g_esWeapon[weaponIndex].g_flGrenadeLauncherPassive;
					g_esPlayer[survivor].g_flGrenadeLauncher = flClamp(g_esPlayer[survivor].g_flGrenadeLauncher, 0.0, 100.0);
					g_esPlayer[survivor].g_flLuckyBullet += g_esWeapon[weaponIndex].g_flLuckyBulletPassive;
					g_esPlayer[survivor].g_flLuckyBullet = flClamp(g_esPlayer[survivor].g_flLuckyBullet, 0.0, 100.0);
					g_esPlayer[survivor].g_flSupplier += g_esWeapon[weaponIndex].g_flSupplierPassive;
					g_esPlayer[survivor].g_flSupplier = flClamp(g_esPlayer[survivor].g_flSupplier, 0.0, 99999.0);
					g_esPlayer[survivor].g_iAmmoBoost += g_esWeapon[weaponIndex].g_iAmmoBoostPassive;
					g_esPlayer[survivor].g_iAmmoBoost = iClamp(g_esPlayer[survivor].g_iAmmoBoost, 0, 1);
					g_esPlayer[survivor].g_iAmmoRefill += g_esWeapon[weaponIndex].g_iAmmoRefillPassive;
					g_esPlayer[survivor].g_iAmmoRefill = iClamp(g_esPlayer[survivor].g_iAmmoRefill, 0, 1);
					g_esPlayer[survivor].g_iAmmoRegen += g_esWeapon[weaponIndex].g_iAmmoRegenPassive;
					g_esPlayer[survivor].g_iAmmoRegen = iClamp(g_esPlayer[survivor].g_iAmmoRegen, 0, 99999);
					g_esPlayer[survivor].g_iClusterBombs += g_esWeapon[weaponIndex].g_iClusterBombsPassive;
					g_esPlayer[survivor].g_iClusterBombs = iClamp(g_esPlayer[survivor].g_iClusterBombs, 0, 5);
					g_esPlayer[survivor].g_iSpecialAmmo |= g_esWeapon[weaponIndex].g_iSpecialAmmoPassive;
					g_esPlayer[survivor].g_iSpecialAmmo = iClamp(g_esPlayer[survivor].g_iSpecialAmmo, 0, 3);
				}
				else
				{
					g_esPlayer[survivor].g_flGrenadeLauncher = g_esWeapon[weaponIndex].g_flGrenadeLauncherPassive;
					g_esPlayer[survivor].g_flLuckyBullet = g_esWeapon[weaponIndex].g_flLuckyBulletPassive;
					g_esPlayer[survivor].g_flSupplier = g_esWeapon[weaponIndex].g_flSupplierPassive;
					g_esPlayer[survivor].g_iAmmoBoost = g_esWeapon[weaponIndex].g_iAmmoBoostPassive;
					g_esPlayer[survivor].g_iAmmoRefill = g_esWeapon[weaponIndex].g_iAmmoRefillPassive;
					g_esPlayer[survivor].g_iAmmoRegen = g_esWeapon[weaponIndex].g_iAmmoRegenPassive;
					g_esPlayer[survivor].g_iClusterBombs = g_esWeapon[weaponIndex].g_iClusterBombsPassive;
					g_esPlayer[survivor].g_iSpecialAmmo = g_esWeapon[weaponIndex].g_iSpecialAmmoPassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_GODMODE:
		{
			g_esPlayer[survivor].g_flPunchResistance = g_esSurvivorCache[survivor].g_flPunchResistancePassive;
			g_esPlayer[survivor].g_iCleanKills = g_esSurvivorCache[survivor].g_iCleanKillsPassive;
			g_esPlayer[survivor].g_iRiotGear = g_esSurvivorCache[survivor].g_iRiotGearPassive;
			g_esPlayer[survivor].g_iSafetyBubble = g_esSurvivorCache[survivor].g_iSafetyBubblePassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flPunchResistance -= g_esWeapon[weaponIndex].g_flPunchResistancePassive;
					g_esPlayer[survivor].g_flPunchResistance = flClamp(g_esPlayer[survivor].g_flPunchResistance, 0.0, 1.0);
					g_esPlayer[survivor].g_iCleanKills += g_esWeapon[weaponIndex].g_iCleanKillsPassive;
					g_esPlayer[survivor].g_iCleanKills = iClamp(g_esPlayer[survivor].g_iCleanKills, 0, 1);
					g_esPlayer[survivor].g_iRiotGear += g_esWeapon[weaponIndex].g_iRiotGearPassive;
					g_esPlayer[survivor].g_iRiotGear = iClamp(g_esPlayer[survivor].g_iRiotGear, 0, 1);
					g_esPlayer[survivor].g_iSafetyBubble += g_esWeapon[weaponIndex].g_iSafetyBubblePassive;
					g_esPlayer[survivor].g_iSafetyBubble = iClamp(g_esPlayer[survivor].g_iSafetyBubble, 0, 1);
				}
				else
				{
					g_esPlayer[survivor].g_flPunchResistance = g_esWeapon[weaponIndex].g_flPunchResistancePassive;
					g_esPlayer[survivor].g_iCleanKills = g_esWeapon[weaponIndex].g_iCleanKillsPassive;
					g_esPlayer[survivor].g_iRiotGear = g_esWeapon[weaponIndex].g_iRiotGearPassive;
					g_esPlayer[survivor].g_iSafetyBubble = g_esWeapon[weaponIndex].g_iSafetyBubblePassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_REFILL:
		{
			g_esPlayer[survivor].g_flRefillPercent = g_esSurvivorCache[survivor].g_flRefillPercentPassive;
			g_esPlayer[survivor].g_iAmmoRefill = g_esSurvivorCache[survivor].g_iAmmoRefillPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_flRefillPercent += g_esWeapon[weaponIndex].g_flRefillPercentPassive;
					g_esPlayer[survivor].g_flRefillPercent = flClamp(g_esPlayer[survivor].g_flRefillPercent, 0.0, 100.0);
					g_esPlayer[survivor].g_iAmmoRefill += g_esWeapon[weaponIndex].g_iAmmoRefillPassive;
					g_esPlayer[survivor].g_iAmmoRefill = iClamp(g_esPlayer[survivor].g_iAmmoRefill, 0, 1);
				}
				else
				{
					g_esPlayer[survivor].g_flRefillPercent = g_esWeapon[weaponIndex].g_flRefillPercentPassive;
					g_esPlayer[survivor].g_iAmmoRefill = g_esWeapon[weaponIndex].g_iAmmoRefillPassive;
				}
#else
				return;
#endif
			}
		}
		case MT_PASSIVE_INFAMMO:
		{
			g_esPlayer[survivor].g_iInfiniteAmmo = g_esSurvivorCache[survivor].g_iInfiniteAmmoPassive;

			if (weaponOnly && weaponIndex > 0)
			{
#if defined _WeaponHandling_included
				if (g_esWeapon[weaponIndex].g_iStackPassives > 0 && (g_esWeapon[weaponIndex].g_iStackPassives & type))
				{
					g_esPlayer[survivor].g_iInfiniteAmmo |= g_esWeapon[weaponIndex].g_iInfiniteAmmoPassive;
					g_esPlayer[survivor].g_iInfiniteAmmo = iClamp(g_esPlayer[survivor].g_iInfiniteAmmo, 0, 31);
				}
				else
				{
					g_esPlayer[survivor].g_iInfiniteAmmo = g_esWeapon[weaponIndex].g_iInfiniteAmmoPassive;
				}
#else
				return;
#endif
			}
		}
	}
}

void vSetupRefillPassive(int survivor, bool weaponOnly, int weaponIndex)
{
	vSetupPassives(survivor, MT_PASSIVE_REFILL, weaponOnly, weaponIndex);

	if (!weaponOnly)
	{
		vSaveCaughtSurvivor(survivor);
		vRefillSurvivorHealth(survivor);

		if (g_esPlayer[survivor].g_iAmmoRefill == 1)
		{
			vCheckGunClipSizes(survivor);
			vRefillGunAmmo(survivor, .reset = !(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_AMMO), .override = true);
		}
	}
}

void vSetupSpeedBoostPassive(int survivor, bool weaponOnly, int weaponIndex)
{
	vSetupPassives(survivor, MT_PASSIVE_SPEEDBOOST, weaponOnly, weaponIndex);
	SDKHook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);

	bool bDeveloper = bIsDeveloper(survivor, 5);
	float flDuration = (bDeveloper && g_esDeveloper[survivor].g_flDevAdrenalineTime > g_esPlayer[survivor].g_flAdrenalineTime) ? g_esDeveloper[survivor].g_flDevAdrenalineTime : g_esPlayer[survivor].g_flAdrenalineTime;
	if ((!bDeveloper || flGetAdrenalineTime(survivor) > 0.0) && flDuration > 0.0)
	{
		vSetAdrenalineTime(survivor, flDuration);
	}
}
#if defined _WeaponHandling_included
void vSetupWeaponPassives(int survivor, int weaponIndex)
{
	if (g_esWeapon[weaponIndex].g_iWeaponCharacter == -1 || g_esWeapon[weaponIndex].g_iWeaponCharacter == g_esShooter[survivor].g_iCharacterType[1])
	{
		g_esWeapon[weaponIndex].g_iPassiveTypes = bIsValidClient(survivor, MT_CHECK_FAKECLIENT) ? g_esWeapon[weaponIndex].g_iPassiveEnabled : g_esWeapon[weaponIndex].g_iPassiveBots;
		vToggleSurvivorPassive(survivor, g_esWeapon[weaponIndex].g_iPassiveTypes, true, true, weaponIndex);
	}
}
#endif
void vToggleSurvivorPassive(int survivor, int type, bool apply = false, bool weaponOnly = false, int weaponIndex = 0)
{
	int iType = type;
#if defined _WeaponHandling_included
	if (type > 0 && !apply && weaponOnly && weaponIndex > 0)
	{
		iType = iGetTotalPassives(survivor, type, false);
		iType = iGetTotalPassives(survivor, iType, true);
	}
#endif
	if (g_esPlayer[survivor].g_iRewardTypes <= 0 && iType > 0)
	{
		Action aResult = Plugin_Continue;
		vToggleSurvivorPassiveForward(survivor, iType, apply, weaponOnly, weaponIndex, aResult);

		if (aResult == Plugin_Handled)
		{
			return;
		}

		switch (apply)
		{
			case true:
			{
				g_esShooter[survivor].g_iNotify = g_esSurvivorCache[survivor].g_iPassiveNotify;

				char sSet[9][64];
				int iPassiveCount = 0;
				if ((iType & MT_PASSIVE_RESPAWN) && bRespawnSurvivor(survivor, (g_esSurvivorCache[survivor].g_iRespawnLoadoutPassive == 1)) && !(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_RESPAWN))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardRespawn", survivor);
					g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_RESPAWN;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_RESPAWN;
						case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_RESPAWN;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_RESPAWN;
#endif
				}

				if (bIsSurvivor(survivor))
				{
					char sReceived[1024];
					if (iType & MT_PASSIVE_HEALTH)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_HEALTH))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardHealth", survivor);
							vSetupHealthPassive(survivor, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_HEALTH;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_HEALTH;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_HEALTH;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_HEALTH;
#endif
						}
						else
						{
							vSetupHealthPassive(survivor, weaponOnly, weaponIndex);
						}
					}

					if (iType & MT_PASSIVE_SPEEDBOOST)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardSpeedBoost", survivor);
							vSetupSpeedBoostPassive(survivor, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_SPEEDBOOST;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_SPEEDBOOST;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_SPEEDBOOST;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_SPEEDBOOST;
#endif
						}
						else
						{
							vSetupSpeedBoostPassive(survivor, weaponOnly, weaponIndex);
						}
					}

					if (iType & MT_PASSIVE_DAMAGEBOOST)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardDamageBoost", survivor);
							vSetupPassives(survivor, MT_PASSIVE_DAMAGEBOOST, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_DAMAGEBOOST;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_DAMAGEBOOST;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_DAMAGEBOOST;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_DAMAGEBOOST;
#endif
							vRefreshLaserSight(survivor);
							vToggleWeaponVerticalPunch(survivor, true);
							vPassiveLadyKillerMessage(survivor, weaponOnly, weaponIndex);
						}
						else
						{
							vSetupPassives(survivor, MT_PASSIVE_DAMAGEBOOST, weaponOnly, weaponIndex);

							if (!weaponOnly)
							{
								vRefreshLaserSight(survivor);
								vToggleWeaponVerticalPunch(survivor, true);
								vPassiveLadyKillerMessage(survivor, weaponOnly, weaponIndex);
							}
						}
					}

					if (iType & MT_PASSIVE_ATTACKBOOST)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardAttackBoost", survivor);
							vSetupPassives(survivor, MT_PASSIVE_ATTACKBOOST, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_ATTACKBOOST;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_ATTACKBOOST;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_ATTACKBOOST;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_ATTACKBOOST;
#endif
							SDKHook(survivor, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);
						}
						else
						{
							vSetupPassives(survivor, MT_PASSIVE_ATTACKBOOST, weaponOnly, weaponIndex);
						}
					}

					if (iType & MT_PASSIVE_AMMO)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_AMMO))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardAmmo", survivor);
							vSetupAmmoPassive(survivor, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_AMMO;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_AMMO;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_AMMO;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_AMMO;
#endif
						}
						else
						{
							vSetupAmmoPassive(survivor, weaponOnly, weaponIndex);
						}
					}

					if (iType & MT_PASSIVE_ITEM)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ITEM))
						{
							vSetupItemPassive(survivor, sReceived, sizeof sReceived);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_ITEM;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_ITEM;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_ITEM;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_ITEM;
#endif
						}
						else if (!weaponOnly)
						{
							vSetupItemPassive(survivor, sReceived, sizeof sReceived);
						}
					}

					if (sReceived[0] != '\0')
					{
						MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardReceived", sReceived);
					}

					if (iType & MT_PASSIVE_GODMODE)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_GODMODE))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardGod", survivor);
							vSetupPassives(survivor, MT_PASSIVE_GODMODE, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_GODMODE;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_GODMODE;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_GODMODE;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_GODMODE;
#endif
							vSetupGodmodeReward(survivor);
						}
						else
						{
							vSetupPassives(survivor, MT_PASSIVE_GODMODE, weaponOnly, weaponIndex);

							if (!weaponOnly)
							{
								vSetupGodmodeReward(survivor);
							}
						}
					}

					if (iType & MT_PASSIVE_REFILL)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_REFILL))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardRefill", survivor);
							vSetupRefillPassive(survivor, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_REFILL;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_REFILL;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_REFILL;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_REFILL;
#endif
						}
						else
						{
							vSetupRefillPassive(survivor, weaponOnly, weaponIndex);
						}
					}

					if (iType & MT_PASSIVE_INFAMMO)
					{
						if (!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_INFAMMO))
						{
							FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardInfAmmo", survivor);
							vSetupPassives(survivor, MT_PASSIVE_INFAMMO, weaponOnly, weaponIndex);

							g_esShooter[survivor].g_iTotalPassives |= MT_PASSIVE_INFAMMO;
							iPassiveCount++;
#if defined _WeaponHandling_included
							switch (weaponOnly && weaponIndex > 0)
							{
								case true: g_esWeapon[weaponIndex].g_iPassiveTypes |= MT_PASSIVE_INFAMMO;
								case false: g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_INFAMMO;
							}
#else
							g_esShooter[survivor].g_iPassiveTypes |= MT_PASSIVE_INFAMMO;
#endif
						}
						else
						{
							vSetupPassives(survivor, MT_PASSIVE_INFAMMO, weaponOnly, weaponIndex);
						}
					}

					char sPassives[1024];
					vListRewards(survivor, iPassiveCount, sSet, sizeof sSet, sPassives, sizeof sPassives);
					if (sPassives[0] != '\0')
					{
						vPassiveMessage(survivor, iPassiveCount, sPassives);
					}
				}
			}
			case false:
			{
#if defined _WeaponHandling_included
				if (weaponOnly)
				{
					int iPassiveType = MT_PASSIVE_HEALTH|MT_PASSIVE_SPEEDBOOST|MT_PASSIVE_DAMAGEBOOST|MT_PASSIVE_ATTACKBOOST|MT_PASSIVE_AMMO|MT_PASSIVE_GODMODE|MT_PASSIVE_REFILL|MT_PASSIVE_INFAMMO;
					vResetPassives(survivor, iPassiveType, weaponOnly);
				}
#endif
				char sSet[8][64];
				int iPassiveCount = 0;
				if ((iType & MT_PASSIVE_HEALTH) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_HEALTH))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardHealth", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_HEALTH;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_HEALTH;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_HEALTH;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_HEALTH;

					vResetPassives(survivor, MT_PASSIVE_HEALTH);
#endif
				}

				if ((iType & MT_PASSIVE_SPEEDBOOST) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardSpeedBoost", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_SPEEDBOOST;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_SPEEDBOOST;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_SPEEDBOOST;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_SPEEDBOOST;

					vResetPassives(survivor, MT_PASSIVE_SPEEDBOOST);
#endif
					if (bIsSurvivor(survivor, MT_CHECK_ALIVE) && !bIsDeveloper(survivor, 5))
					{
						if (flGetAdrenalineTime(survivor) > 0.0)
						{
							vSetAdrenalineTime(survivor, 0.0);
						}

						SDKUnhook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
						SetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(survivor, 1.0, true) : 1.0));
					}
				}

				if ((iType & MT_PASSIVE_DAMAGEBOOST) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardDamageBoost", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_DAMAGEBOOST;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_DAMAGEBOOST;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_DAMAGEBOOST;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_DAMAGEBOOST;

					vResetPassives(survivor, MT_PASSIVE_DAMAGEBOOST);
#endif
					vRefreshLaserSight(survivor);
					vToggleWeaponVerticalPunch(survivor, false);
				}

				if ((iType & MT_PASSIVE_ATTACKBOOST) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardAttackBoost", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_ATTACKBOOST;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_ATTACKBOOST;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_ATTACKBOOST;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_ATTACKBOOST;

					vResetPassives(survivor, MT_PASSIVE_ATTACKBOOST);
#endif
				}

				if ((iType & MT_PASSIVE_AMMO) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_AMMO))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardAmmo", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_AMMO;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_AMMO;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_AMMO;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_AMMO;

					vResetPassives(survivor, MT_PASSIVE_AMMO);
#endif
					if (bIsSurvivor(survivor, MT_CHECK_ALIVE))
					{
						vRefillGunAmmo(survivor, .reset = true);
					}
				}

				if ((iType & MT_PASSIVE_GODMODE) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_GODMODE))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardGod", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_GODMODE;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_GODMODE;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_GODMODE;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_GODMODE;

					vResetPassives(survivor, MT_PASSIVE_GODMODE);
					vRemoveBubble(survivor);
#endif
				}

				if ((iType & MT_PASSIVE_REFILL) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_REFILL))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardRefill", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_REFILL;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_REFILL;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_REFILL;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_REFILL;

					vResetPassives(survivor, MT_PASSIVE_REFILL);
#endif
				}

				if ((iType & MT_PASSIVE_INFAMMO) && (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_INFAMMO))
				{
					FormatEx(sSet[iPassiveCount], sizeof sSet[], "%T", "RewardInfAmmo", survivor);

					g_esShooter[survivor].g_iTotalPassives &= ~MT_PASSIVE_INFAMMO;
					iPassiveCount++;
#if defined _WeaponHandling_included
					switch (weaponOnly && weaponIndex > 0)
					{
						case true: g_esWeapon[weaponIndex].g_iPassiveTypes &= ~MT_PASSIVE_INFAMMO;
						case false: g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_INFAMMO;
					}
#else
					g_esShooter[survivor].g_iPassiveTypes &= ~MT_PASSIVE_INFAMMO;

					vResetPassives(survivor, MT_PASSIVE_INFAMMO);
#endif
				}

				char sPassives[1024];
				vListRewards(survivor, iPassiveCount, sSet, sizeof sSet, sPassives, sizeof sPassives);
				if (bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) && iPassiveCount > 0 && g_esShooter[survivor].g_iNotify >= 2)
				{
					MT_PrintToChat(survivor, "%s %t", MT_TAG2, "RewardEnd", sPassives);
				}

				if (g_esShooter[survivor].g_iTotalPassives <= 0)
				{
					g_esShooter[survivor].g_iNotify = 0;
				}
			}
		}
	}
}
#if defined _WeaponHandling_included
void vToggleWeaponPassive(int client, int weapon, int type = 3)
{
	if (g_esGeneral.g_iMaxWeapons <= 0)
	{
		return;
	}

	DataPack dpPassive = new DataPack();
	RequestFrame(vWeaponPassiveFrame, dpPassive);
	dpPassive.WriteCell(GetClientUserId(client));
	dpPassive.WriteCell(EntIndexToEntRef(weapon));
	dpPassive.WriteCell(type);
}
#endif

/**
 * Reward system functions
 **/

void vCalculateDeath(int tank, int survivor)
{
	if (!g_esGeneral.g_bFinaleEnded && !g_esGeneral.g_bRoundEnded && g_esShooter[survivor].g_iTotalPassives <= 0)
	{
		if (g_esPlayer[tank].g_iTankType <= 0 || !bIsCustomTank(tank))
		{
			int iAssistant = bIsSurvivor(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME) ? survivor : 0;
			for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
			{
				if (bIsValidClient(iPlayer, MT_CHECK_INGAME) && GetClientTeam(iPlayer) != 3 && g_esPlayer[iPlayer].g_iTankDamage[tank] > g_esPlayer[iAssistant].g_iTankDamage[tank])
				{
					iAssistant = iPlayer;
				}
			}

			float flPercentage = ((float(g_esPlayer[survivor].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100.0),
				flAssistPercentage = ((float(g_esPlayer[iAssistant].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100.0);

			switch (flAssistPercentage < 90.0)
			{
				case true: vAnnounceTankDeath(tank, survivor, flPercentage, iAssistant, flAssistPercentage);
				case false: vAnnounceTankDeath(tank);
			}

			switch (survivor == iAssistant)
			{
				case true: vRewardPriority(tank, 4, survivor);
				case false:
				{
					vRewardPriority(tank, 1, survivor);
					vRewardPriority(tank, 2, iAssistant);
				}
			}

			vRewardPriority(tank, 3, survivor, iAssistant);
			vResetTankDamage(tank);
			vResetSurvivorStats2(survivor);
			vResetSurvivorStats2(iAssistant);
		}
		else if (g_esTankCache[tank].g_iAnnounceDeath > 0)
		{
			vAnnounceTankDeath(tank);
		}
	}
}

void vChooseRecipient(int survivor, int recipient, const char[] phrase, char[] buffer, int size, char[] buffer2, int size2, bool condition)
{
	switch (condition && survivor != recipient)
	{
		case true: FormatEx(buffer2, size2, "%T", phrase, recipient);
		case false: FormatEx(buffer, size, "%T", phrase, survivor);
	}
}

void vChooseReward(int survivor, int tank, int priority, int setting)
{
	int iRewardType = setting;
	iRewardType = (setting == 0) ? (1 << MT_GetRandomInt(0, 7)) : setting;
	if (bIsDeveloper(survivor, 3))
	{
		iRewardType = g_esDeveloper[survivor].g_iDevRewardTypes;
	}

	iRewardType |= iGetUsefulRewards(survivor, tank, iRewardType, priority);
	vRewardSurvivor(survivor, iRewardType, tank, true, priority);
}

void vEndRewards(int survivor, bool force)
{
	bool bCheck = false;
	float flDuration = 0.0, flCurrentTime = GetGameTime();
	int iType = 0;
	for (int iPos = 0; iPos < (sizeof esPlayer::g_flRewardTime); iPos++)
	{
		if (iPos < (sizeof esPlayer::g_flVisualTime))
		{
			if ((g_esPlayer[survivor].g_flVisualTime[0] != -1.0 && g_esPlayer[survivor].g_flVisualTime[0] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[0] = -1.0;
				g_esPlayer[survivor].g_sScreenColor[0] = '\0';
				g_esPlayer[survivor].g_iScreenColorVisual[0] = -1;
				g_esPlayer[survivor].g_iScreenColorVisual[1] = -1;
				g_esPlayer[survivor].g_iScreenColorVisual[2] = -1;
				g_esPlayer[survivor].g_iScreenColorVisual[3] = -1;
			}

			if ((g_esPlayer[survivor].g_flVisualTime[1] != -1.0 && g_esPlayer[survivor].g_flVisualTime[1] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[1] = -1.0;
				g_esPlayer[survivor].g_iParticleEffect = 0;
			}

			if ((g_esPlayer[survivor].g_flVisualTime[2] != -1.0 && g_esPlayer[survivor].g_flVisualTime[2] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[2] = -1.0;
				g_esPlayer[survivor].g_sLoopingVoiceline[0] = '\0';
			}

			if ((g_esPlayer[survivor].g_flVisualTime[3] != -1.0 && g_esPlayer[survivor].g_flVisualTime[3] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[3] = -1.0;
				g_esPlayer[survivor].g_iVoicePitch = 0;
			}

			if ((g_esPlayer[survivor].g_flVisualTime[4] != -1.0 && g_esPlayer[survivor].g_flVisualTime[4] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[4] = -1.0;
				g_esPlayer[survivor].g_sLightColor[0] = '\0';

				if (!bIsDeveloper(survivor, 1))
				{
					vRemoveSurvivorLight(survivor);
				}
			}

			if ((g_esPlayer[survivor].g_flVisualTime[5] != -1.0 && g_esPlayer[survivor].g_flVisualTime[5] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[5] = -1.0;
				g_esPlayer[survivor].g_sBodyColor[0] = '\0';

				if (!bIsDeveloper(survivor, 1))
				{
					SetEntityRenderMode(survivor, RENDER_NORMAL);
					SetEntityRenderColor(survivor, 255, 255, 255, 255);
				}
			}

			if ((g_esPlayer[survivor].g_flVisualTime[6] != -1.0 && g_esPlayer[survivor].g_flVisualTime[6] < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
			{
				g_esPlayer[survivor].g_flVisualTime[6] = -1.0;
				g_esPlayer[survivor].g_sOutlineColor[0] = '\0';

				if (!bIsDeveloper(survivor, 1))
				{
					vRemovePlayerGlow(survivor);
				}
			}
		}

		switch (iPos)
		{
			case 0: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_HEALTH);
			case 1: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_SPEEDBOOST);
			case 2: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST);
			case 3: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST);
			case 4: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_AMMO);
			case 5: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_GODMODE);
			case 6: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_REFILL);
			case 7: bCheck = !!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_INFAMMO);
		}

		flDuration = g_esPlayer[survivor].g_flRewardTime[iPos];
		if (bCheck && ((flDuration != -1.0 && flDuration < flCurrentTime) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded || force))
		{
			switch (iPos)
			{
				case 0: iType |= MT_REWARD_HEALTH;
				case 1: iType |= MT_REWARD_SPEEDBOOST;
				case 2: iType |= MT_REWARD_DAMAGEBOOST;
				case 3: iType |= MT_REWARD_ATTACKBOOST;
				case 4: iType |= MT_REWARD_AMMO;
				case 5: iType |= MT_REWARD_GODMODE;
				case 6: iType |= MT_REWARD_REFILL;
				case 7: iType |= MT_REWARD_INFAMMO;
			}
		}
	}

	if (iType > 0)
	{
		vRewardSurvivor(survivor, iType);
	}
}

void vListRewards(int survivor, int count, const char[][] buffers, int maxStrings, char[] buffer, int size)
{
	bool bListed = false;
	for (int iPos = 0; iPos < maxStrings; iPos++)
	{
		if (buffers[iPos][0] != '\0')
		{
			switch (bListed)
			{
				case true:
				{
					switch (iPos < (maxStrings - 1) && buffers[iPos + 1][0] != '\0')
					{
						case true: Format(buffer, size, "%s{default}, {yellow}%s", buffer, buffers[iPos]);
						case false:
						{
							switch (count)
							{
								case 2: Format(buffer, size, "%s{default} %T{yellow} %s", buffer, "AndConjunction", survivor, buffers[iPos]);
								default: Format(buffer, size, "%s{default}, %T{yellow} %s", buffer, "AndConjunction", survivor, buffers[iPos]);
							}
						}
					}
				}
				case false:
				{
					bListed = true;

					FormatEx(buffer, size, "%s", buffers[iPos]);
				}
			}
		}
	}
}

void vListTeammates(int tank, int killer, int assistant, int setting, char[][] lists, int maxLists, int listSize)
{
	if (setting < 3)
	{
		return;
	}

	bool bListed = false;
	char sList[5][768], sTemp[768];
	float flPercentage = 0.0;
	int iIndex = 0, iSize = 0;
	for (int iTeammate = 1; iTeammate <= MaxClients; iTeammate++)
	{
		if (bIsValidClient(iTeammate) && g_esPlayer[iTeammate].g_iTankDamage[tank] > 0 && iTeammate != killer && iTeammate != assistant)
		{
			flPercentage = (float(g_esPlayer[iTeammate].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100;

			switch (bListed)
			{
				case true:
				{
					switch (setting)
					{
						case 3: iSize = FormatEx(sTemp, sizeof sTemp, "{mint}%N{default} ({olive}%i HP{default})", iTeammate, g_esPlayer[iTeammate].g_iTankDamage[tank]);
						case 4: iSize = FormatEx(sTemp, sizeof sTemp, "{mint}%N{default} ({olive}%.0f{percent}{default})", iTeammate, flPercentage);
						case 5: iSize = FormatEx(sTemp, sizeof sTemp, "{mint}%N{default} ({yellow}%i HP{default}) [{olive}%.0f{percent}{default}]", iTeammate, g_esPlayer[iTeammate].g_iTankDamage[tank], flPercentage);
					}

					switch (iIndex < ((sizeof sList) - 1) && sList[iIndex][0] != '\0' && (strlen(sList[iIndex]) + iSize + 150) >= (sizeof sList[]))
					{
						case true:
						{
							iIndex++;

							strcopy(sList[iIndex], sizeof sList[], sTemp);
						}
						case false: Format(sList[iIndex], sizeof sList[], "%s{default}, %s", sList[iIndex], sTemp);
					}

					sTemp[0] = '\0';
				}
				case false:
				{
					bListed = true;

					switch (setting)
					{
						case 3: FormatEx(sList[iIndex], sizeof sList[], "%N{default} ({olive}%i HP{default})", iTeammate, g_esPlayer[iTeammate].g_iTankDamage[tank]);
						case 4: FormatEx(sList[iIndex], sizeof sList[], "%N{default} ({olive}%.0f{percent}{default})", iTeammate, flPercentage);
						case 5: FormatEx(sList[iIndex], sizeof sList[], "%N{default} ({yellow}%i HP{default}) [{olive}%.0f{percent}{default}]", iTeammate, g_esPlayer[iTeammate].g_iTankDamage[tank], flPercentage);
					}
				}
			}
		}
	}

	for (int iPos = 0; iPos < maxLists; iPos++)
	{
		if (sList[iPos][0] != '\0')
		{
			strcopy(lists[iPos], listSize, sList[iPos]);
		}
	}
}

void vRecordDamage(int tank, int killer, int assistant, float percentage, char[] solo, int soloSize, char[][] lists, int maxLists, int listSize)
{
	char sList[5][768];
	int iDetails = g_esTankCache[tank].g_iDeathDetails;

	switch (iDetails)
	{
		case 0, 3:
		{
			FormatEx(solo, soloSize, "%N{default} ({olive}%i HP{default})", assistant, g_esPlayer[assistant].g_iTankDamage[tank]);
			vListTeammates(tank, killer, assistant, iDetails, sList, sizeof sList, sizeof sList[]);
		}
		case 1, 4:
		{
			FormatEx(solo, soloSize, "%N{default} ({olive}%.0f{percent}{default})", assistant, percentage);
			vListTeammates(tank, killer, assistant, iDetails, sList, sizeof sList, sizeof sList[]);
		}
		case 2, 5:
		{
			FormatEx(solo, soloSize, "%N{default} ({yellow}%i HP{default}) [{olive}%.0f{percent}{default}]", assistant, g_esPlayer[assistant].g_iTankDamage[tank], percentage);
			vListTeammates(tank, killer, assistant, iDetails, sList, sizeof sList, sizeof sList[]);
		}
	}

	for (int iPos = 0; iPos < maxLists; iPos++)
	{
		if (sList[iPos][0] != '\0')
		{
			strcopy(lists[iPos], listSize, sList[iPos]);
		}
	}
}

void vRecordKiller(int tank, int killer, float percentage, int assistant, char[] buffer, int size)
{
	if (killer == assistant)
	{
		FormatEx(buffer, size, "%N", killer);

		return;
	}

	switch (g_esTankCache[tank].g_iDeathDetails)
	{
		case 0, 3: FormatEx(buffer, size, "%N{default} ({olive}%i HP{default})", killer, g_esPlayer[killer].g_iTankDamage[tank]);
		case 1, 4: FormatEx(buffer, size, "%N{default} ({olive}%.0f{percent}{default})", killer, percentage);
		case 2, 5: FormatEx(buffer, size, "%N{default} ({yellow}%i HP{default}) [{olive}%.0f{percent}{default}]", killer, g_esPlayer[killer].g_iTankDamage[tank], percentage);
	}
}

void vRewardPriority(int tank, int priority, int recipient = 0, int recipient2 = 0)
{
	char sTankName[64];
	vGetTankTranslatedName(sTankName, sizeof sTankName, tank, .survivor = g_esShooter[tank].g_bSurvivor, .character = g_esShooter[tank].g_iCharacter);
	float flPercentage = 0.0, flRandom = GetRandomFloat(0.1, 100.0);
	int iPriority = (priority - 1), iSetting = 0;

	switch (priority)
	{
		case 0: return;
		case 1, 2, 4:
		{
			iSetting = bIsValidClient(recipient, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esTankCache[tank].g_iRewardEnabled[iPriority] : g_esTankCache[tank].g_iRewardBots[iPriority];
			if (bIsSurvivor(recipient, MT_CHECK_INDEX|MT_CHECK_INGAME) && iSetting != -1 && flRandom <= g_esTankCache[tank].g_flRewardChance[iPriority])
			{
				flPercentage = ((float(g_esPlayer[recipient].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100.0);
				if (flPercentage >= g_esTankCache[tank].g_flRewardPercentage[iPriority])
				{
					vRewardSolo(recipient, tank, iPriority, flPercentage, sTankName);
					vChooseReward(recipient, tank, iPriority, iSetting);
				}
				else if (flPercentage >= g_esTankCache[tank].g_flRewardPercentage[2])
				{
					vRewardSolo(recipient, tank, 2, flPercentage, sTankName);
					vChooseReward(recipient, tank, 2, iSetting);
				}
				else
				{
					vRewardNotify(recipient, tank, iPriority, "RewardNone", sTankName);
				}
			}
		}
		case 3:
		{
			if (flRandom <= g_esTankCache[tank].g_flRewardChance[iPriority])
			{
				float[] flPercentages = new float[MaxClients + 1];
				int[] iSurvivors = new int[MaxClients + 1];
				int iSurvivorCount = 0;
				for (int iTeammate = 1; iTeammate <= MaxClients; iTeammate++)
				{
					iSetting = bIsValidClient(iTeammate, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esTankCache[tank].g_iRewardEnabled[iPriority] : g_esTankCache[tank].g_iRewardBots[iPriority];
					if (bIsSurvivor(iTeammate, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esPlayer[iTeammate].g_iTankDamage[tank] > 0 && iSetting != -1 && iTeammate != recipient && iTeammate != recipient2)
					{
						flPercentages[iSurvivorCount] = ((float(g_esPlayer[iTeammate].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100.0);
						iSurvivors[iSurvivorCount] = iTeammate;
						iSurvivorCount++;
					}
				}

				if (iSurvivorCount > 0)
				{
					SortFloats(flPercentages, (MaxClients + 1), Sort_Descending);
				}

				int iTeammate = 0, iTeammateCount = 0;
				for (int iPos = 0; iPos < iSurvivorCount; iPos++)
				{
					iTeammate = iSurvivors[iPos];
					flPercentage = flPercentages[iPos];
					if (bIsSurvivor(iTeammate, MT_CHECK_INDEX|MT_CHECK_INGAME))
					{
						if (0 < g_esTankCache[tank].g_iTeammateLimit <= iTeammateCount)
						{
							vRewardNotify(iTeammate, tank, iPriority, "RewardNone", sTankName);

							continue;
						}

						if (flPercentage >= g_esTankCache[tank].g_flRewardPercentage[iPriority])
						{
							iSetting = bIsValidClient(iTeammate, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) ? g_esTankCache[tank].g_iRewardEnabled[iPriority] : g_esTankCache[tank].g_iRewardBots[iPriority];
							vRewardSolo(iTeammate, tank, iPriority, flPercentage, sTankName);
							vChooseReward(iTeammate, tank, iPriority, iSetting);
							vResetSurvivorStats2(iTeammate);
						}
						else
						{
							vRewardNotify(iTeammate, tank, iPriority, "RewardNone", sTankName);
						}

						iTeammateCount++;
					}
				}
			}
		}
	}
}

void vRewardSolo(int survivor, int tank, int priority, float percentage, const char[] namePhrase)
{
	if (percentage >= 90.0)
	{
		vRewardNotify(survivor, tank, priority, "RewardSolo", namePhrase);
	}
}

void vRewardSurvivor(int survivor, int type, int tank = 0, bool apply = false, int priority = 0)
{
	int iRecipient = iGetRandomRecipient(survivor, tank, priority, false);
	iRecipient = (survivor == iRecipient) ? iGetRandomRecipient(survivor, tank, priority, true) : iRecipient;

	bool bDeveloper = bIsDeveloper(survivor, 3), bDeveloper2 = bIsDeveloper(iRecipient, 3);
	float flTime = (bDeveloper && g_esDeveloper[survivor].g_flDevRewardDuration > g_esTankCache[tank].g_flRewardDuration[priority]) ? g_esDeveloper[survivor].g_flDevRewardDuration : g_esTankCache[tank].g_flRewardDuration[priority],
		flTime2 = (bDeveloper2 && g_esDeveloper[iRecipient].g_flDevRewardDuration > g_esTankCache[tank].g_flRewardDuration[priority]) ? g_esDeveloper[iRecipient].g_flDevRewardDuration : g_esTankCache[tank].g_flRewardDuration[priority];
	int iType = type;
	if (iType > 0)
	{
		Action aResult = Plugin_Continue;
		vRewardSurvivorForward(survivor, tank, iType, priority, flTime, apply, aResult);

		if (aResult == Plugin_Handled)
		{
			return;
		}

		switch (apply)
		{
			case true:
			{
				g_esPlayer[survivor].g_iNotify = g_esTankCache[tank].g_iRewardNotify[priority];
				g_esPlayer[survivor].g_iPrefsAccess = g_esTankCache[tank].g_iPrefsNotify[priority];
				g_esPlayer[iRecipient].g_iNotify = g_esTankCache[tank].g_iRewardNotify[priority];
				g_esPlayer[iRecipient].g_iPrefsAccess = g_esTankCache[tank].g_iPrefsNotify[priority];

				char sSet[9][64], sSet2[9][64], sTankName[64];
				int iRewardCount = 0, iRewardCount2 = 0;
				vGetTankTranslatedName(sTankName, sizeof sTankName, tank, .survivor = g_esShooter[tank].g_bSurvivor, .character = g_esShooter[tank].g_iCharacter);

				if ((iType & MT_REWARD_RESPAWN) && bRespawnSurvivor(survivor, (bDeveloper || g_esTankCache[tank].g_iRespawnLoadoutReward[priority] == 1)) && !(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_RESPAWN))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardRespawn", survivor);
					g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_RESPAWN;
					iRewardCount++;
				}

				if (bIsSurvivor(survivor))
				{
					char sReceived[1024], sShared[1024];
					float flCurrentTime = GetGameTime(), flDuration = (flCurrentTime + flTime), flDuration2 = (flCurrentTime + flTime2);
					if (iType & MT_REWARD_HEALTH)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_HEALTH))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardHealth", survivor);
							vSetupHealthReward(survivor, tank, priority);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_HEALTH;
							iRewardCount++;
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardHealth", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[0] >= g_esTankCache[tank].g_iStackLimits[0]));
							if (g_esPlayer[survivor].g_iRewardStack[0] >= g_esTankCache[tank].g_iStackLimits[0] && survivor != iRecipient)
							{
								vSetupHealthReward(iRecipient, tank, priority);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_HEALTH))
								{
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_HEALTH;
								}
							}
							else
							{
								vSetupHealthReward(survivor, tank, priority);
								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 0, g_esTankCache[tank].g_iStackLimits[0], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_SPEEDBOOST)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_SPEEDBOOST))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardSpeedBoost", survivor);
							vSetupRewardCounts(survivor, tank, priority, MT_REWARD_SPEEDBOOST);
							vSetupSpeedBoostReward(survivor, tank, priority);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_SPEEDBOOST;
							iRewardCount++;
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardSpeedBoost", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[1] >= g_esTankCache[tank].g_iStackLimits[1]));
							if (g_esPlayer[survivor].g_iRewardStack[1] >= g_esTankCache[tank].g_iStackLimits[1] && survivor != iRecipient)
							{
								vSetupRewardCounts(iRecipient, tank, priority, MT_REWARD_SPEEDBOOST);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_SPEEDBOOST))
								{
									vSetupSpeedBoostReward(iRecipient, tank, priority);
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_SPEEDBOOST;
								}
							}
							else
							{
								vSetupRewardCounts(survivor, tank, priority, MT_REWARD_SPEEDBOOST);
								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 1, g_esTankCache[tank].g_iStackLimits[1], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_DAMAGEBOOST)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardDamageBoost", survivor);
							vSetupRewardCounts(survivor, tank, priority, MT_REWARD_DAMAGEBOOST);
							vRewardLadyKillerMessage(survivor, tank, priority);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_DAMAGEBOOST;
							iRewardCount++;

							vRefreshLaserSight(survivor);
							vToggleWeaponVerticalPunch(survivor, true);
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardDamageBoost", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[2] >= g_esTankCache[tank].g_iStackLimits[2]));
							if (g_esPlayer[survivor].g_iRewardStack[2] >= g_esTankCache[tank].g_iStackLimits[2] && survivor != iRecipient)
							{
								vSetupRewardCounts(iRecipient, tank, priority, MT_REWARD_DAMAGEBOOST);
								vRewardLadyKillerMessage(survivor, tank, priority);

								if (survivor != iRecipient)
								{
									vRewardLadyKillerMessage(iRecipient, tank, priority);
								}

								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))
								{
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_DAMAGEBOOST;
								}
							}
							else
							{
								vSetupRewardCounts(survivor, tank, priority, MT_REWARD_DAMAGEBOOST);
								vRewardLadyKillerMessage(survivor, tank, priority);

								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 2, g_esTankCache[tank].g_iStackLimits[2], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_ATTACKBOOST)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardAttackBoost", survivor);
							vSetupRewardCounts(survivor, tank, priority, MT_REWARD_ATTACKBOOST);
							SDKHook(survivor, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_ATTACKBOOST;
							iRewardCount++;
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardAttackBoost", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[3] >= g_esTankCache[tank].g_iStackLimits[3]));
							if (g_esPlayer[survivor].g_iRewardStack[3] >= g_esTankCache[tank].g_iStackLimits[3] && survivor != iRecipient)
							{
								vSetupRewardCounts(iRecipient, tank, priority, MT_REWARD_ATTACKBOOST);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_ATTACKBOOST))
								{
									SDKHook(iRecipient, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_ATTACKBOOST;
								}
							}
							else
							{
								vSetupRewardCounts(survivor, tank, priority, MT_REWARD_ATTACKBOOST);
								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 3, g_esTankCache[tank].g_iStackLimits[3], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_AMMO)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_AMMO))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardAmmo", survivor);
							vSetupRewardCounts(survivor, tank, priority, MT_REWARD_AMMO);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_AMMO;
							iRewardCount++;

							vSetupAmmoReward(survivor);
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardAmmo", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[4] >= g_esTankCache[tank].g_iStackLimits[4]));
							if (g_esPlayer[survivor].g_iRewardStack[4] >= g_esTankCache[tank].g_iStackLimits[4] && survivor != iRecipient)
							{
								vSetupRewardCounts(iRecipient, tank, priority, MT_REWARD_AMMO);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_AMMO))
								{
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_AMMO;
								}

								vSetupAmmoReward(iRecipient);
							}
							else
							{
								vSetupRewardCounts(survivor, tank, priority, MT_REWARD_AMMO);
								vSetupAmmoReward(survivor);

								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 4, g_esTankCache[tank].g_iStackLimits[4], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_ITEM)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ITEM))
						{
							vSetupItemReward(survivor, tank, priority, sReceived, sizeof sReceived);
							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_ITEM;
						}

						if (survivor != iRecipient && !(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_ITEM))
						{
							vSetupItemReward(iRecipient, tank, priority, sShared, sizeof sShared);
							g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_ITEM;
						}
					}

					if (sReceived[0] != '\0')
					{
						MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardReceived", sReceived);
					}

					if (survivor != iRecipient && sShared[0] != '\0')
					{
						MT_PrintToChat(iRecipient, "%s %t", MT_TAG3, "RewardShared", survivor, sShared);
					}

					if (iType & MT_REWARD_GODMODE)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_GODMODE))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardGod", survivor);
							vSetupRewardCounts(survivor, tank, priority, MT_REWARD_GODMODE);
							vSetupGodmodeReward(survivor);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_GODMODE;
							iRewardCount++;
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardGod", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[5] >= g_esTankCache[tank].g_iStackLimits[5]));
							if (g_esPlayer[survivor].g_iRewardStack[5] >= g_esTankCache[tank].g_iStackLimits[5] && survivor != iRecipient)
							{
								vSetupRewardCounts(iRecipient, tank, priority, MT_REWARD_GODMODE);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_GODMODE))
								{
									vSetupGodmodeReward(iRecipient);
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_GODMODE;
								}
							}
							else
							{
								vSetupRewardCounts(survivor, tank, priority, MT_REWARD_GODMODE);
								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 5, g_esTankCache[tank].g_iStackLimits[5], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_REFILL)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_REFILL))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardRefill", survivor);
							vSetupRefillReward(survivor, tank, priority);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_REFILL;
							iRewardCount++;
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardRefill", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[6] >= g_esTankCache[tank].g_iStackLimits[6]));
							if (g_esPlayer[survivor].g_iRewardStack[6] >= g_esTankCache[tank].g_iStackLimits[6] && survivor != iRecipient)
							{
								vSetupRefillReward(iRecipient, tank, priority);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_REFILL))
								{
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_REFILL;
								}
							}
							else
							{
								vSetupRefillReward(survivor, tank, priority);
								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 6, g_esTankCache[tank].g_iStackLimits[6], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					if (iType & MT_REWARD_INFAMMO)
					{
						if (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_INFAMMO))
						{
							FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardInfAmmo", survivor);
							vSetupRewardCounts(survivor, tank, priority, MT_REWARD_INFAMMO);

							g_esPlayer[survivor].g_iRewardTypes |= MT_REWARD_INFAMMO;
							iRewardCount++;
						}
						else
						{
							vChooseRecipient(survivor, iRecipient, "RewardInfAmmo", sSet[iRewardCount], sizeof sSet[], sSet2[iRewardCount2], sizeof sSet2[], (g_esPlayer[survivor].g_iRewardStack[7] >= g_esTankCache[tank].g_iStackLimits[7]));
							if (g_esPlayer[survivor].g_iRewardStack[7] >= g_esTankCache[tank].g_iStackLimits[7] && survivor != iRecipient)
							{
								vSetupRewardCounts(iRecipient, tank, priority, MT_REWARD_INFAMMO);
								iRewardCount2++;

								if (!(g_esPlayer[iRecipient].g_iRewardTypes & MT_REWARD_INFAMMO))
								{
									g_esPlayer[iRecipient].g_iRewardTypes |= MT_REWARD_INFAMMO;
								}
							}
							else
							{
								vSetupRewardCounts(survivor, tank, priority, MT_REWARD_INFAMMO);
								iRewardCount++;
							}
						}

						vSetupRewardDurations(survivor, iRecipient, 7, g_esTankCache[tank].g_iStackLimits[7], flTime, flTime2, flCurrentTime, flDuration, flDuration2);
					}

					char sRewards[1024];
					vListRewards(survivor, iRewardCount, sSet, sizeof sSet, sRewards, sizeof sRewards);
					if (sRewards[0] != '\0')
					{
						vRewardMessage(survivor, survivor, priority, iRewardCount, sRewards, sTankName);
						vSetupVisual(survivor, survivor, tank, priority, iRewardCount, bDeveloper, flTime, flCurrentTime, flDuration);
					}

					if (survivor != iRecipient)
					{
						char sRewards2[1024];
						vListRewards(iRecipient, iRewardCount2, sSet2, sizeof sSet2, sRewards2, sizeof sRewards2);
						if (sRewards2[0] != '\0')
						{
							vRewardMessage(iRecipient, survivor, priority, iRewardCount2, sRewards2, sTankName);
							vSetupVisual(iRecipient, survivor, tank, priority, iRewardCount2, bDeveloper2, flTime2, flCurrentTime, flDuration2);
						}

						vResetSurvivorStats2(iRecipient);
					}
				}
			}
			case false:
			{
				char sSet[8][64];
				int iRewardCount = 0;
				if ((iType & MT_REWARD_HEALTH) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_HEALTH))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardHealth", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_HEALTH;
					g_esPlayer[survivor].g_flRewardTime[0] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[0] = 0;
					g_esPlayer[survivor].g_iBlazeHealth = 0;
					g_esPlayer[survivor].g_iBloodDonor = 0;
					g_esPlayer[survivor].g_flDopamineRadius = 0.0;
					g_esPlayer[survivor].g_flHealPercent = 0.0;
					g_esPlayer[survivor].g_flHealthcareRadius = 0.0;
					g_esPlayer[survivor].g_iHealthRegen = 0;
					g_esPlayer[survivor].g_flHeartbeat = 0.0;
					g_esPlayer[survivor].g_flHeartbeatCooldown = -1.0;
					g_esPlayer[survivor].g_iLifeLeech = 0;
					g_esPlayer[survivor].g_iMedicalCuts = 0;
					g_esPlayer[survivor].g_flMotivationRadius = 0.0;
					g_esPlayer[survivor].g_flOverdoseRadius = 0.0;
					g_esPlayer[survivor].g_iOverhealth = 0;
					g_esPlayer[survivor].g_iRegenBursts = 0;
					g_esPlayer[survivor].g_iReviveHealth = 0;
					g_esPlayer[survivor].g_flShockwaveRadius = 0.0;
					g_esPlayer[survivor].g_iSyringeDarts = 0;
					iRewardCount++;
				}

				if ((iType & MT_REWARD_SPEEDBOOST) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_SPEEDBOOST))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardSpeedBoost", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_SPEEDBOOST;
					g_esPlayer[survivor].g_flRewardTime[1] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[1] = 0;
					g_esPlayer[survivor].g_flAdrenalineTime = 0.0;
					g_esPlayer[survivor].g_flJumpHeight = 0.0;
					g_esPlayer[survivor].g_flSpeedBoost = 0.0;
					g_esPlayer[survivor].g_iBunnyHop = 0;
					g_esPlayer[survivor].g_iFallPasses = MT_JUMP_FALLPASSES;
					g_esPlayer[survivor].g_iStickyGrenades = 0;
					iRewardCount++;

					if (bIsSurvivor(survivor, MT_CHECK_ALIVE) && !bIsDeveloper(survivor, 5))
					{
						if (flGetAdrenalineTime(survivor) > 0.0)
						{
							vSetAdrenalineTime(survivor, 0.0);
						}

						SDKUnhook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
						SetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(survivor, 1.0, true) : 1.0));
					}
				}

				if ((iType & MT_REWARD_DAMAGEBOOST) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardDamageBoost", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_DAMAGEBOOST;
					g_esPlayer[survivor].g_flRewardTime[2] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[2] = 0;
					g_esPlayer[survivor].g_flDamageBoost = 0.0;
					g_esPlayer[survivor].g_flDamageResistance = 0.0;
					g_esPlayer[survivor].g_flHollowpointAmmo = 0.0;
					g_esPlayer[survivor].g_flLadyKiller = 0.0;
					g_esPlayer[survivor].g_flPipeBombDuration = 0.0;
					g_esPlayer[survivor].g_flSledgehammerRounds = 0.0;
					g_esPlayer[survivor].g_iEternalFlames = 0;
					g_esPlayer[survivor].g_iFriendlyFire = 0;
					g_esPlayer[survivor].g_iGhostBullets = 0;
					g_esPlayer[survivor].g_iLaserSight = 0;
					g_esPlayer[survivor].g_iMeleeRange = 0;
					g_esPlayer[survivor].g_iRecoilDampener = 0;
					g_esPlayer[survivor].g_iThorns = 0;
					iRewardCount++;

					vRefreshLaserSight(survivor);
					vToggleWeaponVerticalPunch(survivor, false);
				}

				if ((iType & MT_REWARD_ATTACKBOOST) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardAttackBoost", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_ATTACKBOOST;
					g_esPlayer[survivor].g_flRewardTime[3] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[3] = 0;
					g_esPlayer[survivor].g_flActionDuration = 0.0;
					g_esPlayer[survivor].g_flAttackBoost = 0.0;
					g_esPlayer[survivor].g_flFireRate = 0.0;
					g_esPlayer[survivor].g_flRapidPistol = 0.0;
					g_esPlayer[survivor].g_flReloadRate = 0.0;
					g_esPlayer[survivor].g_flShoveDamage = 0.0;
					g_esPlayer[survivor].g_flShoveRate = 0.0;
					g_esPlayer[survivor].g_flSwingRate = 0.0;
					g_esPlayer[survivor].g_iBurstDoors = 0;
					g_esPlayer[survivor].g_iFastRecovery = 0;
					g_esPlayer[survivor].g_iLadderActions = 0;
					g_esPlayer[survivor].g_iShovePenalty = 0;
					iRewardCount++;
				}

				if ((iType & MT_REWARD_AMMO) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_AMMO))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardAmmo", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_AMMO;
					g_esPlayer[survivor].g_flRewardTime[4] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[4] = 0;
					g_esPlayer[survivor].g_flGrenadeLauncher = 0.0;
					g_esPlayer[survivor].g_flLuckyBullet = 0.0;
					g_esPlayer[survivor].g_flSupplier = 0.0;
					g_esPlayer[survivor].g_flSupplierCooldown = -1.0;
					g_esPlayer[survivor].g_iAmmoBoost = 0;
					g_esPlayer[survivor].g_iAmmoRefill = 0;
					g_esPlayer[survivor].g_iAmmoRegen = 0;
					g_esPlayer[survivor].g_iClusterBombs = 0;
					g_esPlayer[survivor].g_iSpecialAmmo = 0;
					iRewardCount++;

					if (bIsSurvivor(survivor, MT_CHECK_ALIVE))
					{
						vRefillGunAmmo(survivor, .reset = true);
					}
				}

				if ((iType & MT_REWARD_GODMODE) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_GODMODE))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardGod", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_GODMODE;
					g_esPlayer[survivor].g_flRewardTime[5] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[5] = 0;
					g_esPlayer[survivor].g_flPunchResistance = 0.0;
					g_esPlayer[survivor].g_iCleanKills = 0;
					g_esPlayer[survivor].g_iRiotGear = 0;
					g_esPlayer[survivor].g_iSafetyBubble = 0;
					iRewardCount++;

					vRemoveBubble(survivor);
				}

				if ((iType & MT_REWARD_REFILL) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_REFILL))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardRefill", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_REFILL;
					g_esPlayer[survivor].g_flRewardTime[6] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[6] = 0;
					g_esPlayer[survivor].g_iAmmoRefill = 0;
					g_esPlayer[survivor].g_flRefillPercent = 0.0;
					iRewardCount++;
				}

				if ((iType & MT_REWARD_INFAMMO) && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_INFAMMO))
				{
					FormatEx(sSet[iRewardCount], sizeof sSet[], "%T", "RewardInfAmmo", survivor);

					g_esPlayer[survivor].g_iRewardTypes &= ~MT_REWARD_INFAMMO;
					g_esPlayer[survivor].g_flRewardTime[7] = -1.0;
					g_esPlayer[survivor].g_iRewardStack[7] = 0;
					g_esPlayer[survivor].g_iInfiniteAmmo = 0;
					iRewardCount++;
				}

				char sRewards[1024];
				vListRewards(survivor, iRewardCount, sSet, sizeof sSet, sRewards, sizeof sRewards);
				if (bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) && iRewardCount > 0 && g_esPlayer[survivor].g_iNotify >= 2)
				{
					MT_PrintToChat(survivor, "%s %t", MT_TAG2, "RewardEnd", sRewards);
				}

				if (g_esPlayer[survivor].g_iRewardTypes <= 0)
				{
					g_esPlayer[survivor].g_iNotify = 0;
					g_esPlayer[survivor].g_iPrefsAccess = 0;
				}
			}
		}
	}
}

void vRewardItemMessage(int survivor, const char[] list, char[] buffer, int size, bool set)
{
	char sTemp[PLATFORM_MAX_PATH];

	switch (buffer[0] != '\0')
	{
		case true:
		{
			switch (set)
			{
				case true: FormatEx(sTemp, sizeof sTemp, "{default}, {yellow}%s", list);
				case false: FormatEx(sTemp, sizeof sTemp, "{default} %T{yellow} %s", "AndConjunction", survivor, list);
			}

			StrCat(buffer, size, sTemp);
		}
		case false: StrCat(buffer, size, list);
	}
}

void vRewardLadyKillerMessage(int survivor, int tank, int priority)
{
	if (!bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		return;
	}

	float flReward = g_esTankCache[tank].g_flLadyKillerReward[priority];
	vSetupLadyKillerReminder(survivor, (flReward / 100.0), (g_esPlayer[survivor].g_iNotify >= 2));
}

void vRewardMessage(int survivor, int recipient, int priority, int count, const char[] list, const char[] namePhrase)
{
	if (!bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) || count <= 0 || g_esPlayer[survivor].g_iNotify <= 1)
	{
		return;
	}

	if (survivor != recipient)
	{
		MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardShared", recipient, list);
	}
	else
	{
		switch (priority)
		{
			case 0: MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardList", list, namePhrase);
			case 1: MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardList2", list, namePhrase);
			case 2: MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardList3", list, namePhrase);
			case 3: MT_PrintToChat(survivor, "%s %t", MT_TAG3, "RewardList4", list, namePhrase);
		}
	}
}

void vRewardNotify(int survivor, int tank, int priority, const char[] phrase, const char[] namePhrase)
{
	if (!bIsValidClient(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) || g_esTankCache[tank].g_iRewardNotify[priority] <= 0 || g_esTankCache[tank].g_iRewardNotify[priority] == 2)
	{
		return;
	}

	switch (StrEqual(phrase, "RewardNone"))
	{
		case true: MT_PrintToChat(survivor, "%s %t", MT_TAG3, phrase, namePhrase);
		case false:
		{
			MT_PrintToChatAll("%s %t", MT_TAG3, phrase, survivor, namePhrase);
			vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, phrase, LANG_SERVER, survivor, namePhrase);
		}
	}
}

void vShowDamageList(int tank, const char[] namePhrase, const char[][] lists, int maxLists)
{
	for (int iPos = 0; iPos < maxLists; iPos++)
	{
		if (g_esTankCache[tank].g_iDeathDetails > 2 && lists[iPos][0] != '\0')
		{
			switch (iPos)
			{
				case 0:
				{
					MT_PrintToChatAll("%s %t", MT_TAG2, "TeammatesList", namePhrase, lists[iPos]);
					vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, "TeammatesList", LANG_SERVER, namePhrase, lists[iPos]);
				}
				default:
				{
					MT_PrintToChatAll("%s %s", MT_TAG3, lists[iPos]);
					vLogMessage(MT_LOG_LIFE, _, "%s %s", MT_TAG, lists[iPos]);
				}
			}
		}
	}
}

void vSetupAmmoReward(int survivor)
{
	if (g_esPlayer[survivor].g_iAmmoRefill == 1)
	{
		vCheckGunClipSizes(survivor);
		vRefillGunAmmo(survivor);
	}

	vGiveGunSpecialAmmo(survivor);
}

void vSetupGodmodeReward(int survivor)
{
	if (g_esPlayer[survivor].g_iSafetyBubble == 1)
	{
		if (g_esPlayer[survivor].g_bVomited)
		{
			vUnvomitPlayer(survivor);
		}

		if ((g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1) && g_esPlayer[survivor].g_iBubble == INVALID_ENT_REFERENCE)
		{
			g_esPlayer[survivor].g_iBubble = CreateEntityByName("prop_dynamic");
			if (bIsValidEntity(g_esPlayer[survivor].g_iBubble))
			{
				float flOrigin[3];
				GetClientAbsOrigin(survivor, flOrigin);
				flOrigin[2] -= 120.0;

				SetEntityModel(g_esPlayer[survivor].g_iBubble, MODEL_SHIELD);
				DispatchKeyValueVector(g_esPlayer[survivor].g_iBubble, "origin", flOrigin);
				DispatchSpawn(g_esPlayer[survivor].g_iBubble);
				vSetEntityParent(g_esPlayer[survivor].g_iBubble, survivor, true);

				SetEntityRenderMode(g_esPlayer[survivor].g_iBubble, RENDER_TRANSTEXTURE);
				SetEntityRenderColor(g_esPlayer[survivor].g_iBubble, 50, 50, 50, 50);

				SetEntProp(g_esPlayer[survivor].g_iBubble, Prop_Send, "m_CollisionGroup", 1);
				SDKHook(g_esPlayer[survivor].g_iBubble, SDKHook_SetTransmit, OnPropSetTransmit);
				g_esPlayer[survivor].g_iBubble = EntIndexToEntRef(g_esPlayer[survivor].g_iBubble);
			}
		}
	}
}

void vSetupHealthReward(int survivor, int tank, int priority)
{
	vSetupRewardCounts(survivor, tank, priority, MT_REWARD_HEALTH);
	vSaveCaughtSurvivor(survivor);
	vRefillSurvivorHealth(survivor);
}

void vSetupItemReward(int survivor, int tank, int priority, char[] buffer, int size)
{
	bool bListed = false;
	char sLoadout[320], sItems[5][64], sList[320];

	switch (priority)
	{
		case 0: strcopy(sLoadout, sizeof sLoadout, g_esTankCache[tank].g_sItemReward);
		case 1: strcopy(sLoadout, sizeof sLoadout, g_esTankCache[tank].g_sItemReward2);
		case 2: strcopy(sLoadout, sizeof sLoadout, g_esTankCache[tank].g_sItemReward3);
		case 3: strcopy(sLoadout, sizeof sLoadout, g_esTankCache[tank].g_sItemReward4);
	}

	if (FindCharInString(sLoadout, ';') != -1)
	{
		int iItemCount = 0;
		ExplodeString(sLoadout, ";", sItems, sizeof sItems, sizeof sItems[]);
		for (int iPos = 0; iPos < (sizeof sItems); iPos++)
		{
			if (sItems[iPos][0] != '\0')
			{
				iItemCount++;

				vCheatCommand(survivor, "give", sItems[iPos]);
				ReplaceString(sItems[iPos], sizeof sItems[], "_", " ");

				switch (bListed)
				{
					case true:
					{
						switch (iPos < ((sizeof sItems) - 1) && sItems[iPos + 1][0] != '\0')
						{
							case true: Format(sList, sizeof sList, "%s{default}, {yellow}%s", sList, sItems[iPos]);
							case false:
							{
								switch (iItemCount == 2 && buffer[0] == '\0')
								{
									case true: Format(sList, sizeof sList, "%s{default} %T{yellow} %s", sList, "AndConjunction", survivor, sItems[iPos]);
									case false: Format(sList, sizeof sList, "%s{default}, %T{yellow} %s", sList, "AndConjunction", survivor, sItems[iPos]);
								}
							}
						}
					}
					case false:
					{
						bListed = true;

						FormatEx(sList, sizeof sList, "%s", sItems[iPos]);
					}
				}
			}
		}

		vRewardItemMessage(survivor, sList, buffer, size, true);
	}
	else
	{
		vCheatCommand(survivor, "give", sLoadout);
		ReplaceString(sLoadout, sizeof sLoadout, "_", " ");
		vRewardItemMessage(survivor, sLoadout, buffer, size, false);
	}
}

void vSetupLadyKillerReminder(int survivor, float portion, bool check)
{
	int iSlot = GetPlayerWeaponSlot(survivor, 0);
	if (iSlot > MaxClients)
	{
		int iAmmoType = GetEntProp(iSlot, Prop_Send, "m_iPrimaryAmmoType");
		if (iAmmoType > 0)
		{
			int iAmmo = GetEntProp(survivor, Prop_Send, "m_iAmmo", .element = iAmmoType),
				iMaxAmmo = iGetMaxAmmo(survivor, 0, iSlot, true), iPortion = RoundToCeil(iMaxAmmo * portion);

			if (check && portion > 0.0)
			{
				MT_PrintToChat(survivor, "%s %t", MT_TAG2, "RewardLadyKiller", RoundToFloor(float(iAmmo) / float(iPortion)));
			}
		}
	}
}

void vSetupProcReward(int survivor)
{
	bool bDeveloper = bIsDeveloper(survivor, 10);
	float flCurrentTime = GetGameTime();
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[survivor].g_flHeartbeat > 0.0))
	{
		if (g_esPlayer[survivor].g_flHeartbeatCooldown == -1.0 || g_esPlayer[survivor].g_flHeartbeatCooldown <= flCurrentTime)
		{
			g_esPlayer[survivor].g_flHeartbeatCooldown = (flCurrentTime + g_esPlayer[survivor].g_flHeartbeat);

			vSetupProximityReward(survivor, survivor, 250.0, 5, {0, 255, 0, 150});
		}
	}

	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_AMMO)) && g_esPlayer[survivor].g_flSupplier > 0.0))
	{
		if (g_esPlayer[survivor].g_flSupplierCooldown == -1.0 || g_esPlayer[survivor].g_flSupplierCooldown <= flCurrentTime)
		{
			g_esPlayer[survivor].g_flSupplierCooldown = (flCurrentTime + g_esPlayer[survivor].g_flSupplier);

			vSetupProximityReward(survivor, survivor, 250.0, 6, {255, 150, 0, 150});
		}
	}
}

void vSetupProximityReward(int survivor, int target, float radius, int type, int color[4], int flags = MT_CHECK_INGAME|MT_CHECK_ALIVE)
{
	bool bShow = false;
	float flSurvivorPos[3], flSurvivorPos2[3];
	GetClientAbsOrigin(survivor, flSurvivorPos);
	for (int iTeammate = 1; iTeammate <= MaxClients; iTeammate++)
	{
		if (bIsSurvivor(iTeammate, flags) && bIsVisibleToPlayer(target, iTeammate, 1, .range = radius))
		{
			if ((survivor == target && iTeammate == survivor) || (type == 2 && bIsValidClient(iTeammate, MT_CHECK_ALIVE)) || (3 <= type <= 5 && bIsSurvivorDisabled(iTeammate)) || (type != 5 && type != 6 && iTeammate == target))
			{
				continue;
			}

			switch (type == 2 && !g_esPlayer[iTeammate].g_bFinalFall)
			{
				case true: vCopyVector(g_esPlayer[iTeammate].g_flLastPosition, flSurvivorPos2);
				case false: GetClientAbsOrigin(iTeammate, flSurvivorPos2);
			}

			if (GetVectorDistance(flSurvivorPos, flSurvivorPos2) <= radius)
			{
				bShow = true;

				switch (type)
				{
					case 1:
					{
						int iHealth = GetEntProp(iTeammate, Prop_Data, "m_iHealth"), iMaxHealth = GetEntProp(iTeammate, Prop_Data, "m_iMaxHealth"),
							iNewHealth = (iHealth + RoundToFloor(float(iMaxHealth - iHealth) * (g_esGeneral.g_cvMTFirstAidHealPercent.FloatValue * 0.5))),
							iFinalHealth = ((iNewHealth > iMaxHealth) ? iMaxHealth : iNewHealth);

						vCheatCommand(iTeammate, "give", "health");
						SetEntProp(iTeammate, Prop_Data, "m_iHealth", iFinalHealth);
						vSetTempHealth(iTeammate, 0.0);
					}
					case 2:
					{
						bRespawnSurvivor(iTeammate, false, target);
						vSetSurvivorLastLife(iTeammate, g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue, true, float(g_esGeneral.g_cvMTSurvivorReviveHealth.IntValue));
					}
					case 3: vSetAdrenalineTime(iTeammate, (g_esGeneral.g_cvMTAdrenalineDuration.FloatValue * 0.5));
					case 4:
					{
						float flTemphealth = flGetTempHealth(iTeammate, g_esGeneral.g_cvMTPainPillsDecayRate.FloatValue),
							flMaxHealth = float(GetEntProp(iTeammate, Prop_Data, "m_iMaxHealth")),
							flNewHealth = (flTemphealth + (float(g_esGeneral.g_cvMTPainPillsHealthValue.IntValue) * 0.5)),
							flFinalHealth = ((flNewHealth > flMaxHealth) ? flMaxHealth : flNewHealth);

						vSetTempHealth(iTeammate, flFinalHealth);

						int iHealth = GetEntProp(iTeammate, Prop_Data, "m_iHealth"), iMaxHealth = RoundToNearest(flMaxHealth),
							iFinalHealth = ((iHealth > iMaxHealth) ? iMaxHealth : iHealth);

						SetEntProp(iTeammate, Prop_Data, "m_iHealth", iFinalHealth);
					}
					case 5:
					{
						int iHealth = GetEntProp(iTeammate, Prop_Data, "m_iHealth"), iMaxHealth = GetEntProp(iTeammate, Prop_Data, "m_iMaxHealth"),
							iNewHealth = (iHealth + 5), iFinalHealth = ((iNewHealth > iMaxHealth) ? iMaxHealth : iNewHealth);

						SetEntProp(iTeammate, Prop_Data, "m_iHealth", iFinalHealth);
					}
					case 6:
					{
						int iWeapon = GetPlayerWeaponSlot(iTeammate, 0);
						if (iWeapon > MaxClients)
						{
							int iAmmoOffset = iGetWeaponOffset(iWeapon), iAmmo = GetEntProp(iTeammate, Prop_Send, "m_iAmmo", .element = iAmmoOffset),
								iMaxAmmo = iGetMaxAmmo(iTeammate, 0, iWeapon, true);

							vRefillGunMagazine(iTeammate, iWeapon, false, false, (iAmmo + RoundToCeil(iMaxAmmo * 0.05)));
						}
					}
					case 7: vReviveSurvivor(iTeammate);
				}
			}
		}
	}

	if (bShow && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		TE_SetupBeamRingPoint(flSurvivorPos, 10.0, (radius * 2.0), g_iBossBeamSprite, g_iBossHaloSprite, 0, 0, 1.0, 3.0, 0.0, color, 1000, 0);
		TE_SendToAll();
	}
}

void vSetupRefillReward(int survivor, int tank, int priority)
{
	vSetupRewardCounts(survivor, tank, priority, MT_REWARD_REFILL);
	vSaveCaughtSurvivor(survivor);
	vCheckGunClipSizes(survivor);
	vRefillSurvivorHealth(survivor);

	if (g_esPlayer[survivor].g_iAmmoRefill == 1)
	{
		vRefillGunAmmo(survivor, .reset = !(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_AMMO), .override = true);
	}
}

void vSetupRewardCounts(int survivor, int tank, int priority, int type)
{
	switch (type)
	{
		case MT_REWARD_HEALTH:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flDopamineRadius = g_esTankCache[tank].g_flDopamineRadiusReward[priority];
				g_esPlayer[survivor].g_flHealPercent = g_esTankCache[tank].g_flHealPercentReward[priority];
				g_esPlayer[survivor].g_flHealthcareRadius = g_esTankCache[tank].g_flHealthcareRadiusReward[priority];
				g_esPlayer[survivor].g_flHeartbeat = g_esTankCache[tank].g_flHeartbeatReward[priority];
				g_esPlayer[survivor].g_flHeartbeatCooldown = -1.0;
				g_esPlayer[survivor].g_flMotivationRadius = g_esTankCache[tank].g_flMotivationRadiusReward[priority];
				g_esPlayer[survivor].g_flOverdoseRadius = g_esTankCache[tank].g_flOverdoseRadiusReward[priority];
				g_esPlayer[survivor].g_flRefillPercent = g_esTankCache[tank].g_flRefillPercentReward[priority];
				g_esPlayer[survivor].g_flShockwaveRadius = g_esTankCache[tank].g_flShockwaveRadiusReward[priority];
				g_esPlayer[survivor].g_iBlazeHealth = g_esTankCache[tank].g_iBlazeHealthReward[priority];
				g_esPlayer[survivor].g_iBloodDonor = g_esTankCache[tank].g_iBloodDonorReward[priority];
				g_esPlayer[survivor].g_iHealthRegen = g_esTankCache[tank].g_iHealthRegenReward[priority];
				g_esPlayer[survivor].g_iLifeLeech = g_esTankCache[tank].g_iLifeLeechReward[priority];
				g_esPlayer[survivor].g_iMedicalCuts = g_esTankCache[tank].g_iMedicalCutsReward[priority];
				g_esPlayer[survivor].g_iOverhealth = g_esTankCache[tank].g_iOverhealthReward[priority];
				g_esPlayer[survivor].g_iRegenBursts = g_esTankCache[tank].g_iRegenBurstsReward[priority];
				g_esPlayer[survivor].g_iReviveHealth = g_esTankCache[tank].g_iReviveHealthReward[priority];
				g_esPlayer[survivor].g_iSyringeDarts = g_esTankCache[tank].g_iSyringeDartsReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[0] > 0 && g_esPlayer[survivor].g_iRewardStack[0] < g_esTankCache[tank].g_iStackLimits[0])
			{
				g_esPlayer[survivor].g_flDopamineRadius += g_esTankCache[tank].g_flDopamineRadiusReward[priority];
				g_esPlayer[survivor].g_flDopamineRadius = flClamp(g_esPlayer[survivor].g_flDopamineRadius, 0.0, 99999.0);
				g_esPlayer[survivor].g_flHealPercent += g_esTankCache[tank].g_flHealPercentReward[priority] / 2.0;
				g_esPlayer[survivor].g_flHealPercent = flClamp(g_esPlayer[survivor].g_flHealPercent, 0.0, 100.0);
				g_esPlayer[survivor].g_flHealthcareRadius += g_esTankCache[tank].g_flHealthcareRadiusReward[priority];
				g_esPlayer[survivor].g_flHealthcareRadius = flClamp(g_esPlayer[survivor].g_flHealthcareRadius, 0.0, 99999.0);
				g_esPlayer[survivor].g_flHeartbeat -= g_esTankCache[tank].g_flHeartbeatReward[priority] / 2.0;
				g_esPlayer[survivor].g_flHeartbeat = flClamp(g_esPlayer[survivor].g_flHeartbeat, 0.0, 99999.0);
				g_esPlayer[survivor].g_flMotivationRadius += g_esTankCache[tank].g_flMotivationRadiusReward[priority];
				g_esPlayer[survivor].g_flMotivationRadius = flClamp(g_esPlayer[survivor].g_flMotivationRadius, 0.0, 99999.0);
				g_esPlayer[survivor].g_flOverdoseRadius += g_esTankCache[tank].g_flOverdoseRadiusReward[priority];
				g_esPlayer[survivor].g_flOverdoseRadius = flClamp(g_esPlayer[survivor].g_flOverdoseRadius, 0.0, 99999.0);
				g_esPlayer[survivor].g_flRefillPercent += g_esTankCache[tank].g_flRefillPercentReward[priority] / 2.0;
				g_esPlayer[survivor].g_flRefillPercent = flClamp(g_esPlayer[survivor].g_flRefillPercent, 0.0, 100.0);
				g_esPlayer[survivor].g_flShockwaveRadius += g_esTankCache[tank].g_flShockwaveRadiusReward[priority];
				g_esPlayer[survivor].g_flShockwaveRadius = flClamp(g_esPlayer[survivor].g_flShockwaveRadius, 0.0, 99999.0);
				g_esPlayer[survivor].g_iBlazeHealth += g_esTankCache[tank].g_iBlazeHealthReward[priority];
				g_esPlayer[survivor].g_iBlazeHealth = iClamp(g_esPlayer[survivor].g_iBlazeHealth, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iBloodDonor += g_esTankCache[tank].g_iBloodDonorReward[priority];
				g_esPlayer[survivor].g_iBloodDonor = iClamp(g_esPlayer[survivor].g_iBloodDonor, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iHealthRegen += g_esTankCache[tank].g_iHealthRegenReward[priority];
				g_esPlayer[survivor].g_iHealthRegen = iClamp(g_esPlayer[survivor].g_iHealthRegen, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iLifeLeech += g_esTankCache[tank].g_iLifeLeechReward[priority];
				g_esPlayer[survivor].g_iLifeLeech = iClamp(g_esPlayer[survivor].g_iLifeLeech, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iMedicalCuts += g_esTankCache[tank].g_iMedicalCutsReward[priority];
				g_esPlayer[survivor].g_iMedicalCuts = iClamp(g_esPlayer[survivor].g_iMedicalCuts, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iOverhealth += g_esTankCache[tank].g_iOverhealthReward[priority];
				g_esPlayer[survivor].g_iOverhealth = iClamp(g_esPlayer[survivor].g_iOverhealth, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iRegenBursts += g_esTankCache[tank].g_iRegenBurstsReward[priority];
				g_esPlayer[survivor].g_iRegenBursts = iClamp(g_esPlayer[survivor].g_iRegenBursts, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iReviveHealth += g_esTankCache[tank].g_iReviveHealthReward[priority];
				g_esPlayer[survivor].g_iReviveHealth = iClamp(g_esPlayer[survivor].g_iReviveHealth, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iSyringeDarts += g_esTankCache[tank].g_iSyringeDartsReward[priority];
				g_esPlayer[survivor].g_iSyringeDarts = iClamp(g_esPlayer[survivor].g_iSyringeDarts, 0, MT_MAXHEALTH);
				g_esPlayer[survivor].g_iRewardStack[0]++;
			}
		}
		case MT_REWARD_SPEEDBOOST:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flAdrenalineTime = g_esTankCache[tank].g_flAdrenalineTimeReward[priority];
				g_esPlayer[survivor].g_flJumpHeight = g_esTankCache[tank].g_flJumpHeightReward[priority];
				g_esPlayer[survivor].g_flSpeedBoost = g_esTankCache[tank].g_flSpeedBoostReward[priority];
				g_esPlayer[survivor].g_iBunnyHop = g_esTankCache[tank].g_iBunnyHopReward[priority];
				g_esPlayer[survivor].g_iFallPasses = 0;
				g_esPlayer[survivor].g_iMidairDashesLimit = g_esTankCache[tank].g_iMidairDashesReward[priority];
				g_esPlayer[survivor].g_iStickyGrenades = g_esTankCache[tank].g_iStickyGrenadesReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[1] > 0 && g_esPlayer[survivor].g_iRewardStack[1] < g_esTankCache[tank].g_iStackLimits[1])
			{
				g_esPlayer[survivor].g_flAdrenalineTime += g_esTankCache[tank].g_flAdrenalineTimeReward[priority];
				g_esPlayer[survivor].g_flAdrenalineTime = flClamp(g_esPlayer[survivor].g_flAdrenalineTime, 0.0, 99999.0);
				g_esPlayer[survivor].g_flJumpHeight += g_esTankCache[tank].g_flJumpHeightReward[priority];
				g_esPlayer[survivor].g_flJumpHeight = flClamp(g_esPlayer[survivor].g_flJumpHeight, 0.0, 99999.0);
				g_esPlayer[survivor].g_flSpeedBoost += g_esTankCache[tank].g_flSpeedBoostReward[priority];
				g_esPlayer[survivor].g_flSpeedBoost = flClamp(g_esPlayer[survivor].g_flSpeedBoost, 0.0, 99999.0);
				g_esPlayer[survivor].g_iBunnyHop = g_esTankCache[tank].g_iBunnyHopReward[priority];
				g_esPlayer[survivor].g_iFallPasses = 0;
				g_esPlayer[survivor].g_iMidairDashesLimit += g_esTankCache[tank].g_iMidairDashesReward[priority];
				g_esPlayer[survivor].g_iMidairDashesLimit = iClamp(g_esPlayer[survivor].g_iMidairDashesLimit);
				g_esPlayer[survivor].g_iStickyGrenades = g_esTankCache[tank].g_iStickyGrenadesReward[priority];
				g_esPlayer[survivor].g_iRewardStack[1]++;
			}
		}
		case MT_REWARD_DAMAGEBOOST:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flDamageBoost = g_esTankCache[tank].g_flDamageBoostReward[priority];
				g_esPlayer[survivor].g_flDamageResistance = g_esTankCache[tank].g_flDamageResistanceReward[priority];
				g_esPlayer[survivor].g_flHollowpointAmmo = g_esTankCache[tank].g_flHollowpointAmmoReward[priority];
				g_esPlayer[survivor].g_flLadyKiller = g_esTankCache[tank].g_flLadyKillerReward[priority];
				g_esPlayer[survivor].g_flPipeBombDuration = g_esTankCache[tank].g_flPipeBombDurationReward[priority];
				g_esPlayer[survivor].g_flSledgehammerRounds = g_esTankCache[tank].g_flSledgehammerRoundsReward[priority];
				g_esPlayer[survivor].g_iEternalFlames = g_esTankCache[tank].g_iEternalFlamesReward[priority];
				g_esPlayer[survivor].g_iFriendlyFire = g_esTankCache[tank].g_iFriendlyFireReward[priority];
				g_esPlayer[survivor].g_iGhostBullets = g_esTankCache[tank].g_iGhostBulletsReward[priority];
				g_esPlayer[survivor].g_iLaserSight = g_esTankCache[tank].g_iLaserSightReward[priority];
				g_esPlayer[survivor].g_iMeleeRange = g_esTankCache[tank].g_iMeleeRangeReward[priority];
				g_esPlayer[survivor].g_iRecoilDampener = g_esTankCache[tank].g_iRecoilDampenerReward[priority];
				g_esPlayer[survivor].g_iThorns = g_esTankCache[tank].g_iThornsReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[2] > 0 && g_esPlayer[survivor].g_iRewardStack[2] < g_esTankCache[tank].g_iStackLimits[2])
			{
				g_esPlayer[survivor].g_flDamageBoost += g_esTankCache[tank].g_flDamageBoostReward[priority];
				g_esPlayer[survivor].g_flDamageBoost = flClamp(g_esPlayer[survivor].g_flDamageBoost, 0.0, 99999.0);
				g_esPlayer[survivor].g_flDamageResistance -= g_esTankCache[tank].g_flDamageResistanceReward[priority] / 2.0;
				g_esPlayer[survivor].g_flDamageResistance = flClamp(g_esPlayer[survivor].g_flDamageResistance, 0.0, 1.0);
				g_esPlayer[survivor].g_flHollowpointAmmo += g_esTankCache[tank].g_flHollowpointAmmoReward[priority];
				g_esPlayer[survivor].g_flHollowpointAmmo = flClamp(g_esPlayer[survivor].g_flHollowpointAmmo, 0.0, 100.0);
				g_esPlayer[survivor].g_flLadyKiller -= g_esTankCache[tank].g_flLadyKillerReward[priority];
				g_esPlayer[survivor].g_flLadyKiller = flClamp(g_esPlayer[survivor].g_flLadyKiller);
				g_esPlayer[survivor].g_flPipeBombDuration += g_esTankCache[tank].g_flPipeBombDurationReward[priority];
				g_esPlayer[survivor].g_flPipeBombDuration = flClamp(g_esPlayer[survivor].g_flPipeBombDuration);
				g_esPlayer[survivor].g_flSledgehammerRounds += g_esTankCache[tank].g_flSledgehammerRoundsReward[priority];
				g_esPlayer[survivor].g_flSledgehammerRounds = flClamp(g_esPlayer[survivor].g_flSledgehammerRounds, 0.0, 100.0);
				g_esPlayer[survivor].g_iEternalFlames = g_esTankCache[tank].g_iEternalFlamesReward[priority];
				g_esPlayer[survivor].g_iFriendlyFire = g_esTankCache[tank].g_iFriendlyFireReward[priority];
				g_esPlayer[survivor].g_iGhostBullets = g_esTankCache[tank].g_iGhostBulletsReward[priority];
				g_esPlayer[survivor].g_iLaserSight = g_esTankCache[tank].g_iLaserSightReward[priority];
				g_esPlayer[survivor].g_iMeleeRange += g_esTankCache[tank].g_iMeleeRangeReward[priority];
				g_esPlayer[survivor].g_iMeleeRange = iClamp(g_esPlayer[survivor].g_iMeleeRange);
				g_esPlayer[survivor].g_iRecoilDampener = g_esTankCache[tank].g_iRecoilDampenerReward[priority];
				g_esPlayer[survivor].g_iThorns = g_esTankCache[tank].g_iThornsReward[priority];
				g_esPlayer[survivor].g_iRewardStack[2]++;
			}
		}
		case MT_REWARD_ATTACKBOOST:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flActionDuration = g_esTankCache[tank].g_flActionDurationReward[priority];
				g_esPlayer[survivor].g_flAttackBoost = g_esTankCache[tank].g_flAttackBoostReward[priority];
				g_esPlayer[survivor].g_flFireRate = g_esTankCache[tank].g_flFireRateReward[priority];
				g_esPlayer[survivor].g_flRapidPistol = g_esTankCache[tank].g_flRapidPistolReward[priority];
				g_esPlayer[survivor].g_flReloadRate = g_esTankCache[tank].g_flReloadRateReward[priority];
				g_esPlayer[survivor].g_flShoveDamage = g_esTankCache[tank].g_flShoveDamageReward[priority];
				g_esPlayer[survivor].g_flShoveRate = g_esTankCache[tank].g_flShoveRateReward[priority];
				g_esPlayer[survivor].g_flSwingRate = g_esTankCache[tank].g_flSwingRateReward[priority];
				g_esPlayer[survivor].g_iBurstDoors = g_esTankCache[tank].g_iBurstDoorsReward[priority];
				g_esPlayer[survivor].g_iFastRecovery = g_esTankCache[tank].g_iFastRecoveryReward[priority];
				g_esPlayer[survivor].g_iLadderActions = g_esTankCache[tank].g_iLadderActionsReward[priority];
				g_esPlayer[survivor].g_iShovePenalty = g_esTankCache[tank].g_iShovePenaltyReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[3] > 0 && g_esPlayer[survivor].g_iRewardStack[3] < g_esTankCache[tank].g_iStackLimits[3])
			{
				g_esPlayer[survivor].g_flActionDuration -= g_esTankCache[tank].g_flActionDurationReward[priority] / 2.0;
				g_esPlayer[survivor].g_flActionDuration = flClamp(g_esPlayer[survivor].g_flActionDuration, 0.0, 99999.0);
				g_esPlayer[survivor].g_flAttackBoost += g_esTankCache[tank].g_flAttackBoostReward[priority];
				g_esPlayer[survivor].g_flAttackBoost = flClamp(g_esPlayer[survivor].g_flAttackBoost, 0.0, 99999.0);
				g_esPlayer[survivor].g_flFireRate += g_esTankCache[tank].g_flFireRateReward[priority];
				g_esPlayer[survivor].g_flFireRate = flClamp(g_esPlayer[survivor].g_flFireRate, 0.0, 99999.0);
				g_esPlayer[survivor].g_flRapidPistol -= g_esTankCache[tank].g_flRapidPistolReward[priority] / 2.0;
				g_esPlayer[survivor].g_flRapidPistol = flClamp(g_esPlayer[survivor].g_flRapidPistol, 0.0, 1.0);
				g_esPlayer[survivor].g_flReloadRate += g_esTankCache[tank].g_flReloadRateReward[priority];
				g_esPlayer[survivor].g_flReloadRate = flClamp(g_esPlayer[survivor].g_flReloadRate, 0.0, 99999.0);
				g_esPlayer[survivor].g_flShoveDamage += g_esTankCache[tank].g_flShoveDamageReward[priority];
				g_esPlayer[survivor].g_flShoveDamage = flClamp(g_esPlayer[survivor].g_flShoveDamage, 0.0, 99999.0);
				g_esPlayer[survivor].g_flShoveRate -= g_esTankCache[tank].g_flShoveRateReward[priority] / 2.0;
				g_esPlayer[survivor].g_flShoveRate = flClamp(g_esPlayer[survivor].g_flShoveRate, 0.0, 99999.0);
				g_esPlayer[survivor].g_flSwingRate += g_esTankCache[tank].g_flSwingRateReward[priority];
				g_esPlayer[survivor].g_flSwingRate = flClamp(g_esPlayer[survivor].g_flSwingRate, 0.0, 99999.0);
				g_esPlayer[survivor].g_iBurstDoors = g_esTankCache[tank].g_iBurstDoorsReward[priority];
				g_esPlayer[survivor].g_iFastRecovery = g_esTankCache[tank].g_iFastRecoveryReward[priority];
				g_esPlayer[survivor].g_iLadderActions = g_esTankCache[tank].g_iLadderActionsReward[priority];
				g_esPlayer[survivor].g_iShovePenalty = g_esTankCache[tank].g_iShovePenaltyReward[priority];
				g_esPlayer[survivor].g_iRewardStack[3]++;
			}
		}
		case MT_REWARD_AMMO:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flGrenadeLauncher = g_esTankCache[tank].g_flGrenadeLauncherReward[priority];
				g_esPlayer[survivor].g_flLuckyBullet = g_esTankCache[tank].g_flLuckyBulletReward[priority];
				g_esPlayer[survivor].g_flSupplier = g_esTankCache[tank].g_flSupplierReward[priority];
				g_esPlayer[survivor].g_flSupplierCooldown = -1.0;
				g_esPlayer[survivor].g_iAmmoBoost = g_esTankCache[tank].g_iAmmoBoostReward[priority];
				g_esPlayer[survivor].g_iAmmoRefill = g_esTankCache[tank].g_iAmmoRefillReward[priority];
				g_esPlayer[survivor].g_iAmmoRegen = g_esTankCache[tank].g_iAmmoRegenReward[priority];
				g_esPlayer[survivor].g_iClusterBombs = g_esTankCache[tank].g_iClusterBombsReward[priority];
				g_esPlayer[survivor].g_iSpecialAmmo = g_esTankCache[tank].g_iSpecialAmmoReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[4] > 0 && g_esPlayer[survivor].g_iRewardStack[4] < g_esTankCache[tank].g_iStackLimits[4])
			{
				g_esPlayer[survivor].g_flGrenadeLauncher -= g_esTankCache[tank].g_flGrenadeLauncherReward[priority];
				g_esPlayer[survivor].g_flGrenadeLauncher = flClamp(g_esPlayer[survivor].g_flGrenadeLauncher, 0.0, 100.0);
				g_esPlayer[survivor].g_flLuckyBullet += g_esTankCache[tank].g_flLuckyBulletReward[priority];
				g_esPlayer[survivor].g_flLuckyBullet = flClamp(g_esPlayer[survivor].g_flLuckyBullet, 0.0, 100.0);
				g_esPlayer[survivor].g_flSupplier += g_esTankCache[tank].g_flSupplierReward[priority];
				g_esPlayer[survivor].g_flSupplier = flClamp(g_esPlayer[survivor].g_flSupplier, 0.0, 99999.0);
				g_esPlayer[survivor].g_iAmmoBoost = g_esTankCache[tank].g_iAmmoBoostReward[priority];
				g_esPlayer[survivor].g_iAmmoRefill = g_esTankCache[tank].g_iAmmoRefillReward[priority];
				g_esPlayer[survivor].g_iAmmoRegen += g_esTankCache[tank].g_iAmmoRegenReward[priority];
				g_esPlayer[survivor].g_iAmmoRegen = iClamp(g_esPlayer[survivor].g_iAmmoRegen, 0, 99999);
				g_esPlayer[survivor].g_iClusterBombs += g_esTankCache[tank].g_iClusterBombsReward[priority];
				g_esPlayer[survivor].g_iClusterBombs = iClamp(g_esPlayer[survivor].g_iClusterBombs, 0, 5);
				g_esPlayer[survivor].g_iSpecialAmmo |= g_esTankCache[tank].g_iSpecialAmmoReward[priority];
				g_esPlayer[survivor].g_iSpecialAmmo = iClamp(g_esPlayer[survivor].g_iSpecialAmmo, 0, 3);
				g_esPlayer[survivor].g_iRewardStack[4]++;
			}
		}
		case MT_REWARD_GODMODE:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flPunchResistance = g_esTankCache[tank].g_flPunchResistanceReward[priority];
				g_esPlayer[survivor].g_iCleanKills = g_esTankCache[tank].g_iCleanKillsReward[priority];
				g_esPlayer[survivor].g_iRiotGear = g_esTankCache[tank].g_iRiotGearReward[priority];
				g_esPlayer[survivor].g_iSafetyBubble = g_esTankCache[tank].g_iSafetyBubbleReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[5] > 0 && g_esPlayer[survivor].g_iRewardStack[5] < g_esTankCache[tank].g_iStackLimits[5])
			{
				g_esPlayer[survivor].g_flPunchResistance -= g_esTankCache[tank].g_flPunchResistanceReward[priority] / 2.0;
				g_esPlayer[survivor].g_flPunchResistance = flClamp(g_esPlayer[survivor].g_flPunchResistance, 0.0, 1.0);
				g_esPlayer[survivor].g_iCleanKills = g_esTankCache[tank].g_iCleanKillsReward[priority];
				g_esPlayer[survivor].g_iRiotGear = g_esTankCache[tank].g_iRiotGearReward[priority];
				g_esPlayer[survivor].g_iSafetyBubble = g_esTankCache[tank].g_iSafetyBubbleReward[priority];
				g_esPlayer[survivor].g_iRewardStack[5]++;
			}
		}
		case MT_REWARD_REFILL:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_flRefillPercent = g_esTankCache[tank].g_flRefillPercentReward[priority];
				g_esPlayer[survivor].g_iAmmoRefill = g_esTankCache[tank].g_iAmmoRefillReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[6] > 0 && g_esPlayer[survivor].g_iRewardStack[6] < g_esTankCache[tank].g_iStackLimits[6])
			{
				g_esPlayer[survivor].g_flRefillPercent += g_esTankCache[tank].g_flRefillPercentReward[priority] / 2.0;
				g_esPlayer[survivor].g_flRefillPercent = flClamp(g_esPlayer[survivor].g_flRefillPercent, 0.0, 100.0);
				g_esPlayer[survivor].g_iAmmoRefill = g_esTankCache[tank].g_iAmmoRefillReward[priority];
			}
		}
		case MT_REWARD_INFAMMO:
		{
			if (!(g_esPlayer[survivor].g_iRewardTypes & type))
			{
				g_esPlayer[survivor].g_iInfiniteAmmo = g_esTankCache[tank].g_iInfiniteAmmoReward[priority];
			}
			else if ((g_esTankCache[tank].g_iStackRewards[priority] & type) && (g_esPlayer[survivor].g_iRewardTypes & type) && g_esTankCache[tank].g_iStackLimits[7] > 0 && g_esPlayer[survivor].g_iRewardStack[7] < g_esTankCache[tank].g_iStackLimits[7])
			{
				g_esPlayer[survivor].g_iInfiniteAmmo |= g_esTankCache[tank].g_iInfiniteAmmoReward[priority];
				g_esPlayer[survivor].g_iInfiniteAmmo = iClamp(g_esPlayer[survivor].g_iInfiniteAmmo, 0, 31);
				g_esPlayer[survivor].g_iRewardStack[7]++;
			}
		}
	}
}

void vSetupRewardDuration(int survivor, int pos, float time, float current, float duration)
{
	if (g_esPlayer[survivor].g_flRewardTime[pos] == -1.0 || (time > (g_esPlayer[survivor].g_flRewardTime[pos] - current)))
	{
		g_esPlayer[survivor].g_flRewardTime[pos] = duration;
	}
}

void vSetupRewardDurations(int survivor, int recipient, int pos, int limit, float time, float time2, float current, float duration, float duration2)
{
	vSetupRewardDuration(survivor, pos, time, current, duration);

	if (g_esPlayer[survivor].g_iRewardStack[pos] >= limit && survivor != recipient)
	{
		vSetupRewardDuration(recipient, pos, time2, current, duration2);
	}
}

void vSetupSpeedBoostReward(int survivor, int tank, int priority)
{
	SDKHook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);

	bool bDeveloper = bIsDeveloper(survivor, 5);
	float flDuration = (bDeveloper && g_esDeveloper[survivor].g_flDevAdrenalineTime > g_esPlayer[survivor].g_flAdrenalineTime) ? g_esDeveloper[survivor].g_flDevAdrenalineTime : g_esPlayer[survivor].g_flAdrenalineTime;
	if ((!bDeveloper || flGetAdrenalineTime(survivor) > 0.0) && flDuration > 0.0)
	{
		vSetAdrenalineTime(survivor, flDuration);
	}

	switch (priority)
	{
		case 0: strcopy(g_esPlayer[survivor].g_sFallVoiceline, sizeof esPlayer::g_sFallVoiceline, g_esTankCache[tank].g_sFallVoicelineReward);
		case 1: strcopy(g_esPlayer[survivor].g_sFallVoiceline, sizeof esPlayer::g_sFallVoiceline, g_esTankCache[tank].g_sFallVoicelineReward2);
		case 2: strcopy(g_esPlayer[survivor].g_sFallVoiceline, sizeof esPlayer::g_sFallVoiceline, g_esTankCache[tank].g_sFallVoicelineReward3);
		case 3: strcopy(g_esPlayer[survivor].g_sFallVoiceline, sizeof esPlayer::g_sFallVoiceline, g_esTankCache[tank].g_sFallVoicelineReward4);
	}
}

void vSetupVisual(int survivor, int recipient, int tank, int priority, int count, bool dev, float time, float current, float duration)
{
	if ((g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0) || (survivor != recipient && (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_REFILL) && count == 1))
	{
		return;
	}

	int iVisual = g_esTankCache[tank].g_iRewardVisual[priority];
	if (iVisual > 0)
	{
#if defined _clientprefs_included
		switch (g_esPlayer[survivor].g_iPrefsAccess)
		{
			case 0: vDefaultCookieSettings(survivor);
			case 1:
			{
				if (AreClientCookiesCached(survivor))
				{
					OnClientCookiesTankCached(survivor);
				}
			}
		}
#else
		vDefaultCookieSettings(survivor);
#endif
		bool bIgnore = bIsDeveloper(survivor, 1);
		if ((dev || (iVisual & MT_VISUAL_SCREEN)) && (g_esGeneral.g_iGraphicsLevel > 0 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 0))
		{
			if (g_esPlayer[survivor].g_flVisualTime[0] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[0] - current)))
			{
				switch (priority)
				{
					case 0: strcopy(g_esPlayer[survivor].g_sScreenColor, sizeof esPlayer::g_sScreenColor, g_esTankCache[tank].g_sScreenColorVisual);
					case 1: strcopy(g_esPlayer[survivor].g_sScreenColor, sizeof esPlayer::g_sScreenColor, g_esTankCache[tank].g_sScreenColorVisual2);
					case 2: strcopy(g_esPlayer[survivor].g_sScreenColor, sizeof esPlayer::g_sScreenColor, g_esTankCache[tank].g_sScreenColorVisual3);
					case 3: strcopy(g_esPlayer[survivor].g_sScreenColor, sizeof esPlayer::g_sScreenColor, g_esTankCache[tank].g_sScreenColorVisual4);
				}

				char sDelimiter[2];
				sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sScreenColor, ';') != -1) ? ";" : ",";
				vSetSurvivorScreen(survivor, g_esPlayer[survivor].g_sScreenColor, sDelimiter);

				if (g_esPlayer[survivor].g_flVisualTime[0] == -1.0)
				{
					CreateTimer(2.0, tTimerScreenEffect, GetClientUserId(survivor), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[0] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[0] = duration;
				}
			}
		}

		if (dev || (iVisual & MT_VISUAL_PARTICLE) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
		{
			if (g_esPlayer[survivor].g_flVisualTime[1] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[1] - current)))
			{
				int iEffect = g_esTankCache[tank].g_iParticleEffectVisual[priority];
				if (iEffect > 0 && g_esPlayer[survivor].g_iParticleEffect != iEffect)
				{
					g_esPlayer[survivor].g_iParticleEffect = iEffect;
				}

				if (g_esPlayer[survivor].g_flVisualTime[1] == -1.0)
				{
					CreateTimer(0.75, tTimerParticleVisual, GetClientUserId(survivor), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[1] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[1] = duration;
				}
			}
		}

		if (dev || (iVisual & MT_VISUAL_VOICELINE))
		{
			if (g_esPlayer[survivor].g_flVisualTime[2] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[2] - current)))
			{
				switch (priority)
				{
					case 0: strcopy(g_esPlayer[survivor].g_sLoopingVoiceline, sizeof esPlayer::g_sLoopingVoiceline, g_esTankCache[tank].g_sLoopingVoicelineVisual);
					case 1: strcopy(g_esPlayer[survivor].g_sLoopingVoiceline, sizeof esPlayer::g_sLoopingVoiceline, g_esTankCache[tank].g_sLoopingVoicelineVisual2);
					case 2: strcopy(g_esPlayer[survivor].g_sLoopingVoiceline, sizeof esPlayer::g_sLoopingVoiceline, g_esTankCache[tank].g_sLoopingVoicelineVisual3);
					case 3: strcopy(g_esPlayer[survivor].g_sLoopingVoiceline, sizeof esPlayer::g_sLoopingVoiceline, g_esTankCache[tank].g_sLoopingVoicelineVisual4);
				}

				if (g_esPlayer[survivor].g_flVisualTime[2] == -1.0)
				{
					CreateTimer(g_esTankCache[tank].g_flLoopingVoicelineInterval[priority], tTimerLoopVoiceline, GetClientUserId(survivor), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[2] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[2] = duration;
				}
			}
		}

		if (dev || (iVisual & MT_VISUAL_VOICEPITCH))
		{
			if (g_esPlayer[survivor].g_flVisualTime[3] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[3] - current)))
			{
				int iPitch = g_esTankCache[tank].g_iVoicePitchVisual[priority];
				if (iPitch > 0 && g_esPlayer[survivor].g_iVoicePitch != iPitch)
				{
					g_esPlayer[survivor].g_iVoicePitch = iPitch;
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[3] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[3] = duration;
				}
			}
		}

		if (dev || (iVisual & MT_VISUAL_LIGHT) && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
		{
			if (g_esPlayer[survivor].g_flVisualTime[4] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[4] - current)))
			{
				switch (priority)
				{
					case 0: strcopy(g_esPlayer[survivor].g_sLightColor, sizeof esPlayer::g_sLightColor, g_esTankCache[tank].g_sLightColorVisual);
					case 1: strcopy(g_esPlayer[survivor].g_sLightColor, sizeof esPlayer::g_sLightColor, g_esTankCache[tank].g_sLightColorVisual2);
					case 2: strcopy(g_esPlayer[survivor].g_sLightColor, sizeof esPlayer::g_sLightColor, g_esTankCache[tank].g_sLightColorVisual3);
					case 3: strcopy(g_esPlayer[survivor].g_sLightColor, sizeof esPlayer::g_sLightColor, g_esTankCache[tank].g_sLightColorVisual4);
				}

				if (!bIgnore || g_esDeveloper[survivor].g_sDevFlashlight[0] == '\0')
				{
					char sDelimiter[2];
					sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sLightColor, ';') != -1) ? ";" : ",";
					vSetSurvivorLight(survivor, g_esPlayer[survivor].g_sLightColor, g_esPlayer[survivor].g_bApplyVisuals[4], sDelimiter, true);
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[4] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[4] = duration;
				}
			}
		}

		if (dev || (iVisual & MT_VISUAL_BODY) && (g_esGeneral.g_iGraphicsLevel > 0 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 0))
		{
			if (g_esPlayer[survivor].g_flVisualTime[5] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[5] - current)))
			{
				switch (priority)
				{
					case 0: strcopy(g_esPlayer[survivor].g_sBodyColor, sizeof esPlayer::g_sBodyColor, g_esTankCache[tank].g_sBodyColorVisual);
					case 1: strcopy(g_esPlayer[survivor].g_sBodyColor, sizeof esPlayer::g_sBodyColor, g_esTankCache[tank].g_sBodyColorVisual2);
					case 2: strcopy(g_esPlayer[survivor].g_sBodyColor, sizeof esPlayer::g_sBodyColor, g_esTankCache[tank].g_sBodyColorVisual3);
					case 3: strcopy(g_esPlayer[survivor].g_sBodyColor, sizeof esPlayer::g_sBodyColor, g_esTankCache[tank].g_sBodyColorVisual4);
				}

				if (!bIgnore || g_esDeveloper[survivor].g_sDevSkinColor[0] == '\0')
				{
					char sDelimiter[2];
					sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sBodyColor, ';') != -1) ? ";" : ",";
					vSetSurvivorColor(survivor, g_esPlayer[survivor].g_sBodyColor, g_esPlayer[survivor].g_bApplyVisuals[5], sDelimiter, true);
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[5] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[5] = duration;
				}
			}
		}

		if (g_bSecondGame && (dev || (iVisual & MT_VISUAL_GLOW)) && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
		{
			if (g_esPlayer[survivor].g_flVisualTime[6] == -1.0 || (time > (g_esPlayer[survivor].g_flVisualTime[6] - current)))
			{
				switch (priority)
				{
					case 0: strcopy(g_esPlayer[survivor].g_sOutlineColor, sizeof esPlayer::g_sOutlineColor, g_esTankCache[tank].g_sOutlineColorVisual);
					case 1: strcopy(g_esPlayer[survivor].g_sOutlineColor, sizeof esPlayer::g_sOutlineColor, g_esTankCache[tank].g_sOutlineColorVisual2);
					case 2: strcopy(g_esPlayer[survivor].g_sOutlineColor, sizeof esPlayer::g_sOutlineColor, g_esTankCache[tank].g_sOutlineColorVisual3);
					case 3: strcopy(g_esPlayer[survivor].g_sOutlineColor, sizeof esPlayer::g_sOutlineColor, g_esTankCache[tank].g_sOutlineColorVisual4);
				}

				if (!bIgnore || g_esDeveloper[survivor].g_sDevGlowOutline[0] == '\0')
				{
					char sDelimiter[2];
					sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sOutlineColor, ';') != -1) ? ";" : ",";
					vSetSurvivorOutline(survivor, g_esPlayer[survivor].g_sOutlineColor, g_esPlayer[survivor].g_bApplyVisuals[6], sDelimiter, true);
				}

				if (time > (g_esPlayer[survivor].g_flVisualTime[6] - current))
				{
					g_esPlayer[survivor].g_flVisualTime[6] = duration;
				}
			}
		}

		if (g_esPlayer[survivor].g_iPrefsAccess == 1)
		{
			MT_PrintToChat(survivor, "%s %t", MT_TAG2, "MTPrefsInfo");
		}
	}

	int iEffect = g_esTankCache[tank].g_iRewardEffect[priority];
	if (iEffect > 0)
	{
		if ((dev || (iEffect & MT_EFFECT_TROPHY)) && g_esPlayer[survivor].g_iEffect[0] == INVALID_ENT_REFERENCE)
		{
			g_esPlayer[survivor].g_iEffect[0] = EntIndexToEntRef(iCreateParticle(survivor, PARTICLE_ACHIEVED, view_as<float>({0.0, 0.0, 50.0}), NULL_VECTOR, 1.5, 1.5));
		}

		if ((dev || (iEffect & MT_EFFECT_FIREWORKS)) && g_esPlayer[survivor].g_iEffect[1] == INVALID_ENT_REFERENCE)
		{
			g_esPlayer[survivor].g_iEffect[1] = EntIndexToEntRef(iCreateParticle(survivor, PARTICLE_FIREWORK, view_as<float>({0.0, 0.0, 50.0}), NULL_VECTOR, 2.0, 1.5));
		}

		if (dev || (iEffect & MT_EFFECT_SOUND))
		{
			EmitSoundToAll(SOUND_ACHIEVEMENT, survivor, SNDCHAN_AUTO, SNDLEVEL_NORMAL, SND_NOFLAGS, SNDVOL_NORMAL, SNDPITCH_NORMAL, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
		}

		if (dev || (iEffect & MT_EFFECT_THIRDPERSON))
		{
			vExternalView(survivor, 1.5);
		}
	}
}

/**
 * Infected functions
 **/

void vInfectedSpawn(int infected)
{
	DataPack dpInfectedSpawn = new DataPack();
	dpInfectedSpawn.WriteCell(EntIndexToEntRef(infected));
	RequestFrame(vInfectedSpawnFrame, dpInfectedSpawn);
}

void vInfectedSpawnFrame(DataPack pack)
{
	pack.Reset();
	int iInfected = EntRefToEntIndex(pack.ReadCell());
	delete pack;

	vCacheInfectedSettings(iInfected);

	if (bIsMobSupported(iInfected))
	{
		if (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1)
		{
			switch (StrEqual(g_esInfectedCache[iInfected].g_sGlowColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
			{
				case true:
				{
					if (!g_esInfected[iInfected].g_bRainbowColor)
					{
						g_esInfected[iInfected].g_bRainbowColor = SDKHookEx(iInfected, SDKHook_PreThinkPost, OnInfectedRainbowPreThinkPost);
					}
				}
				case false: vSetInfectedGlow(iInfected);
			}
		}

		vSetupInfectedParticleEffects(iInfected);
	}
}

void vMutateInfected(int infected, int type = 0)
{
	if (bCanTypeSpawn(.specType = 8))
	{
		bool bCommon = bIsCommonInfected(infected), bWitch = bIsWitch(infected), bVersus = bIsCompetitiveModeRound(2);
		int iType = 0;
		if (type == 0 && g_esInfected[infected].g_iTankType <= 0)
		{
			if (bWitch)
			{
				if (bVersus)
				{
					iType = g_esGeneral.g_alCompTypes[1].Get(0);
					g_esGeneral.g_alCompTypes[1].Erase(0);

					vSetInfectedColor(infected, iType);
				}
				else
				{
					switch (g_esGeneral.g_bFinalMap)
					{
						case true: iType = (g_esGeneral.g_iFinaleMode == 1) ? iChooseMutantInfected(infected, g_esGeneral.g_iFinaleMinTypes[g_esGeneral.g_iTankWave], g_esGeneral.g_iFinaleMaxTypes[g_esGeneral.g_iTankWave]) : iChooseMutantInfected(infected);
						case false: iType = (g_esGeneral.g_iRegularMode == 1 && g_esGeneral.g_iRegularWave == 1) ? iChooseMutantInfected(infected, g_esGeneral.g_iRegularMinType, g_esGeneral.g_iRegularMaxType) : iChooseMutantInfected(infected);
					}
				}
			}
			else if (bCommon)
			{
				iChooseMutantInfected(infected);
			}
		}
		else if (type != -1)
		{
			if (bWitch)
			{
				switch (bVersus)
				{
					case true:
					{
						iType = g_esGeneral.g_alCompTypes[1].Get(0);
						g_esGeneral.g_alCompTypes[1].Erase(0);

						vSetInfectedColor(infected, iType);
					}
					case false:
					{
						iType = (type > 0) ? type : g_esInfected[infected].g_iTankType;

						vSetInfectedColor(infected, iType, true);
					}
				}
			}
			else if (bCommon)
			{
				iType = (type > 0) ? type : g_esInfected[infected].g_iTankType;

				vSetInfectedColor(infected, iType);
			}
		}

		switch (g_esInfected[infected].g_iTankType > 0)
		{
			case true: vInfectedSpawn(infected);
			case false: vCacheInfectedSettings(infected);
		}
	}
}

void vMutateWitch(int witch, int flag)
{
	int iOwner = GetEntPropEnt(witch, Prop_Data, "m_hOwnerEntity");
	if (bIsValidClient(iOwner) && g_esInfectedCache[witch].g_iWitchMode == 0)
	{
		return;
	}

	float flRange = g_esInfectedCache[witch].g_flWitchRange;
	int iTypes = g_esInfectedCache[witch].g_iWitchTypes;
	if (flRange > 0.0 && (iTypes == 0 || (iTypes & flag)) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[witch].g_flWitchMutateChance)
	{
		int iFilter = g_esInfectedCache[witch].g_iWitchFilter;
		if (iFilter >= 0)
		{
			bool bShow = false;
			float flWitchPos[3], flTargetPos[3];
			GetEntPropVector(witch, Prop_Data, "m_vecOrigin", flWitchPos);
			for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
			{
				if (bIsValidClient(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE))
				{
					GetClientAbsOrigin(iPlayer, flTargetPos);
					if (GetVectorDistance(flWitchPos, flTargetPos) <= flRange)
					{
						switch (bIsSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter == 0 || (iFilter & MT_WITCHFILTER_SURVIVORS)))
						{
							case true: SDKHooks_TakeDamage(iPlayer, witch, witch, 1.0, DMG_SLASH);
							case false:
							{
								if ((bIsSmoker(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_SMOKER)) || (bIsBoomer(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_BOOMER)) || (bIsHunter(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_HUNTER))
									|| (bIsSpitter(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_SPITTER)) || (bIsJockey(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_JOCKEY)) || (bIsCharger(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_CHARGER))
									|| (bIsTank(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && (iFilter & MT_WITCHFILTER_TANK)) || (bIsInfected(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && iFilter == 0))
								{
									bShow = true;

									vMutateTank(iPlayer, g_esPlayer[iPlayer].g_iInfectedType, g_esInfected[witch].g_iTankType, false);
								}
							}
						}
					}
				}
			}

			if (iFilter == 0 || (iFilter & MT_WITCHFILTER_COMMON))
			{
				int iCommon = (MaxClients + 1);
				while ((iCommon = FindEntityByClassname(iCommon, "infected")) != INVALID_ENT_REFERENCE)
				{
					GetEntPropVector(iCommon, Prop_Data, "m_vecOrigin", flTargetPos);
					if (bIsValidEntity(iCommon) && GetVectorDistance(flWitchPos, flTargetPos) <= flRange)
					{
						bShow = true;

						vMutateInfected(iCommon, g_esInfected[witch].g_iTankType);
					}
				}
			}

			if (bShow)
			{
				bool bRainbow[2] = {false, false};
				bRainbow[0] = StrEqual(g_esInfectedCache[witch].g_sSkinColor, "rainbow", false);
				bRainbow[1] = StrEqual(g_esInfectedCache[witch].g_sGlowColor, "rainbow", false);

				int iColor[4] = {0, 0, 0, 50}, iType = MT_GetRandomInt(1, 2);
				for (int iPos = 0; iPos < ((sizeof iColor) - 1); iPos++)
				{
					switch (iType)
					{
						case 1: iColor[iPos] = (bRainbow[iType - 1] ? -2 : iGetRandomColor(g_esInfectedCache[witch].g_iSkinColor[iPos]));
						case 2: iColor[iPos] = (bRainbow[iType - 1] ? -2 : iGetRandomColor(g_esInfectedCache[witch].g_iGlowColor[iPos]));
					}
				}

				flWitchPos[2] += 20.0;
				TE_SetupBeamRingPoint(flWitchPos, 10.0, (flRange * 2.0), g_iBossBeamSprite, g_iBossHaloSprite, 0, 50, (flRange / 500.0), 88.0, 3.0, iColor, 1500, 0);
				TE_SendToAll();
			}
		}
	}
}

void vRemoveInfectedGlow(int entity)
{
	if (!g_bSecondGame || !bIsValidEntity(entity))
	{
		return;
	}

	SetEntProp(entity, Prop_Send, "m_glowColorOverride", 0);
	SetEntProp(entity, Prop_Send, "m_bFlashing", 0);
	SetEntProp(entity, Prop_Send, "m_iGlowType", 0);
}

void vResetInfected(int infected)
{
	g_esInfected[infected].g_bBlood = false;
	g_esInfected[infected].g_bElectric = false;
	g_esInfected[infected].g_bFire = false;
	g_esInfected[infected].g_bIce = false;
	g_esInfected[infected].g_bMeteor = false;
	g_esInfected[infected].g_bRainbowColor = false;
	g_esInfected[infected].g_bSmoke = false;
	g_esInfected[infected].g_bSpit = false;
	g_esInfected[infected].g_iDamageTaken = 0;
	g_esInfected[infected].g_iTankType = 0;
}

void vSetInfectedColor(int infected, int type = 0, bool store = false)
{
	if (type == -1)
	{
		return;
	}

	if (store && bIsCompetitiveModeRound(1))
	{
		g_esGeneral.g_alCompTypes[1].Push(type);
	}

	g_esInfected[infected].g_iTankType = type;

	vCacheInfectedSettings(infected);
	vRemoveInfectedGlow(infected);
	vSetInfectedRainbowColor(infected);
}

void vSetInfectedGlow(int infected)
{
	if (!g_bSecondGame || g_esInfectedCache[infected].g_iGlowEnabled <= 1 || (g_esGeneral.g_iGraphicsLevel <= 1 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 1))
	{
		return;
	}

	SetEntProp(infected, Prop_Send, "m_glowColorOverride", iGetRGBColor(iGetRandomColor(g_esInfectedCache[infected].g_iGlowColor[0]), iGetRandomColor(g_esInfectedCache[infected].g_iGlowColor[1]), iGetRandomColor(g_esInfectedCache[infected].g_iGlowColor[2])));
	SetEntProp(infected, Prop_Send, "m_bFlashing", g_esInfectedCache[infected].g_iGlowFlashing);
	SetEntProp(infected, Prop_Send, "m_nGlowRangeMin", g_esInfectedCache[infected].g_iGlowMinRange);
	SetEntProp(infected, Prop_Send, "m_nGlowRange", g_esInfectedCache[infected].g_iGlowMaxRange);
	SetEntProp(infected, Prop_Send, "m_iGlowType", ((g_esInfectedCache[infected].g_iGlowType <= 0) ? 2 : 3));
}

void vSetInfectedRainbowColor(int infected)
{
	if ((g_bSecondGame && bIsCommonInfected(infected)) || (g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0))
	{
		return;
	}

	switch (StrEqual(g_esInfectedCache[infected].g_sSkinColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		case true:
		{
			if (!g_esInfected[infected].g_bRainbowColor)
			{
				g_esInfected[infected].g_bRainbowColor = SDKHookEx(infected, SDKHook_PreThinkPost, OnInfectedRainbowPreThinkPost);
			}
		}
		case false:
		{
			SetEntityRenderMode(infected, RENDER_NORMAL);
			SetEntityRenderColor(infected, iGetRandomColor(g_esInfectedCache[infected].g_iSkinColor[0]), iGetRandomColor(g_esInfectedCache[infected].g_iSkinColor[1]), iGetRandomColor(g_esInfectedCache[infected].g_iSkinColor[2]), iGetRandomColor(g_esInfectedCache[infected].g_iSkinColor[3]));
		}
	}
}

void vSetupInfectedParticleEffects(int infected)
{
	if (bIsMobSupported(infected) && g_esInfectedCache[infected].g_iBodyEffects > 0 && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		if ((g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_BLOOD) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[0] && !g_esInfected[infected].g_bBlood)
		{
			g_esInfected[infected].g_bBlood = true;

			CreateTimer(0.75, tTimerBloodEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_ELECTRICITY) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[1] && !g_esInfected[infected].g_bElectric)
		{
			g_esInfected[infected].g_bElectric = true;

			CreateTimer(0.75, tTimerElectricEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_FIRE) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[2] && !g_esInfected[infected].g_bFire)
		{
			g_esInfected[infected].g_bFire = true;

			CreateTimer(0.75, tTimerFireEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_ICE) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[3] && !g_esInfected[infected].g_bIce)
		{
			g_esInfected[infected].g_bIce = true;

			CreateTimer(2.0, tTimerIceEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_METEOR) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[4] && !g_esInfected[infected].g_bMeteor)
		{
			g_esInfected[infected].g_bMeteor = true;

			CreateTimer(6.0, tTimerMeteorEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_SMOKE) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[5] && !g_esInfected[infected].g_bSmoke)
		{
			g_esInfected[infected].g_bSmoke = true;

			CreateTimer(1.5, tTimerSmokeEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if (g_bSecondGame && (g_esInfectedCache[infected].g_iBodyEffects & MT_PARTICLE_SPIT) && GetRandomFloat(0.1, 100.0) <= g_esInfectedCache[infected].g_flBodyChance[6] && !g_esInfected[infected].g_bSpit)
		{
			g_esInfected[infected].g_bSpit = true;

			CreateTimer(2.0, tTimerSpitEffect2, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}
	}
}

/**
 * Player functions
 **/

void vRemovePlayerDamage(int victim, int damagetype)
{
	if (damagetype & DMG_BURN)
	{
		ExtinguishEntity(victim);
	}

	vSetWounds(victim);
}

void vRemovePlayerGlow(int player)
{
	if (!g_bSecondGame || !bIsValidClient(player))
	{
		return;
	}

	SetEntProp(player, Prop_Send, "m_glowColorOverride", 0);
	SetEntProp(player, Prop_Send, "m_bFlashing", 0);
	SetEntProp(player, Prop_Send, "m_iGlowType", 0);
}

void vResetPlayerStatus(int player)
{
	vResetTank(player);
	vResetTank2(player);
	vResetCore(player);
	vRemoveSurvivorEffects(player);
	vCacheTankSettings(player);
	vCacheSurvivorSettings(player);
}

void vResetTankDamage(int tank)
{
	for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
	{
		g_esPlayer[iSurvivor].g_iTankDamage[tank] = 0;
	}
}

void vRestorePlayerGlow(int client)
{
	if (bIsInfected(client) && !bIsPlayerIncapacitated(client))
	{
		vSetTankGlow(client);
	}
	else if (bIsSurvivor(client) && g_bSecondGame)
	{
		switch (bIsDeveloper(client, 1))
		{
			case true: vSetSurvivorOutline(client, g_esDeveloper[client].g_sDevGlowOutline, .delimiter = ",");
			case false: vToggleSurvivorEffects(client, .type = 6);
		}
	}
}

/**
 * Survivor functions
 **/

void vAddSurvivorHealth(int survivor)
{
	float flPercentage = (g_esPlayer[survivor].g_flRefillPercent / 100.0);
	if (flPercentage > 0.0)
	{
		int iHealth = GetEntProp(survivor, Prop_Data, "m_iHealth"), iMaxHealth = GetEntProp(survivor, Prop_Data, "m_iMaxHealth"),
			iExtraHealth = RoundToNearest(iMaxHealth * flPercentage), iFinalHealth = iClamp((iHealth + iExtraHealth), 0, iMaxHealth);

		vCheatCommand(survivor, "give", "health");
		SetEntProp(survivor, Prop_Data, "m_iHealth", iFinalHealth);
	}
}

void vCheckGunClipSizes(int survivor)
{
	if (g_esGeneral.g_hSDKGetMaxClip1 != null)
	{
		int iSlot = GetPlayerWeaponSlot(survivor, 0);
		if (iSlot > MaxClients)
		{
			g_esPlayer[survivor].g_iMaxClip[0] = SDKCall(g_esGeneral.g_hSDKGetMaxClip1, iSlot);
		}

		iSlot = GetPlayerWeaponSlot(survivor, 1);
		if (iSlot > MaxClients)
		{
			char sWeapon[32];
			GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
			if (!strncmp(sWeapon[7], "pistol", 6) || StrEqual(sWeapon[7], "chainsaw"))
			{
				g_esPlayer[survivor].g_iMaxClip[1] = SDKCall(g_esGeneral.g_hSDKGetMaxClip1, iSlot);
			}
		}
	}
}

void vCopyBioMassStats(int special)
{
	for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
	{
		g_esShooter[special].g_bInfected[iIndex] = g_esSpecific.g_bInfected[iIndex];
	}
}

void vCopyInfectionStats(int survivor, int special)
{
	for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
	{
		g_esShooter[special].g_bInfected[iIndex] = g_esShooter[survivor].g_bInfected[iIndex];
	}

	g_esShooter[special].g_bDeathModel = g_esShooter[survivor].g_bDeathModel;
	g_esShooter[special].g_bMixTypes = g_esShooter[survivor].g_bMixTypes;
	g_esShooter[special].g_bProduced = g_esShooter[survivor].g_bProduced;
	g_esShooter[special].g_bSurvivor = g_esShooter[survivor].g_bSurvivor;
	g_esShooter[special].g_flDamageMultiplier = g_esShooter[survivor].g_flDamageMultiplier;
	g_esShooter[special].g_flDeathModelDelay = g_esShooter[survivor].g_flDeathModelDelay;
	g_esShooter[special].g_flHealthMultiplier = g_esShooter[survivor].g_flHealthMultiplier;
	g_esShooter[special].g_iCharacter = g_esShooter[survivor].g_iCharacter;
	g_esShooter[special].g_iDeathModel = g_esShooter[survivor].g_iDeathModel;
	g_esShooter[special].g_iFirstSpecial = g_esShooter[survivor].g_iFirstSpecial;
	g_esShooter[special].g_iFirstType = g_esShooter[survivor].g_iFirstType;
	g_esShooter[special].g_iKillerSpecial = g_esShooter[survivor].g_iKillerSpecial;
	g_esShooter[special].g_iKillerType = g_esShooter[survivor].g_iKillerType;
	g_esShooter[special].g_iLastSpecial = g_esShooter[survivor].g_iLastSpecial;
	g_esShooter[special].g_iLastType = g_esShooter[survivor].g_iLastType;
	g_esShooter[special].g_iLeastDamage = g_esShooter[survivor].g_iLeastDamage;
	g_esShooter[special].g_iLeastSpecial = g_esShooter[survivor].g_iLeastSpecial;
	g_esShooter[special].g_iLeastType = g_esShooter[survivor].g_iLeastType;
	g_esShooter[special].g_iMostDamage = g_esShooter[survivor].g_iMostDamage;
	g_esShooter[special].g_iMostSpecial = g_esShooter[survivor].g_iMostSpecial;
	g_esShooter[special].g_iMostType = g_esShooter[survivor].g_iMostType;
	g_esShooter[special].g_sSurvivorName = g_esShooter[survivor].g_sSurvivorName;
}

void vCopySurvivorStats(int oldSurvivor, int newSurvivor)
{
	g_esPlayer[newSurvivor].g_bFallDamage = g_esPlayer[oldSurvivor].g_bFallDamage;
	g_esPlayer[newSurvivor].g_bFalling = g_esPlayer[oldSurvivor].g_bFalling;
	g_esPlayer[newSurvivor].g_bFallTracked = g_esPlayer[oldSurvivor].g_bFallTracked;
	g_esPlayer[newSurvivor].g_bFatalFalling = g_esPlayer[oldSurvivor].g_bFatalFalling;
	g_esPlayer[newSurvivor].g_bFinalFall = g_esPlayer[oldSurvivor].g_bFinalFall;
	g_esPlayer[newSurvivor].g_bLadyKiller = g_esPlayer[oldSurvivor].g_bLadyKiller;
	g_esPlayer[newSurvivor].g_bPunished = g_esPlayer[oldSurvivor].g_bPunished;
	g_esPlayer[newSurvivor].g_bReleasedJump = g_esPlayer[oldSurvivor].g_bReleasedJump;
	g_esPlayer[newSurvivor].g_bSetup = g_esPlayer[oldSurvivor].g_bSetup;
	g_esPlayer[newSurvivor].g_bVomited = g_esPlayer[oldSurvivor].g_bVomited;
	g_esPlayer[newSurvivor].g_sLoopingVoiceline = g_esPlayer[oldSurvivor].g_sLoopingVoiceline;
	g_esPlayer[newSurvivor].g_flActionDuration = g_esPlayer[oldSurvivor].g_flActionDuration;
	g_esPlayer[newSurvivor].g_flAdrenalineTime = g_esPlayer[oldSurvivor].g_flAdrenalineTime;
	g_esPlayer[newSurvivor].g_flAttackBoost = g_esPlayer[oldSurvivor].g_flAttackBoost;
	g_esPlayer[newSurvivor].g_flDamageBoost = g_esPlayer[oldSurvivor].g_flDamageBoost;
	g_esPlayer[newSurvivor].g_flDamageResistance = g_esPlayer[oldSurvivor].g_flDamageResistance;
	g_esPlayer[newSurvivor].g_flDopamineRadius = g_esPlayer[oldSurvivor].g_flDopamineRadius;
	g_esPlayer[newSurvivor].g_flFireRate = g_esPlayer[oldSurvivor].g_flFireRate;
	g_esPlayer[newSurvivor].g_flGrenadeLauncher = g_esPlayer[oldSurvivor].g_flGrenadeLauncher;
	g_esPlayer[newSurvivor].g_flHealPercent = g_esPlayer[oldSurvivor].g_flHealPercent;
	g_esPlayer[newSurvivor].g_flHealthcareRadius = g_esPlayer[oldSurvivor].g_flHealthcareRadius;
	g_esPlayer[newSurvivor].g_flHeartbeat = g_esPlayer[oldSurvivor].g_flHeartbeat;
	g_esPlayer[newSurvivor].g_flHeartbeatCooldown = g_esPlayer[oldSurvivor].g_flHeartbeatCooldown;
	g_esPlayer[newSurvivor].g_flHollowpointAmmo = g_esPlayer[oldSurvivor].g_flHollowpointAmmo;
	g_esPlayer[newSurvivor].g_flJumpHeight = g_esPlayer[oldSurvivor].g_flJumpHeight;
	g_esPlayer[newSurvivor].g_flLadyKiller = g_esPlayer[oldSurvivor].g_flLadyKiller;
	g_esPlayer[newSurvivor].g_flLastClickTime = g_esPlayer[oldSurvivor].g_flLastClickTime;
	g_esPlayer[newSurvivor].g_flLastFlow = g_esPlayer[oldSurvivor].g_flLastFlow;
	g_esPlayer[newSurvivor].g_flLastGrenadeTime = g_esPlayer[oldSurvivor].g_flLastGrenadeTime;
	g_esPlayer[newSurvivor].g_flLastJumpTime = g_esPlayer[oldSurvivor].g_flLastJumpTime;
	g_esPlayer[newSurvivor].g_flLastPushTime = g_esPlayer[oldSurvivor].g_flLastPushTime;
	g_esPlayer[newSurvivor].g_flLastWarning = g_esPlayer[oldSurvivor].g_flLastWarning;
	g_esPlayer[newSurvivor].g_flLuckyBullet = g_esPlayer[oldSurvivor].g_flLuckyBullet;
	g_esPlayer[newSurvivor].g_flMotivationRadius = g_esPlayer[oldSurvivor].g_flMotivationRadius;
	g_esPlayer[newSurvivor].g_flOverdoseRadius = g_esPlayer[oldSurvivor].g_flOverdoseRadius;
	g_esPlayer[newSurvivor].g_flPipeBombDuration = g_esPlayer[oldSurvivor].g_flPipeBombDuration;
	g_esPlayer[newSurvivor].g_flPunchResistance = g_esPlayer[oldSurvivor].g_flPunchResistance;
	g_esPlayer[newSurvivor].g_flPreFallZ = g_esPlayer[oldSurvivor].g_flPreFallZ;
	g_esPlayer[newSurvivor].g_flRapidPistol = g_esPlayer[oldSurvivor].g_flRapidPistol;
	g_esPlayer[newSurvivor].g_flRefillPercent = g_esPlayer[oldSurvivor].g_flRefillPercent;
	g_esPlayer[newSurvivor].g_flReloadRate = g_esPlayer[oldSurvivor].g_flReloadRate;
	g_esPlayer[newSurvivor].g_flShockwaveRadius = g_esPlayer[oldSurvivor].g_flShockwaveRadius;
	g_esPlayer[newSurvivor].g_flShoveDamage = g_esPlayer[oldSurvivor].g_flShoveDamage;
	g_esPlayer[newSurvivor].g_flShoveRate = g_esPlayer[oldSurvivor].g_flShoveRate;
	g_esPlayer[newSurvivor].g_flSledgehammerRounds = g_esPlayer[oldSurvivor].g_flSledgehammerRounds;
	g_esPlayer[newSurvivor].g_flSpeedBoost = g_esPlayer[oldSurvivor].g_flSpeedBoost;
	g_esPlayer[newSurvivor].g_flSupplier = g_esPlayer[oldSurvivor].g_flSupplier;
	g_esPlayer[newSurvivor].g_flSupplierCooldown = g_esPlayer[oldSurvivor].g_flSupplierCooldown;
	g_esPlayer[newSurvivor].g_flSwingRate = g_esPlayer[oldSurvivor].g_flSwingRate;
	g_esPlayer[newSurvivor].g_iAmmoBoost = g_esPlayer[oldSurvivor].g_iAmmoBoost;
	g_esPlayer[newSurvivor].g_iAmmoRefill = g_esPlayer[oldSurvivor].g_iAmmoRefill;
	g_esPlayer[newSurvivor].g_iAmmoRegen = g_esPlayer[oldSurvivor].g_iAmmoRegen;
	g_esPlayer[newSurvivor].g_iBlazeHealth = g_esPlayer[oldSurvivor].g_iBlazeHealth;
	g_esPlayer[newSurvivor].g_iBloodDonor = g_esPlayer[oldSurvivor].g_iBloodDonor;
	g_esPlayer[newSurvivor].g_iBunnyHop = g_esPlayer[oldSurvivor].g_iBunnyHop;
	g_esPlayer[newSurvivor].g_iBurstDoors = g_esPlayer[oldSurvivor].g_iBurstDoors;
	g_esPlayer[newSurvivor].g_iCleanKills = g_esPlayer[oldSurvivor].g_iCleanKills;
	g_esPlayer[newSurvivor].g_iClusterBombs = g_esPlayer[oldSurvivor].g_iClusterBombs;
	g_esPlayer[newSurvivor].g_iEternalFlames = g_esPlayer[oldSurvivor].g_iEternalFlames;
	g_esPlayer[newSurvivor].g_iFallPasses = g_esPlayer[oldSurvivor].g_iFallPasses;
	g_esPlayer[newSurvivor].g_iFastRecovery = g_esPlayer[oldSurvivor].g_iFastRecovery;
	g_esPlayer[newSurvivor].g_iFriendlyFire = g_esPlayer[oldSurvivor].g_iFriendlyFire;
	g_esPlayer[newSurvivor].g_iGhostBullets = g_esPlayer[oldSurvivor].g_iGhostBullets;
	g_esPlayer[newSurvivor].g_iHealthRegen = g_esPlayer[oldSurvivor].g_iHealthRegen;
	g_esPlayer[newSurvivor].g_iInfiniteAmmo = g_esPlayer[oldSurvivor].g_iInfiniteAmmo;
	g_esPlayer[newSurvivor].g_iLadderActions = g_esPlayer[oldSurvivor].g_iLadderActions;
	g_esPlayer[newSurvivor].g_iLaserSight = g_esPlayer[oldSurvivor].g_iLaserSight;
	g_esPlayer[newSurvivor].g_iLifeLeech = g_esPlayer[oldSurvivor].g_iLifeLeech;
	g_esPlayer[newSurvivor].g_iMedicalCuts = g_esPlayer[oldSurvivor].g_iMedicalCuts;
	g_esPlayer[newSurvivor].g_iMeleeRange = g_esPlayer[oldSurvivor].g_iMeleeRange;
	g_esPlayer[newSurvivor].g_iMidairDashesLimit = g_esPlayer[oldSurvivor].g_iMidairDashesLimit;
	g_esPlayer[newSurvivor].g_iNotify = g_esPlayer[oldSurvivor].g_iNotify;
	g_esPlayer[newSurvivor].g_iOverhealth = g_esPlayer[oldSurvivor].g_iOverhealth;
	g_esPlayer[newSurvivor].g_iPrefsAccess = g_esPlayer[oldSurvivor].g_iPrefsAccess;
	g_esPlayer[newSurvivor].g_iParticleEffect = g_esPlayer[oldSurvivor].g_iParticleEffect;
	g_esPlayer[newSurvivor].g_iRecoilDampener = g_esPlayer[oldSurvivor].g_iRecoilDampener;
	g_esPlayer[newSurvivor].g_iRegenBursts = g_esPlayer[oldSurvivor].g_iRegenBursts;
	g_esPlayer[newSurvivor].g_iReviveHealth = g_esPlayer[oldSurvivor].g_iReviveHealth;
	g_esPlayer[newSurvivor].g_iRewardTypes = g_esPlayer[oldSurvivor].g_iRewardTypes;
	g_esPlayer[newSurvivor].g_iRiotGear = g_esPlayer[oldSurvivor].g_iRiotGear;
	g_esPlayer[newSurvivor].g_iSafetyBubble = g_esPlayer[oldSurvivor].g_iSafetyBubble;
	g_esPlayer[newSurvivor].g_iShovePenalty = g_esPlayer[oldSurvivor].g_iShovePenalty;
	g_esPlayer[newSurvivor].g_iSpecialAmmo = g_esPlayer[oldSurvivor].g_iSpecialAmmo;
	g_esPlayer[newSurvivor].g_iStickyGrenades = g_esPlayer[oldSurvivor].g_iStickyGrenades;
	g_esPlayer[newSurvivor].g_iSyringeDarts = g_esPlayer[oldSurvivor].g_iSyringeDarts;
	g_esPlayer[newSurvivor].g_iThorns = g_esPlayer[oldSurvivor].g_iThorns;
	g_esPlayer[newSurvivor].g_iVoicePitch = g_esPlayer[oldSurvivor].g_iVoicePitch;
	g_esPlayer[newSurvivor].g_sBodyColor = g_esPlayer[oldSurvivor].g_sBodyColor;
	g_esPlayer[newSurvivor].g_sLightColor = g_esPlayer[oldSurvivor].g_sLightColor;
	g_esPlayer[newSurvivor].g_sOutlineColor = g_esPlayer[oldSurvivor].g_sOutlineColor;
	g_esPlayer[newSurvivor].g_sScreenColor = g_esPlayer[oldSurvivor].g_sScreenColor;
	g_esShooter[newSurvivor].g_iCharacterType[0] = g_esShooter[oldSurvivor].g_iCharacterType[0];
	g_esShooter[newSurvivor].g_iNotify = g_esShooter[oldSurvivor].g_iNotify;
	g_esShooter[newSurvivor].g_iPassiveTypes = g_esShooter[oldSurvivor].g_iPassiveTypes;
	g_esShooter[newSurvivor].g_iTotalPassives = g_esShooter[oldSurvivor].g_iTotalPassives;

	for (int iPos = 0; iPos < (sizeof esPlayer::g_flRewardTime); iPos++)
	{
		g_esPlayer[newSurvivor].g_flRewardTime[iPos] = g_esPlayer[oldSurvivor].g_flRewardTime[iPos];
		g_esPlayer[newSurvivor].g_iRewardStack[iPos] = g_esPlayer[oldSurvivor].g_iRewardStack[iPos];

		if (iPos < (sizeof esPlayer::g_flVisualTime))
		{
			g_esPlayer[newSurvivor].g_flVisualTime[iPos] = g_esPlayer[oldSurvivor].g_flVisualTime[iPos];
		}

		if (iPos < (sizeof esPlayer::g_iScreenColorVisual))
		{
			g_esPlayer[newSurvivor].g_iScreenColorVisual[iPos] = g_esPlayer[oldSurvivor].g_iScreenColorVisual[iPos];
		}
	}

	for (int iTank = 1; iTank <= MaxClients; iTank++)
	{
		g_esPlayer[newSurvivor].g_iTankDamage[iTank] = g_esPlayer[oldSurvivor].g_iTankDamage[iTank];
	}

	if (g_esPlayer[oldSurvivor].g_bRainbowColor)
	{
		g_esPlayer[oldSurvivor].g_bRainbowColor = false;
		g_esPlayer[newSurvivor].g_bRainbowColor = SDKHookEx(newSurvivor, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
	}
}

void vGiveGunSpecialAmmo(int survivor)
{
	int iType = ((bIsDeveloper(survivor, 7) || bIsDeveloper(survivor, 11)) && g_esDeveloper[survivor].g_iDevSpecialAmmo > g_esPlayer[survivor].g_iSpecialAmmo) ? g_esDeveloper[survivor].g_iDevSpecialAmmo : g_esPlayer[survivor].g_iSpecialAmmo;
	if (g_bSecondGame && iType > 0)
	{
		int iSlot = GetPlayerWeaponSlot(survivor, 0);
		if (iSlot > MaxClients)
		{
			int iAmmoType = GetEntProp(iSlot, Prop_Send, "m_iPrimaryAmmoType");
			if (iAmmoType != MT_L4D2_AMMOTYPE_RIFLE_M60 && iAmmoType != MT_L4D2_AMMOTYPE_GRENADE_LAUNCHER)
			{
				int iUpgrades = GetEntProp(iSlot, Prop_Send, "m_upgradeBitVec");

				switch (iType)
				{
					case 1: iUpgrades = (iUpgrades & MT_UPGRADE_LASERSIGHT) ? MT_UPGRADE_LASERSIGHT|MT_UPGRADE_INCENDIARY : MT_UPGRADE_INCENDIARY;
					case 2: iUpgrades = (iUpgrades & MT_UPGRADE_LASERSIGHT) ? MT_UPGRADE_LASERSIGHT|MT_UPGRADE_EXPLOSIVE : MT_UPGRADE_EXPLOSIVE;
					case 3:
					{
						int iSpecialAmmo = (MT_GetRandomInt(1, 2) == 2) ? MT_UPGRADE_INCENDIARY : MT_UPGRADE_EXPLOSIVE;
						iUpgrades = (iUpgrades & MT_UPGRADE_LASERSIGHT) ? MT_UPGRADE_LASERSIGHT|iSpecialAmmo : iSpecialAmmo;
					}
				}

				SetEntProp(iSlot, Prop_Send, "m_upgradeBitVec", iUpgrades);
				SetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded", GetEntProp(iSlot, Prop_Send, "m_iClip1"));
			}
		}
	}
}

void vGiveSurvivorRandomMeleeWeapon(int survivor, bool specific, const char[] name = "")
{
	if (specific)
	{
		vCheatCommand(survivor, "give", ((name[0] != '\0') ? name : "machete"));

		if (GetPlayerWeaponSlot(survivor, 1) > MaxClients)
		{
			return;
		}

		vGiveSurvivorRandomMeleeWeapon(survivor, false);
	}
	else
	{
		char sName[32];
		for (int iType = 1; iType < 13; iType++)
		{
			if (GetPlayerWeaponSlot(survivor, 1) > MaxClients)
			{
				break;
			}

			switch (iType)
			{
				case 1: sName = "machete";
				case 2: sName = "katana";
				case 3: sName = "fireaxe";
				case 4: sName = "shovel";
				case 5: sName = "baseball_bat";
				case 6: sName = "cricket_bat";
				case 7: sName = "golfclub";
				case 8: sName = "electric_guitar";
				case 9: sName = "frying_pan";
				case 10: sName = "tonfa";
				case 11: sName = "crowbar";
				case 12: sName = "knife";
				case 13: sName = "pitchfork";
			}

			vCheatCommand(survivor, "give", sName);
		}
	}
}

void vGiveSurvivorWeapons(int survivor)
{
	int iSlot = 0;
	if (g_esPlayer[survivor].g_sWeaponPrimary[0] != '\0')
	{
		vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sWeaponPrimary);

		iSlot = GetPlayerWeaponSlot(survivor, 0);
		if (iSlot > MaxClients)
		{
			SetEntProp(iSlot, Prop_Send, "m_iClip1", g_esPlayer[survivor].g_iWeaponInfo[0]);
			SetEntProp(survivor, Prop_Send, "m_iAmmo", g_esPlayer[survivor].g_iWeaponInfo[1], .element = iGetWeaponOffset(iSlot));

			if (g_bSecondGame)
			{
				if (g_esPlayer[survivor].g_iWeaponInfo[2] > 0)
				{
					SetEntProp(iSlot, Prop_Send, "m_upgradeBitVec", g_esPlayer[survivor].g_iWeaponInfo[2]);
				}

				if (g_esPlayer[survivor].g_iWeaponInfo[3] > 0)
				{
					SetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded", g_esPlayer[survivor].g_iWeaponInfo[3]);
				}
			}
		}
	}

	if (g_esPlayer[survivor].g_sWeaponSecondary[0] != '\0')
	{
		switch (g_esPlayer[survivor].g_bDualWielding)
		{
			case true:
			{
				vCheatCommand(survivor, "give", "weapon_pistol");
				vCheatCommand(survivor, "give", "weapon_pistol");
			}
			case false: vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sWeaponSecondary);
		}

		iSlot = GetPlayerWeaponSlot(survivor, 1);
		if (iSlot > MaxClients && g_esPlayer[survivor].g_iWeaponInfo2 != -1)
		{
			SetEntProp(iSlot, Prop_Send, "m_iClip1", g_esPlayer[survivor].g_iWeaponInfo2);
		}
	}

	if (g_esPlayer[survivor].g_sWeaponThrowable[0] != '\0')
	{
		vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sWeaponThrowable);
	}

	if (g_esPlayer[survivor].g_sWeaponMedkit[0] != '\0')
	{
		vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sWeaponMedkit);
	}

	if (g_esPlayer[survivor].g_sWeaponPills[0] != '\0')
	{
		vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sWeaponPills);
	}

	for (int iPos = 0; iPos < (sizeof esPlayer::g_iWeaponInfo); iPos++)
	{
		g_esPlayer[survivor].g_iWeaponInfo[iPos] = 0;
	}

	g_esPlayer[survivor].g_iWeaponInfo2 = -1;
	g_esPlayer[survivor].g_sWeaponPrimary[0] = '\0';
	g_esPlayer[survivor].g_sWeaponSecondary[0] = '\0';
	g_esPlayer[survivor].g_sWeaponThrowable[0] = '\0';
	g_esPlayer[survivor].g_sWeaponMedkit[0] = '\0';
	g_esPlayer[survivor].g_sWeaponPills[0] = '\0';
}

void vRefillGunAmmo(int survivor, bool all = false, bool reset = false, bool override = false)
{
	int iSetting = (bIsDeveloper(survivor, 7) && g_esDeveloper[survivor].g_iDevInfiniteAmmo > g_esPlayer[survivor].g_iInfiniteAmmo) ? g_esDeveloper[survivor].g_iDevInfiniteAmmo : g_esPlayer[survivor].g_iInfiniteAmmo;
	iSetting = (all ? iSetting : 0);

	int iSlot = 0;
	if (!all || (iSetting > 0 && (iSetting & MT_INFAMMO_PRIMARY)))
	{
		iSlot = GetPlayerWeaponSlot(survivor, 0);
		if (iSlot > MaxClients)
		{
			int iMaxClip = (reset ? iGetMaxAmmo(survivor, 0, iSlot, false, true) : g_esPlayer[survivor].g_iMaxClip[0]);
			if (override || !reset || (reset && GetEntProp(iSlot, Prop_Send, "m_iClip1") >= iMaxClip))
			{
				SetEntProp(iSlot, Prop_Send, "m_iClip1", iMaxClip);

				if (g_bSecondGame && bHasSpecialAmmo(iSlot, 0))
				{
					SetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded", iMaxClip);
				}
			}

			vRefillGunMagazine(survivor, iSlot, reset, override);
		}
	}

	if (!all || (iSetting > 0 && (iSetting & MT_INFAMMO_SECONDARY)))
	{
		iSlot = GetPlayerWeaponSlot(survivor, 1);
		if (iSlot > MaxClients)
		{
			char sWeapon[32];
			GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
			if ((!strncmp(sWeapon[7], "pistol", 6) || StrEqual(sWeapon[7], "chainsaw")) && (override || !reset || (reset && GetEntProp(iSlot, Prop_Send, "m_iClip1") >= g_esPlayer[survivor].g_iMaxClip[1])))
			{
				SetEntProp(iSlot, Prop_Send, "m_iClip1", g_esPlayer[survivor].g_iMaxClip[1]);
			}
		}
	}

	if (all && iSetting > 0)
	{
		iSlot = GetPlayerWeaponSlot(survivor, 2);
		if (!bIsValidEntity(iSlot) && (iSetting & MT_INFAMMO_THROWABLE))
		{
			vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sStoredThrowable);
		}

		iSlot = GetPlayerWeaponSlot(survivor, 3);
		if (!bIsValidEntity(iSlot) && (iSetting & MT_INFAMMO_MEDKIT))
		{
			vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sStoredMedkit);
		}

		iSlot = GetPlayerWeaponSlot(survivor, 4);
		if (!bIsValidEntity(iSlot) && (iSetting & MT_INFAMMO_PILLS))
		{
			vCheatCommand(survivor, "give", g_esPlayer[survivor].g_sStoredPills);
		}
	}
}

void vRefillGunMagazine(int survivor, int weapon, bool reset, bool override, int amount = 0)
{
	int iAmmoOffset = iGetWeaponOffset(weapon), iAmmo = GetEntProp(survivor, Prop_Send, "m_iAmmo", .element = iAmmoOffset),
		iMaxAmmo = iGetMaxAmmo(survivor, 0, weapon, true, reset), iNewAmmo = 0;

	switch (amount)
	{
		case 0:
		{
			switch (override || !reset)
			{
				case true: iNewAmmo = iMaxAmmo;
				case false: iNewAmmo = (iAmmo > iMaxAmmo) ? iMaxAmmo : iNewAmmo;
			}
		}
		default: iNewAmmo = (amount > iMaxAmmo) ? iMaxAmmo : amount;
	}

	if (iNewAmmo > 0)
	{
		SetEntProp(survivor, Prop_Send, "m_iAmmo", iNewAmmo, .element = iAmmoOffset);
	}
}

void vRefillSurvivorHealth(int survivor)
{
	if (bIsSurvivorDisabled(survivor) || GetEntProp(survivor, Prop_Data, "m_iHealth") < GetEntProp(survivor, Prop_Data, "m_iMaxHealth"))
	{
		int iMode = GetEntProp(survivor, Prop_Data, "m_takedamage", 1);
		if (iMode != 2)
		{
			SetEntProp(survivor, Prop_Data, "m_takedamage", 2, 1);
			vAddSurvivorHealth(survivor);
			SetEntProp(survivor, Prop_Data, "m_takedamage", iMode, 1);
		}
		else
		{
			vAddSurvivorHealth(survivor);
		}
	}
}

void vRefreshLaserSight(int survivor)
{
	if (g_esPlayer[survivor].g_bCustomLaser || bIsDeveloper(survivor, 3) || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[survivor].g_iLaserSight == 1))
	{
		if (!g_bSecondGame)
		{
			int iUpgrades = GetEntProp(survivor, Prop_Send, "m_upgradeBitVec"), iBit = (iUpgrades & ~(1 << 17));
			if (iUpgrades != iBit)
			{
				SetEntProp(survivor, Prop_Send, "m_upgradeBitVec", iBit, 4);
			}
		}

		vSetupLaserSight(survivor, true);
	}
	else if (g_esPlayer[survivor].g_bCustomLaser && g_esDeveloper[survivor].g_iDevAccess == 0 && g_esPlayer[survivor].g_iLaserSight <= 0)
	{
		if (!g_bSecondGame)
		{
			SetEntProp(survivor, Prop_Send, "m_upgradeBitVec", 0, 4);
		}

		vSetupLaserSight(survivor, false);
	}
}

void vRemoveBioMass()
{
	for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
	{
		g_esSpecific.g_bInfected[iIndex] = false;
	}
}

void vRemoveBubble(int survivor)
{
	if (bIsValidEntRef(g_esPlayer[survivor].g_iBubble))
	{
		g_esPlayer[survivor].g_iBubble = EntRefToEntIndex(g_esPlayer[survivor].g_iBubble);
		if (bIsValidEntity(g_esPlayer[survivor].g_iBubble))
		{
			SDKUnhook(g_esPlayer[survivor].g_iBubble, SDKHook_SetTransmit, OnPropSetTransmit);
			RemoveEntity(g_esPlayer[survivor].g_iBubble);
		}
	}

	g_esPlayer[survivor].g_iBubble = INVALID_ENT_REFERENCE;
}

void vRemoveInfection(int survivor)
{
	for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
	{
		g_esShooter[survivor].g_bInfected[iIndex] = false;
	}

	g_esShooter[survivor].g_bDeathModel = false;
	g_esShooter[survivor].g_bMixTypes = false;
	g_esShooter[survivor].g_bProduced = false;
	g_esShooter[survivor].g_bSurvivor = false;
	g_esShooter[survivor].g_flDamageMultiplier = 0.0;
	g_esShooter[survivor].g_flDeathModelDelay = 0.0;
	g_esShooter[survivor].g_flHealthMultiplier = 0.0;
	g_esShooter[survivor].g_iCharacter = -1;
	g_esShooter[survivor].g_iDeathModel = INVALID_ENT_REFERENCE;
	g_esShooter[survivor].g_iFirstSpecial = -1;
	g_esShooter[survivor].g_iFirstType = 0;
	g_esShooter[survivor].g_iKillerSpecial = -1;
	g_esShooter[survivor].g_iKillerType = 0;
	g_esShooter[survivor].g_iLastSpecial = -1;
	g_esShooter[survivor].g_iLastType = 0;
	g_esShooter[survivor].g_iLeastDamage = 0;
	g_esShooter[survivor].g_iLeastSpecial = -1;
	g_esShooter[survivor].g_iLeastType = 0;
	g_esShooter[survivor].g_iMostDamage = 0;
	g_esShooter[survivor].g_iMostSpecial = -1;
	g_esShooter[survivor].g_iMostType = 0;
	g_esShooter[survivor].g_sSurvivorName[0] = '\0';
}

void vRemoveLaserSight(int survivor)
{
	if (!g_bSecondGame)
	{
		SetEntProp(survivor, Prop_Send, "m_upgradeBitVec", 0, 4);
	}

	vSetupLaserSight(survivor, false);
}

void vRemoveSurvivorEffects(int survivor, bool body = false)
{
	int iEffect = -1;
	for (int iPos = 0; iPos < (sizeof esPlayer::g_iEffect); iPos++)
	{
		iEffect = g_esPlayer[survivor].g_iEffect[iPos];
		if (bIsValidEntRef(iEffect))
		{
			RemoveEntity(iEffect);
		}

		g_esPlayer[survivor].g_iEffect[iPos] = INVALID_ENT_REFERENCE;
	}

	if (body || bIsValidClient(survivor))
	{
		vRemovePlayerGlow(survivor);
		vRemoveSurvivorLight(survivor);
		SetEntityRenderMode(survivor, RENDER_NORMAL);
		SetEntityRenderColor(survivor, 255, 255, 255, 255);
	}

	vRemoveBubble(survivor);
	SDKUnhook(survivor, SDKHook_PostThinkPost, OnTankPostThinkPost);
}

void vRemoveSurvivorLight(int survivor)
{
	if (bIsValidEntRef(g_esPlayer[survivor].g_iFlashlight))
	{
		int iProp = EntRefToEntIndex(g_esPlayer[survivor].g_iFlashlight);
		if (bIsValidEntity(iProp))
		{
			RemoveEntity(iProp);
		}

		g_esPlayer[survivor].g_iFlashlight = INVALID_ENT_REFERENCE;
	}
}

void vResetSurvivorStats(int survivor, bool all)
{
	g_esDeveloper[survivor].g_bDevVisual = false;
	g_esPlayer[survivor].g_bFallDamage = false;
	g_esPlayer[survivor].g_bFalling = false;
	g_esPlayer[survivor].g_bFallTracked = false;
	g_esPlayer[survivor].g_bFatalFalling = false;
	g_esPlayer[survivor].g_bLadyKiller = false;
	g_esPlayer[survivor].g_bPunished = false;
	g_esPlayer[survivor].g_bRainbowColor = false;
	g_esPlayer[survivor].g_bReleasedJump = false;
	g_esPlayer[survivor].g_bVomited = false;
	g_esPlayer[survivor].g_sLoopingVoiceline[0] = '\0';
	g_esPlayer[survivor].g_flActionDuration = 0.0;
	g_esPlayer[survivor].g_flAdrenalineTime = 0.0;
	g_esPlayer[survivor].g_flAttackBoost = 0.0;
	g_esPlayer[survivor].g_flDamageBoost = 0.0;
	g_esPlayer[survivor].g_flDamageResistance = 0.0;
	g_esPlayer[survivor].g_flDopamineRadius = 0.0;
	g_esPlayer[survivor].g_flFireRate = 0.0;
	g_esPlayer[survivor].g_flGrenadeLauncher = 0.0;
	g_esPlayer[survivor].g_flHealPercent = 0.0;
	g_esPlayer[survivor].g_flHealthcareRadius = 0.0;
	g_esPlayer[survivor].g_flHeartbeat = 0.0;
	g_esPlayer[survivor].g_flHeartbeatCooldown = -1.0;
	g_esPlayer[survivor].g_flHollowpointAmmo = 0.0;
	g_esPlayer[survivor].g_flJumpHeight = 0.0;
	g_esPlayer[survivor].g_flLadyKiller = 0.0;
	g_esPlayer[survivor].g_flLastClickTime = 0.0;
	g_esPlayer[survivor].g_flLastFlow = 0.0;
	g_esPlayer[survivor].g_flLastGrenadeTime = 0.0;
	g_esPlayer[survivor].g_flLastJumpTime = 0.0;
	g_esPlayer[survivor].g_flLastPushTime = 0.0;
	g_esPlayer[survivor].g_flLastWarning = 0.0;
	g_esPlayer[survivor].g_flLuckyBullet = 0.0;
	g_esPlayer[survivor].g_flMotivationRadius = 0.0;
	g_esPlayer[survivor].g_flOverdoseRadius = 0.0;
	g_esPlayer[survivor].g_flPipeBombDuration = 0.0;
	g_esPlayer[survivor].g_flPunchResistance = 0.0;
	g_esPlayer[survivor].g_flPreFallZ = 0.0;
	g_esPlayer[survivor].g_flRefillPercent = 0.0;
	g_esPlayer[survivor].g_flReloadRate = 0.0;
	g_esPlayer[survivor].g_flShockwaveRadius = 0.0;
	g_esPlayer[survivor].g_flShoveDamage = 0.0;
	g_esPlayer[survivor].g_flShoveRate = 0.0;
	g_esPlayer[survivor].g_flSledgehammerRounds = 0.0;
	g_esPlayer[survivor].g_flSpeedBoost = 0.0;
	g_esPlayer[survivor].g_flSupplier = 0.0;
	g_esPlayer[survivor].g_flSupplierCooldown = -1.0;
	g_esPlayer[survivor].g_flSwingRate = 0.0;
	g_esPlayer[survivor].g_iAmmoBoost = 0;
	g_esPlayer[survivor].g_iAmmoRefill = 0;
	g_esPlayer[survivor].g_iAmmoRegen = 0;
	g_esPlayer[survivor].g_iBlazeHealth = 0;
	g_esPlayer[survivor].g_iBloodDonor = 0;
	g_esPlayer[survivor].g_iBunnyHop = 0;
	g_esPlayer[survivor].g_iBurstDoors = 0;
	g_esPlayer[survivor].g_iCleanKills = 0;
	g_esPlayer[survivor].g_iClusterBombs = 0;
	g_esPlayer[survivor].g_iEternalFlames = 0;
	g_esPlayer[survivor].g_iFallPasses = 0;
	g_esPlayer[survivor].g_iFastRecovery = 0;
	g_esPlayer[survivor].g_iFriendlyFire = 0;
	g_esPlayer[survivor].g_iGhostBullets = 0;
	g_esPlayer[survivor].g_iHealthRegen = 0;
	g_esPlayer[survivor].g_iInfiniteAmmo = 0;
	g_esPlayer[survivor].g_iLadderActions = 0;
	g_esPlayer[survivor].g_iLaserSight = 0;
	g_esPlayer[survivor].g_iLifeLeech = 0;
	g_esPlayer[survivor].g_iMedicalCuts = 0;
	g_esPlayer[survivor].g_iMeleeRange = 0;
	g_esPlayer[survivor].g_iMidairDashesLimit = 0;
	g_esPlayer[survivor].g_iNotify = 0;
	g_esPlayer[survivor].g_iOverhealth = 0;
	g_esPlayer[survivor].g_iPrefsAccess = 0;
	g_esPlayer[survivor].g_iParticleEffect = 0;
	g_esPlayer[survivor].g_iRecoilDampener = 0;
	g_esPlayer[survivor].g_iRegenBursts = 0;
	g_esPlayer[survivor].g_iReviveHealth = 0;
	g_esPlayer[survivor].g_iRewardTypes = 0;
	g_esPlayer[survivor].g_iRiotGear = 0;
	g_esPlayer[survivor].g_iSafetyBubble = 0;
	g_esPlayer[survivor].g_iShovePenalty = 0;
	g_esPlayer[survivor].g_iSpecialAmmo = 0;
	g_esPlayer[survivor].g_iStickyGrenades = 0;
	g_esPlayer[survivor].g_iSyringeDarts = 0;
	g_esPlayer[survivor].g_iThorns = 0;
	g_esPlayer[survivor].g_iVoicePitch = 0;
	g_esPlayer[survivor].g_sBodyColor[0] = '\0';
	g_esPlayer[survivor].g_sLightColor[0] = '\0';
	g_esPlayer[survivor].g_sOutlineColor[0] = '\0';
	g_esPlayer[survivor].g_sScreenColor[0] = '\0';
	g_esShooter[survivor].g_iCharacterType[0] = -1;
	g_esShooter[survivor].g_iNotify = 0;
	g_esShooter[survivor].g_iPassiveTypes = 0;
	g_esShooter[survivor].g_iTotalPassives = 0;

	if (all)
	{
		g_esPlayer[survivor].g_bSetup = false;
		g_esShooter[survivor].g_iCharacterType[1] = -1;
	}

	for (int iPos = 0; iPos < (sizeof esPlayer::g_flRewardTime); iPos++)
	{
		g_esPlayer[survivor].g_flRewardTime[iPos] = -1.0;
		g_esPlayer[survivor].g_iRewardStack[iPos] = 0;

		if (iPos < (sizeof esPlayer::g_flVisualTime))
		{
			g_esPlayer[survivor].g_flVisualTime[iPos] = -1.0;
		}

		if (iPos < (sizeof esPlayer::g_iScreenColorVisual))
		{
			g_esPlayer[survivor].g_iScreenColorVisual[iPos] = -1;
		}
	}
}

void vResetSurvivorStats2(int survivor)
{
	for (int iBit = 5; iBit < 9; iBit++)
	{
		if (iBit != 6)
		{
			if (g_esShooter[survivor].g_iPassiveTypes & (1 << iBit))
			{
				g_esShooter[survivor].g_iPassiveTypes &= ~(1 << iBit);
			}

			if (g_esShooter[survivor].g_iTotalPassives & (1 << iBit))
			{
				g_esShooter[survivor].g_iTotalPassives &= ~(1 << iBit);
			}

			if (g_esPlayer[survivor].g_iRewardTypes & (1 << iBit))
			{
				g_esPlayer[survivor].g_iRewardTypes &= ~(1 << iBit);
			}
		}
	}
}

void vRespawnSurvivor(int survivor)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_RespawnStats");
	}

	if (iIndex != -1)
	{
		vInstallPatch(iIndex);
	}

	if (g_esGeneral.g_hSDKRoundRespawn != null)
	{
		SDKCall(g_esGeneral.g_hSDKRoundRespawn, survivor);
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}
}

void vReviveSurvivor(int survivor)
{
	if (!bIsSurvivorDisabled(survivor))
	{
		return;
	}

	if (g_esGeneral.g_hSDKRevive != null)
	{
		SDKCall(g_esGeneral.g_hSDKRevive, survivor);
		StopSound(survivor, SNDCHAN_STATIC, SOUND_HEARTBEAT);
	}
}

void vSaveCaughtSurvivor(int survivor, int special = 0)
{
	int iSpecial = special;
	iSpecial = (iSpecial <= 0) ? GetEntPropEnt(survivor, Prop_Send, "m_pounceAttacker") : iSpecial;
	iSpecial = (iSpecial <= 0) ? GetEntPropEnt(survivor, Prop_Send, "m_tongueOwner") : iSpecial;

	if (g_bSecondGame)
	{
		iSpecial = (iSpecial <= 0) ? GetEntPropEnt(survivor, Prop_Send, "m_pummelAttacker") : iSpecial;
		iSpecial = (iSpecial <= 0) ? GetEntPropEnt(survivor, Prop_Send, "m_carryAttacker") : iSpecial;
		iSpecial = (iSpecial <= 0) ? GetEntPropEnt(survivor, Prop_Send, "m_jockeyAttacker") : iSpecial;
	}

	if (bIsSpecialInfected(iSpecial))
	{
		SDKHooks_TakeDamage(iSpecial, survivor, survivor, float(GetEntProp(iSpecial, Prop_Data, "m_iHealth")), DMG_CLUB);
	}
}

void vSaveSurvivorWeapons(int survivor)
{
	char sWeapon[32];
	g_esPlayer[survivor].g_iWeaponInfo2 = -1;
	int iSlot = GetPlayerWeaponSlot(survivor, 0);
	if (iSlot > MaxClients)
	{
		GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
		strcopy(g_esPlayer[survivor].g_sWeaponPrimary, sizeof esPlayer::g_sWeaponPrimary, sWeapon);

		g_esPlayer[survivor].g_iWeaponInfo[0] = GetEntProp(iSlot, Prop_Send, "m_iClip1");
		g_esPlayer[survivor].g_iWeaponInfo[1] = GetEntProp(survivor, Prop_Send, "m_iAmmo", .element = iGetWeaponOffset(iSlot));

		if (g_bSecondGame)
		{
			g_esPlayer[survivor].g_iWeaponInfo[2] = GetEntProp(iSlot, Prop_Send, "m_upgradeBitVec");
			g_esPlayer[survivor].g_iWeaponInfo[3] = GetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded");
		}
	}

	iSlot = 0;
	if (g_bSecondGame)
	{
		if (bIsSurvivorDisabled(survivor) && g_esGeneral.g_iMeleeOffset != -1)
		{
			int iMelee = GetEntDataEnt2(survivor, g_esGeneral.g_iMeleeOffset);

			switch (bIsValidEntity(iMelee))
			{
				case true: iSlot = iMelee;
				case false: iSlot = GetPlayerWeaponSlot(survivor, 1);
			}
		}
		else
		{
			iSlot = GetPlayerWeaponSlot(survivor, 1);
		}
	}
	else
	{
		iSlot = GetPlayerWeaponSlot(survivor, 1);
	}

	if (iSlot > MaxClients)
	{
		GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
		if (StrEqual(sWeapon[7], "melee"))
		{
			GetEntPropString(iSlot, Prop_Data, "m_strMapSetScriptName", sWeapon, sizeof sWeapon);
		}

		strcopy(g_esPlayer[survivor].g_sWeaponSecondary, sizeof esPlayer::g_sWeaponSecondary, sWeapon);
		if (!strncmp(sWeapon[7], "pistol", 6) || StrEqual(sWeapon[7], "chainsaw"))
		{
			g_esPlayer[survivor].g_iWeaponInfo2 = GetEntProp(iSlot, Prop_Send, "m_iClip1");
		}

		g_esPlayer[survivor].g_bDualWielding = !strncmp(sWeapon[7], "pistol", 6) && GetEntProp(iSlot, Prop_Send, "m_isDualWielding") > 0;
	}

	iSlot = GetPlayerWeaponSlot(survivor, 2);
	if (iSlot > MaxClients)
	{
		GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
		strcopy(g_esPlayer[survivor].g_sWeaponThrowable, sizeof esPlayer::g_sWeaponThrowable, sWeapon);
	}

	iSlot = GetPlayerWeaponSlot(survivor, 3);
	if (iSlot > MaxClients)
	{
		GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
		strcopy(g_esPlayer[survivor].g_sWeaponMedkit, sizeof esPlayer::g_sWeaponMedkit, sWeapon);
	}

	iSlot = GetPlayerWeaponSlot(survivor, 4);
	if (iSlot > MaxClients)
	{
		GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
		strcopy(g_esPlayer[survivor].g_sWeaponPills, sizeof esPlayer::g_sWeaponPills, sWeapon);
	}
}

void vSetSurvivorColor(int survivor, const char[] colors, bool apply = true, const char[] delimiter = ";", bool save = false)
{
	if ((g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0) || (!save && !bIsDeveloper(survivor, 1)))
	{
		return;
	}

	char sColor[64];
	strcopy(sColor, sizeof sColor, colors);
	if (StrEqual(sColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		if (!g_esPlayer[survivor].g_bRainbowColor)
		{
			g_esPlayer[survivor].g_bRainbowColor = SDKHookEx(survivor, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
		}

		return;
	}

	char sValue[4][4];
	vGetConfigColors(sColor, sizeof sColor, colors);
	ExplodeString(sColor, delimiter, sValue, sizeof sValue, sizeof sValue[]);

	int iColor[4] = {0, 0, 0, 0};
	for (int iPos = 0; iPos < (sizeof sValue); iPos++)
	{
		if (sValue[iPos][0] != '\0')
		{
			iColor[iPos] = iGetRandomColor(StringToInt(sValue[iPos]));
		}
	}

	switch (apply)
	{
		case true:
		{
			switch (iColor[3] < 255)
			{
				case true: SetEntityRenderMode(survivor, RENDER_TRANSCOLOR);
				case false: SetEntityRenderMode(survivor, RENDER_NORMAL);
			}

			SetEntityRenderColor(survivor, iColor[0], iColor[1], iColor[2], iColor[3]);
		}
		case false:
		{
			SetEntityRenderMode(survivor, RENDER_NORMAL);
			SetEntityRenderColor(survivor, 255, 255, 255, 255);
		}
	}
}

void vSetSurvivorEffects(int survivor, int effects)
{
	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return;
	}

	if (effects & MT_ROCK_BLOOD)
	{
		vAttachParticle(survivor, PARTICLE_BLOOD, 0.75, 30.0);
	}

	if (effects & MT_ROCK_ELECTRICITY)
	{
		switch (bIsValidClient(survivor, MT_CHECK_FAKECLIENT))
		{
			case true: vAttachParticle(survivor, PARTICLE_ELECTRICITY, 0.75, 30.0);
			case false:
			{
				for (int iCount = 1; iCount < 4; iCount++)
				{
					vAttachParticle(survivor, PARTICLE_ELECTRICITY, 0.75, (1.0 * float(iCount * 15)));
				}
			}
		}
	}

	if (effects & MT_ROCK_FIRE)
	{
		vAttachParticle(survivor, PARTICLE_FIRE, 0.75);
	}

	if (effects & MT_ROCK_SPIT)
	{
		switch (g_bSecondGame)
		{
			case true: vAttachParticle(survivor, PARTICLE_SPIT, 0.75, 30.0);
			case false: vAttachParticle(survivor, PARTICLE_BLOOD, 0.75, 30.0);
		}
	}
}

void vSetSurvivorGlow(int survivor, int red, int green, int blue)
{
	if (!g_bSecondGame || (g_esGeneral.g_iGraphicsLevel <= 1 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 1))
	{
		return;
	}

	SetEntProp(survivor, Prop_Send, "m_glowColorOverride", iGetRGBColor(red, green, blue));
	SetEntProp(survivor, Prop_Send, "m_bFlashing", 0);
	SetEntProp(survivor, Prop_Send, "m_nGlowRangeMin", 0);
	SetEntProp(survivor, Prop_Send, "m_nGlowRange", 99999);
	SetEntProp(survivor, Prop_Send, "m_iGlowType", 3);
}

void vSetSurvivorFlashlight(int survivor, int colors[4])
{
	if (g_esGeneral.g_iGraphicsLevel <= 1 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 1)
	{
		return;
	}

	if (!bIsValidEntRef(g_esPlayer[survivor].g_iFlashlight))
	{
		float flOrigin[3], flAngles[3];
		GetEntPropVector(survivor, Prop_Data, "m_vecOrigin", flOrigin);
		GetEntPropVector(survivor, Prop_Data, "m_angRotation", flAngles);
		vFlashlightProp(survivor, flOrigin, flAngles, colors);
	}
	else
	{
		int iProp = EntRefToEntIndex(g_esPlayer[survivor].g_iFlashlight);
		if (bIsValidEntity(iProp))
		{
			char sColor[16];
			FormatEx(sColor, sizeof sColor, "%i %i %i %i", iGetRandomColor(colors[0]), iGetRandomColor(colors[1]), iGetRandomColor(colors[2]), iGetRandomColor(colors[3]));
			DispatchKeyValue(g_esPlayer[survivor].g_iFlashlight, "_light", sColor);
		}
	}
}

void vSetSurvivorLight(int survivor, const char[] colors, bool apply = true, const char[] delimiter = ";", bool save = false)
{
	if ((g_esGeneral.g_iGraphicsLevel <= 1 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 1) || (!save && !bIsDeveloper(survivor, 1)))
	{
		return;
	}

	char sColor[64];
	strcopy(sColor, sizeof sColor, colors);
	if (StrEqual(sColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		if (!g_esPlayer[survivor].g_bRainbowColor)
		{
			g_esPlayer[survivor].g_bRainbowColor = SDKHookEx(survivor, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
		}

		return;
	}

	char sValue[4][4];
	vGetConfigColors(sColor, sizeof sColor, colors);
	ExplodeString(sColor, delimiter, sValue, sizeof sValue, sizeof sValue[]);

	int iColor[4] = {0, 0, 0, 0};
	for (int iPos = 0; iPos < (sizeof sValue); iPos++)
	{
		if (sValue[iPos][0] != '\0')
		{
			iColor[iPos] = iGetRandomColor(StringToInt(sValue[iPos]));
		}
	}

	switch (apply)
	{
		case true: vSetSurvivorFlashlight(survivor, iColor);
		case false: vRemoveSurvivorLight(survivor);
	}
}

void vSetSurvivorOutline(int survivor, const char[] colors, bool apply = true, const char[] delimiter = ";", bool save = false)
{
	if (!g_bSecondGame || (g_esGeneral.g_iGraphicsLevel <= 1 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 1) || (!save && !bIsDeveloper(survivor, 1)))
	{
		return;
	}

	char sColor[64];
	strcopy(sColor, sizeof sColor, colors);
	if (StrEqual(sColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		if (!g_esPlayer[survivor].g_bRainbowColor)
		{
			g_esPlayer[survivor].g_bRainbowColor = SDKHookEx(survivor, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
		}

		return;
	}

	char sValue[3][4];
	vGetConfigColors(sColor, sizeof sColor, colors);
	ExplodeString(sColor, delimiter, sValue, sizeof sValue, sizeof sValue[]);

	int iColor[3];
	for (int iPos = 0; iPos < (sizeof sValue); iPos++)
	{
		if (sValue[iPos][0] != '\0')
		{
			iColor[iPos] = iGetRandomColor(StringToInt(sValue[iPos]));
		}
	}

	switch (apply)
	{
		case true: vSetSurvivorGlow(survivor, iColor[0], iColor[1], iColor[2]);
		case false: vRemovePlayerGlow(survivor);
	}
}

void vSetSurvivorParticle(int survivor)
{
	if (!g_esDeveloper[survivor].g_bDevVisual && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		g_esDeveloper[survivor].g_bDevVisual = true;

		CreateTimer(0.75, tTimerDevParticle, GetClientUserId(survivor), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
	}
}

void vSetSurvivorScreen(int survivor, const char[] colors, const char[] delimiter = ";")
{
	if (g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0)
	{
		return;
	}

	char sColor[64];
	strcopy(sColor, sizeof sColor, colors);
	if (StrEqual(sColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		if (!g_esPlayer[survivor].g_bRainbowColor)
		{
			g_esPlayer[survivor].g_bRainbowColor = SDKHookEx(survivor, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
		}

		return;
	}

	char sValue[4][4];
	ExplodeString(sColor, delimiter, sValue, sizeof sValue, sizeof sValue[]);
	for (int iPos = 0; iPos < (sizeof sValue); iPos++)
	{
		if (sValue[iPos][0] != '\0')
		{
			g_esPlayer[survivor].g_iScreenColorVisual[iPos] = iGetRandomColor(StringToInt(sValue[iPos]));
		}
	}
}

void vSetSurvivorWeaponSkin(int developer)
{
	if (g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0)
	{
		return;
	}

	int iActiveWeapon = iGetSurvivorActiveWeapon(developer);
	if (bIsValidEntity(iActiveWeapon))
	{
		int iSkin = iClamp(g_esDeveloper[developer].g_iDevWeaponSkin, -1, iGetMaxWeaponSkins(developer));
		if (iSkin != -1 && iSkin != GetEntProp(iActiveWeapon, Prop_Send, "m_nSkin"))
		{
			SetEntProp(iActiveWeapon, Prop_Send, "m_nSkin", iSkin);

			int iViewWeapon = GetEntPropEnt(developer, Prop_Send, "m_hViewModel");
			if (bIsValidEntity(iViewWeapon))
			{
				SetEntProp(iViewWeapon, Prop_Send, "m_nSkin", iSkin);
			}
		}
	}
}

void vSetupAdmin(int admin, const char[] keyword, const char[] value)
{
	if ((StrContains(keyword, "effect", false) != -1 || StrContains(keyword, "particle", false) != -1) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		g_esDeveloper[admin].g_iDevParticle = iClamp(StringToInt(value), 0, 15);

		switch (StringToInt(value) == 0)
		{
			case true: g_esDeveloper[admin].g_bDevVisual = false;
			case false: vSetSurvivorParticle(admin);
		}
#if defined _clientprefs_included
		g_esGeneral.g_ckMTAdmin[1].Set(admin, value);
#endif
	}
	else if ((StrContains(keyword, "glow", false) != -1 || StrContains(keyword, "outline", false) != -1) && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
	{
		switch (StrEqual(value, "0"))
		{
			case true:
			{
				g_esDeveloper[admin].g_sDevGlowOutline[0] = '\0';

				vToggleSurvivorEffects(admin, true, 6);
			}
			case false:
			{
				strcopy(g_esDeveloper[admin].g_sDevGlowOutline, sizeof esDeveloper::g_sDevGlowOutline, value);
				vSetSurvivorOutline(admin, g_esDeveloper[admin].g_sDevGlowOutline, .delimiter = ",");
			}
		}
#if defined _clientprefs_included
		g_esGeneral.g_ckMTAdmin[2].Set(admin, value);
#endif
	}
	else if ((StrContains(keyword, "light", false) != -1 || StrContains(keyword, "flash", false) != -1) && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
	{
		switch (StrEqual(value, "0"))
		{
			case true:
			{
				g_esDeveloper[admin].g_sDevFlashlight[0] = '\0';

				vToggleSurvivorEffects(admin, true, 4);
			}
			case false:
			{
				strcopy(g_esDeveloper[admin].g_sDevFlashlight, sizeof esDeveloper::g_sDevFlashlight, value);
				vSetSurvivorLight(admin, g_esDeveloper[admin].g_sDevFlashlight, .delimiter = ",");
			}
		}
#if defined _clientprefs_included
		g_esGeneral.g_ckMTAdmin[3].Set(admin, value);
#endif
	}
	else if ((StrContains(keyword, "skin", false) != -1 || StrContains(keyword, "color", false) != -1) && (g_esGeneral.g_iGraphicsLevel > 0 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 0))
	{
		switch (StrEqual(value, "0"))
		{
			case true:
			{
				g_esDeveloper[admin].g_sDevSkinColor[0] = '\0';

				vToggleSurvivorEffects(admin, true, 5);
			}
			case false:
			{
				strcopy(g_esDeveloper[admin].g_sDevSkinColor, sizeof esDeveloper::g_sDevSkinColor, value);
				vSetSurvivorColor(admin, g_esDeveloper[admin].g_sDevSkinColor, .delimiter = ",");
			}
		}
#if defined _clientprefs_included
		g_esGeneral.g_ckMTAdmin[4].Set(admin, value);
#endif
	}
	else if (StrContains(keyword, "voice", false) != -1 || StrContains(keyword, "pitch", false) != -1)
	{
		g_esDeveloper[admin].g_iDevVoicePitch = iClamp(StringToInt(value), 0, 255);
#if defined _clientprefs_included
		g_esGeneral.g_ckMTAdmin[5].Set(admin, value);
#endif
	}

	vAdminPanel(admin);
}

void vSetupDeveloper(int developer, bool setup = true, bool usual = false)
{
	Action aResult = Plugin_Continue;
	vRewardSurvivorForward(developer, 0, g_esDeveloper[developer].g_iDevRewardTypes, 0, g_esDeveloper[developer].g_flDevRewardDuration, setup, aResult);
	vToggleSurvivorPassiveForward(developer, g_esDeveloper[developer].g_iDevPassiveTypes, setup, false, -1, aResult);

	if (setup)
	{
		if (bIsSurvivor(developer))
		{
			vSetupLoadout(developer, usual);
			vRefreshLaserSight(developer);
			vGiveGunSpecialAmmo(developer);
			vCheckGunClipSizes(developer);

			if (bIsDeveloper(developer, 1))
			{
				vSetSurvivorLight(developer, g_esDeveloper[developer].g_sDevFlashlight, .delimiter = ",");
				vSetSurvivorOutline(developer, g_esDeveloper[developer].g_sDevGlowOutline, .delimiter = ",");
				vSetSurvivorColor(developer, g_esDeveloper[developer].g_sDevSkinColor, .delimiter = ",");
				vSetSurvivorParticle(developer);
			}
			else if (g_esDeveloper[developer].g_bDevVisual)
			{
				g_esDeveloper[developer].g_bDevVisual = false;

				vToggleSurvivorEffects(developer);
			}

			bool bDeveloper = (bIsDeveloper(developer, 4) || (((g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[developer].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[developer].g_iRecoilDampener == 1));
			vToggleWeaponVerticalPunch(developer, bDeveloper);

			bDeveloper = bIsDeveloper(developer, 5);

			switch (bDeveloper || (((g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[developer].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[developer].g_flSpeedBoost > 0.0))
			{
				case true: SDKHook(developer, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
				case false:
				{
					SDKUnhook(developer, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
					SetEntPropFloat(developer, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(developer, 1.0, true) : 1.0));
				}
			}

			switch (bDeveloper || (((g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[developer].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[developer].g_flAdrenalineTime > 0.0))
			{
				case true:
				{
					float flDuration = (bDeveloper && g_esDeveloper[developer].g_flDevAdrenalineTime > g_esPlayer[developer].g_flAdrenalineTime) ? g_esDeveloper[developer].g_flDevAdrenalineTime : g_esPlayer[developer].g_flAdrenalineTime;
					vSetAdrenalineTime(developer, flDuration);
				}
				case false: vSetAdrenalineTime(developer, 0.0);
			}

			switch (bIsDeveloper(developer, 6) || (((g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[developer].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[developer].g_iFastRecovery == 1))
			{
				case true: SDKHook(developer, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);
				case false: SDKUnhook(developer, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);
			}

			if (bIsDeveloper(developer, 11) || (((g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[developer].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[developer].g_iSafetyBubble == 1))
			{
				if (g_esPlayer[developer].g_bVomited)
				{
					vUnvomitPlayer(developer);
				}

				vSaveCaughtSurvivor(developer);
			}
		}
	}
	else if (bIsValidClient(developer))
	{
		vToggleWeaponVerticalPunch(developer, false);
		SDKUnhook(developer, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
		SDKUnhook(developer, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);

		if (bIsValidClient(developer, MT_CHECK_ALIVE))
		{
			if (g_esDeveloper[developer].g_bDevVisual)
			{
				vToggleSurvivorEffects(developer);
			}

			if (!(g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) && !(g_esPlayer[developer].g_iRewardTypes & MT_REWARD_SPEEDBOOST))
			{
				vSetAdrenalineTime(developer, 0.0);
				SetEntPropFloat(developer, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(developer, 1.0, true) : 1.0));
			}

			vCheckGunClipSizes(developer);

			if (!(g_esShooter[developer].g_iTotalPassives & MT_PASSIVE_AMMO) && !(g_esPlayer[developer].g_iRewardTypes & MT_REWARD_AMMO))
			{
				vRefillGunAmmo(developer, .reset = true);
			}
		}

		g_esDeveloper[developer].g_bDevVisual = false;
	}
}

void vSetupGuest(int guest, const char[] keyword, const char[] code, const char[] section = "", const char[] subsection = "", const char[] specsection = "", const char[] key = "", const char[] value = "")
{
	bool bPanel = false;
	if (StrContains(keyword, "access", false) != -1 || StrContains(keyword, "dev", false) != -1 || StrContains(keyword, "level", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevAccess = iClamp(StringToInt(code), 0, MT_DEV_MAXLEVEL);

		vSetupDeveloper(guest, (g_esDeveloper[guest].g_iDevAccess > 0), true);
	}
	else if (StrContains(keyword, "action", false) != -1 || StrContains(keyword, "actdur", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevActionDuration = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "adrenaline", false) != -1 || StrContains(keyword, "shot", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevAdrenalineTime = flClamp(StringToFloat(code));

		vSetAdrenalineTime(guest, g_esDeveloper[guest].g_flDevAdrenalineTime);
	}
	else if (StrContains(keyword, "ammoregen", false) != -1 || StrContains(keyword, "regenammo", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevAmmoRegen = iClamp(StringToInt(code));
	}
	else if (StrContains(keyword, "attack", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevAttackBoost = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "blazehp", false) != -1 || StrContains(keyword, "firehp", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevBlazeHealth = iClamp(StringToInt(code), MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "cluster", false) != -1 || StrContains(keyword, "bomb", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevClusterBombs = iClamp(StringToInt(code), 0, 5);
	}
	else if (StrContains(keyword, "dmgboost", false) != -1 || StrContains(keyword, "damageboost", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevDamageBoost = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "dmgres", false) != -1 || StrContains(keyword, "damageres", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevDamageResistance = flClamp(StringToFloat(code), 0.0, 0.99);
	}
	else if (StrContains(keyword, "defib", false) != -1 || StrContains(keyword, "shock", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevShockwaveRadius = flClamp(StringToFloat(code), 0.0, 99999.0);
	}
	else if (StrContains(keyword, "dopamine", false) != -1 || StrContains(keyword, "rush", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevDopamineRadius = flClamp(StringToFloat(code), 0.0, 99999.0);
	}
	else if (StrContains(keyword, "effect", false) != -1 || StrContains(keyword, "particle", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevParticle = iClamp(StringToInt(code), 0, 15);
	}
	else if (StrContains(keyword, "fall", false) != -1 || StrContains(keyword, "scream", false) != -1)
	{
		bPanel = true;

		strcopy(g_esDeveloper[guest].g_sDevFallVoiceline, sizeof esDeveloper::g_sDevFallVoiceline, code);
	}
	else if (StrContains(keyword, "firerate", false) != -1 || StrContains(keyword, "frate", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevFireRate = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "glow", false) != -1 || StrContains(keyword, "outline", false) != -1)
	{
		bPanel = true;

		strcopy(g_esDeveloper[guest].g_sDevGlowOutline, sizeof esDeveloper::g_sDevGlowOutline, code);
		vSetSurvivorOutline(guest, g_esDeveloper[guest].g_sDevGlowOutline, .delimiter = ",");
	}
	else if (StrContains(keyword, "grenade", false) != -1 || StrContains(keyword, "launcher", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevGrenadeLauncher = flClamp(StringToFloat(code), 0.0, 100.0);
	}
	else if (StrContains(keyword, "healper", false) != -1 || StrContains(keyword, "hppercent", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevHealPercent = flClamp(StringToFloat(code), 0.0, 100.0);
	}
	else if (StrContains(keyword, "healthcare", false) != -1 || StrContains(keyword, "hpcare", false) != -1 || StrContains(keyword, "medkit", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevHealthcareRadius = flClamp(StringToFloat(code), 0.0, 99999.0);
	}
	else if (StrContains(keyword, "hpregen", false) != -1 || StrContains(keyword, "regenhp", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevHealthRegen = iClamp(StringToInt(code), 0, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "hud", false) != -1)
	{
		delete g_esPlayer[guest].g_hHudTimer;

		g_esPlayer[guest].g_hHudTimer = CreateTimer(1.0, tTimerHudPanel, GetClientUserId(guest), TIMER_REPEAT);
	}
	else if (StrContains(keyword, "infammo", false) != -1 || StrContains(keyword, "infinite", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevInfiniteAmmo = iClamp(StringToInt(code), 0, 31);
	}
	else if (StrContains(keyword, "jump", false) != -1 || StrContains(keyword, "height", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevJumpHeight = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "lady", false) != -1 || StrContains(keyword, "killer", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevLadyKiller = flClamp(StringToFloat(code), 0.0, 100.0);
	}
	else if (StrContains(keyword, "leech", false) != -1 || StrContains(keyword, "life", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevLifeLeech = iClamp(StringToInt(code), 0, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "light", false) != -1 || StrContains(keyword, "flash", false) != -1)
	{
		bPanel = true;

		strcopy(g_esDeveloper[guest].g_sDevFlashlight, sizeof esDeveloper::g_sDevFlashlight, code);
		vSetSurvivorLight(guest, g_esDeveloper[guest].g_sDevFlashlight, .delimiter = ",");
	}
	else if (StrContains(keyword, "loadout", false) != -1 || StrContains(keyword, "weapon", false) != -1)
	{
		bPanel = true;

		strcopy(g_esDeveloper[guest].g_sDevLoadout, sizeof esDeveloper::g_sDevLoadout, code);
		vSetupLoadout(guest);
	}
	else if (StrContains(keyword, "medic", false) != -1 || StrContains(keyword, "medcuts", false) != -1 || StrContains(keyword, "meleehp", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevMedicalCuts = iClamp(StringToInt(code), MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "longmelee", false) != -1 || StrContains(keyword, "range", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevMeleeRange = iClamp(StringToInt(code));
	}
	else if (StrContains(keyword, "midair", false) != -1 || StrContains(keyword, "dash", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevMidairDashes = iClamp(StringToInt(code));
	}
	else if (StrContains(keyword, "motiv", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevMotivationRadius = flClamp(StringToFloat(code), 0.0, 99999.0);
	}
	else if (StrContains(keyword, "overdose", false) != -1 || StrContains(keyword, "pills", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevOverdoseRadius = flClamp(StringToFloat(code), 0.0, 99999.0);
	}
	else if (StrContains(keyword, "overheal", false) != -1 || StrContains(keyword, "extrahp", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevOverhealth = iClamp(StringToInt(code), MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "pstypes", false) != -1 || StrContains(keyword, "passtypes", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevPassiveTypes = iClamp(StringToInt(code), -1, 2147483647);
	}
	else if (StrContains(keyword, "pipe", false) != -1 || StrContains(keyword, "pipedur", false) != -1 || StrContains(keyword, "bombdur", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevPipeBombDuration = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "punch", false) != -1 || StrContains(keyword, "punchres", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevPunchResistance = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "rapid", false) != -1 || StrContains(keyword, "pistol", false) != -1 || StrContains(keyword, "aprate", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevRapidPistol = flClamp(StringToFloat(code), 0.01, 1.0);
	}
	else if (StrContains(keyword, "bursthp", false) != -1 || StrContains(keyword, "regbursts", false) != -1 || StrContains(keyword, "blasthp", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevRegenBursts = iClamp(StringToInt(code), MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "reload", false) != -1 || StrContains(keyword, "relrate", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevReloadRate = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "revivehp", false) != -1 || StrContains(keyword, "hprevive", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevReviveHealth = iClamp(StringToInt(code), 0, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "rdur", false) != -1 || StrContains(keyword, "rewarddur", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevRewardDuration = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "rtypes", false) != -1 || StrContains(keyword, "rewardtypes", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevRewardTypes = iClamp(StringToInt(code), -1, 2147483647);
	}
	else if (StrContains(keyword, "sdmg", false) != -1 || StrContains(keyword, "shovedmg", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevShoveDamage = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "srate", false) != -1 || StrContains(keyword, "shoverate", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevShoveRate = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "stuck", false) != -1 || StrContains(keyword, "repos", false) != -1)
	{
		bPanel = !!StringToInt(code);

		vFixPlayerPosition(guest);
	}
	else if (StrContains(keyword, "survskin", false) != -1 || StrContains(keyword, "color", false) != -1)
	{
		bPanel = true;

		strcopy(g_esDeveloper[guest].g_sDevSkinColor, sizeof esDeveloper::g_sDevSkinColor, code);
		vSetSurvivorColor(guest, g_esDeveloper[guest].g_sDevSkinColor, .delimiter = ",");
	}
	else if (StrContains(keyword, "specammo", false) != -1 || StrContains(keyword, "special", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevSpecialAmmo = iClamp(StringToInt(code), 0, 3);

		vGiveGunSpecialAmmo(guest);
	}
	else if (StrContains(keyword, "speed", false) != -1 || StrContains(keyword, "run", false) != -1 || StrContains(keyword, "move", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevSpeedBoost = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "swing", false) != -1 || StrContains(keyword, "swrate", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_flDevSwingRate = flClamp(StringToFloat(code));
	}
	else if (StrContains(keyword, "syringe", false) != -1 || StrContains(keyword, "dart", false) != -1 || StrContains(keyword, "bullethp", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevSyringeDarts = iClamp(StringToInt(code), MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	}
	else if (StrContains(keyword, "voice", false) != -1 || StrContains(keyword, "pitch", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevVoicePitch = iClamp(StringToInt(code), 0, 255);
	}
	else if (StrContains(keyword, "wepskin", false) != -1 || StrContains(keyword, "skin", false) != -1)
	{
		bPanel = true;
		g_esDeveloper[guest].g_iDevWeaponSkin = iClamp(StringToInt(code), -1, iGetMaxWeaponSkins(guest));

		vSetSurvivorWeaponSkin(guest);
	}
	else if (StrContains(keyword, "config", false) != -1)
	{
		bPanel = !!StringToInt(code);

		switch (IsVoteInProgress())
		{
			case true: MT_PrintToChat(guest, "%s %t", MT_TAG2, "Vote in Progress");
			case false: vPathMenu(guest);
		}
	}
	else if (StrContains(keyword, "edit", false) != -1)
	{
		switch (specsection[0] != '\0')
		{
			case true: vSetSpecialSettings(-1, section, subsection, specsection, key, value);
			case false: vSetTankSettings(-1, section, subsection, key, value);
		}
	}
	else if (StrContains(keyword, "list", false) != -1)
	{
		bPanel = !!StringToInt(code);

		vListAbilities(guest);
	}
	else if (StrContains(keyword, "smoker", false) != -1 || StrContains(keyword, "boomer", false) != -1 || StrContains(keyword, "hunter", false) != -1 || StrContains(keyword, "spitter", false) != -1
		|| StrContains(keyword, "jockey", false) != -1 || StrContains(keyword, "charger", false) != -1 || StrContains(keyword, "tank", false) != -1)
	{
		bPanel = !!StringToInt(code);

		switch (IsVoteInProgress())
		{
			case true: MT_PrintToChat(guest, "%s %t", MT_TAG2, "Vote in Progress");
			case false:
			{
				if (StrContains(keyword, "smoker", false) != -1)
				{
					vMutantMenu(guest, 1);
				}
				else if (StrContains(keyword, "boomer", false) != -1)
				{
					vMutantMenu(guest, 2);
				}
				else if (StrContains(keyword, "hunter", false) != -1)
				{
					vMutantMenu(guest, 3);
				}
				else if (StrContains(keyword, "spitter", false) != -1)
				{
					vMutantMenu(guest, (g_bSecondGame ? 4 : 2));
				}
				else if (StrContains(keyword, "jockey", false) != -1)
				{
					vMutantMenu(guest, (g_bSecondGame ? 5 : 3));
				}
				else if (StrContains(keyword, "charger", false) != -1)
				{
					vMutantMenu(guest, (g_bSecondGame ? 6 : 1));
				}
				else if (StrContains(keyword, "tank", false) != -1)
				{
					vMutantMenu(guest, 8);
				}
			}
		}
	}
	else if (StrContains(keyword, "version", false) != -1)
	{
		bPanel = !!StringToInt(code);

		MT_PrintToChat(guest, "%s %s{yellow} v%s{mint}, by{olive} %s", MT_TAG3, MT_CONFIG_SECTION_MAIN, MT_VERSION, MT_AUTHOR);
	}

	if (bPanel)
	{
		vDeveloperPanel(guest);
		vListDeveloperCodes(guest);
	}
}

void vSetupLaserSight(int survivor, bool toggle = true)
{
	switch (toggle)
	{
		case true:
		{
			static int iIndex = -1;
			if (iIndex == -1)
			{
				iIndex = iGetPatchIndex("MTPatch_UpgradeSound");
			}
			else if ((bIsDeveloper(survivor, 3) || (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esGeneral.g_hSDKAddUpgrade != null)
			{
				if (!g_esPlayer[survivor].g_bCustomLaser)
				{
					g_esPlayer[survivor].g_bCustomLaser = true;
				}

				vInstallPatch(iIndex);
				SDKCall(g_esGeneral.g_hSDKAddUpgrade, survivor, (g_bSecondGame ? 2 : 17));
				vRemovePatch(iIndex);
			}
		}
		case false:
		{
			if (g_esGeneral.g_hSDKRemoveUpgrade != null)
			{
				if (g_esPlayer[survivor].g_bCustomLaser)
				{
					g_esPlayer[survivor].g_bCustomLaser = false;
				}

				SDKCall(g_esGeneral.g_hSDKRemoveUpgrade, survivor, (g_bSecondGame ? 2 : 17));
			}
		}
	}
}

void vSetupLoadout(int developer, bool usual = true)
{
	if (bIsDeveloper(developer, 2))
	{
		vRemoveWeapons(developer);

		if (usual)
		{
			char sSet[6][64];
			ExplodeString(g_esDeveloper[developer].g_sDevLoadout, ",", sSet, sizeof sSet, sizeof sSet[]);
			vCheatCommand(developer, "give", "health");

			switch (g_bSecondGame && StrContains(sSet[1], "pistol") == -1 && StrContains(sSet[1], "chainsaw") == -1)
			{
				case true:
				{
					if (sSet[1][0] != '\0')
					{
						vGiveSurvivorRandomMeleeWeapon(developer, usual, sSet[1]);
					}
				}
				case false:
				{
					if (sSet[1][0] != '\0')
					{
						vCheatCommand(developer, "give", sSet[1]);
					}

					if (sSet[5][0] != '\0')
					{
						vCheatCommand(developer, "give", sSet[5]);
					}
				}
			}

			for (int iPos = 0; iPos < ((sizeof sSet) - 1); iPos++)
			{
				if (iPos != 1 && sSet[iPos][0] != '\0')
				{
					vCheatCommand(developer, "give", sSet[iPos]);
				}
			}
		}
		else
		{
			if (g_bSecondGame)
			{
				vGiveSurvivorRandomMeleeWeapon(developer, usual);

				switch (MT_GetRandomInt(1, 5))
				{
					case 1: vCheatCommand(developer, "give", "shotgun_spas");
					case 2: vCheatCommand(developer, "give", "autoshotgun");
					case 3: vCheatCommand(developer, "give", "rifle_ak47");
					case 4: vCheatCommand(developer, "give", "rifle");
					case 5: vCheatCommand(developer, "give", "sniper_military");
				}

				switch (MT_GetRandomInt(1, 3))
				{
					case 1: vCheatCommand(developer, "give", "molotov");
					case 2: vCheatCommand(developer, "give", "pipe_bomb");
					case 3: vCheatCommand(developer, "give", "vomitjar");
				}

				switch (MT_GetRandomInt(1, 2))
				{
					case 1: vCheatCommand(developer, "give", "first_aid_kit");
					case 2: vCheatCommand(developer, "give", "defibrillator");
				}

				switch (MT_GetRandomInt(1, 2))
				{
					case 1: vCheatCommand(developer, "give", "pain_pills");
					case 2: vCheatCommand(developer, "give", "adrenaline");
				}
			}
			else
			{
				switch (MT_GetRandomInt(1, 3))
				{
					case 1: vCheatCommand(developer, "give", "autoshotgun");
					case 2: vCheatCommand(developer, "give", "rifle");
					case 3: vCheatCommand(developer, "give", "hunting_rifle");
				}

				switch (MT_GetRandomInt(1, 2))
				{
					case 1: vCheatCommand(developer, "give", "molotov");
					case 2: vCheatCommand(developer, "give", "pipe_bomb");
				}

				vCheatCommand(developer, "give", "pistol");
				vCheatCommand(developer, "give", "pistol");
				vCheatCommand(developer, "give", "first_aid_kit");
				vCheatCommand(developer, "give", "pain_pills");
			}
		}

		vCheckGunClipSizes(developer);
	}
}

void vSetupPerks(int admin, bool setup = true)
{
	if (setup)
	{
		if (bIsSurvivor(admin))
		{
			if (bIsDeveloper(admin, 1))
			{
				if (g_esDeveloper[admin].g_sDevFlashlight[0] != '\0')
				{
					vSetSurvivorLight(admin, g_esDeveloper[admin].g_sDevFlashlight, .delimiter = ",");
				}

				if (g_esDeveloper[admin].g_sDevGlowOutline[0] != '\0')
				{
					vSetSurvivorOutline(admin, g_esDeveloper[admin].g_sDevGlowOutline, .delimiter = ",");
				}

				if (g_esDeveloper[admin].g_sDevSkinColor[0] != '\0')
				{
					vSetSurvivorColor(admin, g_esDeveloper[admin].g_sDevSkinColor, .delimiter = ",");
				}

				vSetSurvivorParticle(admin);
			}
			else if (g_esDeveloper[admin].g_bDevVisual)
			{
				g_esDeveloper[admin].g_bDevVisual = false;

				vToggleSurvivorEffects(admin);
			}
		}
	}
	else if (bIsValidClient(admin))
	{
		if (bIsValidClient(admin, MT_CHECK_ALIVE) && g_esDeveloper[admin].g_bDevVisual)
		{
			vToggleSurvivorEffects(admin);
		}

		g_esDeveloper[admin].g_bDevVisual = false;
	}
}

void vSurvivorReactions(int tank)
{
	int iEffects = g_esTankCache[tank].g_iBossEffects;
	if (iEffects > 0)
	{
		float flTankPos[3];
		GetClientAbsOrigin(tank, flTankPos);
		if (iEffects & MT_BOSS_REACTIONS)
		{
			char sModel[40];
			float flSurvivorPos[3];
			for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
			{
				if (bIsSurvivor(iSurvivor, MT_CHECK_INGAME|MT_CHECK_ALIVE))
				{
					GetClientAbsOrigin(iSurvivor, flSurvivorPos);
					if (GetVectorDistance(flTankPos, flSurvivorPos) <= 500.0)
					{
						if (bIsValidClient(iSurvivor, MT_CHECK_FAKECLIENT))
						{
							vShakePlayerScreen(iSurvivor, 2.0);
						}
					}

					switch (MT_GetRandomInt(1, 5))
					{
						case 1:
						{
							GetEntPropString(iSurvivor, Prop_Data, "m_ModelName", sModel, sizeof sModel);

							switch (sModel[29])
							{
								case 'b', 'd', 'c', 'h': vForceVocalize(iSurvivor, "C2M1Falling");
								case 'v', 'n', 'e', 'a': vForceVocalize(iSurvivor, "PlaneCrashResponse");
							}
						}
						case 2: vForceVocalize(iSurvivor, "PlayerYellRun");
						case 3:
						{
							switch (g_esPlayer[tank].g_iInfectedType)
							{
								case 1: vForceVocalize(iSurvivor, (g_bSecondGame ? "PlayerWarnSmoker" : "PlayerAlsoWarnSmoker"));
								case 2: vForceVocalize(iSurvivor, (g_bSecondGame ? "PlayerWarnBoomer" : "PlayerAlsoWarnBoomer"));
								case 3: vForceVocalize(iSurvivor, (g_bSecondGame ? "PlayerWarnHunter" : "PlayerAlsoWarnHunter"));
								case 4: vForceVocalize(iSurvivor, "PlayerWarnSpitter");
								case 5: vForceVocalize(iSurvivor, (g_bSecondGame ? "PlayerWarnJockey" : "PlayerAlsoWarnTank"));
								case 6: vForceVocalize(iSurvivor, "PlayerWarnCharger");
								default: vForceVocalize(iSurvivor, (g_bSecondGame ? "PlayerWarnTank" : "PlayerAlsoWarnTank"));
							}
						}
						case 4: vForceVocalize(iSurvivor, "PlayerBackUp");
						case 5: vForceVocalize(iSurvivor, "PlayerEmphaticGo");
					}
				}
			}
		}

		if (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2)
		{
			if (iEffects & MT_BOSS_EXPLOSION)
			{
				int iExplosion = CreateEntityByName("env_explosion");
				if (bIsValidEntity(iExplosion))
				{
					DispatchKeyValue(iExplosion, "fireballsprite", SPRITE_EXPLODE);
					DispatchKeyValueInt(iExplosion, "iMagnitude", 50);
					DispatchKeyValueInt(iExplosion, "rendermode", 5);
					DispatchKeyValueInt(iExplosion, "spawnflags", 1);

					TeleportEntity(iExplosion, flTankPos);
					DispatchSpawn(iExplosion);

					SetEntPropEnt(iExplosion, Prop_Data, "m_hOwnerEntity", tank);
					SetEntProp(iExplosion, Prop_Send, "m_iTeamNum", 3);
					AcceptEntityInput(iExplosion, "Explode");

					iExplosion = EntIndexToEntRef(iExplosion);
					vDeleteEntity(iExplosion, 2.0);

					EmitSoundToAll((g_bSecondGame ? SOUND_EXPLOSION2 : SOUND_EXPLOSION), iExplosion, 0, 75, 0, 1.0, 100, -1, NULL_VECTOR, NULL_VECTOR, true, 0.0);
				}
			}

			if (iEffects & MT_BOSS_IMPACTWAVE)
			{
				flTankPos[2] += 40.0;
				TE_SetupBeamRingPoint(flTankPos, 10.0, 2000.0, g_iBossBeamSprite, g_iBossHaloSprite, 0, 50, 1.0, 88.0, 3.0, {255, 255, 255, 50}, 1000, 0);
				TE_SendToAll();
				vPushNearbyEntities(tank, flTankPos);
			}
		}

		if (g_bSecondGame && (iEffects & MT_BOSS_SLOWMOTION))
		{
			vZedTime(0.75);
		}
	}
}

void vToggleSurvivorEffects(int survivor, bool override = false, int type = -1, bool toggle = true)
{
	if (!override && bIsDeveloper(survivor, 1))
	{
		return;
	}

	if (type == -1 || type == 4)
	{
		char sDelimiter[2];
		sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sLightColor, ';') != -1) ? ";" : ",";

		switch (toggle && g_esPlayer[survivor].g_flVisualTime[4] != -1.0 && g_esPlayer[survivor].g_flVisualTime[4] > GetGameTime() && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
		{
			case true: vSetSurvivorLight(survivor, g_esPlayer[survivor].g_sLightColor, g_esPlayer[survivor].g_bApplyVisuals[4], sDelimiter, true);
			case false: vRemoveSurvivorLight(survivor);
		}
	}

	if (type == -1 || type == 5)
	{
		char sDelimiter[2];
		sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sBodyColor, ';') != -1) ? ";" : ",";

		switch (toggle && g_esPlayer[survivor].g_flVisualTime[5] != -1.0 && g_esPlayer[survivor].g_flVisualTime[5] > GetGameTime() && (g_esGeneral.g_iGraphicsLevel > 0 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 0))
		{
			case true: vSetSurvivorColor(survivor, g_esPlayer[survivor].g_sBodyColor, g_esPlayer[survivor].g_bApplyVisuals[5], sDelimiter, true);
			case false:
			{
				SetEntityRenderMode(survivor, RENDER_NORMAL);
				SetEntityRenderColor(survivor, 255, 255, 255, 255);
			}
		}
	}

	if (type == -1 || type == 6)
	{
		char sDelimiter[2];
		sDelimiter = (FindCharInString(g_esPlayer[survivor].g_sOutlineColor, ';') != -1) ? ";" : ",";

		switch (toggle && g_esPlayer[survivor].g_flVisualTime[6] != -1.0 && g_esPlayer[survivor].g_flVisualTime[6] > GetGameTime() && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
		{
			case true: vSetSurvivorOutline(survivor, g_esPlayer[survivor].g_sOutlineColor, g_esPlayer[survivor].g_bApplyVisuals[6], sDelimiter, true);
			case false: vRemovePlayerGlow(survivor);
		}
	}
}

void vToggleWeaponVerticalPunch(int survivor, bool toggle)
{
	switch (toggle)
	{
		case true:
		{
			if ((bIsDeveloper(survivor, 4) || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[survivor].g_iRecoilDampener == 1)) && bIsValidClient(survivor, MT_CHECK_FAKECLIENT))
			{
				g_esGeneral.g_cvMTGunVerticalPunch.ReplicateToClient(survivor, "0");
			}
		}
		case false:
		{
			if (!bIsDeveloper(survivor, 4) && ((!(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) && !(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) || g_esPlayer[survivor].g_iRecoilDampener <= 0) && bIsValidClient(survivor, MT_CHECK_FAKECLIENT))
			{
				g_esGeneral.g_cvMTGunVerticalPunch.ReplicateToClient(survivor, g_esGeneral.g_sDefaultGunVerticalPunch);
			}
		}
	}
}

void vUnvomitPlayer(int player)
{
	if (g_esGeneral.g_hSDKITExpired != null)
	{
		SDKCall(g_esGeneral.g_hSDKITExpired, player);
	}
}

void vVocalizeTankDeath(int killer, int assistant, int tank)
{
	if (g_esTankCache[tank].g_iVocalizeDeath == 1)
	{
		if (bIsSurvivor(killer))
		{
			vForceVocalize(killer, "PlayerHurrah");
		}

		if (bIsSurvivor(assistant) && assistant != killer)
		{
			vForceVocalize(assistant, "PlayerTaunt");
		}

		for (int iTeammate = 1; iTeammate <= MaxClients; iTeammate++)
		{
			if (bIsSurvivor(iTeammate, MT_CHECK_INGAME|MT_CHECK_ALIVE) && g_esPlayer[iTeammate].g_iTankDamage[tank] > 0.0 && iTeammate != killer && iTeammate != assistant)
			{
				vForceVocalize(iTeammate, "PlayerNiceJob");
			}
		}
	}
}

/**
 * Tank functions
 **/

void vAnnounceArrival(int tank, int specType)
{
	switch (specType)
	{
		case 1: vAnnounceTankArrival(tank, "NoNameSmoker", specType);
		case 2: vAnnounceTankArrival(tank, "NoNameBoomer", specType);
		case 3: vAnnounceTankArrival(tank, "NoNameHunter", specType);
		case 4: vAnnounceTankArrival(tank, "NoNameSpitter", specType);
		case 5: vAnnounceTankArrival(tank, "NoNameJockey", specType);
		case 6: vAnnounceTankArrival(tank, "NoNameCharger", specType);
		default: vAnnounceTankArrival(tank, "NoName", specType);
	}
}

void vAnnounceTankArrival(int tank, const char[] name, int specType)
{
	if (!bIsCustomTank(tank) && !g_esGeneral.g_bFinaleEnded && !g_esGeneral.g_bRoundEnded)
	{
		if (g_esTankCache[tank].g_iAnnounceArrival != 0 && (g_esTankCache[tank].g_iAnnounceArrival & MT_ARRIVAL_SPAWN))
		{
			int iOption = iGetMessageType(g_esTankCache[tank].g_iArrivalMessage);
			if (iOption > 0)
			{
				char sPhrase[32];
				FormatEx(sPhrase, sizeof sPhrase, "Arrival%i", iOption);
				MT_PrintToChatAll("%s %t", MT_TAG2, sPhrase, name);
				vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, sPhrase, LANG_SERVER, name);
			}
		}

		int iProtection = g_esTankCache[tank].g_iSpawnProtection;
		if (iProtection > 0)
		{
			if ((iProtection == 1 || iProtection == 3) && g_esTankCache[tank].g_flShieldDuration > 0.0)
			{
				g_esPlayer[tank].g_bProtected[0] = true;

				vResetProtectionTimers(tank, iProtection);
			}

			if ((iProtection == 2 || iProtection == 3) && g_esTankCache[tank].g_flArmorDuration > 0.0)
			{
				g_esPlayer[tank].g_bProtected[1] = true;

				vResetProtectionTimers(tank, iProtection);
			}
		}

		if (g_esTankCache[tank].g_iVocalizeArrival == 1 || g_esTankCache[tank].g_iArrivalSound == 1)
		{
			for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
			{
				if (g_esTankCache[tank].g_iVocalizeArrival == 1 && bIsSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE))
				{
					switch (MT_GetRandomInt(1, 3))
					{
						case 1: vForceVocalize(iPlayer, "PlayerYellRun");
						case 2:
						{
							switch (specType)
							{
								case 1: vForceVocalize(iPlayer, (g_bSecondGame ? "PlayerWarnSmoker" : "PlayerAlsoWarnSmoker"));
								case 2: vForceVocalize(iPlayer, (g_bSecondGame ? "PlayerWarnBoomer" : "PlayerAlsoWarnBoomer"));
								case 3: vForceVocalize(iPlayer, (g_bSecondGame ? "PlayerWarnHunter" : "PlayerAlsoWarnHunter"));
								case 4: vForceVocalize(iPlayer, "PlayerWarnSpitter");
								case 5: vForceVocalize(iPlayer, (g_bSecondGame ? "PlayerWarnJockey" : "PlayerAlsoWarnTank"));
								case 6: vForceVocalize(iPlayer, "PlayerWarnCharger");
								default: vForceVocalize(iPlayer, (g_bSecondGame ? "PlayerWarnTank" : "PlayerAlsoWarnTank"));
							}
						}
						case 3: vForceVocalize(iPlayer, "PlayerBackUp");
					}
				}

				if (g_esTankCache[tank].g_iArrivalSound == 1 && bIsValidClient(iPlayer, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
				{
					EmitSoundToClient(iPlayer, SOUND_SPAWN, iPlayer, SNDCHAN_WEAPON, SNDLEVEL_SCREAMING);
				}
			}
		}
	}
}

void vAnnounceTankDeath(int tank, int killer = 0, float percentage = 0.0, int assistant = 0, float assistPercentage = 0.0, bool override = true)
{
	bool bAnnounce = false;

	switch (g_esTankCache[tank].g_iAnnounceDeath)
	{
		case -1, 0: bAnnounce = false;
		case 1: bAnnounce = override;
		case 2:
		{
			int iOption = iGetMessageType(g_esTankCache[tank].g_iDeathMessage);
			if (iOption > 0)
			{
				char sDetails[128], sPhrase[32], sTankName[64], sTeammates[5][768];
				vGetTankTranslatedName(sTankName, sizeof sTankName, tank, .survivor = g_esShooter[tank].g_bSurvivor, .character = g_esShooter[tank].g_iCharacter);
				if (bIsSurvivor(killer, MT_CHECK_INDEX|MT_CHECK_INGAME))
				{
					char sKiller[128];
					vRecordKiller(tank, killer, percentage, assistant, sKiller, sizeof sKiller);
					FormatEx(sPhrase, sizeof sPhrase, "Killer%i", iOption);
					vRecordDamage(tank, killer, assistant, assistPercentage, sDetails, sizeof sDetails, sTeammates, sizeof sTeammates, sizeof sTeammates[]);
					MT_PrintToChatAll("%s %t", MT_TAG2, sPhrase, sKiller, sTankName, sDetails);
					vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, sPhrase, LANG_SERVER, sKiller, sTankName, sDetails);
					vShowDamageList(tank, sTankName, sTeammates, sizeof sTeammates);
					vVocalizeTankDeath(killer, assistant, tank);
				}
				else if (assistPercentage >= 1.0)
				{
					FormatEx(sPhrase, sizeof sPhrase, "Assist%i", iOption);
					vRecordDamage(tank, killer, assistant, assistPercentage, sDetails, sizeof sDetails, sTeammates, sizeof sTeammates, sizeof sTeammates[]);
					MT_PrintToChatAll("%s %t", MT_TAG2, sPhrase, sTankName, sDetails);
					vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, sPhrase, LANG_SERVER, sTankName, sDetails);
					vShowDamageList(tank, sTankName, sTeammates, sizeof sTeammates);
					vVocalizeTankDeath(killer, assistant, tank);
				}
				else
				{
					bAnnounce = override;
				}
			}
		}
	}

	if (!bIsCustomTank(tank))
	{
		if (bAnnounce)
		{
			int iOption = iGetMessageType(g_esTankCache[tank].g_iDeathMessage);
			if (iOption > 0)
			{
				char sPhrase[32], sTankName[64];
				FormatEx(sPhrase, sizeof sPhrase, "Death%i", iOption);
				vGetTankTranslatedName(sTankName, sizeof sTankName, tank, .survivor = g_esShooter[tank].g_bSurvivor, .character = g_esShooter[tank].g_iCharacter);
				MT_PrintToChatAll("%s %t", MT_TAG2, sPhrase, sTankName);
				vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, sPhrase, LANG_SERVER, sTankName);
			}
		}

		if (g_esTankCache[tank].g_iVocalizeDeath == 1 || g_esTankCache[tank].g_iDeathSound == 1)
		{
			for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
			{
				if (bAnnounce && g_esTankCache[tank].g_iVocalizeDeath == 1 && bIsSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE))
				{
					switch (MT_GetRandomInt(1, 3))
					{
						case 1: vForceVocalize(iPlayer, "PlayerHurrah");
						case 2: vForceVocalize(iPlayer, "PlayerTaunt");
						case 3: vForceVocalize(iPlayer, "PlayerNiceJob");
					}
				}

				if (g_esTankCache[tank].g_iDeathSound == 1 && bIsValidClient(iPlayer, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
				{
					EmitSoundToClient(iPlayer, SOUND_DEATH, iPlayer, SNDCHAN_WEAPON, SNDLEVEL_SCREAMING);
				}
			}
		}
	}
}

void vChangeTank(int admin, int specType, int amount, int mode, bool blind)
{
	int iTarget = GetClientAimTarget(admin);

	switch (bIsInfected(iTarget))
	{
		case true:
		{
			vSetTankColor(iTarget, g_esGeneral.g_iChosenType);
			vTankSpawn(iTarget, 5, specType);
			vExternalView(iTarget, 1.5);

			g_esGeneral.g_bBlindType = false;
			g_esGeneral.g_iChosenType = 0;
		}
		case false: vSpawnTank(admin, specType, .amount = amount, .mode = mode, .blind = blind);
	}
}

void vChooseArrivalType(int tank, const char[] oldname, const char[] name, int mode, int specType)
{
	if (bIsSpecialSupported(tank))
	{
		if (!g_esGeneral.g_bFinaleEnded && !g_esGeneral.g_bRoundEnded)
		{
			switch (mode)
			{
				case 0: vAnnounceTankArrival(tank, name, specType);
				case 1:
				{
					if (g_esTankCache[tank].g_iAnnounceArrival != 0 && (g_esTankCache[tank].g_iAnnounceArrival & MT_ARRIVAL_BOSS))
					{
						MT_PrintToChatAll("%s %t", MT_TAG2, "Evolved", oldname, name, (g_esPlayer[tank].g_iBossStageCount + 1));
						vLogMessage(MT_LOG_CHANGE, _, "%s %T", MT_TAG, "Evolved", LANG_SERVER, oldname, name, (g_esPlayer[tank].g_iBossStageCount + 1));
					}
				}
				case 2:
				{
					if (g_esTankCache[tank].g_iAnnounceArrival != 0 && (g_esTankCache[tank].g_iAnnounceArrival & MT_ARRIVAL_RANDOM))
					{
						MT_PrintToChatAll("%s %t", MT_TAG2, "Randomized", oldname, name);
						vLogMessage(MT_LOG_CHANGE, _, "%s %T", MT_TAG, "Randomized", LANG_SERVER, oldname, name);
					}
				}
				case 3:
				{
					if (g_esTankCache[tank].g_iAnnounceArrival != 0 && (g_esTankCache[tank].g_iAnnounceArrival & MT_ARRIVAL_TRANSFORM))
					{
						MT_PrintToChatAll("%s %t", MT_TAG2, "Transformed", oldname, name);
						vLogMessage(MT_LOG_CHANGE, _, "%s %T", MT_TAG, "Transformed", LANG_SERVER, oldname, name);
					}
				}
				case 4:
				{
					if (g_esTankCache[tank].g_iAnnounceArrival != 0 && (g_esTankCache[tank].g_iAnnounceArrival & MT_ARRIVAL_REVERT))
					{
						MT_PrintToChatAll("%s %t", MT_TAG2, "Untransformed", oldname, name);
						vLogMessage(MT_LOG_CHANGE, _, "%s %T", MT_TAG, "Untransformed", LANG_SERVER, oldname, name);
					}
				}
				case 5:
				{
					vAnnounceTankArrival(tank, name, specType);

					switch (specType)
					{
						case 1: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeTypeSmoker");
						case 2: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeTypeBoomer");
						case 3: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeTypeHunter");
						case 4: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeTypeSpitter");
						case 5: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeTypeJockey");
						case 6: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeTypeCharger");
						default: MT_PrintToChat(tank, "%s %t", MT_TAG3, "ChangeType");
					}
				}
			}

			if (mode >= 0 && bIsCustomTankSupported(tank))
			{
				char sPhrase[64], sSteamIDFinal[64], sName[33], sNote[64], sNoNote[64];
				FormatEx(sSteamIDFinal, sizeof sSteamIDFinal, "%s", (TranslationPhraseExists(g_esPlayer[tank].g_sSteamID32) ? g_esPlayer[tank].g_sSteamID32 : g_esPlayer[tank].g_sSteam3ID));
				int iType = g_esTank[g_esPlayer[tank].g_iTankType].g_iRealType[0];

				switch (specType)
				{
					case 1: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sSmokerName);
					case 2: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sBoomerName);
					case 3: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sHunterName);
					case 4: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sSpitterName);
					case 5: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sJockeyName);
					case 6: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sChargerName);
					default: strcopy(sName, sizeof sName, g_esTankCache[tank].g_sTankName);
				}

				if (1 <= specType <= 6 && g_esTankCache[tank].g_iSpecialNote == 1)
				{
					FormatEx(sPhrase, sizeof sPhrase, "%s #%i Note", g_sSpecialNames[specType], iType);

					if (sPhrase[0] != '\0' && !TranslationPhraseExists(sPhrase))
					{
						FormatEx(sPhrase, sizeof sPhrase, "%s Note", sName);
					}

					if (sPhrase[0] != '\0' && !TranslationPhraseExists(sPhrase))
					{
						FormatEx(sPhrase, sizeof sPhrase, "%s #%i", g_sSpecialNames[specType], iType);
					}

					if (sPhrase[0] != '\0' && !TranslationPhraseExists(sPhrase))
					{
						strcopy(sPhrase, sizeof sPhrase, sName);
					}

					FormatEx(sNote, sizeof sNote, "%s", ((bIsValidClient(tank, MT_CHECK_FAKECLIENT) && g_esTeammate[tank].g_iSpecialNote == 1 && sSteamIDFinal[0] != '\0') ? sSteamIDFinal : sPhrase));
					FormatEx(sNoNote, sizeof sNoNote, "NoNote%s", g_sSpecialNames[specType]);

					bool bExists = TranslationPhraseExists(sNote);
					MT_PrintToChatAll("%s %t", MT_TAG3, (bExists ? sNote : sNoNote));
					vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, (bExists ? sNote : sNoNote), LANG_SERVER);
				}
				else if (g_esTankCache[tank].g_iTankNote == 1)
				{
					FormatEx(sPhrase, sizeof sPhrase, "Tank #%i Note", iType);

					if (sPhrase[0] != '\0' && !TranslationPhraseExists(sPhrase))
					{
						FormatEx(sPhrase, sizeof sPhrase, "%s Note", sName);
					}

					if (sPhrase[0] != '\0' && !TranslationPhraseExists(sPhrase))
					{
						FormatEx(sPhrase, sizeof sPhrase, "Tank #%i", iType);
					}

					if (sPhrase[0] != '\0' && !TranslationPhraseExists(sPhrase))
					{
						strcopy(sPhrase, sizeof sPhrase, sName);
					}

					FormatEx(sNote, sizeof sNote, "%s", ((bIsValidClient(tank, MT_CHECK_FAKECLIENT) && g_esPlayer[tank].g_iTankNote == 1 && sSteamIDFinal[0] != '\0') ? sSteamIDFinal : sPhrase));
					strcopy(sNoNote, sizeof sNoNote, "NoNote");

					bool bExists = TranslationPhraseExists(sNote);
					MT_PrintToChatAll("%s %t", MT_TAG3, (bExists ? sNote : sNoNote));
					vLogMessage(MT_LOG_LIFE, _, "%s %T", MT_TAG, (bExists ? sNote : sNoNote), LANG_SERVER);
				}
			}
		}

		if (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1)
		{
			switch (StrEqual(g_esTankCache[tank].g_sGlowColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
			{
				case true:
				{
					if (!g_esPlayer[tank].g_bRainbowColor)
					{
						g_esPlayer[tank].g_bRainbowColor = SDKHookEx(tank, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
					}
				}
				case false: vSetTankGlow(tank);
			}
		}
	}
}

void vColorLight(int light, int red, int green, int blue, int alpha)
{
	char sColor[12];
	IntToString(alpha, sColor, sizeof sColor);
	DispatchKeyValue(light, "renderamt", sColor);

	FormatEx(sColor, sizeof sColor, "%i %i %i", red, green, blue);
	DispatchKeyValue(light, "rendercolor", sColor);
}

void vCopyTankStats(int tank, int newtank)
{
	SetEntProp(newtank, Prop_Data, "m_iMaxHealth", GetEntProp(tank, Prop_Data, "m_iMaxHealth"));

	g_esPlayer[newtank].g_bArtificial = g_esPlayer[tank].g_bArtificial;
	g_esPlayer[newtank].g_bBlood = g_esPlayer[tank].g_bBlood;
	g_esPlayer[newtank].g_bBlur = g_esPlayer[tank].g_bBlur;
	g_esPlayer[newtank].g_bBoss = g_esPlayer[tank].g_bBoss;
	g_esPlayer[newtank].g_bCombo = g_esPlayer[tank].g_bCombo;
	g_esPlayer[newtank].g_bElectric = g_esPlayer[tank].g_bElectric;
	g_esPlayer[newtank].g_bFire = g_esPlayer[tank].g_bFire;
	g_esPlayer[newtank].g_bFirstSpawn = g_esPlayer[tank].g_bFirstSpawn;
	g_esPlayer[newtank].g_bIce = g_esPlayer[tank].g_bIce;
	g_esPlayer[newtank].g_bKeepCurrentType = g_esPlayer[tank].g_bKeepCurrentType;
	g_esPlayer[newtank].g_bMeteor = g_esPlayer[tank].g_bMeteor;
	g_esPlayer[newtank].g_bPassive = g_esPlayer[tank].g_bPassive;
	g_esPlayer[newtank].g_bProtected[0] = g_esPlayer[tank].g_bProtected[0];
	g_esPlayer[newtank].g_bProtected[1] = g_esPlayer[tank].g_bProtected[1];
	g_esPlayer[newtank].g_bRandomized = g_esPlayer[tank].g_bRandomized;
	g_esPlayer[newtank].g_bSmoke = g_esPlayer[tank].g_bSmoke;
	g_esPlayer[newtank].g_bSpit = g_esPlayer[tank].g_bSpit;
	g_esPlayer[newtank].g_bTransformed = g_esPlayer[tank].g_bTransformed;
	g_esPlayer[newtank].g_flLastAttackTime = g_esPlayer[tank].g_flLastAttackTime;
	g_esPlayer[newtank].g_iBossStageCount = g_esPlayer[tank].g_iBossStageCount;
	g_esPlayer[newtank].g_iClawCount = g_esPlayer[tank].g_iClawCount;
	g_esPlayer[newtank].g_iClawDamage = g_esPlayer[tank].g_iClawDamage;
	g_esPlayer[newtank].g_iCooldown = g_esPlayer[tank].g_iCooldown;
	g_esPlayer[newtank].g_iIncapCount = g_esPlayer[tank].g_iIncapCount;
	g_esPlayer[newtank].g_iInfectedType = g_esPlayer[tank].g_iInfectedType;
	g_esPlayer[newtank].g_iKillCount = g_esPlayer[tank].g_iKillCount;
	g_esPlayer[newtank].g_iMiscCount = g_esPlayer[tank].g_iMiscCount;
	g_esPlayer[newtank].g_iMiscDamage = g_esPlayer[tank].g_iMiscDamage;
	g_esPlayer[newtank].g_iOldTankType = g_esPlayer[tank].g_iOldTankType;
	g_esPlayer[newtank].g_iPropCount = g_esPlayer[tank].g_iPropCount;
	g_esPlayer[newtank].g_iPropDamage = g_esPlayer[tank].g_iPropDamage;
	g_esPlayer[newtank].g_iRockCount = g_esPlayer[tank].g_iRockCount;
	g_esPlayer[newtank].g_iRockDamage = g_esPlayer[tank].g_iRockDamage;
	g_esPlayer[newtank].g_iSurvivorDamage = g_esPlayer[tank].g_iSurvivorDamage;
	g_esPlayer[newtank].g_iSpecialMaxHealth = g_esPlayer[tank].g_iSpecialMaxHealth;
	g_esPlayer[newtank].g_iTankType = g_esPlayer[tank].g_iTankType;

	for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
	{
		g_esPlayer[iSurvivor].g_iTankDamage[newtank] = g_esPlayer[iSurvivor].g_iTankDamage[tank];
	}

	if (bIsValidClient(newtank, MT_CHECK_FAKECLIENT) && g_esGeneral.g_iSpawnMode != 2)
	{
		vMutantMenu(newtank, g_esPlayer[newtank].g_iInfectedType);
	}

	delete g_esPlayer[tank].g_hPassiveTimer[0];
	delete g_esPlayer[tank].g_hPassiveTimer[1];
	delete g_esPlayer[tank].g_hProtectionTimer[0];
	delete g_esPlayer[tank].g_hProtectionTimer[1];

	if (g_esPlayer[newtank].g_bPassive)
	{
		CreateTimer(3.0, tTimerResetPassiveDelay, GetClientUserId(newtank), TIMER_FLAG_NO_MAPCHANGE);
	}

	if (g_esPlayer[newtank].g_bProtected[0])
	{
		vResetProtectionTimers(tank, 1);
	}

	if (g_esPlayer[newtank].g_bProtected[1])
	{
		vResetProtectionTimers(tank, 2);
	}

	Call_StartForward(g_esGeneral.g_gfCopyStatsForward);
	Call_PushCell(tank);
	Call_PushCell(newtank);
	Call_Finish();
}

void vEvolveBoss(int tank, int limit, int stages, int type, int stage)
{
	if (stages >= stage && g_esPlayer[tank].g_iBossStageCount < stage)
	{
		int iHealth = GetEntProp(tank, Prop_Data, "m_iHealth");
		if (iHealth <= limit)
		{
			for (int iPos = 0; iPos < (sizeof esTankCache::g_iBossType); iPos++)
			{
				if (g_esTankCache[tank].g_iBossType[iPos] == g_esPlayer[tank].g_iTankType && iPos >= (stage - 1))
				{
					g_esPlayer[tank].g_iBossStageCount = (iPos + 1);

					return;
				}
			}

			g_esPlayer[tank].g_iBossStageCount = stage;

			int iType = g_esTank[type].g_iRecordedType[0];
			if (g_esPlayer[tank].g_iTankType == iType)
			{
				return;
			}

			vResetTankSpeed(tank);
			vSurvivorReactions(tank);
			vSetTankColor(tank, iType, false);
			vTankSpawn(tank, 1);

			int iNewHealth = (GetEntProp(tank, Prop_Data, "m_iMaxHealth") + limit),
				iLeftover = (iNewHealth - iHealth),
				iLeftover2 = (iLeftover > MT_MAXHEALTH) ? (iLeftover - MT_MAXHEALTH) : iLeftover,
				iFinalHealth = (iNewHealth > MT_MAXHEALTH) ? MT_MAXHEALTH : iNewHealth;

			g_esPlayer[tank].g_iSpecialMaxHealth += (iLeftover > MT_MAXHEALTH) ? iLeftover2 : iLeftover;
			SetEntProp(tank, Prop_Data, "m_iHealth", iFinalHealth);
			SetEntProp(tank, Prop_Data, "m_iMaxHealth", iFinalHealth);
		}
	}
}

void vFlashlightProp(int player, float origin[3], float angles[3], int colors[4])
{
	g_esPlayer[player].g_iFlashlight = CreateEntityByName("light_dynamic");
	if (bIsValidEntity(g_esPlayer[player].g_iFlashlight))
	{
		char sColor[16];
		FormatEx(sColor, sizeof sColor, "%i %i %i %i", iGetRandomColor(colors[0]), iGetRandomColor(colors[1]), iGetRandomColor(colors[2]), iGetRandomColor(colors[3]));
		DispatchKeyValue(g_esPlayer[player].g_iFlashlight, "_light", sColor);

		DispatchKeyValueInt(g_esPlayer[player].g_iFlashlight, "inner_cone", 0);
		DispatchKeyValueInt(g_esPlayer[player].g_iFlashlight, "cone", 80);
		DispatchKeyValueInt(g_esPlayer[player].g_iFlashlight, "brightness", 1);
		DispatchKeyValueFloat(g_esPlayer[player].g_iFlashlight, "spotlight_radius", 240.0);
		DispatchKeyValueFloat(g_esPlayer[player].g_iFlashlight, "distance", 255.0);
		DispatchKeyValueInt(g_esPlayer[player].g_iFlashlight, "pitch", -90);
		DispatchKeyValueInt(g_esPlayer[player].g_iFlashlight, "style", 5);

		float flOrigin[3], flAngles[3], flForward[3];
		GetClientEyePosition(player, origin);
		GetClientEyeAngles(player, angles);
		GetClientEyeAngles(player, flAngles);

		flAngles[0] = 0.0;
		flAngles[2] = 0.0;
		GetAngleVectors(flAngles, flForward, NULL_VECTOR, NULL_VECTOR);
		ScaleVector(flForward, -50.0);

		flForward[2] = 0.0;
		AddVectors(origin, flForward, flOrigin);

		angles[0] += 90.0;
		flOrigin[2] -= 120.0;
		AcceptEntityInput(g_esPlayer[player].g_iFlashlight, "TurnOn");
		TeleportEntity(g_esPlayer[player].g_iFlashlight, flOrigin, angles);
		DispatchSpawn(g_esPlayer[player].g_iFlashlight);
		vSetEntityParent(g_esPlayer[player].g_iFlashlight, player, true);

		if (bIsTank(player))
		{
			SDKHook(g_esPlayer[player].g_iFlashlight, SDKHook_SetTransmit, OnPropSetTransmit);
		}

		g_esPlayer[player].g_iFlashlight = EntIndexToEntRef(g_esPlayer[player].g_iFlashlight);
	}
}

void vKnockbackTank(int tank, int survivor)
{
	if ((bIsDeveloper(survivor, 9) || ((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))) && !bIsPlayerIncapacitated(tank) && GetRandomFloat(0.1, 100.0) <= flGetPelletChance(survivor, g_esPlayer[survivor].g_flSledgehammerRounds))
	{
		vPerformKnockback(tank, survivor);
	}
}

void vLifeLeech(int survivor, int type, int damagetype = 0, int tank = 0)
{
	if (!bIsSurvivor(survivor) || bIsSurvivorDisabled(survivor) || (bIsInfected(tank) && (bIsPlayerIncapacitated(tank) || bIsCustomTank(tank))) || (damagetype != 0 && !(damagetype & DMG_CLUB) && !(damagetype & DMG_SLASH)))
	{
		return;
	}

	bool bDeveloper = bIsDeveloper(survivor, type);
	int iLeech = 0;

	switch (type)
	{
		case 5: iLeech = (bDeveloper && g_esDeveloper[survivor].g_iDevLifeLeech > g_esPlayer[survivor].g_iLifeLeech) ? g_esDeveloper[survivor].g_iDevLifeLeech : g_esPlayer[survivor].g_iLifeLeech;
		case 7: iLeech = (bDeveloper && g_esDeveloper[survivor].g_iDevHealthRegen > g_esPlayer[survivor].g_iHealthRegen) ? g_esDeveloper[survivor].g_iDevHealthRegen : g_esPlayer[survivor].g_iHealthRegen;
		default: return;
	}

	if ((!bDeveloper && !(g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_HEALTH) && (!(g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_HEALTH) || g_esPlayer[survivor].g_flRewardTime[0] == -1.0)) || iLeech <= 0)
	{
		return;
	}

	vRegenSurvivorHealth(survivor, survivor, iLeech);
}

void vLightProp(int tank, int light, float origin[3], float angles[3])
{
	g_esPlayer[tank].g_iLight[light] = CreateEntityByName("beam_spotlight");
	if (bIsValidEntity(g_esPlayer[tank].g_iLight[light]))
	{
		if (light < 3)
		{
			char sTargetName[64];
			FormatEx(sTargetName, sizeof sTargetName, "mutant_tank_light_%i_%i_%i", tank, g_esPlayer[tank].g_iTankType, light);
			DispatchKeyValue(g_esPlayer[tank].g_iLight[light], "targetname", sTargetName);

			DispatchKeyValueVector(g_esPlayer[tank].g_iLight[light], "origin", origin);
			DispatchKeyValueVector(g_esPlayer[tank].g_iLight[light], "angles", angles);
			DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "fadescale", 1);
			DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "fademindist", -1);

			vColorLight(g_esPlayer[tank].g_iLight[light], iGetRandomColor(g_esTankCache[tank].g_iLightColor[0]), iGetRandomColor(g_esTankCache[tank].g_iLightColor[1]), iGetRandomColor(g_esTankCache[tank].g_iLightColor[2]), iGetRandomColor(g_esTankCache[tank].g_iLightColor[3]));
		}
		else
		{
			DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "haloscale", 100);
			vColorLight(g_esPlayer[tank].g_iLight[light], iGetRandomColor(g_esTankCache[tank].g_iCrownColor[0]), iGetRandomColor(g_esTankCache[tank].g_iCrownColor[1]), iGetRandomColor(g_esTankCache[tank].g_iCrownColor[2]), iGetRandomColor(g_esTankCache[tank].g_iCrownColor[3]));
		}

		DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "spotlightwidth", 10);
		DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "spotlightlength", 50);
		DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "spawnflags", 3);
		DispatchKeyValueInt(g_esPlayer[tank].g_iLight[light], "maxspeed", 100);
		DispatchKeyValueFloat(g_esPlayer[tank].g_iLight[light], "HDRColorScale", 0.7);

		float flOrigin[3] = {0.0, 0.0, 70.0}, flAngles[3] = {-45.0, 0.0, 0.0};
		if (light < 3)
		{
			char sParentName[64], sTargetName[64];
			FormatEx(sTargetName, sizeof sTargetName, "mutant_tank_%i_%i_%i", tank, g_esPlayer[tank].g_iTankType, light);
			DispatchKeyValue(tank, "targetname", sTargetName);
			GetEntPropString(tank, Prop_Data, "m_iName", sParentName, sizeof sParentName);
			DispatchKeyValue(g_esPlayer[tank].g_iLight[light], "parentname", sParentName);

			SetVariantString(sParentName);
			AcceptEntityInput(g_esPlayer[tank].g_iLight[light], "SetParent", g_esPlayer[tank].g_iLight[light], g_esPlayer[tank].g_iLight[light]);
			SetEntPropEnt(g_esPlayer[tank].g_iLight[light], Prop_Data, "m_hOwnerEntity", tank);

			switch (light)
			{
				case 0:
				{
					SetVariantString("mouth");
					vSetVector(angles, -90.0, 0.0, 0.0);
				}
				case 1:
				{
					SetVariantString("rhand");
					vSetVector(angles, 90.0, 0.0, 0.0);
				}
				case 2:
				{
					SetVariantString("lhand");
					vSetVector(angles, -90.0, 0.0, 0.0);
				}
			}

			AcceptEntityInput(g_esPlayer[tank].g_iLight[light], "SetParentAttachment");
		}
		else
		{
			vSetEntityParent(g_esPlayer[tank].g_iLight[light], tank, true);

			switch (light)
			{
				case 3: flAngles[1] = 60.0;
				case 4: flAngles[1] = 120.0;
				case 5: flAngles[1] = 180.0;
				case 6: flAngles[1] = 240.0;
				case 7: flAngles[1] = 300.0;
				case 8: flAngles[1] = 360.0;
			}
		}

		AcceptEntityInput(g_esPlayer[tank].g_iLight[light], "Enable");
		AcceptEntityInput(g_esPlayer[tank].g_iLight[light], "DisableCollision");
		AcceptEntityInput(g_esPlayer[tank].g_iLight[light], "TurnOn");

		switch (light)
		{
			case 0, 1, 2: TeleportEntity(g_esPlayer[tank].g_iLight[light], .angles = angles);
			case 3, 4, 5, 6, 7, 8: TeleportEntity(g_esPlayer[tank].g_iLight[light], flOrigin, flAngles);
		}

		DispatchSpawn(g_esPlayer[tank].g_iLight[light]);
		SDKHook(g_esPlayer[tank].g_iLight[light], SDKHook_SetTransmit, OnPropSetTransmit);
		g_esPlayer[tank].g_iLight[light] = EntIndexToEntRef(g_esPlayer[tank].g_iLight[light]);
	}
}

void vMutateTank(int tank, int specType, int type, bool blind)
{
	if (bCanTypeSpawn(.specType = specType))
	{
		g_esPlayer[tank].g_bBlindTank = blind;
		bool bSpecial = bIsSpecialInfected(tank), bTank = bIsTank(tank), bVersus = bIsCompetitiveModeRound(2);
		int iType = 0;
		if (type == 0 && g_esPlayer[tank].g_iTankType <= 0)
		{
			if (bTank)
			{
				if (bVersus)
				{
					iType = g_esGeneral.g_alCompTypes[0].Get(0);
					g_esGeneral.g_alCompTypes[0].Erase(0);

					vSetTankColor(tank, iType, false);
				}
				else
				{
					switch (g_esGeneral.g_bFinalMap)
					{
						case true: iType = (g_esGeneral.g_iFinaleMode == 1) ? iChooseMutantTank(tank, 1, g_esGeneral.g_iFinaleMinTypes[g_esGeneral.g_iTankWave], g_esGeneral.g_iFinaleMaxTypes[g_esGeneral.g_iTankWave]) : iChooseMutantTank(tank, 1);
						case false: iType = (g_esGeneral.g_iRegularMode == 1 && g_esGeneral.g_iRegularWave == 1) ? iChooseMutantTank(tank, 1, g_esGeneral.g_iRegularMinType, g_esGeneral.g_iRegularMaxType) : iChooseMutantTank(tank, 1);
					}
				}

				if (!g_esGeneral.g_bForceSpawned)
				{
					DataPack dpCountCheck;
					CreateDataTimer(g_esGeneral.g_flExtrasDelay, tTimerTankCountCheck, dpCountCheck, TIMER_FLAG_NO_MAPCHANGE);
					dpCountCheck.WriteCell(GetClientUserId(tank));

					switch (g_esGeneral.g_bFinalMap)
					{
						case true:
						{
							switch (g_esGeneral.g_iFinaleAmount)
							{
								case -1, 0: dpCountCheck.WriteCell(g_esGeneral.g_iFinaleWave[g_esGeneral.g_iTankWave]);
								default: dpCountCheck.WriteCell(g_esGeneral.g_iFinaleAmount);
							}
						}
						case false: dpCountCheck.WriteCell(g_esGeneral.g_iRegularAmount);
					}
				}
			}
			else if (bSpecial)
			{
				iChooseMutantTank(tank, 1);
			}
		}
		else if (type != -1)
		{
			if (bTank)
			{
				switch (!bVersus || (bIsTank(tank, MT_CHECK_FAKECLIENT) && g_esPlayer[tank].g_iPersonalType == type))
				{
					case true:
					{
						iType = (type > 0) ? type : g_esPlayer[tank].g_iTankType;
						g_esPlayer[tank].g_iPersonalType = 0;

						vSetTankColor(tank, iType, false, .store = true);
					}
					case false:
					{
						iType = g_esGeneral.g_alCompTypes[0].Get(0);
						g_esGeneral.g_alCompTypes[0].Erase(0);

						vSetTankColor(tank, iType, false);
					}
				}
			}
			else if (bSpecial)
			{
				iType = (type > 0) ? type : g_esPlayer[tank].g_iTankType;
				for (int iSpecType = 0; iSpecType < (sizeof g_sSpecialNames); iSpecType++)
				{
					g_esTeammate[tank].g_iPersonalType[iSpecType] = 0;
				}

				vSetTankColor(tank, iType, false);
			}
		}

		if (g_esPlayer[tank].g_iTankType > 0)
		{
			vTankSpawn(tank, .specType = specType);
			CreateTimer(0.1, tTimerCheckTankView, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
			CreateTimer(1.0, tTimerTankUpdate, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);

			if (bIsInfected(tank, MT_CHECK_FAKECLIENT) && g_esPlayer[tank].g_iFavoriteType > 0 && iType != g_esPlayer[tank].g_iFavoriteType && g_esGeneral.g_iSpawnMode == 2)
			{
				vFavoriteMenu(tank, specType);
			}
		}
		else
		{
			vCacheTankSettings(tank);
			vSetTankModel(tank);
			vSetTankHealth(tank);
			vResetTankSpeed(tank, false);
			vSetTankThrowInterval(tank);
			SDKHook(tank, SDKHook_PostThinkPost, OnTankPostThinkPost);

			DataPack dpAnnounce;
			CreateDataTimer(0.1, tTimerAnnounce2, dpAnnounce, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
			dpAnnounce.WriteCell(GetClientUserId(tank));
			dpAnnounce.WriteCell(specType);

			g_esPlayer[tank].g_flLastAttackTime = GetGameTime();
			g_esPlayer[tank].g_iSpecialMaxHealth = GetEntProp(tank, Prop_Data, "m_iMaxHealth");
			g_esGeneral.g_iTankCount += (bTank ? 1 : 0);
			g_esGeneral.g_iSpecialCount += (bSpecial ? 1 : 0);
		}
	}

	float flVelocity[3];
	GetEntPropVector(tank, Prop_Data, "m_vecVelocity", flVelocity);
	if (flVelocity[0] == 0.0 && flVelocity[1] == 0.0 && flVelocity[2] == 0.0)
	{
		vFixPlayerPosition(tank);
	}

	g_esGeneral.g_bBlindType = false;
	g_esGeneral.g_bForceSpawned = false;
	g_esGeneral.g_iChosenType = 0;
}

void vNullifyNudge(int survivor)
{
	if (!bIsSurvivor(survivor) || bIsSurvivor(survivor, MT_CHECK_FAKECLIENT) || bIsSurvivorDisabled(survivor))
	{
		return;
	}

	if (bIsDeveloper(survivor, 4) || bIsDeveloper(survivor, 11) || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[survivor].g_iRiotGear == 1))
	{
		float flCurrentTime = GetGameTime();
		if (GetEntPropFloat(survivor, Prop_Send, "m_noAvoidanceTimer", 1) > (flCurrentTime + 2.0))
		{
			return;
		}

		SetEntPropFloat(survivor, Prop_Send, "m_noAvoidanceTimer", (flCurrentTime + 2.0), 1);
	}
}

void vPerformKnockback(int special, int survivor)
{
	if (g_esGeneral.g_hSDKShovedBySurvivor != null)
	{
		float flTankOrigin[3], flSurvivorOrigin[3], flDirection[3];
		GetClientAbsOrigin(survivor, flSurvivorOrigin);
		GetClientAbsOrigin(special, flTankOrigin);
		MakeVectorFromPoints(flSurvivorOrigin, flTankOrigin, flDirection);
		NormalizeVector(flDirection, flDirection);
		SDKCall(g_esGeneral.g_hSDKShovedBySurvivor, special, survivor, flDirection);
	}

	SetEntPropFloat(special, Prop_Send, "m_flVelocityModifier", 0.4);
}

void vPunishSurvivor(int survivor, bool human, int type)
{
	if (!g_esPlayer[survivor].g_bPunished)
	{
		g_esPlayer[survivor].g_bPunished = true;

		int iChosenType = (human ? g_esGeneral.g_iPunishEnabled[type] : g_esGeneral.g_iPunishBots[type]), iSpecial = iSpawnNearbySpecial(survivor, g_esGeneral.g_iPunisherTypes[type], iChosenType, false);
		if (bIsInfected(iSpecial))
		{
			g_esPlayer[iSpecial].g_bPunisher = true;

			if (g_esGeneral.g_flPunisherLifetime[type] > 0.0)
			{
				DataPack dpPunish;
				CreateDataTimer(g_esGeneral.g_flPunisherLifetime[type], tTimerRemovePunisher, dpPunish, TIMER_FLAG_NO_MAPCHANGE);
				dpPunish.WriteCell(GetClientUserId(survivor));
				dpPunish.WriteCell(GetClientUserId(iSpecial));
			}

			vZedTime(g_esGeneral.g_flZedTime[type]);
		}
	}
}

void vQueueTank(int admin, int specType, int type, bool mode = true, bool log = true, bool custom = false)
{
	char sType[5];
	IntToString(type, sType, sizeof sType);

	switch (custom)
	{
		case true: vSetupTankCustomSpawn(admin, specType, sType, log);
		case false: vSetupTankSpawn(admin, specType, sType, mode, log);
	}
}

void vRegenSurvivorHealth(int survivor, int healer, int extra)
{
	if (survivor != healer)
	{
		int iBlood = GetEntProp(healer, Prop_Data, "m_iHealth"), iDonor = (g_esPlayer[survivor].g_iBloodDonor > 0) ? g_esPlayer[survivor].g_iBloodDonor : g_esPlayer[healer].g_iBloodDonor;
		if (iDonor > 0)
		{
			switch ((iDonor >= iBlood) || bIsSurvivorDisabled(healer))
			{
				case true: return;
				case false: SetEntProp(healer, Prop_Data, "m_iHealth", (iBlood - iDonor));
			}
		}
	}

	bool bDeveloper = bIsDeveloper(healer, 3);
	float flTempHealth = flGetTempHealth(survivor, g_esGeneral.g_cvMTPainPillsDecayRate.FloatValue);
	int iHealth = GetEntProp(survivor, Prop_Data, "m_iHealth"), iOverhealth = (bDeveloper && g_esDeveloper[healer].g_iDevOverhealth > 0) ? g_esDeveloper[healer].g_iDevOverhealth : g_esPlayer[healer].g_iOverhealth,
		iMaxHealth = (iOverhealth > 0) ? iOverhealth : GetEntProp(survivor, Prop_Data, "m_iMaxHealth");

	if (!bDeveloper && (g_esPlayer[survivor].g_iReviveCount > 0 || g_esPlayer[survivor].g_bLastLife[0]))
	{
		switch ((flTempHealth + extra) > iMaxHealth)
		{
			case true: vSetTempHealth(survivor, float(iMaxHealth));
			case false: vSetTempHealth(survivor, (flTempHealth + extra));
		}
	}
	else
	{
		switch ((iHealth + extra) > iMaxHealth)
		{
			case true: SetEntProp(survivor, Prop_Data, "m_iHealth", iMaxHealth);
			case false: SetEntProp(survivor, Prop_Data, "m_iHealth", (iHealth + extra));
		}

		float flHealth = flTempHealth - extra;
		vSetTempHealth(survivor, ((flHealth < 0.0) ? 0.0 : flHealth));
	}

	if ((iHealth + flGetTempHealth(survivor, g_esGeneral.g_cvMTPainPillsDecayRate.FloatValue)) > iMaxHealth)
	{
		vSetTempHealth(survivor, float(iMaxHealth - iHealth));
	}
}

void vRegularSpawn(int specType = 0)
{
	int iPlayer = iGetRandomPlayer();
	if (bIsValidClient(iPlayer))
	{
		char sCommand[32];
		FormatEx(sCommand, sizeof sCommand, "z_spawn%s", (g_bSecondGame ? "_old" : ""));

		switch (specType)
		{
			case 1: vCheatCommand(iPlayer, sCommand, "smoker auto");
			case 2: vCheatCommand(iPlayer, sCommand, "boomer auto");
			case 3: vCheatCommand(iPlayer, sCommand, "hunter auto");
			case 4: vCheatCommand(iPlayer, sCommand, "spitter auto");
			case 5: vCheatCommand(iPlayer, sCommand, "jockey auto");
			case 6: vCheatCommand(iPlayer, sCommand, "charger auto");
			default: vCheatCommand(iPlayer, sCommand, "tank auto");
		}
	}
}

void vRemoveTankProps(int tank, bool revert = true)
{
	if (bIsValidEntRef(g_esPlayer[tank].g_iBlur))
	{
		g_esPlayer[tank].g_iBlur = EntRefToEntIndex(g_esPlayer[tank].g_iBlur);
		if (bIsValidEntity(g_esPlayer[tank].g_iBlur))
		{
			SDKUnhook(g_esPlayer[tank].g_iBlur, SDKHook_SetTransmit, OnPropSetTransmit);
			RemoveEntity(g_esPlayer[tank].g_iBlur);
		}
	}

	g_esPlayer[tank].g_iBlur = INVALID_ENT_REFERENCE;

	for (int iLight = 0; iLight < (sizeof esPlayer::g_iLight); iLight++)
	{
		if (bIsValidEntRef(g_esPlayer[tank].g_iLight[iLight]))
		{
			g_esPlayer[tank].g_iLight[iLight] = EntRefToEntIndex(g_esPlayer[tank].g_iLight[iLight]);
			if (bIsValidEntity(g_esPlayer[tank].g_iLight[iLight]))
			{
				SDKUnhook(g_esPlayer[tank].g_iLight[iLight], SDKHook_SetTransmit, OnPropSetTransmit);
				RemoveEntity(g_esPlayer[tank].g_iLight[iLight]);
			}
		}

		g_esPlayer[tank].g_iLight[iLight] = INVALID_ENT_REFERENCE;
	}

	for (int iOzTank = 0; iOzTank < (sizeof esPlayer::g_iFlame); iOzTank++)
	{
		if (bIsValidEntRef(g_esPlayer[tank].g_iFlame[iOzTank]))
		{
			g_esPlayer[tank].g_iFlame[iOzTank] = EntRefToEntIndex(g_esPlayer[tank].g_iFlame[iOzTank]);
			if (bIsValidEntity(g_esPlayer[tank].g_iFlame[iOzTank]))
			{
				SDKUnhook(g_esPlayer[tank].g_iFlame[iOzTank], SDKHook_SetTransmit, OnPropSetTransmit);
				RemoveEntity(g_esPlayer[tank].g_iFlame[iOzTank]);
			}
		}

		g_esPlayer[tank].g_iFlame[iOzTank] = INVALID_ENT_REFERENCE;

		if (bIsValidEntRef(g_esPlayer[tank].g_iOzTank[iOzTank]))
		{
			g_esPlayer[tank].g_iOzTank[iOzTank] = EntRefToEntIndex(g_esPlayer[tank].g_iOzTank[iOzTank]);
			if (bIsValidEntity(g_esPlayer[tank].g_iOzTank[iOzTank]))
			{
				SDKUnhook(g_esPlayer[tank].g_iOzTank[iOzTank], SDKHook_SetTransmit, OnPropSetTransmit);
				RemoveEntity(g_esPlayer[tank].g_iOzTank[iOzTank]);
			}
		}

		g_esPlayer[tank].g_iOzTank[iOzTank] = INVALID_ENT_REFERENCE;
	}

	for (int iRock = 0; iRock < (sizeof esPlayer::g_iRock); iRock++)
	{
		if (bIsValidEntRef(g_esPlayer[tank].g_iRock[iRock]))
		{
			g_esPlayer[tank].g_iRock[iRock] = EntRefToEntIndex(g_esPlayer[tank].g_iRock[iRock]);
			if (bIsValidEntity(g_esPlayer[tank].g_iRock[iRock]))
			{
				SDKUnhook(g_esPlayer[tank].g_iRock[iRock], SDKHook_SetTransmit, OnPropSetTransmit);
				RemoveEntity(g_esPlayer[tank].g_iRock[iRock]);
			}
		}

		g_esPlayer[tank].g_iRock[iRock] = INVALID_ENT_REFERENCE;
	}

	for (int iTire = 0; iTire < (sizeof esPlayer::g_iTire); iTire++)
	{
		if (bIsValidEntRef(g_esPlayer[tank].g_iTire[iTire]))
		{
			g_esPlayer[tank].g_iTire[iTire] = EntRefToEntIndex(g_esPlayer[tank].g_iTire[iTire]);
			if (bIsValidEntity(g_esPlayer[tank].g_iTire[iTire]))
			{
				SDKUnhook(g_esPlayer[tank].g_iTire[iTire], SDKHook_SetTransmit, OnPropSetTransmit);
				RemoveEntity(g_esPlayer[tank].g_iTire[iTire]);
			}
		}

		g_esPlayer[tank].g_iTire[iTire] = INVALID_ENT_REFERENCE;
	}

	if (bIsValidEntRef(g_esPlayer[tank].g_iPropaneTank))
	{
		g_esPlayer[tank].g_iPropaneTank = EntRefToEntIndex(g_esPlayer[tank].g_iPropaneTank);
		if (bIsValidEntity(g_esPlayer[tank].g_iPropaneTank))
		{
			SDKUnhook(g_esPlayer[tank].g_iPropaneTank, SDKHook_SetTransmit, OnPropSetTransmit);
			RemoveEntity(g_esPlayer[tank].g_iPropaneTank);
		}
	}

	g_esPlayer[tank].g_iPropaneTank = INVALID_ENT_REFERENCE;

	if (bIsValidEntRef(g_esPlayer[tank].g_iFlashlight))
	{
		g_esPlayer[tank].g_iFlashlight = EntRefToEntIndex(g_esPlayer[tank].g_iFlashlight);
		if (bIsValidEntity(g_esPlayer[tank].g_iFlashlight))
		{
			SDKUnhook(g_esPlayer[tank].g_iFlashlight, SDKHook_SetTransmit, OnPropSetTransmit);
			RemoveEntity(g_esPlayer[tank].g_iFlashlight);
		}
	}

	g_esPlayer[tank].g_iFlashlight = INVALID_ENT_REFERENCE;
	vRemovePlayerGlow(tank);

	if (revert)
	{
		SetEntityRenderMode(tank, RENDER_NORMAL);
		SetEntityRenderColor(tank, 255, 255, 255, 255);
	}
}

void vResetTank(int tank, bool revert = true)
{
	vRemoveTankProps(tank, revert);
	vResetTankSpeed(tank);
	vSpawnModes(tank, false);
}

void vResetTank2(int tank, bool full = true)
{
	g_esPlayer[tank].g_bArtificial = false;
	g_esPlayer[tank].g_bBlood = false;
	g_esPlayer[tank].g_bBlur = false;
	g_esPlayer[tank].g_bElectric = false;
	g_esPlayer[tank].g_bFire = false;
	g_esPlayer[tank].g_bFirstSpawn = false;
	g_esPlayer[tank].g_bIce = false;
	g_esPlayer[tank].g_bKeepCurrentType = false;
	g_esPlayer[tank].g_bMeteor = false;
	g_esPlayer[tank].g_bPassive = false;
	g_esPlayer[tank].g_bProtected[0] = false;
	g_esPlayer[tank].g_bProtected[1] = false;
	g_esPlayer[tank].g_bReplaceSelf = false;
	g_esPlayer[tank].g_bSmoke = false;
	g_esPlayer[tank].g_bSpit = false;
	g_esPlayer[tank].g_flLastAttackTime = 0.0;
	g_esPlayer[tank].g_iBossStageCount = 0;
	g_esPlayer[tank].g_iClawCount = 0;
	g_esPlayer[tank].g_iClawDamage = 0;
	g_esPlayer[tank].g_iCooldown = -1;
	g_esPlayer[tank].g_iIncapCount = 0;
	g_esPlayer[tank].g_iKillCount = 0;
	g_esPlayer[tank].g_iMiscCount = 0;
	g_esPlayer[tank].g_iMiscDamage = 0;
	g_esPlayer[tank].g_iOldTankType = 0;
	g_esPlayer[tank].g_iPropCount = 0;
	g_esPlayer[tank].g_iPropDamage = 0;
	g_esPlayer[tank].g_iRockCount = 0;
	g_esPlayer[tank].g_iRockDamage = 0;
	g_esPlayer[tank].g_iSurvivorDamage = 0;
	g_esPlayer[tank].g_iTankType = 0;

	for (int iPos = 0; iPos < (sizeof esPlayer::g_iThrownRock); iPos++)
	{
		g_esPlayer[tank].g_iThrownRock[iPos] = INVALID_ENT_REFERENCE;
	}

	if (full)
	{
		vRemoveInfection(tank);
		vResetSurvivorStats(tank, full);
	}

	delete g_esPlayer[tank].g_hPassiveTimer[0];
	delete g_esPlayer[tank].g_hPassiveTimer[1];
	delete g_esPlayer[tank].g_hProtectionTimer[0];
	delete g_esPlayer[tank].g_hProtectionTimer[1];
}

void vResetTank3(int tank)
{
	ExtinguishEntity(tank);
	EmitSoundToAll(SOUND_ELECTRICITY, tank);
	vResetTankSpeed(tank);
	vRemovePlayerGlow(tank);

	if (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2)
	{
		vAttachParticle(tank, PARTICLE_ELECTRICITY, 2.0, 30.0);
	}
}

void vResetTankSpeed(int tank, bool reset = true)
{
	if (bIsValidClient(tank, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE))
	{
		switch (reset || g_esTankCache[tank].g_flRunSpeed <= 0.0)
		{
			case true: SetEntPropFloat(tank, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(tank, 1.0, true) : 1.0));
			case false: SetEntPropFloat(tank, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(tank, g_esTankCache[tank].g_flRunSpeed) : g_esTankCache[tank].g_flRunSpeed));
		}
	}
}

void vSetRockEffects(int tank, int rock)
{
	if (g_esTankCache[tank].g_iRockEffects > 0 && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		DataPack dpRockEffects;
		CreateDataTimer(0.75, tTimerRockEffects, dpRockEffects, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		dpRockEffects.WriteCell(EntIndexToEntRef(rock));
		dpRockEffects.WriteCell(GetClientUserId(tank));
	}
}

void vSetRockModel(int tank, int rock)
{
	switch (g_esTankCache[tank].g_iRockModel)
	{
		case -1, 0: SetEntityModel(rock, MODEL_CONCRETE_CHUNK);
		case 1: SetEntityModel(rock, MODEL_TREE_TRUNK);
		case 2: SetEntityModel(rock, ((MT_GetRandomInt(0, 1) == 0) ? MODEL_CONCRETE_CHUNK : MODEL_TREE_TRUNK));
	}
}

void vSetRockColor(int tank, int rock)
{
	if (g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0)
	{
		return;
	}

	switch (StrEqual(g_esTankCache[tank].g_sRockColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		case true:
		{
			g_esPlayer[tank].g_iThrownRock[rock] = EntIndexToEntRef(rock);

			if (!g_esPlayer[tank].g_bRainbowColor)
			{
				g_esPlayer[tank].g_bRainbowColor = SDKHookEx(tank, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
			}
		}
		case false: SetEntityRenderColor(rock, iGetRandomColor(g_esTankCache[tank].g_iRockColor[0]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[1]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[2]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[3]));
	}
}

void vSetSpecialModel(int special, bool main)
{
	switch (main)
	{
		case true:
		{
			switch (g_esPlayer[special].g_iInfectedType)
			{
				case 1: SetEntityModel(special, MODEL_SMOKER_MAIN);
				case 2: SetEntityModel(special, (!!MT_GetRandomInt(0, 1) ? MODEL_BOOMER_MAIN : MODEL_BOOMETTE));
				case 3: SetEntityModel(special, MODEL_HUNTER_MAIN);
			}
		}
		case false:
		{
			switch (g_esPlayer[special].g_iInfectedType)
			{
				case 1: SetEntityModel(special, (g_bSecondGame ? MODEL_SMOKER_L4D1 : MODEL_SMOKER_MAIN));
				case 2: SetEntityModel(special, (g_bSecondGame ? MODEL_BOOMER_L4D1 : MODEL_BOOMER_MAIN));
				case 3: SetEntityModel(special, (g_bSecondGame ? MODEL_HUNTER_L4D1 : MODEL_HUNTER_MAIN));
			}
		}
	}
}

void vSetTankColor(int tank, int type = 0, bool change = true, bool revert = false, bool store = false)
{
	if (type == -1)
	{
		return;
	}

	if (g_esPlayer[tank].g_iTankType > 0)
	{
		if (change)
		{
			vResetTank3(tank);
		}

		if (type == 0)
		{
			vRemoveTankProps(tank);
			vChangeTypeForward(tank, g_esPlayer[tank].g_iTankType, type, revert);

			g_esPlayer[tank].g_iTankType = 0;

			return;
		}
		else if (g_esPlayer[tank].g_iTankType == type && !g_esPlayer[tank].g_bReplaceSelf && !g_esPlayer[tank].g_bKeepCurrentType)
		{
			g_esPlayer[tank].g_iTankType = 0;

			vRemoveTankProps(tank);
			vChangeTypeForward(tank, type, g_esPlayer[tank].g_iTankType, revert);

			return;
		}
		else if (type > 0)
		{
			g_esPlayer[tank].g_iOldTankType = g_esPlayer[tank].g_iTankType;
		}
	}

	if (store && bIsCompetitiveModeRound(1))
	{
		g_esGeneral.g_alCompTypes[0].Push(type);
	}

	g_esPlayer[tank].g_bReplaceSelf = false;
	g_esPlayer[tank].g_iTankType = type;

	vRemoveTankProps(tank);
	vChangeTypeForward(tank, g_esPlayer[tank].g_iOldTankType, g_esPlayer[tank].g_iTankType, revert);

	switch ((g_esShooter[tank].g_bSurvivor && g_esShooter[tank].g_bMixTypes) || g_esShooter[tank].g_bProduced)
	{
		case true:
		{
			int iTypeCount = 0, iTankTypes[MT_MAXTYPES + 1];
			for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
			{
				if (g_esShooter[tank].g_bInfected[iIndex])
				{
					iTankTypes[iTypeCount + 1] = iIndex;
					iTypeCount++;
				}
			}

			if (iTypeCount > 0)
			{
				int iChosenType = iTankTypes[MT_GetRandomInt(1, iTypeCount)];
				g_esShooter[tank].g_bInfected[iChosenType] = false;
				g_esPlayer[tank].g_iTankType = iChosenType;

				vCacheTankSettings(tank, iChosenType, .visualsOnly = true);
			}
		}
		case false: vCacheTankSettings(tank);
	}

	vSetTankModel(tank);
	vRemovePlayerGlow(tank);
	vSetTankRainbowColor(tank);
}

void vSetTankGlow(int tank)
{
	if (!g_bSecondGame || g_esTankCache[tank].g_iGlowEnabled <= 1 || (g_esGeneral.g_iGraphicsLevel <= 1 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 1))
	{
		return;
	}

	SetEntProp(tank, Prop_Send, "m_glowColorOverride", iGetRGBColor(iGetRandomColor(g_esTankCache[tank].g_iGlowColor[0]), iGetRandomColor(g_esTankCache[tank].g_iGlowColor[1]), iGetRandomColor(g_esTankCache[tank].g_iGlowColor[2])));
	SetEntProp(tank, Prop_Send, "m_bFlashing", g_esTankCache[tank].g_iGlowFlashing);
	SetEntProp(tank, Prop_Send, "m_nGlowRangeMin", g_esTankCache[tank].g_iGlowMinRange);
	SetEntProp(tank, Prop_Send, "m_nGlowRange", g_esTankCache[tank].g_iGlowMaxRange);
	SetEntProp(tank, Prop_Send, "m_iGlowType", ((bIsInfectedIdle(tank) || g_esTankCache[tank].g_iGlowType <= 0) ? 2 : 3));
}

void vSetTankHealth(int tank, bool initial = true)
{
	int iHumanCount = iGetHumanCount(), iSpawnHealth = (g_esTankCache[tank].g_iBaseHealth > 0) ? g_esTankCache[tank].g_iBaseHealth : GetEntProp(tank, Prop_Data, "m_iHealth");
	float flMultiplier = (g_esTankCache[tank].g_iHumanMultiplierMode == 1) ? g_esTankCache[tank].g_flHealPercentMultiplier : (iHumanCount * g_esTankCache[tank].g_flHealPercentMultiplier);
	int iExtraHealth = (iSpawnHealth + g_esTankCache[tank].g_iExtraHealth),
		iExtraHealthBoost = (iHumanCount >= g_esTankCache[tank].g_iMinimumHumans) ? (RoundToNearest(iSpawnHealth * flMultiplier) + g_esTankCache[tank].g_iExtraHealth) : iExtraHealth,
		iExtraHealthBoost2 = (iHumanCount >= g_esTankCache[tank].g_iMinimumHumans) ? (iSpawnHealth + RoundToNearest(flMultiplier * g_esTankCache[tank].g_iExtraHealth)) : iExtraHealth,
		iExtraHealthBoost3 = (iHumanCount >= g_esTankCache[tank].g_iMinimumHumans) ? RoundToNearest(flMultiplier * (iSpawnHealth + g_esTankCache[tank].g_iExtraHealth)) : iExtraHealth,
		iNoBoost = (iExtraHealth > MT_MAXHEALTH) ? MT_MAXHEALTH : iExtraHealth,
		iBoost = (iExtraHealthBoost > MT_MAXHEALTH) ? MT_MAXHEALTH : iExtraHealthBoost,
		iBoost2 = (iExtraHealthBoost2 > MT_MAXHEALTH) ? MT_MAXHEALTH : iExtraHealthBoost2,
		iBoost3 = (iExtraHealthBoost3 > MT_MAXHEALTH) ? MT_MAXHEALTH : iExtraHealthBoost3,
		iNegaNoBoost = (iExtraHealth < iSpawnHealth) ? 1 : iExtraHealth,
		iNegaBoost = (iExtraHealthBoost < iSpawnHealth) ? 1 : iExtraHealthBoost,
		iNegaBoost2 = (iExtraHealthBoost2 < iSpawnHealth) ? 1 : iExtraHealthBoost2,
		iNegaBoost3 = (iExtraHealthBoost3 < iSpawnHealth) ? 1 : iExtraHealthBoost3,
		iFinalNoHealth = (iExtraHealth >= 0) ? iNoBoost : iNegaNoBoost,
		iFinalHealth = (iExtraHealth >= 0) ? iBoost : iNegaBoost,
		iFinalHealth2 = (iExtraHealth >= 0) ? iBoost2 : iNegaBoost2,
		iFinalHealth3 = (iExtraHealth >= 0) ? iBoost3 : iNegaBoost3,
		iTotalHealth = iFinalNoHealth,
		iHealth = GetEntProp(tank, Prop_Data, "m_iHealth"),
		iMaxHealth = GetEntProp(tank, Prop_Data, "m_iMaxHealth");

	switch (g_esTankCache[tank].g_iMultiplyHealth)
	{
		case 1: iTotalHealth = iFinalHealth;
		case 2: iTotalHealth = iFinalHealth2;
		case 3: iTotalHealth = iFinalHealth3;
	}

	float flPercentage = 1.0;
	if (!initial && iHealth != iMaxHealth)
	{
		flPercentage = float(iHealth) / float(iMaxHealth);
	}

	SetEntProp(tank, Prop_Data, "m_iHealth", RoundToNearest(iTotalHealth * flPercentage));
	SetEntProp(tank, Prop_Data, "m_iMaxHealth", iTotalHealth);

	if (g_esTankCache[tank].g_iIntangibleBody == 1)
	{
		SetEntProp(tank, Prop_Send, "m_CollisionGroup", 2);
	}

	if (g_bSecondGame && bIsJockey(tank) && GetRandomFloat(0.1, 100.0) <= g_esGeneral.g_flJockeyChance)
	{
		float flScale = MT_GetRandomFloat(g_esGeneral.g_flJockeyScaleMin, g_esGeneral.g_flJockeyScaleMax);
		if (0.0 < flScale <= 10.0)
		{
			if (g_esGeneral.g_iJockeyHealth == 1)
			{
				iFinalHealth = RoundToCeil(float(GetEntProp(tank, Prop_Data, "m_iHealth")) * flScale);
				SetEntProp(tank, Prop_Data, "m_iHealth", iFinalHealth);
				SetEntProp(tank, Prop_Data, "m_iMaxHealth", iFinalHealth);
			}

			SetEntPropFloat(tank, Prop_Data, "m_flModelScale", flScale);
		}
	}

	flMultiplier = g_esShooter[tank].g_flHealthMultiplier;
	if (g_esShooter[tank].g_bSurvivor && flMultiplier > 0.0)
	{
		iFinalHealth = RoundToCeil(float(GetEntProp(tank, Prop_Data, "m_iHealth")) * flMultiplier);
		SetEntProp(tank, Prop_Data, "m_iHealth", iFinalHealth);
		SetEntProp(tank, Prop_Data, "m_iMaxHealth", iFinalHealth);
	}
}

void vSetTankModel(int tank)
{
	if (bIsTank(tank) && g_esTankCache[tank].g_iTankModel > 0)
	{
		int iModelCount = 0, iModels[3], iFlag = 0;
		for (int iBit = 0; iBit < (sizeof iModels); iBit++)
		{
			iFlag = (1 << iBit);
			if (!(g_esTankCache[tank].g_iTankModel & iFlag))
			{
				continue;
			}

			iModels[iModelCount] = iFlag;
			iModelCount++;
		}

		switch (iModelCount > 0)
		{
			case true:
			{
				switch (iModels[MT_GetRandomInt(0, (iModelCount - 1))])
				{
					case 1: SetEntityModel(tank, MODEL_TANK_MAIN);
					case 2: SetEntityModel(tank, MODEL_TANK_DLC);
					case 4: SetEntityModel(tank, (g_bSecondGame ? MODEL_TANK_L4D1 : MODEL_TANK_MAIN));
					default:
					{
						switch (MT_GetRandomInt(1, (sizeof iModels)))
						{
							case 1: SetEntityModel(tank, MODEL_TANK_MAIN);
							case 2: SetEntityModel(tank, MODEL_TANK_DLC);
							case 3: SetEntityModel(tank, (g_bSecondGame ? MODEL_TANK_L4D1 : MODEL_TANK_MAIN));
						}
					}
				}
			}
			case false:
			{
				switch (MT_GetRandomInt(1, (sizeof iModels)))
				{
					case 1: SetEntityModel(tank, MODEL_TANK_MAIN);
					case 2: SetEntityModel(tank, MODEL_TANK_DLC);
					case 3: SetEntityModel(tank, (g_bSecondGame ? MODEL_TANK_L4D1 : MODEL_TANK_MAIN));
				}
			}
		}
	}
	else if (bIsSpecialInfected(tank) && g_esTankCache[tank].g_iSpecialModel > 0)
	{
		int iModelCount = 0, iModels[3], iFlag = 0;
		for (int iBit = 0; iBit < (sizeof iModels); iBit++)
		{
			iFlag = (1 << iBit);
			if (!(g_esTankCache[tank].g_iSpecialModel & iFlag))
			{
				continue;
			}

			iModels[iModelCount] = iFlag;
			iModelCount++;
		}

		switch (iModelCount > 0)
		{
			case true:
			{
				switch (iModels[MT_GetRandomInt(0, (iModelCount - 1))])
				{
					case 1: vSetSpecialModel(tank, true);
					case 2: vSetSpecialModel(tank, false);
					default:
					{
						switch (MT_GetRandomInt(1, (sizeof iModels)))
						{
							case 1: vSetSpecialModel(tank, true);
							case 2: vSetSpecialModel(tank, false);
						}
					}
				}
			}
			case false:
			{
				switch (MT_GetRandomInt(1, (sizeof iModels)))
				{
					case 1: vSetSpecialModel(tank, true);
					case 2: vSetSpecialModel(tank, false);
				}
			}
		}
	}

	if (g_esTankCache[tank].g_flBurntSkin >= 0.01)
	{
		SetEntPropFloat(tank, Prop_Send, "m_burnPercent", g_esTankCache[tank].g_flBurntSkin);
	}
	else if (g_esTankCache[tank].g_flBurntSkin == 0.0)
	{
		SetEntPropFloat(tank, Prop_Send, "m_burnPercent", MT_GetRandomFloat(0.01, 1.0));
	}
}

void vSetTankName(int tank, const char[] oldname, const char[] name, int mode, int specType)
{
	if (bIsSpecialSupported(tank))
	{
		if (!bIsInfected(tank, MT_CHECK_FAKECLIENT))
		{
			char sName[33];
			if (g_esShooter[tank].g_bSurvivor)
			{
				if (g_esShooter[tank].g_sSurvivorName[0] == '\0')
				{
					int iCharacter = (g_bSecondGame ? g_esShooter[tank].g_iCharacter : (g_esShooter[tank].g_iCharacter + 4));
					strcopy(g_esShooter[tank].g_sSurvivorName, sizeof esShooter::g_sSurvivorName, g_sSurvivorNames[iCharacter]);
				}

				strcopy(sName, sizeof sName, g_esShooter[tank].g_sSurvivorName);
			}
			else
			{
				switch (specType)
				{
					case 1:
					{
						if (g_esTankCache[tank].g_sSmokerName[0] == '\0')
						{
							strcopy(g_esTankCache[tank].g_sSmokerName, sizeof esTankCache::g_sSmokerName, g_sSpecialNames[specType]);
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sSmokerName);
					}
					case 2:
					{
						if (g_esTankCache[tank].g_sBoomerName[0] == '\0')
						{
							strcopy(g_esTankCache[tank].g_sBoomerName, sizeof esTankCache::g_sBoomerName, g_sSpecialNames[specType]);
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sBoomerName);
					}
					case 3:
					{
						if (g_esTankCache[tank].g_sHunterName[0] == '\0')
						{
							strcopy(g_esTankCache[tank].g_sHunterName, sizeof esTankCache::g_sHunterName, g_sSpecialNames[specType]);
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sHunterName);
					}
					case 4:
					{
						if (g_esTankCache[tank].g_sSpitterName[0] == '\0')
						{
							strcopy(g_esTankCache[tank].g_sSpitterName, sizeof esTankCache::g_sSpitterName, g_sSpecialNames[specType]);
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sSpitterName);
					}
					case 5:
					{
						if (g_esTankCache[tank].g_sJockeyName[0] == '\0')
						{
							strcopy(g_esTankCache[tank].g_sJockeyName, sizeof esTankCache::g_sJockeyName, g_sSpecialNames[specType]);
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sJockeyName);
					}
					case 6:
					{
						if (g_esTankCache[tank].g_sChargerName[0] == '\0')
						{
							strcopy(g_esTankCache[tank].g_sChargerName, sizeof esTankCache::g_sChargerName, g_sSpecialNames[specType]);
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sChargerName);
					}
					default:
					{
						if (g_esTankCache[tank].g_sTankName[0] == '\0')
						{
							g_esTankCache[tank].g_sTankName = "Tank";
						}

						strcopy(sName, sizeof sName, g_esTankCache[tank].g_sTankName);
					}
				}
			}

			g_esGeneral.g_bHideNameChange = true;
			SetClientName(tank, sName);
			g_esGeneral.g_bHideNameChange = false;
		}

		switch (mode == 0 || mode == 5)
		{
			case true:
			{
				DataPack dpAnnounce;
				CreateDataTimer(0.1, tTimerAnnounce, dpAnnounce, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
				dpAnnounce.WriteCell(GetClientUserId(tank));
				dpAnnounce.WriteString(oldname);
				dpAnnounce.WriteString(name);
				dpAnnounce.WriteCell(mode);
				dpAnnounce.WriteCell(specType);
			}
			case false: vChooseArrivalType(tank, oldname, name, mode, specType);
		}
	}
}

void vSetTankProps(int tank)
{
	if (bIsTankSupported(tank) && (g_esGeneral.g_iGraphicsLevel > 1 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 1))
	{
		if (GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[0] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_BLUR) && !g_esPlayer[tank].g_bBlur)
		{
			float flTankPos[3], flTankAngles[3];
			GetClientAbsOrigin(tank, flTankPos);
			GetClientAbsAngles(tank, flTankAngles);

			g_esPlayer[tank].g_iBlur = CreateEntityByName("prop_dynamic");
			if (bIsValidEntity(g_esPlayer[tank].g_iBlur))
			{
				g_esPlayer[tank].g_bBlur = true;

				char sModel[32];
				GetEntPropString(tank, Prop_Data, "m_ModelName", sModel, sizeof sModel);

				switch (sModel[21])
				{
					case 'm': SetEntityModel(g_esPlayer[tank].g_iBlur, MODEL_TANK_MAIN);
					case 'd': SetEntityModel(g_esPlayer[tank].g_iBlur, MODEL_TANK_DLC);
					case 'l': SetEntityModel(g_esPlayer[tank].g_iBlur, MODEL_TANK_L4D1);
				}

				switch (StrEqual(g_esTankCache[tank].g_sSkinColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
				{
					case true:
					{
						if (!g_esPlayer[tank].g_bRainbowColor)
						{
							g_esPlayer[tank].g_bRainbowColor = SDKHookEx(tank, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
						}
					}
					case false:
					{
						int iColor[4] = {0, 0, 0, 0};
						GetEntityRenderColor(tank, iColor[0], iColor[1], iColor[2], iColor[3]);
						SetEntityRenderColor(g_esPlayer[tank].g_iBlur, iColor[0], iColor[1], iColor[2], 150);
					}
				}

				SetEntPropEnt(g_esPlayer[tank].g_iBlur, Prop_Data, "m_hOwnerEntity", tank);

				TeleportEntity(g_esPlayer[tank].g_iBlur, flTankPos, flTankAngles);
				DispatchSpawn(g_esPlayer[tank].g_iBlur);

				AcceptEntityInput(g_esPlayer[tank].g_iBlur, "DisableCollision");
				SetEntProp(g_esPlayer[tank].g_iBlur, Prop_Send, "m_nSequence", GetEntProp(tank, Prop_Send, "m_nSequence"));
				SetEntPropFloat(g_esPlayer[tank].g_iBlur, Prop_Send, "m_flPlaybackRate", 5.0);

				SDKHook(g_esPlayer[tank].g_iBlur, SDKHook_SetTransmit, OnPropSetTransmit);
				g_esPlayer[tank].g_iBlur = EntIndexToEntRef(g_esPlayer[tank].g_iBlur);

				CreateTimer(0.1, tTimerBlurEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
			}
		}

		bool bValid = false;
		float flOrigin[3], flAngles[3];
		GetEntPropVector(tank, Prop_Data, "m_vecOrigin", flOrigin);
		GetEntPropVector(tank, Prop_Data, "m_angRotation", flAngles);

		float flChance = GetRandomFloat(0.1, 100.0), flValue = 0.0;
		int iFlag = 0, iType = 0;
		for (int iLight = 0; iLight < (sizeof esPlayer::g_iLight); iLight++)
		{
			bValid = bIsValidEntRef(g_esPlayer[tank].g_iLight[iLight]);
			flValue = ((iLight < 3) ? GetRandomFloat(0.1, 100.0) : flChance);
			iFlag = ((iLight < 3) ? MT_PROP_LIGHT : MT_PROP_CROWN);
			iType = ((iLight < 3) ? 1 : 8);
			if (!bValid && flValue <= g_esTankCache[tank].g_flPropsChance[iType] && (g_esTankCache[tank].g_iPropsAttached & iFlag))
			{
				vLightProp(tank, iLight, flOrigin, flAngles);
			}
			else if (bValid)
			{
				g_esPlayer[tank].g_iLight[iLight] = EntRefToEntIndex(g_esPlayer[tank].g_iLight[iLight]);
				if (bIsValidEntity(g_esPlayer[tank].g_iLight[iLight]))
				{
					SDKUnhook(g_esPlayer[tank].g_iLight[iLight], SDKHook_SetTransmit, OnPropSetTransmit);
					RemoveEntity(g_esPlayer[tank].g_iLight[iLight]);
				}

				g_esPlayer[tank].g_iLight[iLight] = INVALID_ENT_REFERENCE;
				if (g_esTankCache[tank].g_iPropsAttached & iFlag)
				{
					vLightProp(tank, iLight, flOrigin, flAngles);
				}
			}
		}

		GetEntPropVector(tank, Prop_Data, "m_vecOrigin", flOrigin);
		GetEntPropVector(tank, Prop_Data, "m_angRotation", flAngles);

		float flOrigin2[3], flAngles2[3] = {0.0, 0.0, 90.0};
		for (int iOzTank = 0; iOzTank < (sizeof esPlayer::g_iOzTank); iOzTank++)
		{
			bValid = bIsValidEntRef(g_esPlayer[tank].g_iOzTank[iOzTank]);
			if (!bValid && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[2] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_OXYGENTANK))
			{
				g_esPlayer[tank].g_iOzTank[iOzTank] = CreateEntityByName("prop_dynamic_override");
				if (bIsValidEntity(g_esPlayer[tank].g_iOzTank[iOzTank]))
				{
					SetEntityModel(g_esPlayer[tank].g_iOzTank[iOzTank], MODEL_OXYGENTANK);
					SetEntityRenderColor(g_esPlayer[tank].g_iOzTank[iOzTank], iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[0]), iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[1]), iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[2]), iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[3]));

					DispatchKeyValueVector(g_esPlayer[tank].g_iOzTank[iOzTank], "origin", flOrigin);
					DispatchKeyValueVector(g_esPlayer[tank].g_iOzTank[iOzTank], "angles", flAngles);
					vSetEntityParent(g_esPlayer[tank].g_iOzTank[iOzTank], tank, true);

					switch (iOzTank)
					{
						case 0:
						{
							SetVariantString("rfoot");
							vSetVector(flOrigin2, 0.0, 30.0, 8.0);
						}
						case 1:
						{
							SetVariantString("lfoot");
							vSetVector(flOrigin2, 0.0, 30.0, -8.0);
						}
					}

					AcceptEntityInput(g_esPlayer[tank].g_iOzTank[iOzTank], "SetParentAttachment");
					AcceptEntityInput(g_esPlayer[tank].g_iOzTank[iOzTank], "Enable");
					AcceptEntityInput(g_esPlayer[tank].g_iOzTank[iOzTank], "DisableCollision");
					TeleportEntity(g_esPlayer[tank].g_iOzTank[iOzTank], flOrigin2, flAngles2);
					DispatchSpawn(g_esPlayer[tank].g_iOzTank[iOzTank]);

					SDKHook(g_esPlayer[tank].g_iOzTank[iOzTank], SDKHook_SetTransmit, OnPropSetTransmit);
					g_esPlayer[tank].g_iOzTank[iOzTank] = EntIndexToEntRef(g_esPlayer[tank].g_iOzTank[iOzTank]);

					if (!bIsValidEntRef(g_esPlayer[tank].g_iFlame[iOzTank]) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[3] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_FLAME))
					{
						g_esPlayer[tank].g_iFlame[iOzTank] = CreateEntityByName("env_steam");
						if (bIsValidEntity(g_esPlayer[tank].g_iFlame[iOzTank]))
						{
							SetEntityRenderColor(g_esPlayer[tank].g_iFlame[iOzTank], iGetRandomColor(g_esTankCache[tank].g_iFlameColor[0]), iGetRandomColor(g_esTankCache[tank].g_iFlameColor[1]), iGetRandomColor(g_esTankCache[tank].g_iFlameColor[2]), iGetRandomColor(g_esTankCache[tank].g_iFlameColor[3]));

							DispatchKeyValueVector(g_esPlayer[tank].g_iFlame[iOzTank], "origin", flOrigin);
							vSetEntityParent(g_esPlayer[tank].g_iFlame[iOzTank], g_esPlayer[tank].g_iOzTank[iOzTank], true);

							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "spawnflags", 1);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "Type", 0);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "InitialState", 1);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "Spreadspeed", 1);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "Speed", 250);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "Startsize", 6);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "EndSize", 8);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "Rate", 555);
							DispatchKeyValueInt(g_esPlayer[tank].g_iFlame[iOzTank], "JetLength", 40);

							float flOrigin3[3] = {-2.0, 0.0, 28.0}, flAngles3[3] = {-90.0, 0.0, -90.0};
							AcceptEntityInput(g_esPlayer[tank].g_iFlame[iOzTank], "TurnOn");
							TeleportEntity(g_esPlayer[tank].g_iFlame[iOzTank], flOrigin3, flAngles3);
							DispatchSpawn(g_esPlayer[tank].g_iFlame[iOzTank]);

							SDKHook(g_esPlayer[tank].g_iFlame[iOzTank], SDKHook_SetTransmit, OnPropSetTransmit);
							g_esPlayer[tank].g_iFlame[iOzTank] = EntIndexToEntRef(g_esPlayer[tank].g_iFlame[iOzTank]);
						}
					}
				}
			}
			else if (bValid)
			{
				g_esPlayer[tank].g_iOzTank[iOzTank] = EntRefToEntIndex(g_esPlayer[tank].g_iOzTank[iOzTank]);
				if (bIsValidEntity(g_esPlayer[tank].g_iOzTank[iOzTank]) && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_OXYGENTANK))
				{
					SetEntityRenderColor(g_esPlayer[tank].g_iOzTank[iOzTank], iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[0]), iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[1]), iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[2]), iGetRandomColor(g_esTankCache[tank].g_iOzTankColor[3]));
				}
				else
				{
					if (bIsValidEntity(g_esPlayer[tank].g_iOzTank[iOzTank]))
					{
						SDKUnhook(g_esPlayer[tank].g_iOzTank[iOzTank], SDKHook_SetTransmit, OnPropSetTransmit);
						RemoveEntity(g_esPlayer[tank].g_iOzTank[iOzTank]);
					}

					g_esPlayer[tank].g_iOzTank[iOzTank] = INVALID_ENT_REFERENCE;
				}

				if (bIsValidEntRef(g_esPlayer[tank].g_iFlame[iOzTank]))
				{
					g_esPlayer[tank].g_iFlame[iOzTank] = EntRefToEntIndex(g_esPlayer[tank].g_iFlame[iOzTank]);
					if (bIsValidEntity(g_esPlayer[tank].g_iFlame[iOzTank]) && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_FLAME))
					{
						SetEntityRenderColor(g_esPlayer[tank].g_iFlame[iOzTank], iGetRandomColor(g_esTankCache[tank].g_iFlameColor[0]), iGetRandomColor(g_esTankCache[tank].g_iFlameColor[1]), iGetRandomColor(g_esTankCache[tank].g_iFlameColor[2]), iGetRandomColor(g_esTankCache[tank].g_iFlameColor[3]));
					}
					else
					{
						if (bIsValidEntity(g_esPlayer[tank].g_iFlame[iOzTank]))
						{
							SDKUnhook(g_esPlayer[tank].g_iFlame[iOzTank], SDKHook_SetTransmit, OnPropSetTransmit);
							RemoveEntity(g_esPlayer[tank].g_iFlame[iOzTank]);
						}

						g_esPlayer[tank].g_iFlame[iOzTank] = INVALID_ENT_REFERENCE;
					}
				}
			}
		}

		GetEntPropVector(tank, Prop_Data, "m_vecOrigin", flOrigin);
		GetEntPropVector(tank, Prop_Data, "m_angRotation", flAngles);

		for (int iRock = 0; iRock < (sizeof esPlayer::g_iRock); iRock++)
		{
			bValid = bIsValidEntRef(g_esPlayer[tank].g_iRock[iRock]);
			if (!bValid && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[4] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_ROCK))
			{
				g_esPlayer[tank].g_iRock[iRock] = CreateEntityByName("prop_dynamic_override");
				if (bIsValidEntity(g_esPlayer[tank].g_iRock[iRock]))
				{
					SetEntityRenderColor(g_esPlayer[tank].g_iRock[iRock], iGetRandomColor(g_esTankCache[tank].g_iRockColor[0]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[1]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[2]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[3]));
					vSetRockModel(tank, g_esPlayer[tank].g_iRock[iRock]);

					DispatchKeyValueVector(g_esPlayer[tank].g_iRock[iRock], "origin", flOrigin);
					DispatchKeyValueVector(g_esPlayer[tank].g_iRock[iRock], "angles", flAngles);
					vSetEntityParent(g_esPlayer[tank].g_iRock[iRock], tank, true);

					switch (iRock)
					{
						case 0, 4, 8, 12, 16: SetVariantString("rshoulder");
						case 1, 5, 9, 13, 17: SetVariantString("lshoulder");
						case 2, 6, 10, 14, 18: SetVariantString("relbow");
						case 3, 7, 11, 15, 19: SetVariantString("lelbow");
					}

					AcceptEntityInput(g_esPlayer[tank].g_iRock[iRock], "SetParentAttachment");
					AcceptEntityInput(g_esPlayer[tank].g_iRock[iRock], "Enable");
					AcceptEntityInput(g_esPlayer[tank].g_iRock[iRock], "DisableCollision");

					if (g_bSecondGame)
					{
						switch (iRock)
						{
							case 0, 1, 4, 5, 8, 9, 12, 13, 16, 17: SetEntPropFloat(g_esPlayer[tank].g_iRock[iRock], Prop_Data, "m_flModelScale", 0.4);
							case 2, 3, 6, 7, 10, 11, 14, 15, 18, 19: SetEntPropFloat(g_esPlayer[tank].g_iRock[iRock], Prop_Data, "m_flModelScale", 0.5);
						}
					}

					flAngles[0] += MT_GetRandomFloat(-90.0, 90.0);
					flAngles[1] += MT_GetRandomFloat(-90.0, 90.0);
					flAngles[2] += MT_GetRandomFloat(-90.0, 90.0);

					TeleportEntity(g_esPlayer[tank].g_iRock[iRock], .angles = flAngles);
					DispatchSpawn(g_esPlayer[tank].g_iRock[iRock]);

					SDKHook(g_esPlayer[tank].g_iRock[iRock], SDKHook_SetTransmit, OnPropSetTransmit);
					g_esPlayer[tank].g_iRock[iRock] = EntIndexToEntRef(g_esPlayer[tank].g_iRock[iRock]);
				}
			}
			else if (bValid)
			{
				g_esPlayer[tank].g_iRock[iRock] = EntRefToEntIndex(g_esPlayer[tank].g_iRock[iRock]);
				if (bIsValidEntity(g_esPlayer[tank].g_iRock[iRock]) && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_ROCK))
				{
					SetEntityRenderColor(g_esPlayer[tank].g_iRock[iRock], iGetRandomColor(g_esTankCache[tank].g_iRockColor[0]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[1]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[2]), iGetRandomColor(g_esTankCache[tank].g_iRockColor[3]));
					vSetRockModel(tank, g_esPlayer[tank].g_iRock[iRock]);
				}
				else
				{
					if (bIsValidEntity(g_esPlayer[tank].g_iRock[iRock]))
					{
						SDKUnhook(g_esPlayer[tank].g_iRock[iRock], SDKHook_SetTransmit, OnPropSetTransmit);
						RemoveEntity(g_esPlayer[tank].g_iRock[iRock]);
					}

					g_esPlayer[tank].g_iRock[iRock] = INVALID_ENT_REFERENCE;
				}
			}
		}

		GetEntPropVector(tank, Prop_Data, "m_vecOrigin", flOrigin);
		GetEntPropVector(tank, Prop_Data, "m_angRotation", flAngles);
		flAngles[0] += 90.0;

		for (int iTire = 0; iTire < (sizeof esPlayer::g_iTire); iTire++)
		{
			bValid = bIsValidEntRef(g_esPlayer[tank].g_iTire[iTire]);
			if (!bValid && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[5] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_TIRE))
			{
				g_esPlayer[tank].g_iTire[iTire] = CreateEntityByName("prop_dynamic_override");
				if (bIsValidEntity(g_esPlayer[tank].g_iTire[iTire]))
				{
					SetEntityModel(g_esPlayer[tank].g_iTire[iTire], MODEL_TIRES);
					SetEntityRenderColor(g_esPlayer[tank].g_iTire[iTire], iGetRandomColor(g_esTankCache[tank].g_iTireColor[0]), iGetRandomColor(g_esTankCache[tank].g_iTireColor[1]), iGetRandomColor(g_esTankCache[tank].g_iTireColor[2]), iGetRandomColor(g_esTankCache[tank].g_iTireColor[3]));

					DispatchKeyValueVector(g_esPlayer[tank].g_iTire[iTire], "origin", flOrigin);
					DispatchKeyValueVector(g_esPlayer[tank].g_iTire[iTire], "angles", flAngles);
					vSetEntityParent(g_esPlayer[tank].g_iTire[iTire], tank, true);

					switch (iTire)
					{
						case 0: SetVariantString("rfoot");
						case 1: SetVariantString("lfoot");
					}

					AcceptEntityInput(g_esPlayer[tank].g_iTire[iTire], "SetParentAttachment");
					AcceptEntityInput(g_esPlayer[tank].g_iTire[iTire], "Enable");
					AcceptEntityInput(g_esPlayer[tank].g_iTire[iTire], "DisableCollision");

					if (g_bSecondGame)
					{
						SetEntPropFloat(g_esPlayer[tank].g_iTire[iTire], Prop_Data, "m_flModelScale", 1.5);
					}

					TeleportEntity(g_esPlayer[tank].g_iTire[iTire], .angles = flAngles);
					DispatchSpawn(g_esPlayer[tank].g_iTire[iTire]);

					SDKHook(g_esPlayer[tank].g_iTire[iTire], SDKHook_SetTransmit, OnPropSetTransmit);
					g_esPlayer[tank].g_iTire[iTire] = EntIndexToEntRef(g_esPlayer[tank].g_iTire[iTire]);
				}
			}
			else if (bValid)
			{
				g_esPlayer[tank].g_iTire[iTire] = EntRefToEntIndex(g_esPlayer[tank].g_iTire[iTire]);
				if (bIsValidEntity(g_esPlayer[tank].g_iTire[iTire]) && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_TIRE))
				{
					SetEntityRenderColor(g_esPlayer[tank].g_iTire[iTire], iGetRandomColor(g_esTankCache[tank].g_iTireColor[0]), iGetRandomColor(g_esTankCache[tank].g_iTireColor[1]), iGetRandomColor(g_esTankCache[tank].g_iTireColor[2]), iGetRandomColor(g_esTankCache[tank].g_iTireColor[3]));
				}
				else
				{
					if (bIsValidEntity(g_esPlayer[tank].g_iTire[iTire]))
					{
						SDKUnhook(g_esPlayer[tank].g_iTire[iTire], SDKHook_SetTransmit, OnPropSetTransmit);
						RemoveEntity(g_esPlayer[tank].g_iTire[iTire]);
					}

					g_esPlayer[tank].g_iTire[iTire] = INVALID_ENT_REFERENCE;
				}
			}
		}

		GetEntPropVector(tank, Prop_Data, "m_vecOrigin", flOrigin);
		GetEntPropVector(tank, Prop_Data, "m_angRotation", flAngles);

		bValid = bIsValidEntRef(g_esPlayer[tank].g_iPropaneTank);
		if (!bValid && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[6] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_PROPANETANK))
		{
			g_esPlayer[tank].g_iPropaneTank = CreateEntityByName("prop_dynamic_override");
			if (bIsValidEntity(g_esPlayer[tank].g_iPropaneTank))
			{
				SetEntityModel(g_esPlayer[tank].g_iPropaneTank, MODEL_PROPANETANK);
				SetEntityRenderColor(g_esPlayer[tank].g_iPropaneTank, iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[0]), iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[1]), iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[2]), iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[3]));

				DispatchKeyValueVector(g_esPlayer[tank].g_iPropaneTank, "origin", flOrigin);
				DispatchKeyValueVector(g_esPlayer[tank].g_iPropaneTank, "angles", flAngles);
				vSetEntityParent(g_esPlayer[tank].g_iPropaneTank, tank, true);

				SetVariantString("mouth");
				vSetVector(flOrigin, 10.0, 5.0, 0.0);
				vSetVector(flAngles, 60.0, 0.0, -90.0);
				AcceptEntityInput(g_esPlayer[tank].g_iPropaneTank, "SetParentAttachment");
				AcceptEntityInput(g_esPlayer[tank].g_iPropaneTank, "Enable");
				AcceptEntityInput(g_esPlayer[tank].g_iPropaneTank, "DisableCollision");

				if (g_bSecondGame)
				{
					SetEntPropFloat(g_esPlayer[tank].g_iPropaneTank, Prop_Data, "m_flModelScale", 1.1);
				}

				TeleportEntity(g_esPlayer[tank].g_iPropaneTank, flOrigin, flAngles);
				DispatchSpawn(g_esPlayer[tank].g_iPropaneTank);

				SDKHook(g_esPlayer[tank].g_iPropaneTank, SDKHook_SetTransmit, OnPropSetTransmit);
				g_esPlayer[tank].g_iPropaneTank = EntIndexToEntRef(g_esPlayer[tank].g_iPropaneTank);
			}
		}
		else if (bValid)
		{
			g_esPlayer[tank].g_iPropaneTank = EntRefToEntIndex(g_esPlayer[tank].g_iPropaneTank);
			if (bIsValidEntity(g_esPlayer[tank].g_iPropaneTank) && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_PROPANETANK))
			{
				SetEntityRenderColor(g_esPlayer[tank].g_iPropaneTank, iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[0]), iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[1]), iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[2]), iGetRandomColor(g_esTankCache[tank].g_iPropTankColor[3]));
			}
			else
			{
				if (bIsValidEntity(g_esPlayer[tank].g_iPropaneTank))
				{
					SDKUnhook(g_esPlayer[tank].g_iPropaneTank, SDKHook_SetTransmit, OnPropSetTransmit);
					RemoveEntity(g_esPlayer[tank].g_iPropaneTank);
				}

				g_esPlayer[tank].g_iPropaneTank = INVALID_ENT_REFERENCE;
			}
		}

		bValid = bIsValidEntRef(g_esPlayer[tank].g_iFlashlight);
		if (!bValid && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flPropsChance[7] && (g_esTankCache[tank].g_iPropsAttached & MT_PROP_FLASHLIGHT))
		{
			vFlashlightProp(tank, flOrigin, flAngles, g_esTankCache[tank].g_iFlashlightColor);
		}
		else if (bValid)
		{
			g_esPlayer[tank].g_iFlashlight = EntRefToEntIndex(g_esPlayer[tank].g_iFlashlight);
			if (bIsValidEntity(g_esPlayer[tank].g_iFlashlight))
			{
				SDKUnhook(g_esPlayer[tank].g_iFlashlight, SDKHook_SetTransmit, OnPropSetTransmit);
				RemoveEntity(g_esPlayer[tank].g_iFlashlight);
			}

			g_esPlayer[tank].g_iFlashlight = INVALID_ENT_REFERENCE;
			if (g_esTankCache[tank].g_iPropsAttached & MT_PROP_FLASHLIGHT)
			{
				vFlashlightProp(tank, flOrigin, flAngles, g_esTankCache[tank].g_iFlashlightColor);
			}
		}

		if (!g_esPlayer[tank].g_bRainbowColor)
		{
			g_esPlayer[tank].g_bRainbowColor = SDKHookEx(tank, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
		}
	}
}

void vSetTankRainbowColor(int tank)
{
	if (g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0)
	{
		return;
	}

	switch (StrEqual(g_esTankCache[tank].g_sSkinColor, "rainbow", false) && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		case true:
		{
			if (!g_esPlayer[tank].g_bRainbowColor)
			{
				g_esPlayer[tank].g_bRainbowColor = SDKHookEx(tank, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
			}
		}
		case false:
		{
			SetEntityRenderMode(tank, RENDER_NORMAL);
			SetEntityRenderColor(tank, iGetRandomColor(g_esTankCache[tank].g_iSkinColor[0]), iGetRandomColor(g_esTankCache[tank].g_iSkinColor[1]), iGetRandomColor(g_esTankCache[tank].g_iSkinColor[2]), iGetRandomColor(g_esTankCache[tank].g_iSkinColor[3]));
		}
	}
}

void vSetTankRock(int rock)
{
	if (bIsValidEntity(rock) && bIsValidEntRef(g_esGeneral.g_iLauncher))
	{
		g_esGeneral.g_iLauncher = EntRefToEntIndex(g_esGeneral.g_iLauncher);

		if (bIsValidEntity(g_esGeneral.g_iLauncher))
		{
			int iTank = GetEntPropEnt(g_esGeneral.g_iLauncher, Prop_Data, "m_hOwnerEntity");
			if (bIsSpecialSupported(iTank))
			{
				SetEntPropEnt(rock, Prop_Data, "m_hThrower", iTank);
				SetEntPropEnt(rock, Prop_Data, "m_hOwnerEntity", g_esGeneral.g_iLauncher);
				vSetRockModel(iTank, rock);
				vSetRockEffects(iTank, rock);
				vSetRockColor(iTank, rock);
				vRockThrowForward(iTank, rock);
			}
		}
	}
}

void vSetTankThrowInterval(int tank)
{
	float flInterval = bIsTank(tank) ? g_esTankCache[tank].g_flThrowInterval : g_esTankCache[tank].g_flSpecialInterval;
	if (bIsInfected(tank) && flInterval > 0.0)
	{
		int iAbility = GetEntPropEnt(tank, Prop_Send, "m_customAbility");
		if (iAbility > 0)
		{
			SetEntPropFloat(iAbility, Prop_Send, "m_duration", flInterval);
			SetEntPropFloat(iAbility, Prop_Send, "m_timestamp", (GetGameTime() + flInterval));
		}
	}
}

void vSetupTankControl(int oldTank, int newTank)
{
	vSetTankColor(newTank, g_esPlayer[oldTank].g_iTankType);
	vCopyTankStats(oldTank, newTank);
	vResetTank(oldTank, false);
	vResetTank2(oldTank, false);
	vCacheTankSettings(oldTank);
	CreateTimer(0.25, tTimerControlTank, GetClientUserId(newTank), TIMER_FLAG_NO_MAPCHANGE);
}

void vSetupTankCustomSpawn(int admin, int specType, char[] type, bool log = true)
{
	int iType = StringToInt(type);

	switch (iType)
	{
		case -1, 0: g_esGeneral.g_iChosenType = iType;
		default: g_esGeneral.g_iChosenType = iClamp(g_esTank[iType].g_iRecordedType[0], 1, MT_MAXTYPES);
	}

	vSpawnTank(admin, specType, log, 1, 0, false);
}

void vSetupTankParticleEffects(int tank)
{
	if (bIsSpecialSupported(tank) && g_esTankCache[tank].g_iBodyEffects > 0 && (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2))
	{
		if ((g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_BLOOD) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[0] && !g_esPlayer[tank].g_bBlood)
		{
			g_esPlayer[tank].g_bBlood = true;

			CreateTimer(0.75, tTimerBloodEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_ELECTRICITY) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[1] && !g_esPlayer[tank].g_bElectric)
		{
			g_esPlayer[tank].g_bElectric = true;

			CreateTimer(0.75, tTimerElectricEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_FIRE) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[2] && !g_esPlayer[tank].g_bFire)
		{
			g_esPlayer[tank].g_bFire = true;

			CreateTimer(0.75, tTimerFireEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_ICE) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[3] && !g_esPlayer[tank].g_bIce)
		{
			g_esPlayer[tank].g_bIce = true;

			CreateTimer(2.0, tTimerIceEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_METEOR) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[4] && !g_esPlayer[tank].g_bMeteor)
		{
			g_esPlayer[tank].g_bMeteor = true;

			CreateTimer(6.0, tTimerMeteorEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if ((g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_SMOKE) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[5] && !g_esPlayer[tank].g_bSmoke)
		{
			g_esPlayer[tank].g_bSmoke = true;

			CreateTimer(1.5, tTimerSmokeEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if (g_bSecondGame && (g_esTankCache[tank].g_iBodyEffects & MT_PARTICLE_SPIT) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[tank].g_flBodyChance[6] && !g_esPlayer[tank].g_bSpit)
		{
			g_esPlayer[tank].g_bSpit = true;

			CreateTimer(2.0, tTimerSpitEffect, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}
	}
}

void vSetupTankSpawn(int admin, int specType, char[] type, bool spawn = false, bool log = true, int amount = 1, int mode = 0, bool blind = true)
{
	g_esGeneral.g_bBlindType = blind;
	int iType = StringToInt(type);

	switch (iType)
	{
		case -1: g_esGeneral.g_iChosenType = iType;
		case 0:
		{
			if (bIsValidClient(admin) && bIsDeveloper(admin, .real = true) && StrEqual(type, "mt_dev_access", false))
			{
				g_esDeveloper[admin].g_iDevAccess = amount;

				vSetupDeveloper(admin);
				MT_PrintToChat(admin, "%s %s{mint}, your current access level for testing has been set to{yellow} %i{mint}.", MT_TAG5, MT_AUTHOR, amount);

				return;
			}
			else
			{
				bool bCheck = true, bMenu = true;
				char sPhrase[32], sTankName[64];
				int iClass = 8, iCycleCount = 0, iCycleTypes[MT_MAXTYPES + 1], iMin = iGetMinType(specType, (specType == iClass)), iMax = iGetMaxType(specType, (specType == iClass)),
					iSpecType = (specType != iClass) ? specType : 0, iRealType = 0, iTypeCount = 0, iTankTypes[MT_MAXTYPES + 1];
				for (int iIndex = iMin; iIndex <= iMax; iIndex++)
				{
					if (iIndex <= 0)
					{
						continue;
					}

					iRealType = g_esTank[iIndex].g_iRecordedType[0];
					bMenu = bIsMenuEnabled(iRealType, specType);

					vRecycleType(specType, iRealType, true);

					switch (specType)
					{
						case 1: bCheck = bIsSmokerEnabled(iRealType) && bMenu;
						case 2: bCheck = bIsBoomerEnabled(iRealType) && bMenu;
						case 3: bCheck = bIsHunterEnabled(iRealType) && bMenu;
						case 4: bCheck = bIsSpitterEnabled(iRealType) && bMenu;
						case 5: bCheck = bIsJockeyEnabled(iRealType) && bMenu;
						case 6: bCheck = bIsChargerEnabled(iRealType) && bMenu;
						default: bCheck = bIsTankEnabled(iRealType) && bMenu;
					}

					vGetTankTranslatedName(sPhrase, sizeof sPhrase, .type = iIndex, .specType = specType);
					SetGlobalTransTarget(admin);
					FormatEx(sTankName, sizeof sTankName, "%T", sPhrase, admin);
					if (!bCheck || !bHasCoreAdminAccess(admin, iRealType) || !bIsTypeAvailable(iRealType, admin) || bAreHumansRequired(iRealType, specType) || !bCanTypeSpawn(iRealType, specType) || !bIsRightGame(iRealType, specType) || bIsAreaNarrow(admin, g_esTank[iRealType].g_flOpenAreasOnly) || bIsAreaWide(admin, g_esTank[iRealType].g_flCloseAreasOnly) || (!StrEqual(type, "random", false) && StrContains(sTankName, type, false) == -1))
					{
						continue;
					}

					iCycleTypes[iCycleCount + 1] = iRealType;
					iCycleCount++;

					if (bIsTypeCycled(specType, iRealType, true))
					{
						continue;
					}

					g_esGeneral.g_iChosenType = iRealType;
					iTankTypes[iTypeCount + 1] = iRealType;
					iTypeCount++;
				}

				g_esGeneral.g_bRecycleTypes2 = false;
				g_esSpecific.g_bRecycleTypes2[iSpecType] = false;
				int iFinalCount = (iTypeCount > 0) ? iTypeCount : iCycleCount;

				switch (iFinalCount)
				{
					case 0:
					{
						MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestFailed");

						return;
					}
					case 1:
					{
						int iChosen = g_esGeneral.g_iChosenType;

						switch (specType)
						{
							case 1: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceededSmoker", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 2: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceededBoomer", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 3: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceededHunter", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 4: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceededSpitter", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 5: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceededJockey", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 6: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceededCharger", iChosen, g_esTank[iChosen].g_iRealType[0]);
							default: MT_PrintToChat(admin, "%s %t", MT_TAG3, "RequestSucceeded", iChosen, g_esTank[iChosen].g_iRealType[0]);
						}
					}
					default:
					{
						bool bLinear = iGetCycleType(specType) >= 3;
						g_esGeneral.g_iChosenType = (iTypeCount > 0) ? iTankTypes[(bLinear ? 1 : MT_GetRandomInt(1, iTypeCount))] : iCycleTypes[(bLinear ? 1 : MT_GetRandomInt(1, iCycleCount))];
						int iChosen = g_esGeneral.g_iChosenType;
						g_esGeneral.g_bRecycleTypes2 = (specType == iClass && iTypeCount <= 0 && iCycleCount > 0);
						g_esTank[iChosen].g_bTypeCycled2 = (specType == iClass);
						g_esSpecific.g_bRecycleTypes2[iSpecType] = (specType != iClass && iTypeCount <= 0 && iCycleCount > 0);
						g_esSpecial[iChosen].g_bTypeCycled2[iSpecType] = (specType != iClass);

						switch (specType)
						{
							case 1: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatchesSmoker", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 2: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatchesBoomer", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 3: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatchesHunter", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 4: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatchesSpitter", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 5: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatchesJockey", iChosen, g_esTank[iChosen].g_iRealType[0]);
							case 6: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatchesCharger", iChosen, g_esTank[iChosen].g_iRealType[0]);
							default: MT_PrintToChat(admin, "%s %t", MT_TAG3, "MultipleMatches", iChosen, g_esTank[iChosen].g_iRealType[0]);
						}
					}
				}
			}
		}
		default: g_esGeneral.g_iChosenType = iClamp(g_esTank[iType].g_iRecordedType[0], 1, MT_MAXTYPES);
	}

	bool bAdmin = bIsDeveloper(admin, .real = true) || CheckCommandAccess(admin, "sm_tank", ADMFLAG_ROOT, true);

	switch (bIsInfected(admin))
	{
		case true:
		{
			switch (bIsInfected(admin, MT_CHECK_FAKECLIENT))
			{
				case true:
				{
					switch (spawn)
					{
						case true: vSpawnTank(admin, specType, log, amount, mode, blind);
						case false:
						{
							if ((GetClientButtons(admin) & IN_SPEED) && bAdmin)
							{
								vChangeTank(admin, specType, amount, mode, blind);
							}
							else
							{
								int iTime = GetTime();

								switch (g_esPlayer[admin].g_iCooldown >= iTime && g_esPlayer[admin].g_bInitialRound == g_esGeneral.g_bNextRound)
								{
									case true:
									{
										switch (specType)
										{
											case 1: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldownSmoker", (g_esPlayer[admin].g_iCooldown - iTime));
											case 2: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldownBoomer", (g_esPlayer[admin].g_iCooldown - iTime));
											case 3: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldownHunter", (g_esPlayer[admin].g_iCooldown - iTime));
											case 4: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldownSpitter", (g_esPlayer[admin].g_iCooldown - iTime));
											case 5: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldownJockey", (g_esPlayer[admin].g_iCooldown - iTime));
											case 6: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldownCharger", (g_esPlayer[admin].g_iCooldown - iTime));
											default: MT_PrintToChat(admin, "%s %t", MT_TAG3, "HumanCooldown", (g_esPlayer[admin].g_iCooldown - iTime));
										}
									}
									case false:
									{
										g_esPlayer[admin].g_iCooldown = -1;
										g_esPlayer[admin].g_bInitialRound = g_esGeneral.g_bNextRound;

										vSetTankColor(admin, g_esGeneral.g_iChosenType);
										vTankSpawn(admin, 5, specType);
										vExternalView(admin, 1.5);

										if (g_esGeneral.g_iMasterControl <= 0 && (!bIsDeveloper(admin, 0) && !CheckCommandAccess(admin, "mt_adminversus", ADMFLAG_ROOT, false)))
										{
											g_esPlayer[admin].g_iCooldown = (iTime + g_esGeneral.g_iHumanCooldown);
										}
									}
								}

								g_esGeneral.g_bBlindType = false;
								g_esGeneral.g_iChosenType = 0;
							}
						}
					}
				}
				case false: vSpawnTank(admin, specType, false, amount, mode, blind);
			}
		}
		case false:
		{
			if (g_esGeneral.g_iSpawnMode == 2 || !bIsCompetitiveMode())
			{
				switch (bAdmin)
				{
					case true: vChangeTank(admin, specType, amount, mode, blind);
					case false: MT_PrintToChat(admin, "%s %t", MT_TAG2, "NoCommandAccess");
				}
			}
			else if ((GetClientButtons(admin) & IN_SPEED) && bAdmin)
			{
				vChangeTank(admin, specType, amount, mode, blind);
			}
			else
			{
				int iIndex = g_esTank[iType].g_iRecordedType[0];
				g_esPlayer[admin].g_iPersonalType = iClamp(iIndex, -1, MT_MAXTYPES);
				g_esTeammate[admin].g_iPersonalType[specType] = iClamp(iIndex, -1, MT_MAXTYPES);

				char sName[64];
				vGetTankTranslatedName(sName, sizeof sName, .type = iType, .specType = specType);

				switch (specType)
				{
					case 1: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalTypeSmoker", sName, iIndex, iType);
					case 2: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalTypeBoomer", sName, iIndex, iType);
					case 3: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalTypeHunter", sName, iIndex, iType);
					case 4: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalTypeSpitter", sName, iIndex, iType);
					case 5: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalTypeJockey", sName, iIndex, iType);
					case 6: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalTypeCharger", sName, iIndex, iType);
					default: MT_PrintToChat(admin, "%s %t", MT_TAG2, "PersonalType", sName, iIndex, iType);
				}
			}
		}
	}
}

void vSpawnMessages(int tank, int specType)
{
	if (bIsSpecialSupported(tank, MT_CHECK_FAKECLIENT) && bIsHumanSupported(tank, specType) && bHasCoreAdminAccess(tank))
	{
		switch (specType)
		{
			case 1: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessageSmoker");
			case 2: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessageBoomer");
			case 3: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessageHunter");
			case 4: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessageSpitter");
			case 5: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessageJockey");
			case 6: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessageCharger");
			default: MT_PrintToChat(tank, "%s %t", MT_TAG3, "SpawnMessage");
		}

		MT_PrintToChat(tank, "%s %t", MT_TAG2, "AbilityButtons");
		MT_PrintToChat(tank, "%s %t", MT_TAG2, "AbilityButtons2");
		MT_PrintToChat(tank, "%s %t", MT_TAG2, "AbilityButtons3");
		MT_PrintToChat(tank, "%s %t", MT_TAG2, "AbilityButtons4");
	}
}

void vSpawnModes(int tank, bool status)
{
	g_esPlayer[tank].g_bBoss = status;
	g_esPlayer[tank].g_bCombo = status;
	g_esPlayer[tank].g_bRandomized = status;
	g_esPlayer[tank].g_bTransformed = status;
}

void vSpawnTank(int admin, int specType, bool log = true, int amount, int mode, bool blind)
{
	char sCommand[32], sParameter[32];
	FormatEx(sCommand, sizeof sCommand, "z_spawn%s", (g_bSecondGame ? "_old" : ""));

	switch (specType)
	{
		case 1: FormatEx(sParameter, sizeof sParameter, "smoker%s", ((mode == 0) ? "" : " auto"));
		case 2: FormatEx(sParameter, sizeof sParameter, "boomer%s", ((mode == 0) ? "" : " auto"));
		case 3: FormatEx(sParameter, sizeof sParameter, "hunter%s", ((mode == 0) ? "" : " auto"));
		case 4: FormatEx(sParameter, sizeof sParameter, "spitter%s", ((mode == 0) ? "" : " auto"));
		case 5: FormatEx(sParameter, sizeof sParameter, "jockey%s", ((mode == 0) ? "" : " auto"));
		case 6: FormatEx(sParameter, sizeof sParameter, "charger%s", ((mode == 0) ? "" : " auto"));
		default: FormatEx(sParameter, sizeof sParameter, "tank%s", ((mode == 0) ? "" : " auto"));
	}

	int iType = g_esGeneral.g_iChosenType;
	g_esGeneral.g_bForceSpawned = true;

	switch (amount)
	{
		case 1: vCheatCommand(admin, sCommand, sParameter);
		default:
		{
			for (int iAmount = 0; iAmount <= amount; iAmount++)
			{
				if (iAmount < amount)
				{
					if (bIsValidClient(admin))
					{
						vCheatCommand(admin, sCommand, sParameter);

						g_esGeneral.g_bBlindType = blind;
						g_esGeneral.g_bForceSpawned = true;
						g_esGeneral.g_iChosenType = iType;
					}
				}
				else if (iAmount == amount)
				{
					g_esGeneral.g_bBlindType = false;
					g_esGeneral.g_iChosenType = 0;
				}
			}
		}
	}

	if (log)
	{
		char sName[33];

		switch (iType)
		{
			case -1:
			{
				switch (specType)
				{
					case 1, 2, 3, 4, 5, 6: FormatEx(sName, sizeof sName, g_sSpecialNames[specType]);
					default: FormatEx(sName, sizeof sName, "Tank");
				}
			}
			default:
			{
				switch (specType)
				{
					case 1: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sSmokerName);
					case 2: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sBoomerName);
					case 3: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sHunterName);
					case 4: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sSpitterName);
					case 5: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sJockeyName);
					case 6: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sChargerName);
					default: strcopy(sName, sizeof sName, g_esTank[iType].g_sTankName);
				}
			}
		}

		vLogCommand(admin, MT_CMD_SPAWN, "%s %N:{default} Spawned{mint} %i{olive} %s%s{default}.", MT_TAG5, admin, amount, sName, ((amount > 1) ? "s" : ""));
		vLogMessage(MT_LOG_SERVER, _, "%s %N: Spawned %i %s%s.", MT_TAG, admin, amount, sName, ((amount > 1) ? "s" : ""));
	}
}

void vTankSpawn(int tank, int mode = 0, int specType = 0)
{
	int iSpecType = (specType <= 0) ? g_esPlayer[tank].g_iInfectedType : specType;
	DataPack dpTankSpawn = new DataPack();
	dpTankSpawn.WriteCell(GetClientUserId(tank));
	dpTankSpawn.WriteCell(mode);
	dpTankSpawn.WriteCell(iSpecType);
	RequestFrame(vTankSpawnFrame, dpTankSpawn);
}

void vZedTime(float duration)
{
	if (duration > 0.0)
	{
		int iTimescale = CreateEntityByName("func_timescale");
		if (bIsValidEntity(iTimescale))
		{
			DispatchKeyValueFloat(iTimescale, "desiredTimescale", 0.2);
			DispatchKeyValueFloat(iTimescale, "acceleration", 2.0);
			DispatchKeyValueFloat(iTimescale, "minBlendRate", 1.0);
			DispatchKeyValueFloat(iTimescale, "blendDeltaMultiplier", 2.0);

			DispatchSpawn(iTimescale);
			AcceptEntityInput(iTimescale, "Start");

			CreateTimer(duration, tTimerRemoveTimescale, EntIndexToEntRef(iTimescale), TIMER_FLAG_NO_MAPCHANGE);
		}
	}
}

/**
 * Config settings functions
 **/

void vCacheInfectedSettings(int infected, int type = -1)
{
	bool bCommon = bIsCommonInfected(infected), bWitch = bIsWitch(infected);
	int iType = (type != -1) ? type : g_esInfected[infected].g_iTankType;
	if (bCommon || bWitch)
	{
		g_esInfectedCache[infected].g_iMobVariants = iGetSettingValue(true, true, g_esHorde[iType].g_iMobVariants, g_esMob.g_iMobVariants, 1);
		if ((bCommon && (g_esInfectedCache[infected].g_iMobVariants & MT_MOBVARIANT_COMMON)) || (bWitch && (g_esInfectedCache[infected].g_iMobVariants & MT_MOBVARIANT_WITCH)))
		{
			if (bWitch)
			{
				g_esInfectedCache[infected].g_flWitchMutateChance = flGetSettingValue(true, true, g_esHorde[iType].g_flWitchMutateChance, g_esMob.g_flWitchMutateChance, 1);
				g_esInfectedCache[infected].g_flWitchRange = flGetSettingValue(true, true, g_esHorde[iType].g_flWitchRange, g_esMob.g_flWitchRange, 1);
				g_esInfectedCache[infected].g_iWitchFilter = iGetSettingValue(true, true, g_esHorde[iType].g_iWitchFilter, g_esMob.g_iWitchFilter, 1);
				g_esInfectedCache[infected].g_iWitchMode = iGetSettingValue(true, true, g_esHorde[iType].g_iWitchMode, g_esMob.g_iWitchMode, 1);
				g_esInfectedCache[infected].g_iWitchTypes = iGetSettingValue(true, true, g_esHorde[iType].g_iWitchTypes, g_esMob.g_iWitchTypes, 1);
			}
			else if (bCommon)
			{
				g_esInfectedCache[infected].g_flCommonDamagePoints = flGetSettingValue(true, true, g_esHorde[iType].g_flCommonDamagePoints, g_esMob.g_flCommonDamagePoints, 1);
				g_esInfectedCache[infected].g_flCommonDeathPoints = flGetSettingValue(true, true, g_esHorde[iType].g_flCommonDeathPoints, g_esMob.g_flCommonDeathPoints, 1);
			}

			g_esInfectedCache[infected].g_iBodyEffects = iGetSettingValue(true, true, g_esHorde[iType].g_iBodyEffects, g_esTank[iType].g_iBodyEffects, 1);
			g_esInfectedCache[infected].g_iDisplayHealth = iGetSubSettingValue(true, true, g_esHorde[iType].g_iDisplayHealth, g_esTank[iType].g_iDisplayHealth, g_esMob.g_iDisplayHealth, g_esGeneral.g_iDisplayHealth, 1);
			g_esInfectedCache[infected].g_iDisplayHealthType = iGetSubSettingValue(true, true, g_esHorde[iType].g_iDisplayHealthType, g_esTank[iType].g_iDisplayHealthType, g_esMob.g_iDisplayHealthType, g_esGeneral.g_iDisplayHealthType, 1);
			g_esInfectedCache[infected].g_iGlowEnabled = iGetSettingValue(true, true, g_esHorde[iType].g_iGlowEnabled, g_esTank[iType].g_iGlowEnabled, 1);
			g_esInfectedCache[infected].g_iGlowFlashing = iGetSettingValue(true, true, g_esHorde[iType].g_iGlowFlashing, g_esTank[iType].g_iGlowFlashing, 1);
			g_esInfectedCache[infected].g_iGlowMaxRange = iGetSettingValue(true, true, g_esHorde[iType].g_iGlowMaxRange, g_esTank[iType].g_iGlowMaxRange, 1);
			g_esInfectedCache[infected].g_iGlowMinRange = iGetSettingValue(true, true, g_esHorde[iType].g_iGlowMinRange, g_esTank[iType].g_iGlowMinRange, 1);
			g_esInfectedCache[infected].g_iGlowType = iGetSettingValue(true, true, g_esHorde[iType].g_iGlowType, g_esTank[iType].g_iGlowType, 1);

			vGetSettingValue(true, true, g_esInfectedCache[infected].g_sGlowColor, sizeof esInfectedCache::g_sGlowColor, g_esHorde[iType].g_sGlowColor, g_esTank[iType].g_sGlowColor);
			vGetSubSettingValue(true, true, g_esInfectedCache[infected].g_sHealthCharacters, sizeof esInfectedCache::g_sHealthCharacters, g_esHorde[iType].g_sHealthCharacters, g_esTank[iType].g_sHealthCharacters, g_esMob.g_sHealthCharacters, g_esGeneral.g_sHealthCharacters);
			vGetSettingValue(true, true, g_esInfectedCache[infected].g_sSkinColor, sizeof esInfectedCache::g_sSkinColor, g_esHorde[iType].g_sSkinColor, g_esTank[iType].g_sSkinColor);

			for (int iPos = 0; iPos < (sizeof esInfectedCache::g_flBodyChance); iPos++)
			{
				g_esInfectedCache[infected].g_flBodyChance[iPos] = flGetSettingValue(true, true, g_esHorde[iType].g_flBodyChance[iPos], g_esTank[iType].g_flBodyChance[iPos], 1);

				if (iPos < (sizeof esInfectedCache::g_iSkinColor))
				{
					g_esInfectedCache[infected].g_iSkinColor[iPos] = iGetSettingValue(true, true, g_esHorde[iType].g_iSkinColor[iPos], g_esTank[iType].g_iSkinColor[iPos], 1);
				}

				if (iPos < (sizeof esInfectedCache::g_iGlowColor))
				{
					g_esInfectedCache[infected].g_iGlowColor[iPos] = iGetSettingValue(true, true, g_esHorde[iType].g_iGlowColor[iPos], g_esTank[iType].g_iGlowColor[iPos], 1);
				}
			}
		}
		else
		{
			if (bWitch)
			{
				g_esInfectedCache[infected].g_flWitchMutateChance = 0.0;
				g_esInfectedCache[infected].g_flWitchRange = 0.0;
				g_esInfectedCache[infected].g_iWitchFilter = 0;
				g_esInfectedCache[infected].g_iWitchMode = 0;
				g_esInfectedCache[infected].g_iWitchTypes = 0;
			}
			else if (bCommon)
			{
				g_esInfectedCache[infected].g_flCommonDamagePoints = 0.0;
				g_esInfectedCache[infected].g_flCommonDeathPoints = 0.0;
			}

			g_esInfectedCache[infected].g_sGlowColor[0] = '\0';
			g_esInfectedCache[infected].g_sHealthCharacters[0] = '\0';
			g_esInfectedCache[infected].g_sSkinColor[0] = '\0';
			g_esInfectedCache[infected].g_iBodyEffects = 0;
			g_esInfectedCache[infected].g_iDisplayHealth = 0;
			g_esInfectedCache[infected].g_iDisplayHealthType = 0;
			g_esInfectedCache[infected].g_iGlowEnabled = 0;
			g_esInfectedCache[infected].g_iGlowFlashing = 0;
			g_esInfectedCache[infected].g_iGlowMaxRange = 0;
			g_esInfectedCache[infected].g_iGlowMinRange = 0;
			g_esInfectedCache[infected].g_iGlowType = 0;

			for (int iPos = 0; iPos < (sizeof esInfectedCache::g_flBodyChance); iPos++)
			{
				g_esInfectedCache[infected].g_flBodyChance[iPos] = 0.0;

				if (iPos < (sizeof esInfectedCache::g_iSkinColor))
				{
					g_esInfectedCache[infected].g_iSkinColor[iPos] = 255;
				}

				if (iPos < (sizeof esInfectedCache::g_iGlowColor))
				{
					g_esInfectedCache[infected].g_iGlowColor[iPos] = 255;
				}
			}
		}
	}
}

void vCacheTankSettings(int tank, int type = -1, bool abilitiesOnly = false, bool visualsOnly = false)
{
	bool bAccess = bIsValidClient(tank) && bHasCoreAdminAccess(tank), bHuman = bIsValidClient(tank, MT_CHECK_FAKECLIENT);
	int iType = (type != -1) ? type : g_esPlayer[tank].g_iTankType;
	if (!abilitiesOnly)
	{
		if (bIsSpecialInfected(tank, MT_CHECK_INDEX|MT_CHECK_INGAME))
		{
			int iSpecType = g_esPlayer[tank].g_iInfectedType - 1;
			g_esTankCache[tank].g_iSpecialTypes = iGetSettingValue(bAccess, true, g_esSpecial[iType].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
			if (g_esTankCache[tank].g_iSpecialTypes > 0 && g_esTankCache[tank].g_iSpecialTypes & (1 << iSpecType))
			{
				if (!visualsOnly)
				{
					g_esTankCache[tank].g_flArmorDuration = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flArmorDuration, g_esTank[iType].g_flArmorDuration, g_esSpecific.g_flArmorDuration, g_esGeneral.g_flArmorDuration, 1);
					g_esTankCache[tank].g_flArmorDuration = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flArmorDuration, g_esPlayer[tank].g_flArmorDuration, g_esTankCache[tank].g_flArmorDuration, g_esTankCache[tank].g_flArmorDuration, 1);
					g_esTankCache[tank].g_flArmorPercentage = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flArmorPercentage, g_esTank[iType].g_flArmorPercentage, g_esSpecific.g_flArmorPercentage, g_esGeneral.g_flArmorPercentage, 1);
					g_esTankCache[tank].g_flArmorPercentage = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flArmorPercentage, g_esPlayer[tank].g_flArmorPercentage, g_esTankCache[tank].g_flArmorPercentage, g_esTankCache[tank].g_flArmorPercentage, 1);
					g_esTankCache[tank].g_flArmorResistance[0] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flArmorResistance[0], g_esTank[iType].g_flArmorResistance[0], g_esSpecific.g_flArmorResistance[0], g_esGeneral.g_flArmorResistance[0], 1);
					g_esTankCache[tank].g_flArmorResistance[0] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flArmorResistance[0], g_esPlayer[tank].g_flArmorResistance[0], g_esTankCache[tank].g_flArmorResistance[0], g_esTankCache[tank].g_flArmorResistance[0], 1);
					g_esTankCache[tank].g_flArmorResistance[1] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flArmorResistance[1], g_esTank[iType].g_flArmorResistance[1], g_esSpecific.g_flArmorResistance[1], g_esGeneral.g_flArmorResistance[1], 1);
					g_esTankCache[tank].g_flArmorResistance[1] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flArmorResistance[1], g_esPlayer[tank].g_flArmorResistance[1], g_esTankCache[tank].g_flArmorResistance[1], g_esTankCache[tank].g_flArmorResistance[1], 1);
					g_esTankCache[tank].g_flAttackInterval = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flAttackInterval, g_esTank[iType].g_flAttackInterval, g_esSpecific.g_flAttackInterval, g_esGeneral.g_flAttackInterval, 1);
					g_esTankCache[tank].g_flAttackInterval = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flAttackInterval, g_esPlayer[tank].g_flAttackInterval, g_esTankCache[tank].g_flAttackInterval, g_esTankCache[tank].g_flAttackInterval, 1);
					g_esTankCache[tank].g_flBurnDuration = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flBurnDuration, g_esTank[iType].g_flBurnDuration, g_esSpecific.g_flBurnDuration, g_esGeneral.g_flBurnDuration, 1);
					g_esTankCache[tank].g_flBurnDuration = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flBurnDuration, g_esPlayer[tank].g_flBurnDuration, g_esTankCache[tank].g_flBurnDuration, g_esTankCache[tank].g_flBurnDuration, 1);
					g_esTankCache[tank].g_flBurntSkin = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flBurntSkin, g_esTank[iType].g_flBurntSkin, g_esSpecific.g_flBurntSkin, g_esGeneral.g_flBurntSkin, 1, -1.0);
					g_esTankCache[tank].g_flBurntSkin = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flBurntSkin, g_esPlayer[tank].g_flBurntSkin, g_esTankCache[tank].g_flBurntSkin, g_esTankCache[tank].g_flBurntSkin, 1, -1.0);
					g_esTankCache[tank].g_flClawDamage = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flClawDamage, g_esTank[iType].g_flClawDamage, g_esSpecific.g_flClawDamage, g_esGeneral.g_flClawDamage, 1, -1.0);
					g_esTankCache[tank].g_flClawDamage = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flClawDamage, g_esPlayer[tank].g_flClawDamage, g_esTankCache[tank].g_flClawDamage, g_esTankCache[tank].g_flClawDamage, 1, -1.0);
					g_esTankCache[tank].g_flHealPercentMultiplier = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flHealPercentMultiplier, g_esTank[iType].g_flHealPercentMultiplier, g_esSpecific.g_flHealPercentMultiplier, g_esGeneral.g_flHealPercentMultiplier, 1);
					g_esTankCache[tank].g_flHealPercentMultiplier = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flHealPercentMultiplier, g_esPlayer[tank].g_flHealPercentMultiplier, g_esTankCache[tank].g_flHealPercentMultiplier, g_esTankCache[tank].g_flHealPercentMultiplier, 1);
					g_esTankCache[tank].g_flHittableDamage = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flHittableDamage, g_esTank[iType].g_flHittableDamage, g_esSpecific.g_flHittableDamage, g_esGeneral.g_flHittableDamage, 1, -1.0);
					g_esTankCache[tank].g_flHittableDamage = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flHittableDamage, g_esPlayer[tank].g_flHittableDamage, g_esTankCache[tank].g_flHittableDamage, g_esTankCache[tank].g_flHittableDamage, 1, -1.0);
					g_esTankCache[tank].g_flIncapDamageMultiplier = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flIncapDamageMultiplier, g_esTank[iType].g_flIncapDamageMultiplier, g_esSpecific.g_flIncapDamageMultiplier, g_esGeneral.g_flIncapDamageMultiplier, 1);
					g_esTankCache[tank].g_flIncapDamageMultiplier = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flIncapDamageMultiplier, g_esPlayer[tank].g_flIncapDamageMultiplier, g_esTankCache[tank].g_flIncapDamageMultiplier, g_esTankCache[tank].g_flIncapDamageMultiplier, 1);
					g_esTankCache[tank].g_flMeleeHitValue = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flMeleeHitValue, g_esTank[iType].g_flMeleeHitValue, g_esSpecific.g_flMeleeHitValue, g_esGeneral.g_flMeleeHitValue, 1);
					g_esTankCache[tank].g_flMeleeHitValue = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flMeleeHitValue, g_esPlayer[tank].g_flMeleeHitValue, g_esTankCache[tank].g_flMeleeHitValue, g_esTankCache[tank].g_flMeleeHitValue, 1);
					g_esTankCache[tank].g_flPassiveDelay = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flPassiveDelay, g_esTank[iType].g_flPassiveDelay, g_esSpecific.g_flPassiveDelay, g_esGeneral.g_flPassiveDelay, 1);
					g_esTankCache[tank].g_flPassiveDelay = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flPassiveDelay, g_esPlayer[tank].g_flPassiveDelay, g_esTankCache[tank].g_flPassiveDelay, g_esTankCache[tank].g_flPassiveDelay, 1);
					g_esTankCache[tank].g_flPassiveInterval = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flPassiveInterval, g_esTank[iType].g_flPassiveInterval, g_esSpecific.g_flPassiveInterval, g_esGeneral.g_flPassiveInterval, 1);
					g_esTankCache[tank].g_flPassiveInterval = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flPassiveInterval, g_esPlayer[tank].g_flPassiveInterval, g_esTankCache[tank].g_flPassiveInterval, g_esTankCache[tank].g_flPassiveInterval, 1);
					g_esTankCache[tank].g_flPinDamage = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flPinDamage, g_esTank[iType].g_flRockDamage, g_esSpecific.g_flPinDamage, g_esGeneral.g_flRockDamage, 1, -1.0);
					g_esTankCache[tank].g_flPinDamage = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flPinDamage, g_esPlayer[tank].g_flRockDamage, g_esTankCache[tank].g_flPinDamage, g_esTankCache[tank].g_flPinDamage, 1, -1.0);
					g_esTankCache[tank].g_flRandomDuration = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRandomDuration, g_esPlayer[tank].g_flRandomDuration, g_esSpecial[iType].g_flRandomDuration, g_esTank[iType].g_flRandomDuration, 1);
					g_esTankCache[tank].g_flRandomInterval = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRandomInterval, g_esPlayer[tank].g_flRandomInterval, g_esSpecial[iType].g_flRandomInterval, g_esTank[iType].g_flRandomInterval, 1);
					g_esTankCache[tank].g_flRunSpeed = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flRunSpeed, g_esTank[iType].g_flRunSpeed, g_esSpecific.g_flRunSpeed, g_esGeneral.g_flRunSpeed, 1);
					g_esTankCache[tank].g_flRunSpeed = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRunSpeed, g_esPlayer[tank].g_flRunSpeed, g_esTankCache[tank].g_flRunSpeed, g_esTankCache[tank].g_flRunSpeed, 1);
					g_esTankCache[tank].g_flShieldDuration = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShieldDuration, g_esTank[iType].g_flShieldDuration, g_esSpecific.g_flShieldDuration, g_esGeneral.g_flShieldDuration, 1);
					g_esTankCache[tank].g_flShieldDuration = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShieldDuration, g_esPlayer[tank].g_flShieldDuration, g_esTankCache[tank].g_flShieldDuration, g_esTankCache[tank].g_flShieldDuration, 1);
					g_esTankCache[tank].g_flShieldPercentage = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShieldPercentage, g_esTank[iType].g_flShieldPercentage, g_esSpecific.g_flShieldPercentage, g_esGeneral.g_flShieldPercentage, 1);
					g_esTankCache[tank].g_flShieldPercentage = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShieldPercentage, g_esPlayer[tank].g_flShieldPercentage, g_esTankCache[tank].g_flShieldPercentage, g_esTankCache[tank].g_flShieldPercentage, 1);
					g_esTankCache[tank].g_flShieldRate = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShieldRate, g_esTank[iType].g_flShieldRate, g_esSpecific.g_flShieldRate, g_esGeneral.g_flShieldRate, 1);
					g_esTankCache[tank].g_flShieldRate = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShieldRate, g_esPlayer[tank].g_flShieldRate, g_esTankCache[tank].g_flShieldRate, g_esTankCache[tank].g_flShieldRate, 1);
					g_esTankCache[tank].g_flShieldResistance = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShieldResistance, g_esTank[iType].g_flShieldResistance, g_esSpecific.g_flShieldResistance, g_esGeneral.g_flShieldResistance, 1);
					g_esTankCache[tank].g_flShieldResistance = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShieldResistance, g_esPlayer[tank].g_flShieldResistance, g_esTankCache[tank].g_flShieldResistance, g_esTankCache[tank].g_flShieldResistance, 1);
					g_esTankCache[tank].g_flSpecialInterval = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flSpecialInterval, g_esTank[iType].g_flThrowInterval, g_esSpecific.g_flSpecialInterval, g_esGeneral.g_flThrowInterval, 1);
					g_esTankCache[tank].g_flSpecialInterval = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flSpecialInterval, g_esPlayer[tank].g_flThrowInterval, g_esTankCache[tank].g_flSpecialInterval, g_esTankCache[tank].g_flSpecialInterval, 1);
					g_esTankCache[tank].g_flTransformDelay = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flTransformDelay, g_esPlayer[tank].g_flTransformDelay, g_esSpecial[iType].g_flTransformDelay, g_esTank[iType].g_flTransformDelay, 1);
					g_esTankCache[tank].g_flTransformDuration = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flTransformDuration, g_esPlayer[tank].g_flTransformDuration, g_esSpecial[iType].g_flTransformDuration, g_esTank[iType].g_flTransformDuration, 1);
					g_esTankCache[tank].g_iAnnounceArrival = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAnnounceArrival, g_esTank[iType].g_iAnnounceArrival, g_esSpecific.g_iAnnounceArrival, g_esGeneral.g_iAnnounceArrival, 1);
					g_esTankCache[tank].g_iAnnounceArrival = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAnnounceArrival, g_esPlayer[tank].g_iAnnounceArrival, g_esTankCache[tank].g_iAnnounceArrival, g_esTankCache[tank].g_iAnnounceArrival, 1);
					g_esTankCache[tank].g_iAnnounceDeath = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAnnounceDeath, g_esTank[iType].g_iAnnounceDeath, g_esSpecific.g_iAnnounceDeath, g_esGeneral.g_iAnnounceDeath, 1);
					g_esTankCache[tank].g_iAnnounceDeath = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAnnounceDeath, g_esPlayer[tank].g_iAnnounceDeath, g_esTankCache[tank].g_iAnnounceDeath, g_esTankCache[tank].g_iAnnounceDeath, 1);
					g_esTankCache[tank].g_iAnnounceKill = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAnnounceKill, g_esTank[iType].g_iAnnounceKill, g_esSpecific.g_iAnnounceKill, g_esGeneral.g_iAnnounceKill, 1);
					g_esTankCache[tank].g_iAnnounceKill = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAnnounceKill, g_esPlayer[tank].g_iAnnounceKill, g_esTankCache[tank].g_iAnnounceKill, g_esTankCache[tank].g_iAnnounceKill, 1);
					g_esTankCache[tank].g_iArrivalMessage = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iArrivalMessage, g_esTank[iType].g_iArrivalMessage, g_esSpecific.g_iArrivalMessage, g_esGeneral.g_iArrivalMessage, 1);
					g_esTankCache[tank].g_iArrivalMessage = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iArrivalMessage, g_esPlayer[tank].g_iArrivalMessage, g_esTankCache[tank].g_iArrivalMessage, g_esTankCache[tank].g_iArrivalMessage, 1);
					g_esTankCache[tank].g_iArrivalSound = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iArrivalSound, g_esTank[iType].g_iArrivalSound, g_esSpecific.g_iArrivalSound, g_esGeneral.g_iArrivalSound, 1);
					g_esTankCache[tank].g_iArrivalSound = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iArrivalSound, g_esPlayer[tank].g_iArrivalSound, g_esTankCache[tank].g_iArrivalSound, g_esTankCache[tank].g_iArrivalSound, 1);
					g_esTankCache[tank].g_iAutoHop = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAutoHop, g_esTank[iType].g_iAutoHop, g_esSpecific.g_iAutoHop, g_esGeneral.g_iAutoHop, 1);
					g_esTankCache[tank].g_iAutoHop = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAutoHop, g_esPlayer[tank].g_iAutoHop, g_esTankCache[tank].g_iAutoHop, g_esTankCache[tank].g_iAutoHop, 1);
					g_esTankCache[tank].g_iBaseHealth = iGetSubSettingValue(bAccess, true, g_esTank[iType].g_iBaseHealth, g_esSpecific.g_iBaseHealth[0], g_esSpecific.g_iBaseHealth[iSpecType + 1], g_esGeneral.g_iBaseHealth, 1);
					g_esTankCache[tank].g_iBaseHealth = iGetSubSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBaseHealth, g_esSpecial[iType].g_iBaseHealth[0], g_esSpecial[iType].g_iBaseHealth[iSpecType + 1], g_esTankCache[tank].g_iBaseHealth, 1);
					g_esTankCache[tank].g_iBaseHealth = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBaseHealth[0], g_esTeammate[tank].g_iBaseHealth[iSpecType + 1], g_esTankCache[tank].g_iBaseHealth, g_esTankCache[tank].g_iBaseHealth, 1);
					g_esTankCache[tank].g_iBossEffects = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBossEffects, g_esPlayer[tank].g_iBossEffects, g_esSpecial[iType].g_iBossEffects, g_esTank[iType].g_iBossEffects, 1);
					g_esTankCache[tank].g_iBossStages = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBossStages, g_esPlayer[tank].g_iBossStages, g_esSpecial[iType].g_iBossStages, g_esTank[iType].g_iBossStages, 1);
					g_esTankCache[tank].g_iBulletImmunity = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iBulletImmunity, g_esTank[iType].g_iBulletImmunity, g_esSpecific.g_iBulletImmunity, g_esGeneral.g_iBulletImmunity, 1);
					g_esTankCache[tank].g_iBulletImmunity = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBulletImmunity, g_esPlayer[tank].g_iBulletImmunity, g_esTankCache[tank].g_iBulletImmunity, g_esTankCache[tank].g_iBulletImmunity, 1);
					g_esTankCache[tank].g_iDeathDetails = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iDeathDetails, g_esTank[iType].g_iDeathDetails, g_esSpecific.g_iDeathDetails, g_esGeneral.g_iDeathDetails, 1);
					g_esTankCache[tank].g_iDeathDetails = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iDeathDetails, g_esPlayer[tank].g_iDeathDetails, g_esTankCache[tank].g_iDeathDetails, g_esTankCache[tank].g_iDeathDetails, 1);
					g_esTankCache[tank].g_iDeathMessage = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iDeathMessage, g_esTank[iType].g_iDeathMessage, g_esSpecific.g_iDeathMessage, g_esGeneral.g_iDeathMessage, 1);
					g_esTankCache[tank].g_iDeathMessage = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iDeathMessage, g_esPlayer[tank].g_iDeathMessage, g_esTankCache[tank].g_iDeathMessage, g_esTankCache[tank].g_iDeathMessage, 1);
					g_esTankCache[tank].g_iDeathRevert = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iDeathRevert, g_esTank[iType].g_iDeathRevert, g_esSpecific.g_iDeathRevert, g_esGeneral.g_iDeathRevert, 1);
					g_esTankCache[tank].g_iDeathRevert = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iDeathRevert, g_esPlayer[tank].g_iDeathRevert, g_esTankCache[tank].g_iDeathRevert, g_esTankCache[tank].g_iDeathRevert, 1);
					g_esTankCache[tank].g_iDeathSound = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iDeathSound, g_esTank[iType].g_iDeathSound, g_esSpecific.g_iDeathSound, g_esGeneral.g_iDeathSound, 1);
					g_esTankCache[tank].g_iDeathSound = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iDeathSound, g_esPlayer[tank].g_iDeathSound, g_esTankCache[tank].g_iDeathSound, g_esTankCache[tank].g_iDeathSound, 1);
					g_esTankCache[tank].g_iDisplayHealth = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iDisplayHealth, g_esTank[iType].g_iDisplayHealth, g_esSpecific.g_iDisplayHealth, g_esGeneral.g_iDisplayHealth, 1);
					g_esTankCache[tank].g_iDisplayHealth = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iDisplayHealth, g_esPlayer[tank].g_iDisplayHealth, g_esTankCache[tank].g_iDisplayHealth, g_esTankCache[tank].g_iDisplayHealth, 1);
					g_esTankCache[tank].g_iDisplayHealthType = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iDisplayHealthType, g_esTank[iType].g_iDisplayHealthType, g_esSpecific.g_iDisplayHealthType, g_esGeneral.g_iDisplayHealthType, 1);
					g_esTankCache[tank].g_iDisplayHealthType = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iDisplayHealthType, g_esPlayer[tank].g_iDisplayHealthType, g_esTankCache[tank].g_iDisplayHealthType, g_esTankCache[tank].g_iDisplayHealthType, 1);
					g_esTankCache[tank].g_iExplosiveImmunity = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iExplosiveImmunity, g_esTank[iType].g_iExplosiveImmunity, g_esSpecific.g_iExplosiveImmunity, g_esGeneral.g_iExplosiveImmunity, 1);
					g_esTankCache[tank].g_iExplosiveImmunity = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iExplosiveImmunity, g_esPlayer[tank].g_iExplosiveImmunity, g_esTankCache[tank].g_iExplosiveImmunity, g_esTankCache[tank].g_iExplosiveImmunity, 1);
					g_esTankCache[tank].g_iExtraHealth = iGetSubSettingValue(bAccess, true, g_esTank[iType].g_iExtraHealth, g_esSpecific.g_iExtraHealth[0], g_esSpecific.g_iExtraHealth[iSpecType + 1], g_esGeneral.g_iExtraHealth, 2, -1);
					g_esTankCache[tank].g_iExtraHealth = iGetSubSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iExtraHealth, g_esSpecial[iType].g_iExtraHealth[0], g_esSpecial[iType].g_iExtraHealth[iSpecType + 1], g_esTankCache[tank].g_iExtraHealth, 2, -1);
					g_esTankCache[tank].g_iExtraHealth = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iExtraHealth[0], g_esTeammate[tank].g_iExtraHealth[iSpecType + 1], g_esTankCache[tank].g_iExtraHealth, g_esTankCache[tank].g_iExtraHealth, 2, -1);
					g_esTankCache[tank].g_iFireImmunity = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iFireImmunity, g_esTank[iType].g_iFireImmunity, g_esSpecific.g_iFireImmunity, g_esGeneral.g_iFireImmunity, 1);
					g_esTankCache[tank].g_iFireImmunity = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iFireImmunity, g_esPlayer[tank].g_iFireImmunity, g_esTankCache[tank].g_iFireImmunity, g_esTankCache[tank].g_iFireImmunity, 1);
					g_esTankCache[tank].g_iHittableImmunity = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iHittableImmunity, g_esTank[iType].g_iHittableImmunity, g_esSpecific.g_iHittableImmunity, g_esGeneral.g_iHittableImmunity, 1);
					g_esTankCache[tank].g_iHittableImmunity = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iHittableImmunity, g_esPlayer[tank].g_iHittableImmunity, g_esTankCache[tank].g_iHittableImmunity, g_esTankCache[tank].g_iHittableImmunity, 1);
					g_esTankCache[tank].g_iHumanMultiplierMode = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iHumanMultiplierMode, g_esTank[iType].g_iHumanMultiplierMode, g_esSpecific.g_iHumanMultiplierMode, g_esGeneral.g_iHumanMultiplierMode, 1);
					g_esTankCache[tank].g_iHumanMultiplierMode = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iHumanMultiplierMode, g_esPlayer[tank].g_iHumanMultiplierMode, g_esTankCache[tank].g_iHumanMultiplierMode, g_esTankCache[tank].g_iHumanMultiplierMode, 1);
					g_esTankCache[tank].g_iIntangibleBody = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iIntangibleBody, g_esTank[iType].g_iIntangibleBody, g_esSpecific.g_iIntangibleBody, g_esGeneral.g_iIntangibleBody, 1);
					g_esTankCache[tank].g_iIntangibleBody = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iIntangibleBody, g_esPlayer[tank].g_iIntangibleBody, g_esTankCache[tank].g_iIntangibleBody, g_esTankCache[tank].g_iIntangibleBody, 1);
					g_esTankCache[tank].g_iKillMessage = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iKillMessage, g_esTank[iType].g_iKillMessage, g_esSpecific.g_iKillMessage, g_esGeneral.g_iKillMessage, 1);
					g_esTankCache[tank].g_iKillMessage = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iKillMessage, g_esPlayer[tank].g_iKillMessage, g_esTankCache[tank].g_iKillMessage, g_esTankCache[tank].g_iKillMessage, 1);
					g_esTankCache[tank].g_iMeleeHitMode = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMeleeHitMode, g_esTank[iType].g_iMeleeHitMode, g_esSpecific.g_iMeleeHitMode, g_esGeneral.g_iMeleeHitMode, 1);
					g_esTankCache[tank].g_iMeleeHitMode = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMeleeHitMode, g_esPlayer[tank].g_iMeleeHitMode, g_esTankCache[tank].g_iMeleeHitMode, g_esTankCache[tank].g_iMeleeHitMode, 1);
					g_esTankCache[tank].g_iMeleeImmunity = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMeleeImmunity, g_esTank[iType].g_iMeleeImmunity, g_esSpecific.g_iMeleeImmunity, g_esGeneral.g_iMeleeImmunity, 1);
					g_esTankCache[tank].g_iMeleeImmunity = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMeleeImmunity, g_esPlayer[tank].g_iMeleeImmunity, g_esTankCache[tank].g_iMeleeImmunity, g_esTankCache[tank].g_iMeleeImmunity, 1);
					g_esTankCache[tank].g_iMinimumHumans = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMinimumHumans, g_esTank[iType].g_iMinimumHumans, g_esSpecific.g_iMinimumHumans, g_esGeneral.g_iMinimumHumans, 1);
					g_esTankCache[tank].g_iMinimumHumans = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMinimumHumans, g_esPlayer[tank].g_iMinimumHumans, g_esTankCache[tank].g_iMinimumHumans, g_esTankCache[tank].g_iMinimumHumans, 1);
					g_esTankCache[tank].g_iMultiplyHealth = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMultiplyHealth, g_esTank[iType].g_iMultiplyHealth, g_esSpecific.g_iMultiplyHealth, g_esGeneral.g_iMultiplyHealth, 1);
					g_esTankCache[tank].g_iMultiplyHealth = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMultiplyHealth, g_esPlayer[tank].g_iMultiplyHealth, g_esTankCache[tank].g_iMultiplyHealth, g_esTankCache[tank].g_iMultiplyHealth, 1);
					g_esTankCache[tank].g_iPassiveHealth = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iPassiveHealth, g_esTank[iType].g_iPassiveHealth, g_esSpecific.g_iPassiveHealth, g_esGeneral.g_iPassiveHealth, 2, -1);
					g_esTankCache[tank].g_iPassiveHealth = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iPassiveHealth, g_esPlayer[tank].g_iPassiveHealth, g_esTankCache[tank].g_iPassiveHealth, g_esTankCache[tank].g_iPassiveHealth, 2, -1);
					g_esTankCache[tank].g_iRandomSpecial = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRandomSpecial, g_esPlayer[tank].g_iRandomTank, g_esSpecial[iType].g_iRandomSpecial, g_esTank[iType].g_iRandomTank, 1);
					g_esTankCache[tank].g_iSpawnProtection = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iSpawnProtection, g_esTank[iType].g_iSpawnProtection, g_esSpecific.g_iSpawnProtection, g_esGeneral.g_iSpawnProtection, 1);
					g_esTankCache[tank].g_iSpawnProtection = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSpawnProtection, g_esPlayer[tank].g_iSpawnProtection, g_esTankCache[tank].g_iSpawnProtection, g_esTankCache[tank].g_iSpawnProtection, 1);
					g_esTankCache[tank].g_iSpawnType = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSpawnType, g_esPlayer[tank].g_iSpawnType, g_esSpecial[iType].g_iSpawnType, g_esTank[iType].g_iSpawnType, 1);
					g_esTankCache[tank].g_iSpecialNote = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iSpecialNote, g_esTank[iType].g_iTankNote, g_esSpecific.g_iSpecialNote, g_esGeneral.g_iTankNote, 1);
					g_esTankCache[tank].g_iSpecialNote = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSpecialNote, g_esPlayer[tank].g_iTankNote, g_esTankCache[tank].g_iSpecialNote, g_esTankCache[tank].g_iTankNote, 1);
					g_esTankCache[tank].g_iThrowRock = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iThrowRock, g_esTank[iType].g_iThrowRock, g_esSpecific.g_iThrowRock, g_esGeneral.g_iThrowRock, 1);
					g_esTankCache[tank].g_iThrowRock = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iThrowRock, g_esPlayer[tank].g_iThrowRock, g_esTankCache[tank].g_iThrowRock, g_esTankCache[tank].g_iThrowRock, 1);
					g_esTankCache[tank].g_iVocalizeArrival = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iVocalizeArrival, g_esTank[iType].g_iVocalizeArrival, g_esSpecific.g_iVocalizeArrival, g_esGeneral.g_iVocalizeArrival, 1);
					g_esTankCache[tank].g_iVocalizeArrival = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iVocalizeArrival, g_esPlayer[tank].g_iVocalizeArrival, g_esTankCache[tank].g_iVocalizeArrival, g_esTankCache[tank].g_iVocalizeArrival, 1);
					g_esTankCache[tank].g_iVocalizeDeath = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iVocalizeDeath, g_esTank[iType].g_iVocalizeDeath, g_esSpecific.g_iVocalizeDeath, g_esGeneral.g_iVocalizeDeath, 1);
					g_esTankCache[tank].g_iVocalizeDeath = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iVocalizeDeath, g_esPlayer[tank].g_iVocalizeDeath, g_esTankCache[tank].g_iVocalizeDeath, g_esTankCache[tank].g_iVocalizeDeath, 1);
					g_esTankCache[tank].g_iVomitImmunity = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iVomitImmunity, g_esTank[iType].g_iVomitImmunity, g_esSpecific.g_iVomitImmunity, g_esGeneral.g_iVomitImmunity, 1);
					g_esTankCache[tank].g_iVomitImmunity = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iVomitImmunity, g_esPlayer[tank].g_iVomitImmunity, g_esTankCache[tank].g_iVomitImmunity, g_esTankCache[tank].g_iVomitImmunity, 1);

					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sArmorCharacters, sizeof esTankCache::g_sArmorCharacters, g_esSpecial[iType].g_sArmorCharacters, g_esTank[iType].g_sArmorCharacters, g_esSpecific.g_sArmorCharacters, g_esGeneral.g_sArmorCharacters);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sArmorCharacters, sizeof esTankCache::g_sArmorCharacters, g_esTeammate[tank].g_sArmorCharacters, g_esPlayer[tank].g_sArmorCharacters, g_esTankCache[tank].g_sArmorCharacters, g_esTankCache[tank].g_sArmorCharacters);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual, sizeof esTankCache::g_sBodyColorVisual, g_esSpecial[iType].g_sBodyColorVisual, g_esTank[iType].g_sBodyColorVisual, g_esSpecific.g_sBodyColorVisual, g_esGeneral.g_sBodyColorVisual);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual, sizeof esTankCache::g_sBodyColorVisual, g_esTeammate[tank].g_sBodyColorVisual, g_esPlayer[tank].g_sBodyColorVisual, g_esTankCache[tank].g_sBodyColorVisual, g_esTankCache[tank].g_sBodyColorVisual);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual2, sizeof esTankCache::g_sBodyColorVisual2, g_esSpecial[iType].g_sBodyColorVisual2, g_esTank[iType].g_sBodyColorVisual2, g_esSpecific.g_sBodyColorVisual2, g_esGeneral.g_sBodyColorVisual2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual2, sizeof esTankCache::g_sBodyColorVisual2, g_esTeammate[tank].g_sBodyColorVisual2, g_esPlayer[tank].g_sBodyColorVisual2, g_esTankCache[tank].g_sBodyColorVisual2, g_esTankCache[tank].g_sBodyColorVisual2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual3, sizeof esTankCache::g_sBodyColorVisual3, g_esSpecial[iType].g_sBodyColorVisual3, g_esTank[iType].g_sBodyColorVisual3, g_esSpecific.g_sBodyColorVisual3, g_esGeneral.g_sBodyColorVisual3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual3, sizeof esTankCache::g_sBodyColorVisual3, g_esTeammate[tank].g_sBodyColorVisual3, g_esPlayer[tank].g_sBodyColorVisual3, g_esTankCache[tank].g_sBodyColorVisual3, g_esTankCache[tank].g_sBodyColorVisual3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual4, sizeof esTankCache::g_sBodyColorVisual4, g_esSpecial[iType].g_sBodyColorVisual4, g_esTank[iType].g_sBodyColorVisual4, g_esSpecific.g_sBodyColorVisual4, g_esGeneral.g_sBodyColorVisual4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual4, sizeof esTankCache::g_sBodyColorVisual4, g_esTeammate[tank].g_sBodyColorVisual4, g_esPlayer[tank].g_sBodyColorVisual4, g_esTankCache[tank].g_sBodyColorVisual4, g_esTankCache[tank].g_sBodyColorVisual4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sComboSet, sizeof esTankCache::g_sComboSet, g_esTeammate[tank].g_sComboSet, g_esPlayer[tank].g_sComboSet, g_esSpecial[iType].g_sComboSet, g_esTank[iType].g_sComboSet);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward, sizeof esTankCache::g_sFallVoicelineReward, g_esSpecial[iType].g_sFallVoicelineReward, g_esTank[iType].g_sFallVoicelineReward, g_esSpecific.g_sFallVoicelineReward, g_esGeneral.g_sFallVoicelineReward);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward, sizeof esTankCache::g_sFallVoicelineReward, g_esTeammate[tank].g_sFallVoicelineReward, g_esPlayer[tank].g_sFallVoicelineReward, g_esTankCache[tank].g_sFallVoicelineReward, g_esTankCache[tank].g_sFallVoicelineReward);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward2, sizeof esTankCache::g_sFallVoicelineReward2, g_esSpecial[iType].g_sFallVoicelineReward2, g_esTank[iType].g_sFallVoicelineReward2, g_esSpecific.g_sFallVoicelineReward2, g_esGeneral.g_sFallVoicelineReward2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward2, sizeof esTankCache::g_sFallVoicelineReward2, g_esTeammate[tank].g_sFallVoicelineReward2, g_esPlayer[tank].g_sFallVoicelineReward2, g_esTankCache[tank].g_sFallVoicelineReward2, g_esTankCache[tank].g_sFallVoicelineReward2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward3, sizeof esTankCache::g_sFallVoicelineReward3, g_esSpecial[iType].g_sFallVoicelineReward3, g_esTank[iType].g_sFallVoicelineReward3, g_esSpecific.g_sFallVoicelineReward3, g_esGeneral.g_sFallVoicelineReward3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward3, sizeof esTankCache::g_sFallVoicelineReward3, g_esTeammate[tank].g_sFallVoicelineReward3, g_esPlayer[tank].g_sFallVoicelineReward3, g_esTankCache[tank].g_sFallVoicelineReward3, g_esTankCache[tank].g_sFallVoicelineReward3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward4, sizeof esTankCache::g_sFallVoicelineReward4, g_esSpecial[iType].g_sFallVoicelineReward4, g_esTank[iType].g_sFallVoicelineReward4, g_esSpecific.g_sFallVoicelineReward4, g_esGeneral.g_sFallVoicelineReward4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward4, sizeof esTankCache::g_sFallVoicelineReward4, g_esTeammate[tank].g_sFallVoicelineReward4, g_esPlayer[tank].g_sFallVoicelineReward4, g_esTankCache[tank].g_sFallVoicelineReward4, g_esTankCache[tank].g_sFallVoicelineReward4);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sHealthCharacters, sizeof esTankCache::g_sHealthCharacters, g_esSpecial[iType].g_sHealthCharacters, g_esTank[iType].g_sHealthCharacters, g_esSpecific.g_sHealthCharacters, g_esGeneral.g_sHealthCharacters);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sHealthCharacters, sizeof esTankCache::g_sHealthCharacters, g_esTeammate[tank].g_sHealthCharacters, g_esPlayer[tank].g_sHealthCharacters, g_esTankCache[tank].g_sHealthCharacters, g_esTankCache[tank].g_sHealthCharacters);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward, sizeof esTankCache::g_sItemReward, g_esSpecial[iType].g_sItemReward, g_esTank[iType].g_sItemReward, g_esSpecific.g_sItemReward, g_esGeneral.g_sItemReward);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward, sizeof esTankCache::g_sItemReward, g_esTeammate[tank].g_sItemReward, g_esPlayer[tank].g_sItemReward, g_esTankCache[tank].g_sItemReward, g_esTankCache[tank].g_sItemReward);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward2, sizeof esTankCache::g_sItemReward2, g_esSpecial[iType].g_sItemReward2, g_esTank[iType].g_sItemReward2, g_esSpecific.g_sItemReward2, g_esGeneral.g_sItemReward2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward2, sizeof esTankCache::g_sItemReward2, g_esTeammate[tank].g_sItemReward2, g_esPlayer[tank].g_sItemReward2, g_esTankCache[tank].g_sItemReward2, g_esTankCache[tank].g_sItemReward2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward3, sizeof esTankCache::g_sItemReward3, g_esSpecial[iType].g_sItemReward3, g_esTank[iType].g_sItemReward3, g_esSpecific.g_sItemReward3, g_esGeneral.g_sItemReward3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward3, sizeof esTankCache::g_sItemReward3, g_esTeammate[tank].g_sItemReward3, g_esPlayer[tank].g_sItemReward3, g_esTankCache[tank].g_sItemReward3, g_esTankCache[tank].g_sItemReward3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward4, sizeof esTankCache::g_sItemReward4, g_esSpecial[iType].g_sItemReward4, g_esTank[iType].g_sItemReward4, g_esSpecific.g_sItemReward4, g_esGeneral.g_sItemReward4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward4, sizeof esTankCache::g_sItemReward4, g_esTeammate[tank].g_sItemReward4, g_esPlayer[tank].g_sItemReward4, g_esTankCache[tank].g_sItemReward4, g_esTankCache[tank].g_sItemReward4);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual, sizeof esTankCache::g_sLightColorVisual, g_esSpecial[iType].g_sLightColorVisual, g_esTank[iType].g_sLightColorVisual, g_esSpecific.g_sLightColorVisual, g_esGeneral.g_sLightColorVisual);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual, sizeof esTankCache::g_sLightColorVisual, g_esTeammate[tank].g_sLightColorVisual, g_esPlayer[tank].g_sLightColorVisual, g_esTankCache[tank].g_sLightColorVisual, g_esTankCache[tank].g_sLightColorVisual);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual2, sizeof esTankCache::g_sLightColorVisual2, g_esSpecial[iType].g_sLightColorVisual2, g_esTank[iType].g_sLightColorVisual2, g_esSpecific.g_sLightColorVisual2, g_esGeneral.g_sLightColorVisual2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual2, sizeof esTankCache::g_sLightColorVisual2, g_esTeammate[tank].g_sLightColorVisual2, g_esPlayer[tank].g_sLightColorVisual2, g_esTankCache[tank].g_sLightColorVisual2, g_esTankCache[tank].g_sLightColorVisual2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual3, sizeof esTankCache::g_sLightColorVisual3, g_esSpecial[iType].g_sLightColorVisual3, g_esTank[iType].g_sLightColorVisual3, g_esSpecific.g_sLightColorVisual3, g_esGeneral.g_sLightColorVisual3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual3, sizeof esTankCache::g_sLightColorVisual3, g_esTeammate[tank].g_sLightColorVisual3, g_esPlayer[tank].g_sLightColorVisual3, g_esTankCache[tank].g_sLightColorVisual3, g_esTankCache[tank].g_sLightColorVisual3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual4, sizeof esTankCache::g_sLightColorVisual4, g_esSpecial[iType].g_sLightColorVisual4, g_esTank[iType].g_sLightColorVisual4, g_esSpecific.g_sLightColorVisual4, g_esGeneral.g_sLightColorVisual4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual4, sizeof esTankCache::g_sLightColorVisual4, g_esTeammate[tank].g_sLightColorVisual4, g_esPlayer[tank].g_sLightColorVisual4, g_esTankCache[tank].g_sLightColorVisual4, g_esTankCache[tank].g_sLightColorVisual4);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual, sizeof esTankCache::g_sLoopingVoicelineVisual, g_esSpecial[iType].g_sLoopingVoicelineVisual, g_esTank[iType].g_sLoopingVoicelineVisual, g_esSpecific.g_sLoopingVoicelineVisual, g_esGeneral.g_sLoopingVoicelineVisual);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual, sizeof esTankCache::g_sLoopingVoicelineVisual, g_esTeammate[tank].g_sLoopingVoicelineVisual, g_esPlayer[tank].g_sLoopingVoicelineVisual, g_esTankCache[tank].g_sLoopingVoicelineVisual, g_esTankCache[tank].g_sLoopingVoicelineVisual);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual2, sizeof esTankCache::g_sLoopingVoicelineVisual2, g_esSpecial[iType].g_sLoopingVoicelineVisual2, g_esTank[iType].g_sLoopingVoicelineVisual2, g_esSpecific.g_sLoopingVoicelineVisual2, g_esGeneral.g_sLoopingVoicelineVisual2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual2, sizeof esTankCache::g_sLoopingVoicelineVisual2, g_esTeammate[tank].g_sLoopingVoicelineVisual2, g_esPlayer[tank].g_sLoopingVoicelineVisual2, g_esTankCache[tank].g_sLoopingVoicelineVisual2, g_esTankCache[tank].g_sLoopingVoicelineVisual2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual3, sizeof esTankCache::g_sLoopingVoicelineVisual3, g_esSpecial[iType].g_sLoopingVoicelineVisual3, g_esTank[iType].g_sLoopingVoicelineVisual3, g_esSpecific.g_sLoopingVoicelineVisual3, g_esGeneral.g_sLoopingVoicelineVisual3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual3, sizeof esTankCache::g_sLoopingVoicelineVisual3, g_esTeammate[tank].g_sLoopingVoicelineVisual3, g_esPlayer[tank].g_sLoopingVoicelineVisual3, g_esTankCache[tank].g_sLoopingVoicelineVisual3, g_esTankCache[tank].g_sLoopingVoicelineVisual3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual4, sizeof esTankCache::g_sLoopingVoicelineVisual4, g_esSpecial[iType].g_sLoopingVoicelineVisual4, g_esTank[iType].g_sLoopingVoicelineVisual4, g_esSpecific.g_sLoopingVoicelineVisual4, g_esGeneral.g_sLoopingVoicelineVisual4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual4, sizeof esTankCache::g_sLoopingVoicelineVisual4, g_esTeammate[tank].g_sLoopingVoicelineVisual4, g_esPlayer[tank].g_sLoopingVoicelineVisual4, g_esTankCache[tank].g_sLoopingVoicelineVisual4, g_esTankCache[tank].g_sLoopingVoicelineVisual4);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual, sizeof esTankCache::g_sOutlineColorVisual, g_esSpecial[iType].g_sOutlineColorVisual, g_esTank[iType].g_sOutlineColorVisual, g_esSpecific.g_sOutlineColorVisual, g_esGeneral.g_sOutlineColorVisual);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual, sizeof esTankCache::g_sOutlineColorVisual, g_esTeammate[tank].g_sOutlineColorVisual, g_esPlayer[tank].g_sOutlineColorVisual, g_esTankCache[tank].g_sOutlineColorVisual, g_esTankCache[tank].g_sOutlineColorVisual);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual2, sizeof esTankCache::g_sOutlineColorVisual2, g_esSpecial[iType].g_sOutlineColorVisual2, g_esTank[iType].g_sOutlineColorVisual2, g_esSpecific.g_sOutlineColorVisual2, g_esGeneral.g_sOutlineColorVisual2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual2, sizeof esTankCache::g_sOutlineColorVisual2, g_esTeammate[tank].g_sOutlineColorVisual2, g_esPlayer[tank].g_sOutlineColorVisual2, g_esTankCache[tank].g_sOutlineColorVisual2, g_esTankCache[tank].g_sOutlineColorVisual2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual3, sizeof esTankCache::g_sOutlineColorVisual3, g_esSpecial[iType].g_sOutlineColorVisual3, g_esTank[iType].g_sOutlineColorVisual3, g_esSpecific.g_sOutlineColorVisual3, g_esGeneral.g_sOutlineColorVisual3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual3, sizeof esTankCache::g_sOutlineColorVisual3, g_esTeammate[tank].g_sOutlineColorVisual3, g_esPlayer[tank].g_sOutlineColorVisual3, g_esTankCache[tank].g_sOutlineColorVisual3, g_esTankCache[tank].g_sOutlineColorVisual3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual4, sizeof esTankCache::g_sOutlineColorVisual4, g_esSpecial[iType].g_sOutlineColorVisual4, g_esTank[iType].g_sOutlineColorVisual4, g_esSpecific.g_sOutlineColorVisual4, g_esGeneral.g_sOutlineColorVisual4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual4, sizeof esTankCache::g_sOutlineColorVisual4, g_esTeammate[tank].g_sOutlineColorVisual4, g_esPlayer[tank].g_sOutlineColorVisual4, g_esTankCache[tank].g_sOutlineColorVisual4, g_esTankCache[tank].g_sOutlineColorVisual4);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual, sizeof esTankCache::g_sScreenColorVisual, g_esSpecial[iType].g_sScreenColorVisual, g_esTank[iType].g_sScreenColorVisual, g_esSpecific.g_sScreenColorVisual, g_esGeneral.g_sScreenColorVisual);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual, sizeof esTankCache::g_sScreenColorVisual, g_esTeammate[tank].g_sScreenColorVisual, g_esPlayer[tank].g_sScreenColorVisual, g_esTankCache[tank].g_sScreenColorVisual, g_esTankCache[tank].g_sScreenColorVisual);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual2, sizeof esTankCache::g_sScreenColorVisual2, g_esSpecial[iType].g_sScreenColorVisual2, g_esTank[iType].g_sScreenColorVisual2, g_esSpecific.g_sScreenColorVisual2, g_esGeneral.g_sScreenColorVisual2);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual2, sizeof esTankCache::g_sScreenColorVisual2, g_esTeammate[tank].g_sScreenColorVisual2, g_esPlayer[tank].g_sScreenColorVisual2, g_esTankCache[tank].g_sScreenColorVisual2, g_esTankCache[tank].g_sScreenColorVisual2);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual3, sizeof esTankCache::g_sScreenColorVisual3, g_esSpecial[iType].g_sScreenColorVisual3, g_esTank[iType].g_sScreenColorVisual3, g_esSpecific.g_sScreenColorVisual3, g_esGeneral.g_sScreenColorVisual3);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual3, sizeof esTankCache::g_sScreenColorVisual3, g_esTeammate[tank].g_sScreenColorVisual3, g_esPlayer[tank].g_sScreenColorVisual3, g_esTankCache[tank].g_sScreenColorVisual3, g_esTankCache[tank].g_sScreenColorVisual3);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual4, sizeof esTankCache::g_sScreenColorVisual4, g_esSpecial[iType].g_sScreenColorVisual4, g_esTank[iType].g_sScreenColorVisual4, g_esSpecific.g_sScreenColorVisual4, g_esGeneral.g_sScreenColorVisual4);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual4, sizeof esTankCache::g_sScreenColorVisual4, g_esTeammate[tank].g_sScreenColorVisual4, g_esPlayer[tank].g_sScreenColorVisual4, g_esTankCache[tank].g_sScreenColorVisual4, g_esTankCache[tank].g_sScreenColorVisual4);
					vGetSubSettingValue(bAccess, true, g_esTankCache[tank].g_sShieldCharacters, sizeof esTankCache::g_sShieldCharacters, g_esSpecial[iType].g_sShieldCharacters, g_esTank[iType].g_sShieldCharacters, g_esSpecific.g_sShieldCharacters, g_esGeneral.g_sShieldCharacters);
					vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sShieldCharacters, sizeof esTankCache::g_sShieldCharacters, g_esTeammate[tank].g_sShieldCharacters, g_esPlayer[tank].g_sShieldCharacters, g_esTankCache[tank].g_sShieldCharacters, g_esTankCache[tank].g_sShieldCharacters);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sSmokerName, sizeof esTankCache::g_sSmokerName, g_esTeammate[tank].g_sSmokerName, g_esSpecial[iType].g_sSmokerName);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBoomerName, sizeof esTankCache::g_sBoomerName, g_esTeammate[tank].g_sBoomerName, g_esSpecial[iType].g_sBoomerName);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sHunterName, sizeof esTankCache::g_sHunterName, g_esTeammate[tank].g_sHunterName, g_esSpecial[iType].g_sHunterName);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sSpitterName, sizeof esTankCache::g_sSpitterName, g_esTeammate[tank].g_sSpitterName, g_esSpecial[iType].g_sSpitterName);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sJockeyName, sizeof esTankCache::g_sJockeyName, g_esTeammate[tank].g_sJockeyName, g_esSpecial[iType].g_sJockeyName);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sChargerName, sizeof esTankCache::g_sChargerName, g_esTeammate[tank].g_sChargerName, g_esSpecial[iType].g_sChargerName);

					for (int iPos = 0; iPos < (sizeof esTankCache::g_iTransformType); iPos++)
					{
						g_esTankCache[tank].g_iTransformType[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iTransformType[iPos], g_esPlayer[tank].g_iTransformType[iPos], g_esSpecial[iType].g_iTransformType[iPos], g_esTank[iType].g_iTransformType[iPos], 1);

						if (iPos < (sizeof esTankCache::g_iRewardEnabled))
						{
							g_esTankCache[tank].g_flActionDurationReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flActionDurationReward[iPos], g_esTank[iType].g_flActionDurationReward[iPos], g_esSpecific.g_flActionDurationReward[iPos], g_esGeneral.g_flActionDurationReward[iPos], 1);
							g_esTankCache[tank].g_flActionDurationReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flActionDurationReward[iPos], g_esPlayer[tank].g_flActionDurationReward[iPos], g_esTankCache[tank].g_flActionDurationReward[iPos], g_esTankCache[tank].g_flActionDurationReward[iPos], 1);
							g_esTankCache[tank].g_flAdrenalineTimeReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flAdrenalineTimeReward[iPos], g_esTank[iType].g_flAdrenalineTimeReward[iPos], g_esSpecific.g_flAdrenalineTimeReward[iPos], g_esGeneral.g_flAdrenalineTimeReward[iPos], 1);
							g_esTankCache[tank].g_flAdrenalineTimeReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flAdrenalineTimeReward[iPos], g_esPlayer[tank].g_flAdrenalineTimeReward[iPos], g_esTankCache[tank].g_flAdrenalineTimeReward[iPos], g_esTankCache[tank].g_flAdrenalineTimeReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoBoostReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAmmoBoostReward[iPos], g_esTank[iType].g_iAmmoBoostReward[iPos], g_esSpecific.g_iAmmoBoostReward[iPos], g_esGeneral.g_iAmmoBoostReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoBoostReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAmmoBoostReward[iPos], g_esPlayer[tank].g_iAmmoBoostReward[iPos], g_esTankCache[tank].g_iAmmoBoostReward[iPos], g_esTankCache[tank].g_iAmmoBoostReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRefillReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAmmoRefillReward[iPos], g_esTank[iType].g_iAmmoRefillReward[iPos], g_esSpecific.g_iAmmoRefillReward[iPos], g_esGeneral.g_iAmmoRefillReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRefillReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAmmoRefillReward[iPos], g_esPlayer[tank].g_iAmmoRefillReward[iPos], g_esTankCache[tank].g_iAmmoRefillReward[iPos], g_esTankCache[tank].g_iAmmoRefillReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRegenReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iAmmoRegenReward[iPos], g_esTank[iType].g_iAmmoRegenReward[iPos], g_esSpecific.g_iAmmoRegenReward[iPos], g_esGeneral.g_iAmmoRegenReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRegenReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iAmmoRegenReward[iPos], g_esPlayer[tank].g_iAmmoRegenReward[iPos], g_esTankCache[tank].g_iAmmoRegenReward[iPos], g_esTankCache[tank].g_iAmmoRegenReward[iPos], 1);
							g_esTankCache[tank].g_flAttackBoostReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flAttackBoostReward[iPos], g_esTank[iType].g_flAttackBoostReward[iPos], g_esSpecific.g_flAttackBoostReward[iPos], g_esGeneral.g_flAttackBoostReward[iPos], 1);
							g_esTankCache[tank].g_flAttackBoostReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flAttackBoostReward[iPos], g_esPlayer[tank].g_flAttackBoostReward[iPos], g_esTankCache[tank].g_flAttackBoostReward[iPos], g_esTankCache[tank].g_flAttackBoostReward[iPos], 1);
							g_esTankCache[tank].g_iBlazeHealthReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iBlazeHealthReward[iPos], g_esTank[iType].g_iBlazeHealthReward[iPos], g_esSpecific.g_iBlazeHealthReward[iPos], g_esGeneral.g_iBlazeHealthReward[iPos], 1);
							g_esTankCache[tank].g_iBlazeHealthReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBlazeHealthReward[iPos], g_esPlayer[tank].g_iBlazeHealthReward[iPos], g_esTankCache[tank].g_iBlazeHealthReward[iPos], g_esTankCache[tank].g_iBlazeHealthReward[iPos], 1);
							g_esTankCache[tank].g_iBloodDonorReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iBloodDonorReward[iPos], g_esTank[iType].g_iBloodDonorReward[iPos], g_esSpecific.g_iBloodDonorReward[iPos], g_esGeneral.g_iBloodDonorReward[iPos], 1);
							g_esTankCache[tank].g_iBloodDonorReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBloodDonorReward[iPos], g_esPlayer[tank].g_iBloodDonorReward[iPos], g_esTankCache[tank].g_iBloodDonorReward[iPos], g_esTankCache[tank].g_iBloodDonorReward[iPos], 1);
							g_esTankCache[tank].g_iBunnyHopReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iBunnyHopReward[iPos], g_esTank[iType].g_iBunnyHopReward[iPos], g_esSpecific.g_iBunnyHopReward[iPos], g_esGeneral.g_iBunnyHopReward[iPos], 1);
							g_esTankCache[tank].g_iBunnyHopReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBunnyHopReward[iPos], g_esPlayer[tank].g_iBunnyHopReward[iPos], g_esTankCache[tank].g_iBunnyHopReward[iPos], g_esTankCache[tank].g_iBunnyHopReward[iPos], 1);
							g_esTankCache[tank].g_iBurstDoorsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iBurstDoorsReward[iPos], g_esTank[iType].g_iBurstDoorsReward[iPos], g_esSpecific.g_iBurstDoorsReward[iPos], g_esGeneral.g_iBurstDoorsReward[iPos], 1);
							g_esTankCache[tank].g_iBurstDoorsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBurstDoorsReward[iPos], g_esPlayer[tank].g_iBurstDoorsReward[iPos], g_esTankCache[tank].g_iBurstDoorsReward[iPos], g_esTankCache[tank].g_iBurstDoorsReward[iPos], 1);
							g_esTankCache[tank].g_iCleanKillsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iCleanKillsReward[iPos], g_esTank[iType].g_iCleanKillsReward[iPos], g_esSpecific.g_iCleanKillsReward[iPos], g_esGeneral.g_iCleanKillsReward[iPos], 1);
							g_esTankCache[tank].g_iCleanKillsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iCleanKillsReward[iPos], g_esPlayer[tank].g_iCleanKillsReward[iPos], g_esTankCache[tank].g_iCleanKillsReward[iPos], g_esTankCache[tank].g_iCleanKillsReward[iPos], 1);
							g_esTankCache[tank].g_iClusterBombsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iClusterBombsReward[iPos], g_esTank[iType].g_iClusterBombsReward[iPos], g_esSpecific.g_iClusterBombsReward[iPos], g_esGeneral.g_iClusterBombsReward[iPos], 1);
							g_esTankCache[tank].g_iClusterBombsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iClusterBombsReward[iPos], g_esPlayer[tank].g_iClusterBombsReward[iPos], g_esTankCache[tank].g_iClusterBombsReward[iPos], g_esTankCache[tank].g_iClusterBombsReward[iPos], 1);
							g_esTankCache[tank].g_flDamageBoostReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flDamageBoostReward[iPos], g_esTank[iType].g_flDamageBoostReward[iPos], g_esSpecific.g_flDamageBoostReward[iPos], g_esGeneral.g_flDamageBoostReward[iPos], 1);
							g_esTankCache[tank].g_flDamageBoostReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flDamageBoostReward[iPos], g_esPlayer[tank].g_flDamageBoostReward[iPos], g_esTankCache[tank].g_flDamageBoostReward[iPos], g_esTankCache[tank].g_flDamageBoostReward[iPos], 1);
							g_esTankCache[tank].g_flDamageResistanceReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flDamageResistanceReward[iPos], g_esTank[iType].g_flDamageResistanceReward[iPos], g_esSpecific.g_flDamageResistanceReward[iPos], g_esGeneral.g_flDamageResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flDamageResistanceReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flDamageResistanceReward[iPos], g_esPlayer[tank].g_flDamageResistanceReward[iPos], g_esTankCache[tank].g_flDamageResistanceReward[iPos], g_esTankCache[tank].g_flDamageResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flDopamineRadiusReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flDopamineRadiusReward[iPos], g_esTank[iType].g_flDopamineRadiusReward[iPos], g_esSpecific.g_flDopamineRadiusReward[iPos], g_esGeneral.g_flDopamineRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flDopamineRadiusReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flDopamineRadiusReward[iPos], g_esPlayer[tank].g_flDopamineRadiusReward[iPos], g_esTankCache[tank].g_flDopamineRadiusReward[iPos], g_esTankCache[tank].g_flDopamineRadiusReward[iPos], 1);
							g_esTankCache[tank].g_iEternalFlamesReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iEternalFlamesReward[iPos], g_esTank[iType].g_iEternalFlamesReward[iPos], g_esSpecific.g_iEternalFlamesReward[iPos], g_esGeneral.g_iEternalFlamesReward[iPos], 1);
							g_esTankCache[tank].g_iEternalFlamesReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iEternalFlamesReward[iPos], g_esPlayer[tank].g_iEternalFlamesReward[iPos], g_esTankCache[tank].g_iEternalFlamesReward[iPos], g_esTankCache[tank].g_iEternalFlamesReward[iPos], 1);
							g_esTankCache[tank].g_iFastRecoveryReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iFastRecoveryReward[iPos], g_esTank[iType].g_iFastRecoveryReward[iPos], g_esSpecific.g_iFastRecoveryReward[iPos], g_esGeneral.g_iFastRecoveryReward[iPos], 1);
							g_esTankCache[tank].g_iFastRecoveryReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iFastRecoveryReward[iPos], g_esPlayer[tank].g_iFastRecoveryReward[iPos], g_esTankCache[tank].g_iFastRecoveryReward[iPos], g_esTankCache[tank].g_iFastRecoveryReward[iPos], 1);
							g_esTankCache[tank].g_flFireRateReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flFireRateReward[iPos], g_esTank[iType].g_flFireRateReward[iPos], g_esSpecific.g_flFireRateReward[iPos], g_esGeneral.g_flFireRateReward[iPos], 1);
							g_esTankCache[tank].g_flFireRateReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flFireRateReward[iPos], g_esPlayer[tank].g_flFireRateReward[iPos], g_esTankCache[tank].g_flFireRateReward[iPos], g_esTankCache[tank].g_flFireRateReward[iPos], 1);
							g_esTankCache[tank].g_iFriendlyFireReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iFriendlyFireReward[iPos], g_esTank[iType].g_iFriendlyFireReward[iPos], g_esSpecific.g_iFriendlyFireReward[iPos], g_esGeneral.g_iFriendlyFireReward[iPos], 1);
							g_esTankCache[tank].g_iFriendlyFireReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iFriendlyFireReward[iPos], g_esPlayer[tank].g_iFriendlyFireReward[iPos], g_esTankCache[tank].g_iFriendlyFireReward[iPos], g_esTankCache[tank].g_iFriendlyFireReward[iPos], 1);
							g_esTankCache[tank].g_iGhostBulletsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iGhostBulletsReward[iPos], g_esTank[iType].g_iGhostBulletsReward[iPos], g_esSpecific.g_iGhostBulletsReward[iPos], g_esGeneral.g_iGhostBulletsReward[iPos], 1);
							g_esTankCache[tank].g_iGhostBulletsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGhostBulletsReward[iPos], g_esPlayer[tank].g_iGhostBulletsReward[iPos], g_esTankCache[tank].g_iGhostBulletsReward[iPos], g_esTankCache[tank].g_iGhostBulletsReward[iPos], 1);
							g_esTankCache[tank].g_flGrenadeLauncherReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flGrenadeLauncherReward[iPos], g_esTank[iType].g_flGrenadeLauncherReward[iPos], g_esSpecific.g_flGrenadeLauncherReward[iPos], g_esGeneral.g_flGrenadeLauncherReward[iPos], 1);
							g_esTankCache[tank].g_flGrenadeLauncherReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flGrenadeLauncherReward[iPos], g_esPlayer[tank].g_flGrenadeLauncherReward[iPos], g_esTankCache[tank].g_flGrenadeLauncherReward[iPos], g_esTankCache[tank].g_flGrenadeLauncherReward[iPos], 1);
							g_esTankCache[tank].g_flHealPercentReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flHealPercentReward[iPos], g_esTank[iType].g_flHealPercentReward[iPos], g_esSpecific.g_flHealPercentReward[iPos], g_esGeneral.g_flHealPercentReward[iPos], 1);
							g_esTankCache[tank].g_flHealPercentReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flHealPercentReward[iPos], g_esPlayer[tank].g_flHealPercentReward[iPos], g_esTankCache[tank].g_flHealPercentReward[iPos], g_esTankCache[tank].g_flHealPercentReward[iPos], 1);
							g_esTankCache[tank].g_flHealthcareRadiusReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flHealthcareRadiusReward[iPos], g_esTank[iType].g_flHealthcareRadiusReward[iPos], g_esSpecific.g_flHealthcareRadiusReward[iPos], g_esGeneral.g_flHealthcareRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flHealthcareRadiusReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flHealthcareRadiusReward[iPos], g_esPlayer[tank].g_flHealthcareRadiusReward[iPos], g_esTankCache[tank].g_flHealthcareRadiusReward[iPos], g_esTankCache[tank].g_flHealthcareRadiusReward[iPos], 1);
							g_esTankCache[tank].g_iHealthRegenReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iHealthRegenReward[iPos], g_esTank[iType].g_iHealthRegenReward[iPos], g_esSpecific.g_iHealthRegenReward[iPos], g_esGeneral.g_iHealthRegenReward[iPos], 1);
							g_esTankCache[tank].g_iHealthRegenReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iHealthRegenReward[iPos], g_esPlayer[tank].g_iHealthRegenReward[iPos], g_esTankCache[tank].g_iHealthRegenReward[iPos], g_esTankCache[tank].g_iHealthRegenReward[iPos], 1);
							g_esTankCache[tank].g_flHeartbeatReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flHeartbeatReward[iPos], g_esTank[iType].g_flHeartbeatReward[iPos], g_esSpecific.g_flHeartbeatReward[iPos], g_esGeneral.g_flHeartbeatReward[iPos], 1);
							g_esTankCache[tank].g_flHeartbeatReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flHeartbeatReward[iPos], g_esPlayer[tank].g_flHeartbeatReward[iPos], g_esTankCache[tank].g_flHeartbeatReward[iPos], g_esTankCache[tank].g_flHeartbeatReward[iPos], 1);
							g_esTankCache[tank].g_flHollowpointAmmoReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flHollowpointAmmoReward[iPos], g_esTank[iType].g_flHollowpointAmmoReward[iPos], g_esSpecific.g_flHollowpointAmmoReward[iPos], g_esGeneral.g_flHollowpointAmmoReward[iPos], 1);
							g_esTankCache[tank].g_flHollowpointAmmoReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flHollowpointAmmoReward[iPos], g_esPlayer[tank].g_flHollowpointAmmoReward[iPos], g_esTankCache[tank].g_flHollowpointAmmoReward[iPos], g_esTankCache[tank].g_flHollowpointAmmoReward[iPos], 1);
							g_esTankCache[tank].g_flJumpHeightReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flJumpHeightReward[iPos], g_esTank[iType].g_flJumpHeightReward[iPos], g_esSpecific.g_flJumpHeightReward[iPos], g_esGeneral.g_flJumpHeightReward[iPos], 1);
							g_esTankCache[tank].g_flJumpHeightReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flJumpHeightReward[iPos], g_esPlayer[tank].g_flJumpHeightReward[iPos], g_esTankCache[tank].g_flJumpHeightReward[iPos], g_esTankCache[tank].g_flJumpHeightReward[iPos], 1);
							g_esTankCache[tank].g_iInfiniteAmmoReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iInfiniteAmmoReward[iPos], g_esTank[iType].g_iInfiniteAmmoReward[iPos], g_esSpecific.g_iInfiniteAmmoReward[iPos], g_esGeneral.g_iInfiniteAmmoReward[iPos], 1);
							g_esTankCache[tank].g_iInfiniteAmmoReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iInfiniteAmmoReward[iPos], g_esPlayer[tank].g_iInfiniteAmmoReward[iPos], g_esTankCache[tank].g_iInfiniteAmmoReward[iPos], g_esTankCache[tank].g_iInfiniteAmmoReward[iPos], 1);
							g_esTankCache[tank].g_iLadderActionsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iLadderActionsReward[iPos], g_esTank[iType].g_iLadderActionsReward[iPos], g_esSpecific.g_iLadderActionsReward[iPos], g_esGeneral.g_iLadderActionsReward[iPos], 1);
							g_esTankCache[tank].g_iLadderActionsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iLadderActionsReward[iPos], g_esPlayer[tank].g_iLadderActionsReward[iPos], g_esTankCache[tank].g_iLadderActionsReward[iPos], g_esTankCache[tank].g_iLadderActionsReward[iPos], 1);
							g_esTankCache[tank].g_flLadyKillerReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flLadyKillerReward[iPos], g_esTank[iType].g_flLadyKillerReward[iPos], g_esSpecific.g_flLadyKillerReward[iPos], g_esGeneral.g_flLadyKillerReward[iPos], 1);
							g_esTankCache[tank].g_flLadyKillerReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flLadyKillerReward[iPos], g_esPlayer[tank].g_flLadyKillerReward[iPos], g_esTankCache[tank].g_flLadyKillerReward[iPos], g_esTankCache[tank].g_flLadyKillerReward[iPos], 1);
							g_esTankCache[tank].g_iLaserSightReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iLaserSightReward[iPos], g_esTank[iType].g_iLaserSightReward[iPos], g_esSpecific.g_iLaserSightReward[iPos], g_esGeneral.g_iLaserSightReward[iPos], 1);
							g_esTankCache[tank].g_iLaserSightReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iLaserSightReward[iPos], g_esPlayer[tank].g_iLaserSightReward[iPos], g_esTankCache[tank].g_iLaserSightReward[iPos], g_esTankCache[tank].g_iLaserSightReward[iPos], 1);
							g_esTankCache[tank].g_iLifeLeechReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iLifeLeechReward[iPos], g_esTank[iType].g_iLifeLeechReward[iPos], g_esSpecific.g_iLifeLeechReward[iPos], g_esGeneral.g_iLifeLeechReward[iPos], 1);
							g_esTankCache[tank].g_iLifeLeechReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iLifeLeechReward[iPos], g_esPlayer[tank].g_iLifeLeechReward[iPos], g_esTankCache[tank].g_iLifeLeechReward[iPos], g_esTankCache[tank].g_iLifeLeechReward[iPos], 1);
							g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flLoopingVoicelineInterval[iPos], g_esTank[iType].g_flLoopingVoicelineInterval[iPos], g_esSpecific.g_flLoopingVoicelineInterval[iPos], g_esGeneral.g_flLoopingVoicelineInterval[iPos], 1);
							g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flLoopingVoicelineInterval[iPos], g_esPlayer[tank].g_flLoopingVoicelineInterval[iPos], g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos], g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos], 1);
							g_esTankCache[tank].g_flLuckyBulletReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flLuckyBulletReward[iPos], g_esTank[iType].g_flLuckyBulletReward[iPos], g_esSpecific.g_flLuckyBulletReward[iPos], g_esGeneral.g_flLuckyBulletReward[iPos], 1);
							g_esTankCache[tank].g_flLuckyBulletReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flLuckyBulletReward[iPos], g_esPlayer[tank].g_flLuckyBulletReward[iPos], g_esTankCache[tank].g_flLuckyBulletReward[iPos], g_esTankCache[tank].g_flLuckyBulletReward[iPos], 1);
							g_esTankCache[tank].g_iMedicalCutsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMedicalCutsReward[iPos], g_esTank[iType].g_iMedicalCutsReward[iPos], g_esSpecific.g_iMedicalCutsReward[iPos], g_esGeneral.g_iMedicalCutsReward[iPos], 1);
							g_esTankCache[tank].g_iMedicalCutsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMedicalCutsReward[iPos], g_esPlayer[tank].g_iMedicalCutsReward[iPos], g_esTankCache[tank].g_iMedicalCutsReward[iPos], g_esTankCache[tank].g_iMedicalCutsReward[iPos], 1);
							g_esTankCache[tank].g_iMeleeRangeReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMeleeRangeReward[iPos], g_esTank[iType].g_iMeleeRangeReward[iPos], g_esSpecific.g_iMeleeRangeReward[iPos], g_esGeneral.g_iMeleeRangeReward[iPos], 1);
							g_esTankCache[tank].g_iMeleeRangeReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMeleeRangeReward[iPos], g_esPlayer[tank].g_iMeleeRangeReward[iPos], g_esTankCache[tank].g_iMeleeRangeReward[iPos], g_esTankCache[tank].g_iMeleeRangeReward[iPos], 1);
							g_esTankCache[tank].g_iMidairDashesReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iMidairDashesReward[iPos], g_esTank[iType].g_iMidairDashesReward[iPos], g_esSpecific.g_iMidairDashesReward[iPos], g_esGeneral.g_iMidairDashesReward[iPos], 1);
							g_esTankCache[tank].g_iMidairDashesReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iMidairDashesReward[iPos], g_esPlayer[tank].g_iMidairDashesReward[iPos], g_esTankCache[tank].g_iMidairDashesReward[iPos], g_esTankCache[tank].g_iMidairDashesReward[iPos], 1);
							g_esTankCache[tank].g_flMotivationRadiusReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flMotivationRadiusReward[iPos], g_esTank[iType].g_flMotivationRadiusReward[iPos], g_esSpecific.g_flMotivationRadiusReward[iPos], g_esGeneral.g_flMotivationRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flMotivationRadiusReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flMotivationRadiusReward[iPos], g_esPlayer[tank].g_flMotivationRadiusReward[iPos], g_esTankCache[tank].g_flMotivationRadiusReward[iPos], g_esTankCache[tank].g_flMotivationRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flOverdoseRadiusReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flOverdoseRadiusReward[iPos], g_esTank[iType].g_flOverdoseRadiusReward[iPos], g_esSpecific.g_flOverdoseRadiusReward[iPos], g_esGeneral.g_flOverdoseRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flOverdoseRadiusReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flOverdoseRadiusReward[iPos], g_esPlayer[tank].g_flOverdoseRadiusReward[iPos], g_esTankCache[tank].g_flOverdoseRadiusReward[iPos], g_esTankCache[tank].g_flOverdoseRadiusReward[iPos], 1);
							g_esTankCache[tank].g_iOverhealthReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iOverhealthReward[iPos], g_esTank[iType].g_iOverhealthReward[iPos], g_esSpecific.g_iOverhealthReward[iPos], g_esGeneral.g_iOverhealthReward[iPos], 1);
							g_esTankCache[tank].g_iOverhealthReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iOverhealthReward[iPos], g_esPlayer[tank].g_iOverhealthReward[iPos], g_esTankCache[tank].g_iOverhealthReward[iPos], g_esTankCache[tank].g_iOverhealthReward[iPos], 1);
							g_esTankCache[tank].g_iParticleEffectVisual[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iParticleEffectVisual[iPos], g_esTank[iType].g_iParticleEffectVisual[iPos], g_esSpecific.g_iParticleEffectVisual[iPos], g_esGeneral.g_iParticleEffectVisual[iPos], 1);
							g_esTankCache[tank].g_iParticleEffectVisual[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iParticleEffectVisual[iPos], g_esPlayer[tank].g_iParticleEffectVisual[iPos], g_esTankCache[tank].g_iParticleEffectVisual[iPos], g_esTankCache[tank].g_iParticleEffectVisual[iPos], 1);
							g_esTankCache[tank].g_flPipeBombDurationReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flPipeBombDurationReward[iPos], g_esTank[iType].g_flPipeBombDurationReward[iPos], g_esSpecific.g_flPipeBombDurationReward[iPos], g_esGeneral.g_flPipeBombDurationReward[iPos], 1);
							g_esTankCache[tank].g_flPipeBombDurationReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flPipeBombDurationReward[iPos], g_esPlayer[tank].g_flPipeBombDurationReward[iPos], g_esTankCache[tank].g_flPipeBombDurationReward[iPos], g_esTankCache[tank].g_flPipeBombDurationReward[iPos], 1);
							g_esTankCache[tank].g_iPrefsNotify[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iPrefsNotify[iPos], g_esTank[iType].g_iPrefsNotify[iPos], g_esSpecific.g_iPrefsNotify[iPos], g_esGeneral.g_iPrefsNotify[iPos], 1);
							g_esTankCache[tank].g_iPrefsNotify[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iPrefsNotify[iPos], g_esPlayer[tank].g_iPrefsNotify[iPos], g_esTankCache[tank].g_iPrefsNotify[iPos], g_esTankCache[tank].g_iPrefsNotify[iPos], 1);
							g_esTankCache[tank].g_flPunchResistanceReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flPunchResistanceReward[iPos], g_esTank[iType].g_flPunchResistanceReward[iPos], g_esSpecific.g_flPunchResistanceReward[iPos], g_esGeneral.g_flPunchResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flPunchResistanceReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flPunchResistanceReward[iPos], g_esPlayer[tank].g_flPunchResistanceReward[iPos], g_esTankCache[tank].g_flPunchResistanceReward[iPos], g_esTankCache[tank].g_flPunchResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flRapidPistolReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flRapidPistolReward[iPos], g_esTank[iType].g_flRapidPistolReward[iPos], g_esSpecific.g_flRapidPistolReward[iPos], g_esGeneral.g_flRapidPistolReward[iPos], 1);
							g_esTankCache[tank].g_flRapidPistolReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRapidPistolReward[iPos], g_esPlayer[tank].g_flRapidPistolReward[iPos], g_esTankCache[tank].g_flRapidPistolReward[iPos], g_esTankCache[tank].g_flRapidPistolReward[iPos], 1);
							g_esTankCache[tank].g_iRecoilDampenerReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRecoilDampenerReward[iPos], g_esTank[iType].g_iRecoilDampenerReward[iPos], g_esSpecific.g_iRecoilDampenerReward[iPos], g_esGeneral.g_iRecoilDampenerReward[iPos], 1);
							g_esTankCache[tank].g_iRecoilDampenerReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRecoilDampenerReward[iPos], g_esPlayer[tank].g_iRecoilDampenerReward[iPos], g_esTankCache[tank].g_iRecoilDampenerReward[iPos], g_esTankCache[tank].g_iRecoilDampenerReward[iPos], 1);
							g_esTankCache[tank].g_flRefillPercentReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flRefillPercentReward[iPos], g_esTank[iType].g_flRefillPercentReward[iPos], g_esSpecific.g_flRefillPercentReward[iPos], g_esGeneral.g_flRefillPercentReward[iPos], 1);
							g_esTankCache[tank].g_flRefillPercentReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRefillPercentReward[iPos], g_esPlayer[tank].g_flRefillPercentReward[iPos], g_esTankCache[tank].g_flRefillPercentReward[iPos], g_esTankCache[tank].g_flRefillPercentReward[iPos], 1);
							g_esTankCache[tank].g_iRegenBurstsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRegenBurstsReward[iPos], g_esTank[iType].g_iRegenBurstsReward[iPos], g_esSpecific.g_iRegenBurstsReward[iPos], g_esGeneral.g_iRegenBurstsReward[iPos], 1);
							g_esTankCache[tank].g_iRegenBurstsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRegenBurstsReward[iPos], g_esPlayer[tank].g_iRegenBurstsReward[iPos], g_esTankCache[tank].g_iRegenBurstsReward[iPos], g_esTankCache[tank].g_iRegenBurstsReward[iPos], 1);
							g_esTankCache[tank].g_flReloadRateReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flReloadRateReward[iPos], g_esTank[iType].g_flReloadRateReward[iPos], g_esSpecific.g_flReloadRateReward[iPos], g_esGeneral.g_flReloadRateReward[iPos], 1);
							g_esTankCache[tank].g_flReloadRateReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flReloadRateReward[iPos], g_esPlayer[tank].g_flReloadRateReward[iPos], g_esTankCache[tank].g_flReloadRateReward[iPos], g_esTankCache[tank].g_flReloadRateReward[iPos], 1);
							g_esTankCache[tank].g_iRespawnLoadoutReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRespawnLoadoutReward[iPos], g_esTank[iType].g_iRespawnLoadoutReward[iPos], g_esSpecific.g_iRespawnLoadoutReward[iPos], g_esGeneral.g_iRespawnLoadoutReward[iPos], 1);
							g_esTankCache[tank].g_iRespawnLoadoutReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRespawnLoadoutReward[iPos], g_esPlayer[tank].g_iRespawnLoadoutReward[iPos], g_esTankCache[tank].g_iRespawnLoadoutReward[iPos], g_esTankCache[tank].g_iRespawnLoadoutReward[iPos], 1);
							g_esTankCache[tank].g_iReviveHealthReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iReviveHealthReward[iPos], g_esTank[iType].g_iReviveHealthReward[iPos], g_esSpecific.g_iReviveHealthReward[iPos], g_esGeneral.g_iReviveHealthReward[iPos], 1);
							g_esTankCache[tank].g_iReviveHealthReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iReviveHealthReward[iPos], g_esPlayer[tank].g_iReviveHealthReward[iPos], g_esTankCache[tank].g_iReviveHealthReward[iPos], g_esTankCache[tank].g_iReviveHealthReward[iPos], 1);
							g_esTankCache[tank].g_iRewardBots[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRewardBots[iPos], g_esTank[iType].g_iRewardBots[iPos], g_esSpecific.g_iRewardBots[iPos], g_esGeneral.g_iRewardBots[iPos], 1, -1);
							g_esTankCache[tank].g_iRewardBots[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRewardBots[iPos], g_esPlayer[tank].g_iRewardBots[iPos], g_esTankCache[tank].g_iRewardBots[iPos], g_esTankCache[tank].g_iRewardBots[iPos], 1, -1);
							g_esTankCache[tank].g_flRewardChance[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flRewardChance[iPos], g_esTank[iType].g_flRewardChance[iPos], g_esSpecific.g_flRewardChance[iPos], g_esGeneral.g_flRewardChance[iPos], 1);
							g_esTankCache[tank].g_flRewardChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRewardChance[iPos], g_esPlayer[tank].g_flRewardChance[iPos], g_esTankCache[tank].g_flRewardChance[iPos], g_esTankCache[tank].g_flRewardChance[iPos], 1);
							g_esTankCache[tank].g_flRewardDuration[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flRewardDuration[iPos], g_esTank[iType].g_flRewardDuration[iPos], g_esSpecific.g_flRewardDuration[iPos], g_esGeneral.g_flRewardDuration[iPos], 1);
							g_esTankCache[tank].g_flRewardDuration[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRewardDuration[iPos], g_esPlayer[tank].g_flRewardDuration[iPos], g_esTankCache[tank].g_flRewardDuration[iPos], g_esTankCache[tank].g_flRewardDuration[iPos], 1);
							g_esTankCache[tank].g_iRewardEffect[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRewardEffect[iPos], g_esTank[iType].g_iRewardEffect[iPos], g_esSpecific.g_iRewardEffect[iPos], g_esGeneral.g_iRewardEffect[iPos], 1);
							g_esTankCache[tank].g_iRewardEffect[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRewardEffect[iPos], g_esPlayer[tank].g_iRewardEffect[iPos], g_esTankCache[tank].g_iRewardEffect[iPos], g_esTankCache[tank].g_iRewardEffect[iPos], 1);
							g_esTankCache[tank].g_iRewardEnabled[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRewardEnabled[iPos], g_esTank[iType].g_iRewardEnabled[iPos], g_esSpecific.g_iRewardEnabled[iPos], g_esGeneral.g_iRewardEnabled[iPos], 1, -1);
							g_esTankCache[tank].g_iRewardEnabled[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRewardEnabled[iPos], g_esPlayer[tank].g_iRewardEnabled[iPos], g_esTankCache[tank].g_iRewardEnabled[iPos], g_esTankCache[tank].g_iRewardEnabled[iPos], 1, -1);
							g_esTankCache[tank].g_iRewardNotify[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRewardNotify[iPos], g_esTank[iType].g_iRewardNotify[iPos], g_esSpecific.g_iRewardNotify[iPos], g_esGeneral.g_iRewardNotify[iPos], 1);
							g_esTankCache[tank].g_iRewardNotify[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRewardNotify[iPos], g_esPlayer[tank].g_iRewardNotify[iPos], g_esTankCache[tank].g_iRewardNotify[iPos], g_esTankCache[tank].g_iRewardNotify[iPos], 1);
							g_esTankCache[tank].g_flRewardPercentage[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flRewardPercentage[iPos], g_esTank[iType].g_flRewardPercentage[iPos], g_esSpecific.g_flRewardPercentage[iPos], g_esGeneral.g_flRewardPercentage[iPos], 1);
							g_esTankCache[tank].g_flRewardPercentage[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRewardPercentage[iPos], g_esPlayer[tank].g_flRewardPercentage[iPos], g_esTankCache[tank].g_flRewardPercentage[iPos], g_esTankCache[tank].g_flRewardPercentage[iPos], 1);
							g_esTankCache[tank].g_iRewardVisual[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRewardVisual[iPos], g_esTank[iType].g_iRewardVisual[iPos], g_esSpecific.g_iRewardVisual[iPos], g_esGeneral.g_iRewardVisual[iPos], 1);
							g_esTankCache[tank].g_iRewardVisual[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRewardVisual[iPos], g_esPlayer[tank].g_iRewardVisual[iPos], g_esTankCache[tank].g_iRewardVisual[iPos], g_esTankCache[tank].g_iRewardVisual[iPos], 1);
							g_esTankCache[tank].g_iRiotGearReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iRiotGearReward[iPos], g_esTank[iType].g_iRiotGearReward[iPos], g_esSpecific.g_iRiotGearReward[iPos], g_esGeneral.g_iRiotGearReward[iPos], 1);
							g_esTankCache[tank].g_iRiotGearReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRiotGearReward[iPos], g_esPlayer[tank].g_iRiotGearReward[iPos], g_esTankCache[tank].g_iRiotGearReward[iPos], g_esTankCache[tank].g_iRiotGearReward[iPos], 1);
							g_esTankCache[tank].g_iSafetyBubbleReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iSafetyBubbleReward[iPos], g_esTank[iType].g_iSafetyBubbleReward[iPos], g_esSpecific.g_iSafetyBubbleReward[iPos], g_esGeneral.g_iSafetyBubbleReward[iPos], 1);
							g_esTankCache[tank].g_iSafetyBubbleReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSafetyBubbleReward[iPos], g_esPlayer[tank].g_iSafetyBubbleReward[iPos], g_esTankCache[tank].g_iSafetyBubbleReward[iPos], g_esTankCache[tank].g_iSafetyBubbleReward[iPos], 1);
							g_esTankCache[tank].g_iShareRewards[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iShareRewards[iPos], g_esTank[iType].g_iShareRewards[iPos], g_esSpecific.g_iShareRewards[iPos], g_esGeneral.g_iShareRewards[iPos], 1);
							g_esTankCache[tank].g_iShareRewards[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iShareRewards[iPos], g_esPlayer[tank].g_iShareRewards[iPos], g_esTankCache[tank].g_iShareRewards[iPos], g_esTankCache[tank].g_iShareRewards[iPos], 1);
							g_esTankCache[tank].g_flShockwaveRadiusReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShockwaveRadiusReward[iPos], g_esTank[iType].g_flShockwaveRadiusReward[iPos], g_esSpecific.g_flShockwaveRadiusReward[iPos], g_esGeneral.g_flShockwaveRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flShockwaveRadiusReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShockwaveRadiusReward[iPos], g_esPlayer[tank].g_flShockwaveRadiusReward[iPos], g_esTankCache[tank].g_flShockwaveRadiusReward[iPos], g_esTankCache[tank].g_flShockwaveRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flShoveDamageReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShoveDamageReward[iPos], g_esTank[iType].g_flShoveDamageReward[iPos], g_esSpecific.g_flShoveDamageReward[iPos], g_esGeneral.g_flShoveDamageReward[iPos], 1);
							g_esTankCache[tank].g_flShoveDamageReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShoveDamageReward[iPos], g_esPlayer[tank].g_flShoveDamageReward[iPos], g_esTankCache[tank].g_flShoveDamageReward[iPos], g_esTankCache[tank].g_flShoveDamageReward[iPos], 1);
							g_esTankCache[tank].g_iShovePenaltyReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iShovePenaltyReward[iPos], g_esTank[iType].g_iShovePenaltyReward[iPos], g_esSpecific.g_iShovePenaltyReward[iPos], g_esGeneral.g_iShovePenaltyReward[iPos], 1);
							g_esTankCache[tank].g_iShovePenaltyReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iShovePenaltyReward[iPos], g_esPlayer[tank].g_iShovePenaltyReward[iPos], g_esTankCache[tank].g_iShovePenaltyReward[iPos], g_esTankCache[tank].g_iShovePenaltyReward[iPos], 1);
							g_esTankCache[tank].g_flShoveRateReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flShoveRateReward[iPos], g_esTank[iType].g_flShoveRateReward[iPos], g_esSpecific.g_flShoveRateReward[iPos], g_esGeneral.g_flShoveRateReward[iPos], 1);
							g_esTankCache[tank].g_flShoveRateReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flShoveRateReward[iPos], g_esPlayer[tank].g_flShoveRateReward[iPos], g_esTankCache[tank].g_flShoveRateReward[iPos], g_esTankCache[tank].g_flShoveRateReward[iPos], 1);
							g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flSledgehammerRoundsReward[iPos], g_esTank[iType].g_flSledgehammerRoundsReward[iPos], g_esSpecific.g_flSledgehammerRoundsReward[iPos], g_esGeneral.g_flSledgehammerRoundsReward[iPos], 1);
							g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flSledgehammerRoundsReward[iPos], g_esPlayer[tank].g_flSledgehammerRoundsReward[iPos], g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos], g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos], 1);
							g_esTankCache[tank].g_iSpecialAmmoReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iSpecialAmmoReward[iPos], g_esTank[iType].g_iSpecialAmmoReward[iPos], g_esSpecific.g_iSpecialAmmoReward[iPos], g_esGeneral.g_iSpecialAmmoReward[iPos], 1);
							g_esTankCache[tank].g_iSpecialAmmoReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSpecialAmmoReward[iPos], g_esPlayer[tank].g_iSpecialAmmoReward[iPos], g_esTankCache[tank].g_iSpecialAmmoReward[iPos], g_esTankCache[tank].g_iSpecialAmmoReward[iPos], 1);
							g_esTankCache[tank].g_flSpeedBoostReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flSpeedBoostReward[iPos], g_esTank[iType].g_flSpeedBoostReward[iPos], g_esSpecific.g_flSpeedBoostReward[iPos], g_esGeneral.g_flSpeedBoostReward[iPos], 1);
							g_esTankCache[tank].g_flSpeedBoostReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flSpeedBoostReward[iPos], g_esPlayer[tank].g_flSpeedBoostReward[iPos], g_esTankCache[tank].g_flSpeedBoostReward[iPos], g_esTankCache[tank].g_flSpeedBoostReward[iPos], 1);
							g_esTankCache[tank].g_iStackRewards[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iStackRewards[iPos], g_esTank[iType].g_iStackRewards[iPos], g_esSpecific.g_iStackRewards[iPos], g_esGeneral.g_iStackRewards[iPos], 1);
							g_esTankCache[tank].g_iStackRewards[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iStackRewards[iPos], g_esPlayer[tank].g_iStackRewards[iPos], g_esTankCache[tank].g_iStackRewards[iPos], g_esTankCache[tank].g_iStackRewards[iPos], 1);
							g_esTankCache[tank].g_iStickyGrenadesReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iStickyGrenadesReward[iPos], g_esTank[iType].g_iStickyGrenadesReward[iPos], g_esSpecific.g_iStickyGrenadesReward[iPos], g_esGeneral.g_iStickyGrenadesReward[iPos], 1);
							g_esTankCache[tank].g_iStickyGrenadesReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iStickyGrenadesReward[iPos], g_esPlayer[tank].g_iStickyGrenadesReward[iPos], g_esTankCache[tank].g_iStickyGrenadesReward[iPos], g_esTankCache[tank].g_iStickyGrenadesReward[iPos], 1);
							g_esTankCache[tank].g_flSupplierReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flSupplierReward[iPos], g_esTank[iType].g_flSupplierReward[iPos], g_esSpecific.g_flSupplierReward[iPos], g_esGeneral.g_flSupplierReward[iPos], 1);
							g_esTankCache[tank].g_flSupplierReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flSupplierReward[iPos], g_esPlayer[tank].g_flSupplierReward[iPos], g_esTankCache[tank].g_flSupplierReward[iPos], g_esTankCache[tank].g_flSupplierReward[iPos], 1);
							g_esTankCache[tank].g_flSwingRateReward[iPos] = flGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_flSwingRateReward[iPos], g_esTank[iType].g_flSwingRateReward[iPos], g_esSpecific.g_flSwingRateReward[iPos], g_esGeneral.g_flSwingRateReward[iPos], 1);
							g_esTankCache[tank].g_flSwingRateReward[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flSwingRateReward[iPos], g_esPlayer[tank].g_flSwingRateReward[iPos], g_esTankCache[tank].g_flSwingRateReward[iPos], g_esTankCache[tank].g_flSwingRateReward[iPos], 1);
							g_esTankCache[tank].g_iSyringeDartsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iSyringeDartsReward[iPos], g_esTank[iType].g_iSyringeDartsReward[iPos], g_esSpecific.g_iSyringeDartsReward[iPos], g_esGeneral.g_iSyringeDartsReward[iPos], 1);
							g_esTankCache[tank].g_iSyringeDartsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSyringeDartsReward[iPos], g_esPlayer[tank].g_iSyringeDartsReward[iPos], g_esTankCache[tank].g_iSyringeDartsReward[iPos], g_esTankCache[tank].g_iSyringeDartsReward[iPos], 1);
							g_esTankCache[tank].g_iThornsReward[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iThornsReward[iPos], g_esTank[iType].g_iThornsReward[iPos], g_esSpecific.g_iThornsReward[iPos], g_esGeneral.g_iThornsReward[iPos], 1);
							g_esTankCache[tank].g_iThornsReward[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iThornsReward[iPos], g_esPlayer[tank].g_iThornsReward[iPos], g_esTankCache[tank].g_iThornsReward[iPos], g_esTankCache[tank].g_iThornsReward[iPos], 1);
							g_esTankCache[tank].g_iUsefulRewards[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iUsefulRewards[iPos], g_esTank[iType].g_iUsefulRewards[iPos], g_esSpecific.g_iUsefulRewards[iPos], g_esGeneral.g_iUsefulRewards[iPos], 1);
							g_esTankCache[tank].g_iUsefulRewards[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iUsefulRewards[iPos], g_esPlayer[tank].g_iUsefulRewards[iPos], g_esTankCache[tank].g_iUsefulRewards[iPos], g_esTankCache[tank].g_iUsefulRewards[iPos], 1);
							g_esTankCache[tank].g_iVoicePitchVisual[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iVoicePitchVisual[iPos], g_esTank[iType].g_iVoicePitchVisual[iPos], g_esSpecific.g_iVoicePitchVisual[iPos], g_esGeneral.g_iVoicePitchVisual[iPos], 1);
							g_esTankCache[tank].g_iVoicePitchVisual[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iVoicePitchVisual[iPos], g_esPlayer[tank].g_iVoicePitchVisual[iPos], g_esTankCache[tank].g_iVoicePitchVisual[iPos], g_esTankCache[tank].g_iVoicePitchVisual[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_iStackLimits))
						{
							g_esTankCache[tank].g_iStackLimits[iPos] = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iStackLimits[iPos], g_esTank[iType].g_iStackLimits[iPos], g_esSpecific.g_iStackLimits[iPos], g_esGeneral.g_iStackLimits[iPos], 1);
							g_esTankCache[tank].g_iStackLimits[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iStackLimits[iPos], g_esPlayer[tank].g_iStackLimits[iPos], g_esTankCache[tank].g_iStackLimits[iPos], g_esTankCache[tank].g_iStackLimits[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_flComboChance))
						{
							g_esTankCache[tank].g_flComboChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboChance[iPos], g_esPlayer[tank].g_flComboChance[iPos], g_esSpecial[iType].g_flComboChance[iPos], g_esTank[iType].g_flComboChance[iPos], 1);
							g_esTankCache[tank].g_iComboCooldown[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iComboCooldown[iPos], g_esPlayer[tank].g_iComboCooldown[iPos], g_esSpecial[iType].g_iComboCooldown[iPos], g_esTank[iType].g_iComboCooldown[iPos], 1);
							g_esTankCache[tank].g_flComboDamage[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboDamage[iPos], g_esPlayer[tank].g_flComboDamage[iPos], g_esSpecial[iType].g_flComboDamage[iPos], g_esTank[iType].g_flComboDamage[iPos], 1);
							g_esTankCache[tank].g_flComboDeathChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboDeathChance[iPos], g_esPlayer[tank].g_flComboDeathChance[iPos], g_esSpecial[iType].g_flComboDeathChance[iPos], g_esTank[iType].g_flComboDeathChance[iPos], 1);
							g_esTankCache[tank].g_flComboDeathRange[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboDeathRange[iPos], g_esPlayer[tank].g_flComboDeathRange[iPos], g_esSpecial[iType].g_flComboDeathRange[iPos], g_esTank[iType].g_flComboDeathRange[iPos], 1);
							g_esTankCache[tank].g_flComboDelay[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboDelay[iPos], g_esPlayer[tank].g_flComboDelay[iPos], g_esSpecial[iType].g_flComboDelay[iPos], g_esTank[iType].g_flComboDelay[iPos], 1);
							g_esTankCache[tank].g_flComboDuration[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboDuration[iPos], g_esPlayer[tank].g_flComboDuration[iPos], g_esSpecial[iType].g_flComboDuration[iPos], g_esTank[iType].g_flComboDuration[iPos], 1);
							g_esTankCache[tank].g_flComboInterval[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboInterval[iPos], g_esPlayer[tank].g_flComboInterval[iPos], g_esSpecial[iType].g_flComboInterval[iPos], g_esTank[iType].g_flComboInterval[iPos], 1);
							g_esTankCache[tank].g_flComboMinRadius[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboMinRadius[iPos], g_esPlayer[tank].g_flComboMinRadius[iPos], g_esSpecial[iType].g_flComboMinRadius[iPos], g_esTank[iType].g_flComboMinRadius[iPos], 2, 1.0);
							g_esTankCache[tank].g_flComboMaxRadius[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboMaxRadius[iPos], g_esPlayer[tank].g_flComboMaxRadius[iPos], g_esSpecial[iType].g_flComboMaxRadius[iPos], g_esTank[iType].g_flComboMaxRadius[iPos], 2, -1.0);
							g_esTankCache[tank].g_flComboRange[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboRange[iPos], g_esPlayer[tank].g_flComboRange[iPos], g_esSpecial[iType].g_flComboRange[iPos], g_esTank[iType].g_flComboRange[iPos], 1);
							g_esTankCache[tank].g_flComboRangeChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboRangeChance[iPos], g_esPlayer[tank].g_flComboRangeChance[iPos], g_esSpecial[iType].g_flComboRangeChance[iPos], g_esTank[iType].g_flComboRangeChance[iPos], 1);
							g_esTankCache[tank].g_iComboRangeCooldown[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iComboRangeCooldown[iPos], g_esPlayer[tank].g_iComboRangeCooldown[iPos], g_esSpecial[iType].g_iComboRangeCooldown[iPos], g_esTank[iType].g_iComboRangeCooldown[iPos], 1);
							g_esTankCache[tank].g_flComboRockChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboRockChance[iPos], g_esPlayer[tank].g_flComboRockChance[iPos], g_esSpecial[iType].g_flComboRockChance[iPos], g_esTank[iType].g_flComboRockChance[iPos], 1);
							g_esTankCache[tank].g_iComboRockCooldown[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iComboRockCooldown[iPos], g_esPlayer[tank].g_iComboRockCooldown[iPos], g_esSpecial[iType].g_iComboRockCooldown[iPos], g_esTank[iType].g_iComboRockCooldown[iPos], 1);
							g_esTankCache[tank].g_flComboSpeed[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboSpeed[iPos], g_esPlayer[tank].g_flComboSpeed[iPos], g_esSpecial[iType].g_flComboSpeed[iPos], g_esTank[iType].g_flComboSpeed[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_flComboTypeChance))
						{
							g_esTankCache[tank].g_flComboTypeChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flComboTypeChance[iPos], g_esPlayer[tank].g_flComboTypeChance[iPos], g_esSpecial[iType].g_flComboTypeChance[iPos], g_esTank[iType].g_flComboTypeChance[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_iSkinColor))
						{
							g_esTankCache[tank].g_iBossHealth[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBossHealth[iPos], g_esPlayer[tank].g_iBossHealth[iPos], g_esSpecial[iType].g_iBossHealth[iPos], g_esTank[iType].g_iBossHealth[iPos], 1);
							g_esTankCache[tank].g_iBossType[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBossType[iPos], g_esPlayer[tank].g_iBossType[iPos], g_esSpecial[iType].g_iBossType[iPos], g_esTank[iType].g_iBossType[iPos], 1);
						}
					}
				}

				g_esTankCache[tank].g_iBodyEffects = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iBodyEffects, g_esPlayer[tank].g_iBodyEffects, g_esSpecial[iType].g_iBodyEffects, g_esTank[iType].g_iBodyEffects, 1);
				g_esTankCache[tank].g_iGlowEnabled = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGlowEnabled, g_esPlayer[tank].g_iGlowEnabled, g_esSpecial[iType].g_iGlowEnabled, g_esTank[iType].g_iGlowEnabled, 1);
				g_esTankCache[tank].g_iGlowFlashing = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGlowFlashing, g_esPlayer[tank].g_iGlowFlashing, g_esSpecial[iType].g_iGlowFlashing, g_esTank[iType].g_iGlowFlashing, 1);
				g_esTankCache[tank].g_iGlowMaxRange = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGlowMaxRange, g_esPlayer[tank].g_iGlowMaxRange, g_esSpecial[iType].g_iGlowMaxRange, g_esTank[iType].g_iGlowMaxRange, 1);
				g_esTankCache[tank].g_iGlowMinRange = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGlowMinRange, g_esPlayer[tank].g_iGlowMinRange, g_esSpecial[iType].g_iGlowMinRange, g_esTank[iType].g_iGlowMinRange, 1);
				g_esTankCache[tank].g_iGlowType = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGlowType, g_esPlayer[tank].g_iGlowType, g_esSpecial[iType].g_iGlowType, g_esTank[iType].g_iGlowType, 1);
				g_esTankCache[tank].g_iRockEffects = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRockEffects, g_esPlayer[tank].g_iRockEffects, g_esSpecial[iType].g_iRockEffects, g_esTank[iType].g_iRockEffects, 1);
				g_esTankCache[tank].g_iRockModel = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRockModel, g_esPlayer[tank].g_iRockModel, g_esSpecial[iType].g_iRockModel, g_esTank[iType].g_iRockModel, 1);
				g_esTankCache[tank].g_iSpecialModel = iGetSubSettingValue(bAccess, true, g_esSpecial[iType].g_iSpecialModel, g_esTank[iType].g_iTankModel, g_esSpecific.g_iSpecialModel, g_esGeneral.g_iTankModel, 1);
				g_esTankCache[tank].g_iSpecialModel = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSpecialModel, g_esPlayer[tank].g_iTankModel, g_esTankCache[tank].g_iSpecialModel, g_esTankCache[tank].g_iSpecialModel, 1);

				vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sGlowColor, sizeof esTankCache::g_sGlowColor, g_esTeammate[tank].g_sGlowColor, g_esPlayer[tank].g_sGlowColor, g_esSpecial[iType].g_sGlowColor, g_esTank[iType].g_sGlowColor);
				vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sRockColor, sizeof esTankCache::g_sRockColor, g_esTeammate[tank].g_sRockColor, g_esPlayer[tank].g_sRockColor, g_esSpecial[iType].g_sRockColor, g_esTank[iType].g_sRockColor);
				vGetSubSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sSkinColor, sizeof esTankCache::g_sSkinColor, g_esTeammate[tank].g_sSkinColor, g_esPlayer[tank].g_sSkinColor, g_esSpecial[iType].g_sSkinColor, g_esTank[iType].g_sSkinColor);

				for (int iPos = 0; iPos < (sizeof esTankCache::g_flBodyChance); iPos++)
				{
					g_esTankCache[tank].g_flBodyChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flBodyChance[iPos], g_esPlayer[tank].g_flBodyChance[iPos], g_esSpecial[iType].g_flBodyChance[iPos], g_esTank[iType].g_flBodyChance[iPos], 1);

					if (iPos < (sizeof esTankCache::g_iSkinColor))
					{
						g_esTankCache[tank].g_flRockChance[iPos] = flGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_flRockChance[iPos], g_esPlayer[tank].g_flRockChance[iPos], g_esSpecial[iType].g_flRockChance[iPos], g_esTank[iType].g_flRockChance[iPos], 1);
						g_esTankCache[tank].g_iSkinColor[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iSkinColor[iPos], g_esPlayer[tank].g_iSkinColor[iPos], g_esSpecial[iType].g_iSkinColor[iPos], g_esTank[iType].g_iSkinColor[iPos], 1);
						g_esTankCache[tank].g_iRockColor[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iRockColor[iPos], g_esPlayer[tank].g_iRockColor[iPos], g_esSpecial[iType].g_iRockColor[iPos], g_esTank[iType].g_iRockColor[iPos], 1);
					}

					if (iPos < (sizeof esTankCache::g_iGlowColor))
					{
						g_esTankCache[tank].g_iGlowColor[iPos] = iGetSubSettingValue(bAccess, bHuman, g_esTeammate[tank].g_iGlowColor[iPos], g_esPlayer[tank].g_iGlowColor[iPos], g_esSpecial[iType].g_iGlowColor[iPos], g_esTank[iType].g_iGlowColor[iPos], 1);
					}
				}
			}
			else
			{
				if (!visualsOnly)
				{
					g_esTankCache[tank].g_sArmorCharacters[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sComboSet[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward2[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward3[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward4[0] = '\0';
					g_esTankCache[tank].g_sHealthCharacters[0] = '\0';
					g_esTankCache[tank].g_sItemReward[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual2[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual3[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual4[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sShieldCharacters[0] = '\0';
					g_esTankCache[tank].g_sSmokerName[0] = '\0';
					g_esTankCache[tank].g_sBoomerName[0] = '\0';
					g_esTankCache[tank].g_sHunterName[0] = '\0';
					g_esTankCache[tank].g_sSpitterName[0] = '\0';
					g_esTankCache[tank].g_sJockeyName[0] = '\0';
					g_esTankCache[tank].g_sChargerName[0] = '\0';
					g_esTankCache[tank].g_flArmorDuration = 0.0;
					g_esTankCache[tank].g_flArmorPercentage = 0.0;
					g_esTankCache[tank].g_flArmorResistance[0] = 0.0;
					g_esTankCache[tank].g_flArmorResistance[1] = 0.0;
					g_esTankCache[tank].g_flAttackInterval = 0.0;
					g_esTankCache[tank].g_flBurnDuration = 0.0;
					g_esTankCache[tank].g_flBurntSkin = -1.0;
					g_esTankCache[tank].g_flClawDamage = -1.0;
					g_esTankCache[tank].g_flHealPercentMultiplier = 1.0;
					g_esTankCache[tank].g_flHittableDamage = -1.0;
					g_esTankCache[tank].g_flIncapDamageMultiplier = 1.0;
					g_esTankCache[tank].g_flMeleeHitValue = 0.0;
					g_esTankCache[tank].g_flPassiveDelay = 0.0;
					g_esTankCache[tank].g_flPassiveInterval = 0.0;
					g_esTankCache[tank].g_flPinDamage = -1.0;
					g_esTankCache[tank].g_flRandomDuration = 0.0;
					g_esTankCache[tank].g_flRunSpeed = 0.0;
					g_esTankCache[tank].g_flShieldDuration = 0.0;
					g_esTankCache[tank].g_flShieldPercentage = 0.0;
					g_esTankCache[tank].g_flShieldRate = 0.0;
					g_esTankCache[tank].g_flShieldResistance = 0.0;
					g_esTankCache[tank].g_flSpecialInterval = 0.0;
					g_esTankCache[tank].g_flTransformDelay = 0.0;
					g_esTankCache[tank].g_flTransformDuration = 0.0;
					g_esTankCache[tank].g_iAnnounceArrival = 0;
					g_esTankCache[tank].g_iAnnounceDeath = 0;
					g_esTankCache[tank].g_iAnnounceKill = 0;
					g_esTankCache[tank].g_iArrivalMessage = 0;
					g_esTankCache[tank].g_iArrivalSound = 0;
					g_esTankCache[tank].g_iAutoHop = 0;
					g_esTankCache[tank].g_iBaseHealth = 0;
					g_esTankCache[tank].g_iBossEffects = 0;
					g_esTankCache[tank].g_iBossStages = 0;
					g_esTankCache[tank].g_iBulletImmunity = 0;
					g_esTankCache[tank].g_iDeathDetails = 0;
					g_esTankCache[tank].g_iDeathMessage = 0;
					g_esTankCache[tank].g_iDeathRevert = 0;
					g_esTankCache[tank].g_iDeathSound = 0;
					g_esTankCache[tank].g_iDisplayHealth = 0;
					g_esTankCache[tank].g_iDisplayHealthType = 0;
					g_esTankCache[tank].g_iExplosiveImmunity = 0;
					g_esTankCache[tank].g_iExtraHealth = 0;
					g_esTankCache[tank].g_iFireImmunity = 0;
					g_esTankCache[tank].g_iHittableImmunity = 0;
					g_esTankCache[tank].g_iHumanMultiplierMode = 0;
					g_esTankCache[tank].g_iIntangibleBody = 0;
					g_esTankCache[tank].g_iKillMessage = 0;
					g_esTankCache[tank].g_iMeleeHitMode = 0;
					g_esTankCache[tank].g_iMeleeImmunity = 0;
					g_esTankCache[tank].g_iMinimumHumans = 0;
					g_esTankCache[tank].g_iMultiplyHealth = 0;
					g_esTankCache[tank].g_iPassiveHealth = 0;
					g_esTankCache[tank].g_iRandomSpecial = 0;
					g_esTankCache[tank].g_iSpawnProtection = 0;
					g_esTankCache[tank].g_iSpawnType = 0;
					g_esTankCache[tank].g_iSpecialNote = 0;
					g_esTankCache[tank].g_iThrowRock = 0;
					g_esTankCache[tank].g_iVocalizeArrival = 0;
					g_esTankCache[tank].g_iVocalizeDeath = 0;
					g_esTankCache[tank].g_iVomitImmunity = 0;

					for (int iPos = 0; iPos < (sizeof esTankCache::g_iTransformType); iPos++)
					{
						g_esTankCache[tank].g_iTransformType[iPos] = 0;

						if (iPos < (sizeof esTankCache::g_iRewardEnabled))
						{
							g_esTankCache[tank].g_flActionDurationReward[iPos] = 0.0;
							g_esTankCache[tank].g_flAdrenalineTimeReward[iPos] = 0.0;
							g_esTankCache[tank].g_iAmmoBoostReward[iPos] = 0;
							g_esTankCache[tank].g_iAmmoRefillReward[iPos] = 0;
							g_esTankCache[tank].g_iAmmoRegenReward[iPos] = 0;
							g_esTankCache[tank].g_flAttackBoostReward[iPos] = 0.0;
							g_esTankCache[tank].g_iBlazeHealthReward[iPos] = 0;
							g_esTankCache[tank].g_iBloodDonorReward[iPos] = 0;
							g_esTankCache[tank].g_iBunnyHopReward[iPos] = 0;
							g_esTankCache[tank].g_iBurstDoorsReward[iPos] = 0;
							g_esTankCache[tank].g_iCleanKillsReward[iPos] = 0;
							g_esTankCache[tank].g_iClusterBombsReward[iPos] = 0;
							g_esTankCache[tank].g_flDamageBoostReward[iPos] = 0.0;
							g_esTankCache[tank].g_flDamageResistanceReward[iPos] = 0.0;
							g_esTankCache[tank].g_flDopamineRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_iEternalFlamesReward[iPos] = 0;
							g_esTankCache[tank].g_iFastRecoveryReward[iPos] = 0;
							g_esTankCache[tank].g_flFireRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_iFriendlyFireReward[iPos] = 0;
							g_esTankCache[tank].g_iGhostBulletsReward[iPos] = 0;
							g_esTankCache[tank].g_flGrenadeLauncherReward[iPos] = 0.0;
							g_esTankCache[tank].g_flHealPercentReward[iPos] = 0.0;
							g_esTankCache[tank].g_flHealthcareRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_iHealthRegenReward[iPos] = 0;
							g_esTankCache[tank].g_flHeartbeatReward[iPos] = 0.0;
							g_esTankCache[tank].g_flHollowpointAmmoReward[iPos] = 0.0;
							g_esTankCache[tank].g_flJumpHeightReward[iPos] = 0.0;
							g_esTankCache[tank].g_iInfiniteAmmoReward[iPos] = 0;
							g_esTankCache[tank].g_iLadderActionsReward[iPos] = 0;
							g_esTankCache[tank].g_flLadyKillerReward[iPos] = 0.0;
							g_esTankCache[tank].g_iLaserSightReward[iPos] = 0;
							g_esTankCache[tank].g_iLifeLeechReward[iPos] = 0;
							g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos] = 0.0;
							g_esTankCache[tank].g_flLuckyBulletReward[iPos] = 0.0;
							g_esTankCache[tank].g_iMedicalCutsReward[iPos] = 0;
							g_esTankCache[tank].g_iMeleeRangeReward[iPos] = 0;
							g_esTankCache[tank].g_iMidairDashesReward[iPos] = 0;
							g_esTankCache[tank].g_flMotivationRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_flOverdoseRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_iOverhealthReward[iPos] = 0;
							g_esTankCache[tank].g_iParticleEffectVisual[iPos] = 0;
							g_esTankCache[tank].g_flPipeBombDurationReward[iPos] = 0.0;
							g_esTankCache[tank].g_iPrefsNotify[iPos] = 0;
							g_esTankCache[tank].g_flPunchResistanceReward[iPos] = 0.0;
							g_esTankCache[tank].g_flRapidPistolReward[iPos] = 0.0;
							g_esTankCache[tank].g_iRecoilDampenerReward[iPos] = 0;
							g_esTankCache[tank].g_flRefillPercentReward[iPos] = 0.0;
							g_esTankCache[tank].g_iRegenBurstsReward[iPos] = 0;
							g_esTankCache[tank].g_flReloadRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_iRespawnLoadoutReward[iPos] = 0;
							g_esTankCache[tank].g_iReviveHealthReward[iPos] = 0;
							g_esTankCache[tank].g_iRewardBots[iPos] = -1;
							g_esTankCache[tank].g_flRewardChance[iPos] = 0.0;
							g_esTankCache[tank].g_flRewardDuration[iPos] = 0.0;
							g_esTankCache[tank].g_iRewardEffect[iPos] = 0;
							g_esTankCache[tank].g_iRewardEnabled[iPos] = -1;
							g_esTankCache[tank].g_iRewardNotify[iPos] = 0;
							g_esTankCache[tank].g_flRewardPercentage[iPos] = 0.0;
							g_esTankCache[tank].g_iRewardVisual[iPos] = 0;
							g_esTankCache[tank].g_iRiotGearReward[iPos] = 0;
							g_esTankCache[tank].g_iSafetyBubbleReward[iPos] = 0;
							g_esTankCache[tank].g_iShareRewards[iPos] = 0;
							g_esTankCache[tank].g_flShockwaveRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_flShoveDamageReward[iPos] = 0.0;
							g_esTankCache[tank].g_iShovePenaltyReward[iPos] = 0;
							g_esTankCache[tank].g_flShoveRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos] = 0.0;
							g_esTankCache[tank].g_iSpecialAmmoReward[iPos] = 0;
							g_esTankCache[tank].g_flSpeedBoostReward[iPos] = 0.0;
							g_esTankCache[tank].g_iStackRewards[iPos] = 0;
							g_esTankCache[tank].g_iStickyGrenadesReward[iPos] = 0;
							g_esTankCache[tank].g_flSupplierReward[iPos] = 0.0;
							g_esTankCache[tank].g_flSwingRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_iSyringeDartsReward[iPos] = 0;
							g_esTankCache[tank].g_iThornsReward[iPos] = 0;
							g_esTankCache[tank].g_iUsefulRewards[iPos] = 0;
							g_esTankCache[tank].g_iVoicePitchVisual[iPos] = 0;
						}

						if (iPos < (sizeof esTankCache::g_iStackLimits))
						{
							g_esTankCache[tank].g_iStackLimits[iPos] = 0;
						}

						if (iPos < (sizeof esTankCache::g_flComboChance))
						{
							g_esTankCache[tank].g_flComboChance[iPos] = 0.0;
							g_esTankCache[tank].g_iComboCooldown[iPos] = 0;
							g_esTankCache[tank].g_flComboDamage[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDeathChance[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDeathRange[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDelay[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDuration[iPos] = 0.0;
							g_esTankCache[tank].g_flComboInterval[iPos] = 0.0;
							g_esTankCache[tank].g_flComboMinRadius[iPos] = 0.0;
							g_esTankCache[tank].g_flComboMaxRadius[iPos] = 0.0;
							g_esTankCache[tank].g_flComboRange[iPos] = 0.0;
							g_esTankCache[tank].g_flComboRangeChance[iPos] = 0.0;
							g_esTankCache[tank].g_iComboRangeCooldown[iPos] = 0;
							g_esTankCache[tank].g_flComboRockChance[iPos] = 0.0;
							g_esTankCache[tank].g_iComboRockCooldown[iPos] = 0;
							g_esTankCache[tank].g_flComboSpeed[iPos] = 0.0;
						}

						if (iPos < (sizeof esTankCache::g_flComboTypeChance))
						{
							g_esTankCache[tank].g_flComboTypeChance[iPos] = 0.0;
						}

						if (iPos < (sizeof esTankCache::g_iSkinColor))
						{
							g_esTankCache[tank].g_iBossHealth[iPos] = 0;
							g_esTankCache[tank].g_iBossType[iPos] = 0;
						}
					}
				}

				g_esTankCache[tank].g_sGlowColor[0] = '\0';
				g_esTankCache[tank].g_sRockColor[0] = '\0';
				g_esTankCache[tank].g_sSkinColor[0] = '\0';
				g_esTankCache[tank].g_iBodyEffects = 0;
				g_esTankCache[tank].g_iGlowEnabled = 0;
				g_esTankCache[tank].g_iGlowFlashing = 0;
				g_esTankCache[tank].g_iGlowMaxRange = 0;
				g_esTankCache[tank].g_iGlowMinRange = 0;
				g_esTankCache[tank].g_iGlowType = 0;
				g_esTankCache[tank].g_iRockEffects = 0;
				g_esTankCache[tank].g_iRockModel = 0;
				g_esTankCache[tank].g_iSpecialModel = 0;

				for (int iPos = 0; iPos < (sizeof esTankCache::g_flBodyChance); iPos++)
				{
					g_esTankCache[tank].g_flBodyChance[iPos] = 0.0;

					if (iPos < (sizeof esTankCache::g_iSkinColor))
					{
						g_esTankCache[tank].g_flRockChance[iPos] = 0.0;
						g_esTankCache[tank].g_iSkinColor[iPos] = 255;
						g_esTankCache[tank].g_iRockColor[iPos] = 255;
					}

					if (iPos < (sizeof esTankCache::g_iGlowColor))
					{
						g_esTankCache[tank].g_iGlowColor[iPos] = 255;
					}
				}
			}
		}
		else
		{
			g_esTankCache[tank].g_iTankEnabled = iGetSettingValue(bAccess, true, g_esTank[iType].g_iTankEnabled, g_esGeneral.g_iTankEnabled, 1);
			if (g_esTankCache[tank].g_iTankEnabled == 1)
			{
				if (!visualsOnly)
				{
					g_esTankCache[tank].g_flArmorDuration = flGetSettingValue(bAccess, true, g_esTank[iType].g_flArmorDuration, g_esGeneral.g_flArmorDuration, 1);
					g_esTankCache[tank].g_flArmorDuration = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flArmorDuration, g_esTankCache[tank].g_flArmorDuration, 1);
					g_esTankCache[tank].g_flArmorPercentage = flGetSettingValue(bAccess, true, g_esTank[iType].g_flArmorPercentage, g_esGeneral.g_flArmorPercentage, 1);
					g_esTankCache[tank].g_flArmorPercentage = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flArmorPercentage, g_esTankCache[tank].g_flArmorPercentage, 1);
					g_esTankCache[tank].g_flArmorResistance[0] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flArmorResistance[0], g_esGeneral.g_flArmorResistance[0], 1);
					g_esTankCache[tank].g_flArmorResistance[0] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flArmorResistance[0], g_esTankCache[tank].g_flArmorResistance[0], 1);
					g_esTankCache[tank].g_flArmorResistance[1] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flArmorResistance[1], g_esGeneral.g_flArmorResistance[1], 1);
					g_esTankCache[tank].g_flArmorResistance[1] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flArmorResistance[1], g_esTankCache[tank].g_flArmorResistance[1], 1);
					g_esTankCache[tank].g_flAttackInterval = flGetSettingValue(bAccess, true, g_esTank[iType].g_flAttackInterval, g_esGeneral.g_flAttackInterval, 1);
					g_esTankCache[tank].g_flAttackInterval = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flAttackInterval, g_esTankCache[tank].g_flAttackInterval, 1);
					g_esTankCache[tank].g_flBurnDuration = flGetSettingValue(bAccess, true, g_esTank[iType].g_flBurnDuration, g_esGeneral.g_flBurnDuration, 1);
					g_esTankCache[tank].g_flBurnDuration = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flBurnDuration, g_esTankCache[tank].g_flBurnDuration, 1);
					g_esTankCache[tank].g_flBurntSkin = flGetSettingValue(bAccess, true, g_esTank[iType].g_flBurntSkin, g_esGeneral.g_flBurntSkin, 1, -1.0);
					g_esTankCache[tank].g_flBurntSkin = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flBurntSkin, g_esTankCache[tank].g_flBurntSkin, 1, -1.0);
					g_esTankCache[tank].g_flClawDamage = flGetSettingValue(bAccess, true, g_esTank[iType].g_flClawDamage, g_esGeneral.g_flClawDamage, 1, -1.0);
					g_esTankCache[tank].g_flClawDamage = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flClawDamage, g_esTankCache[tank].g_flClawDamage, 1, -1.0);
					g_esTankCache[tank].g_flHealPercentMultiplier = flGetSettingValue(bAccess, true, g_esTank[iType].g_flHealPercentMultiplier, g_esGeneral.g_flHealPercentMultiplier, 1);
					g_esTankCache[tank].g_flHealPercentMultiplier = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flHealPercentMultiplier, g_esTankCache[tank].g_flHealPercentMultiplier, 1);
					g_esTankCache[tank].g_flHittableDamage = flGetSettingValue(bAccess, true, g_esTank[iType].g_flHittableDamage, g_esGeneral.g_flHittableDamage, 1, -1.0);
					g_esTankCache[tank].g_flHittableDamage = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flHittableDamage, g_esTankCache[tank].g_flHittableDamage, 1, -1.0);
					g_esTankCache[tank].g_flIncapDamageMultiplier = flGetSettingValue(bAccess, true, g_esTank[iType].g_flIncapDamageMultiplier, g_esGeneral.g_flIncapDamageMultiplier, 1);
					g_esTankCache[tank].g_flIncapDamageMultiplier = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flIncapDamageMultiplier, g_esTankCache[tank].g_flIncapDamageMultiplier, 1);
					g_esTankCache[tank].g_flMeleeHitValue = flGetSettingValue(bAccess, true, g_esTank[iType].g_flMeleeHitValue, g_esGeneral.g_flMeleeHitValue, 1);
					g_esTankCache[tank].g_flMeleeHitValue = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flMeleeHitValue, g_esTankCache[tank].g_flMeleeHitValue, 1);
					g_esTankCache[tank].g_flPassiveDelay = flGetSettingValue(bAccess, true, g_esTank[iType].g_flPassiveDelay, g_esGeneral.g_flPassiveDelay, 1);
					g_esTankCache[tank].g_flPassiveDelay = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPassiveDelay, g_esTankCache[tank].g_flPassiveDelay, 1);
					g_esTankCache[tank].g_flPassiveInterval = flGetSettingValue(bAccess, true, g_esTank[iType].g_flPassiveInterval, g_esGeneral.g_flPassiveInterval, 1);
					g_esTankCache[tank].g_flPassiveInterval = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPassiveInterval, g_esTankCache[tank].g_flPassiveInterval, 1);
					g_esTankCache[tank].g_flPunchForce = flGetSettingValue(bAccess, true, g_esTank[iType].g_flPunchForce, g_esGeneral.g_flPunchForce, 1, -1.0);
					g_esTankCache[tank].g_flPunchForce = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPunchForce, g_esTankCache[tank].g_flPunchForce, 1, -1.0);
					g_esTankCache[tank].g_flPunchThrow = flGetSettingValue(bAccess, true, g_esTank[iType].g_flPunchThrow, g_esGeneral.g_flPunchThrow, 1);
					g_esTankCache[tank].g_flPunchThrow = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPunchThrow, g_esTankCache[tank].g_flPunchThrow, 1);
					g_esTankCache[tank].g_flRandomDuration = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRandomDuration, g_esTank[iType].g_flRandomDuration, 1);
					g_esTankCache[tank].g_flRandomInterval = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRandomInterval, g_esTank[iType].g_flRandomInterval, 1);
					g_esTankCache[tank].g_flRockDamage = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRockDamage, g_esGeneral.g_flRockDamage, 1, -1.0);
					g_esTankCache[tank].g_flRockDamage = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRockDamage, g_esTankCache[tank].g_flRockDamage, 1, -1.0);
					g_esTankCache[tank].g_flRunSpeed = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRunSpeed, g_esGeneral.g_flRunSpeed, 1);
					g_esTankCache[tank].g_flRunSpeed = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRunSpeed, g_esTankCache[tank].g_flRunSpeed, 1);
					g_esTankCache[tank].g_flShieldDuration = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShieldDuration, g_esGeneral.g_flShieldDuration, 1);
					g_esTankCache[tank].g_flShieldDuration = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShieldDuration, g_esTankCache[tank].g_flShieldDuration, 1);
					g_esTankCache[tank].g_flShieldPercentage = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShieldPercentage, g_esGeneral.g_flShieldPercentage, 1);
					g_esTankCache[tank].g_flShieldPercentage = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShieldPercentage, g_esTankCache[tank].g_flShieldPercentage, 1);
					g_esTankCache[tank].g_flShieldRate = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShieldRate, g_esGeneral.g_flShieldRate, 1);
					g_esTankCache[tank].g_flShieldRate = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShieldRate, g_esTankCache[tank].g_flShieldRate, 1);
					g_esTankCache[tank].g_flShieldResistance = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShieldResistance, g_esGeneral.g_flShieldResistance, 1);
					g_esTankCache[tank].g_flShieldResistance = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShieldResistance, g_esTankCache[tank].g_flShieldResistance, 1);
					g_esTankCache[tank].g_flThrowForce = flGetSettingValue(bAccess, true, g_esTank[iType].g_flThrowForce, g_esGeneral.g_flThrowForce, 1);
					g_esTankCache[tank].g_flThrowForce = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flThrowForce, g_esTankCache[tank].g_flThrowForce, 1);
					g_esTankCache[tank].g_flThrowInterval = flGetSettingValue(bAccess, true, g_esTank[iType].g_flThrowInterval, g_esGeneral.g_flThrowInterval, 1);
					g_esTankCache[tank].g_flThrowInterval = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flThrowInterval, g_esTankCache[tank].g_flThrowInterval, 1);
					g_esTankCache[tank].g_flTransformDelay = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flTransformDelay, g_esTank[iType].g_flTransformDelay, 1);
					g_esTankCache[tank].g_flTransformDuration = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flTransformDuration, g_esTank[iType].g_flTransformDuration, 1);
					g_esTankCache[tank].g_iAnnounceArrival = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAnnounceArrival, g_esGeneral.g_iAnnounceArrival, 1);
					g_esTankCache[tank].g_iAnnounceArrival = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAnnounceArrival, g_esTankCache[tank].g_iAnnounceArrival, 1);
					g_esTankCache[tank].g_iAnnounceDeath = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAnnounceDeath, g_esGeneral.g_iAnnounceDeath, 1);
					g_esTankCache[tank].g_iAnnounceDeath = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAnnounceDeath, g_esTankCache[tank].g_iAnnounceDeath, 1);
					g_esTankCache[tank].g_iAnnounceKill = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAnnounceKill, g_esGeneral.g_iAnnounceKill, 1);
					g_esTankCache[tank].g_iAnnounceKill = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAnnounceKill, g_esTankCache[tank].g_iAnnounceKill, 1);
					g_esTankCache[tank].g_iArrivalMessage = iGetSettingValue(bAccess, true, g_esTank[iType].g_iArrivalMessage, g_esGeneral.g_iArrivalMessage, 1);
					g_esTankCache[tank].g_iArrivalMessage = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iArrivalMessage, g_esTankCache[tank].g_iArrivalMessage, 1);
					g_esTankCache[tank].g_iArrivalSound = iGetSettingValue(bAccess, true, g_esTank[iType].g_iArrivalSound, g_esGeneral.g_iArrivalSound, 1);
					g_esTankCache[tank].g_iArrivalSound = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iArrivalSound, g_esTankCache[tank].g_iArrivalSound, 1);
					g_esTankCache[tank].g_iAutoAggravate = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAutoAggravate, g_esGeneral.g_iAutoAggravate, 1);
					g_esTankCache[tank].g_iAutoHop = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAutoHop, g_esGeneral.g_iAutoHop, 1);
					g_esTankCache[tank].g_iAutoHop = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAutoHop, g_esTankCache[tank].g_iAutoHop, 1);
					g_esTankCache[tank].g_iBaseHealth = iGetSettingValue(bAccess, true, g_esTank[iType].g_iBaseHealth, g_esGeneral.g_iBaseHealth, 1);
					g_esTankCache[tank].g_iBaseHealth = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBaseHealth, g_esTankCache[tank].g_iBaseHealth, 1);
					g_esTankCache[tank].g_iBossEffects = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBossEffects, g_esTank[iType].g_iBossEffects, 1);
					g_esTankCache[tank].g_iBossStages = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBossStages, g_esTank[iType].g_iBossStages, 1);
					g_esTankCache[tank].g_iBulletImmunity = iGetSettingValue(bAccess, true, g_esTank[iType].g_iBulletImmunity, g_esGeneral.g_iBulletImmunity, 1);
					g_esTankCache[tank].g_iBulletImmunity = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBulletImmunity, g_esTankCache[tank].g_iBulletImmunity, 1);
					g_esTankCache[tank].g_iCheckAbilities = iGetSettingValue(bAccess, true, g_esTank[iType].g_iCheckAbilities, g_esGeneral.g_iCheckAbilities, 1);
					g_esTankCache[tank].g_iCheckAbilities = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iCheckAbilities, g_esTankCache[tank].g_iCheckAbilities, 1);
					g_esTankCache[tank].g_iDeathDetails = iGetSettingValue(bAccess, true, g_esTank[iType].g_iDeathDetails, g_esGeneral.g_iDeathDetails, 1);
					g_esTankCache[tank].g_iDeathDetails = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iDeathDetails, g_esTankCache[tank].g_iDeathDetails, 1);
					g_esTankCache[tank].g_iDeathMessage = iGetSettingValue(bAccess, true, g_esTank[iType].g_iDeathMessage, g_esGeneral.g_iDeathMessage, 1);
					g_esTankCache[tank].g_iDeathMessage = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iDeathMessage, g_esTankCache[tank].g_iDeathMessage, 1);
					g_esTankCache[tank].g_iDeathRevert = iGetSettingValue(bAccess, true, g_esTank[iType].g_iDeathRevert, g_esGeneral.g_iDeathRevert, 1);
					g_esTankCache[tank].g_iDeathRevert = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iDeathRevert, g_esTankCache[tank].g_iDeathRevert, 1);
					g_esTankCache[tank].g_iDeathSound = iGetSettingValue(bAccess, true, g_esTank[iType].g_iDeathSound, g_esGeneral.g_iDeathSound, 1);
					g_esTankCache[tank].g_iDeathSound = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iDeathSound, g_esTankCache[tank].g_iDeathSound, 1);
					g_esTankCache[tank].g_iDisplayHealth = iGetSettingValue(bAccess, true, g_esTank[iType].g_iDisplayHealth, g_esGeneral.g_iDisplayHealth, 1);
					g_esTankCache[tank].g_iDisplayHealth = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iDisplayHealth, g_esTankCache[tank].g_iDisplayHealth, 1);
					g_esTankCache[tank].g_iDisplayHealthType = iGetSettingValue(bAccess, true, g_esTank[iType].g_iDisplayHealthType, g_esGeneral.g_iDisplayHealthType, 1);
					g_esTankCache[tank].g_iDisplayHealthType = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iDisplayHealthType, g_esTankCache[tank].g_iDisplayHealthType, 1);
					g_esTankCache[tank].g_iExplosiveImmunity = iGetSettingValue(bAccess, true, g_esTank[iType].g_iExplosiveImmunity, g_esGeneral.g_iExplosiveImmunity, 1);
					g_esTankCache[tank].g_iExplosiveImmunity = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iExplosiveImmunity, g_esTankCache[tank].g_iExplosiveImmunity, 1);
					g_esTankCache[tank].g_iExtraHealth = iGetSettingValue(bAccess, true, g_esTank[iType].g_iExtraHealth, g_esGeneral.g_iExtraHealth, 2, -1);
					g_esTankCache[tank].g_iExtraHealth = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iExtraHealth, g_esTankCache[tank].g_iExtraHealth, 2, -1);
					g_esTankCache[tank].g_iFireImmunity = iGetSettingValue(bAccess, true, g_esTank[iType].g_iFireImmunity, g_esGeneral.g_iFireImmunity, 1);
					g_esTankCache[tank].g_iFireImmunity = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iFireImmunity, g_esTankCache[tank].g_iFireImmunity, 1);
					g_esTankCache[tank].g_iFootstepShake = iGetSettingValue(bAccess, true, g_esTank[iType].g_iFootstepShake, g_esGeneral.g_iFootstepShake, 1);
					g_esTankCache[tank].g_iFootstepShake = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iFootstepShake, g_esTankCache[tank].g_iFootstepShake, 1);
					g_esTankCache[tank].g_iGroundPound = iGetSettingValue(bAccess, true, g_esTank[iType].g_iGroundPound, g_esGeneral.g_iGroundPound, 1);
					g_esTankCache[tank].g_iGroundPound = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGroundPound, g_esTankCache[tank].g_iGroundPound, 1);
					g_esTankCache[tank].g_iHittableImmunity = iGetSettingValue(bAccess, true, g_esTank[iType].g_iHittableImmunity, g_esGeneral.g_iHittableImmunity, 1);
					g_esTankCache[tank].g_iHittableImmunity = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iHittableImmunity, g_esTankCache[tank].g_iHittableImmunity, 1);
					g_esTankCache[tank].g_iHumanMultiplierMode = iGetSettingValue(bAccess, true, g_esTank[iType].g_iHumanMultiplierMode, g_esGeneral.g_iHumanMultiplierMode, 1);
					g_esTankCache[tank].g_iHumanMultiplierMode = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iHumanMultiplierMode, g_esTankCache[tank].g_iHumanMultiplierMode, 1);
					g_esTankCache[tank].g_iIntangibleBody = iGetSettingValue(bAccess, true, g_esTank[iType].g_iIntangibleBody, g_esGeneral.g_iIntangibleBody, 1);
					g_esTankCache[tank].g_iIntangibleBody = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iIntangibleBody, g_esTankCache[tank].g_iIntangibleBody, 1);
					g_esTankCache[tank].g_iKillMessage = iGetSettingValue(bAccess, true, g_esTank[iType].g_iKillMessage, g_esGeneral.g_iKillMessage, 1);
					g_esTankCache[tank].g_iKillMessage = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iKillMessage, g_esTankCache[tank].g_iKillMessage, 1);
					g_esTankCache[tank].g_iMeleeHitMode = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMeleeHitMode, g_esGeneral.g_iMeleeHitMode, 1);
					g_esTankCache[tank].g_iMeleeHitMode = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMeleeHitMode, g_esTankCache[tank].g_iMeleeHitMode, 1);
					g_esTankCache[tank].g_iMeleeImmunity = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMeleeImmunity, g_esGeneral.g_iMeleeImmunity, 1);
					g_esTankCache[tank].g_iMeleeImmunity = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMeleeImmunity, g_esTankCache[tank].g_iMeleeImmunity, 1);
					g_esTankCache[tank].g_iMinimumHumans = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMinimumHumans, g_esGeneral.g_iMinimumHumans, 1);
					g_esTankCache[tank].g_iMinimumHumans = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMinimumHumans, g_esTankCache[tank].g_iMinimumHumans, 1);
					g_esTankCache[tank].g_iMultiplyHealth = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMultiplyHealth, g_esGeneral.g_iMultiplyHealth, 1);
					g_esTankCache[tank].g_iMultiplyHealth = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMultiplyHealth, g_esTankCache[tank].g_iMultiplyHealth, 1);
					g_esTankCache[tank].g_iPassiveHealth = iGetSettingValue(bAccess, true, g_esTank[iType].g_iPassiveHealth, g_esGeneral.g_iPassiveHealth, 2, -1);
					g_esTankCache[tank].g_iPassiveHealth = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iPassiveHealth, g_esTankCache[tank].g_iPassiveHealth, 2, -1);
					g_esTankCache[tank].g_iPrioritizeThrows = iGetSettingValue(bAccess, true, g_esTank[iType].g_iPrioritizeThrows, g_esGeneral.g_iPrioritizeThrows, 1);
					g_esTankCache[tank].g_iRandomTank = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRandomTank, g_esTank[iType].g_iRandomTank, 1);
					g_esTankCache[tank].g_iRockSound = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRockSound, g_esGeneral.g_iRockSound, 1);
					g_esTankCache[tank].g_iRockSound = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRockSound, g_esTankCache[tank].g_iRockSound, 1);
					g_esTankCache[tank].g_iSkipIncap = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSkipIncap, g_esGeneral.g_iSkipIncap, 1);
					g_esTankCache[tank].g_iSkipIncap = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSkipIncap, g_esTankCache[tank].g_iSkipIncap, 1);
					g_esTankCache[tank].g_iSkipTaunt = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSkipTaunt, g_esGeneral.g_iSkipTaunt, 1);
					g_esTankCache[tank].g_iSkipTaunt = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSkipTaunt, g_esTankCache[tank].g_iSkipTaunt, 1);
					g_esTankCache[tank].g_iSpawnProtection = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSpawnProtection, g_esGeneral.g_iSpawnProtection, 1);
					g_esTankCache[tank].g_iSpawnProtection = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSpawnProtection, g_esTankCache[tank].g_iSpawnProtection, 1);
					g_esTankCache[tank].g_iSpawnType = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSpawnType, g_esTank[iType].g_iSpawnType, 1);
					g_esTankCache[tank].g_iSweepFist = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSweepFist, g_esGeneral.g_iSweepFist, 1);
					g_esTankCache[tank].g_iSweepFist = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSweepFist, g_esTankCache[tank].g_iSweepFist, 1);
					g_esTankCache[tank].g_iTankNote = iGetSettingValue(bAccess, true, g_esTank[iType].g_iTankNote, g_esGeneral.g_iTankNote, 1);
					g_esTankCache[tank].g_iTankNote = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iTankNote, g_esTankCache[tank].g_iTankNote, 1);
					g_esTankCache[tank].g_iTeammateLimit = iGetSettingValue(bAccess, true, g_esTank[iType].g_iTeammateLimit, g_esGeneral.g_iTeammateLimit, 1);
					g_esTankCache[tank].g_iTeammateLimit = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iTeammateLimit, g_esTankCache[tank].g_iTeammateLimit, 1);
					g_esTankCache[tank].g_iThrowRock = iGetSettingValue(bAccess, true, g_esTank[iType].g_iThrowRock, g_esGeneral.g_iThrowRock, 1);
					g_esTankCache[tank].g_iThrowRock = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iThrowRock, g_esTankCache[tank].g_iThrowRock, 1);
					g_esTankCache[tank].g_iVocalizeArrival = iGetSettingValue(bAccess, true, g_esTank[iType].g_iVocalizeArrival, g_esGeneral.g_iVocalizeArrival, 1);
					g_esTankCache[tank].g_iVocalizeArrival = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iVocalizeArrival, g_esTankCache[tank].g_iVocalizeArrival, 1);
					g_esTankCache[tank].g_iVocalizeDeath = iGetSettingValue(bAccess, true, g_esTank[iType].g_iVocalizeDeath, g_esGeneral.g_iVocalizeDeath, 1);
					g_esTankCache[tank].g_iVocalizeDeath = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iVocalizeDeath, g_esTankCache[tank].g_iVocalizeDeath, 1);
					g_esTankCache[tank].g_iVomitImmunity = iGetSettingValue(bAccess, true, g_esTank[iType].g_iVomitImmunity, g_esGeneral.g_iVomitImmunity, 1);
					g_esTankCache[tank].g_iVomitImmunity = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iVomitImmunity, g_esTankCache[tank].g_iVomitImmunity, 1);

					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sArmorCharacters, sizeof esTankCache::g_sArmorCharacters, g_esTank[iType].g_sArmorCharacters, g_esGeneral.g_sArmorCharacters);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sArmorCharacters, sizeof esTankCache::g_sArmorCharacters, g_esPlayer[tank].g_sArmorCharacters, g_esTankCache[tank].g_sArmorCharacters);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual, sizeof esTankCache::g_sBodyColorVisual, g_esTank[iType].g_sBodyColorVisual, g_esGeneral.g_sBodyColorVisual);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual, sizeof esTankCache::g_sBodyColorVisual, g_esPlayer[tank].g_sBodyColorVisual, g_esTankCache[tank].g_sBodyColorVisual);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual2, sizeof esTankCache::g_sBodyColorVisual2, g_esTank[iType].g_sBodyColorVisual2, g_esGeneral.g_sBodyColorVisual2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual2, sizeof esTankCache::g_sBodyColorVisual2, g_esPlayer[tank].g_sBodyColorVisual2, g_esTankCache[tank].g_sBodyColorVisual2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual3, sizeof esTankCache::g_sBodyColorVisual3, g_esTank[iType].g_sBodyColorVisual3, g_esGeneral.g_sBodyColorVisual3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual3, sizeof esTankCache::g_sBodyColorVisual3, g_esPlayer[tank].g_sBodyColorVisual3, g_esTankCache[tank].g_sBodyColorVisual3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sBodyColorVisual4, sizeof esTankCache::g_sBodyColorVisual4, g_esTank[iType].g_sBodyColorVisual4, g_esGeneral.g_sBodyColorVisual4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sBodyColorVisual4, sizeof esTankCache::g_sBodyColorVisual4, g_esPlayer[tank].g_sBodyColorVisual4, g_esTankCache[tank].g_sBodyColorVisual4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sComboSet, sizeof esTankCache::g_sComboSet, g_esPlayer[tank].g_sComboSet, g_esTank[iType].g_sComboSet);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward, sizeof esTankCache::g_sFallVoicelineReward, g_esTank[iType].g_sFallVoicelineReward, g_esGeneral.g_sFallVoicelineReward);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward, sizeof esTankCache::g_sFallVoicelineReward, g_esPlayer[tank].g_sFallVoicelineReward, g_esTankCache[tank].g_sFallVoicelineReward);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward2, sizeof esTankCache::g_sFallVoicelineReward2, g_esTank[iType].g_sFallVoicelineReward2, g_esGeneral.g_sFallVoicelineReward2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward2, sizeof esTankCache::g_sFallVoicelineReward2, g_esPlayer[tank].g_sFallVoicelineReward2, g_esTankCache[tank].g_sFallVoicelineReward2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward3, sizeof esTankCache::g_sFallVoicelineReward3, g_esTank[iType].g_sFallVoicelineReward3, g_esGeneral.g_sFallVoicelineReward3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward3, sizeof esTankCache::g_sFallVoicelineReward3, g_esPlayer[tank].g_sFallVoicelineReward3, g_esTankCache[tank].g_sFallVoicelineReward3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sFallVoicelineReward4, sizeof esTankCache::g_sFallVoicelineReward4, g_esTank[iType].g_sFallVoicelineReward4, g_esGeneral.g_sFallVoicelineReward4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFallVoicelineReward4, sizeof esTankCache::g_sFallVoicelineReward4, g_esPlayer[tank].g_sFallVoicelineReward4, g_esTankCache[tank].g_sFallVoicelineReward4);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sHealthCharacters, sizeof esTankCache::g_sHealthCharacters, g_esTank[iType].g_sHealthCharacters, g_esGeneral.g_sHealthCharacters);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sHealthCharacters, sizeof esTankCache::g_sHealthCharacters, g_esPlayer[tank].g_sHealthCharacters, g_esTankCache[tank].g_sHealthCharacters);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward, sizeof esTankCache::g_sItemReward, g_esTank[iType].g_sItemReward, g_esGeneral.g_sItemReward);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward, sizeof esTankCache::g_sItemReward, g_esPlayer[tank].g_sItemReward, g_esTankCache[tank].g_sItemReward);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward2, sizeof esTankCache::g_sItemReward2, g_esTank[iType].g_sItemReward2, g_esGeneral.g_sItemReward2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward2, sizeof esTankCache::g_sItemReward2, g_esPlayer[tank].g_sItemReward2, g_esTankCache[tank].g_sItemReward2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward3, sizeof esTankCache::g_sItemReward3, g_esTank[iType].g_sItemReward3, g_esGeneral.g_sItemReward3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward3, sizeof esTankCache::g_sItemReward3, g_esPlayer[tank].g_sItemReward3, g_esTankCache[tank].g_sItemReward3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sItemReward4, sizeof esTankCache::g_sItemReward4, g_esTank[iType].g_sItemReward4, g_esGeneral.g_sItemReward4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sItemReward4, sizeof esTankCache::g_sItemReward4, g_esPlayer[tank].g_sItemReward4, g_esTankCache[tank].g_sItemReward4);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual, sizeof esTankCache::g_sLightColorVisual, g_esTank[iType].g_sLightColorVisual, g_esGeneral.g_sLightColorVisual);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual, sizeof esTankCache::g_sLightColorVisual, g_esPlayer[tank].g_sLightColorVisual, g_esTankCache[tank].g_sLightColorVisual);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual2, sizeof esTankCache::g_sLightColorVisual2, g_esTank[iType].g_sLightColorVisual2, g_esGeneral.g_sLightColorVisual2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual2, sizeof esTankCache::g_sLightColorVisual2, g_esPlayer[tank].g_sLightColorVisual2, g_esTankCache[tank].g_sLightColorVisual2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual3, sizeof esTankCache::g_sLightColorVisual3, g_esTank[iType].g_sLightColorVisual3, g_esGeneral.g_sLightColorVisual3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual3, sizeof esTankCache::g_sLightColorVisual3, g_esPlayer[tank].g_sLightColorVisual3, g_esTankCache[tank].g_sLightColorVisual3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLightColorVisual4, sizeof esTankCache::g_sLightColorVisual4, g_esTank[iType].g_sLightColorVisual4, g_esGeneral.g_sLightColorVisual4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLightColorVisual4, sizeof esTankCache::g_sLightColorVisual4, g_esPlayer[tank].g_sLightColorVisual4, g_esTankCache[tank].g_sLightColorVisual4);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual, sizeof esTankCache::g_sLoopingVoicelineVisual, g_esTank[iType].g_sLoopingVoicelineVisual, g_esGeneral.g_sLoopingVoicelineVisual);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual, sizeof esTankCache::g_sLoopingVoicelineVisual, g_esPlayer[tank].g_sLoopingVoicelineVisual, g_esTankCache[tank].g_sLoopingVoicelineVisual);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual2, sizeof esTankCache::g_sLoopingVoicelineVisual2, g_esTank[iType].g_sLoopingVoicelineVisual2, g_esGeneral.g_sLoopingVoicelineVisual2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual2, sizeof esTankCache::g_sLoopingVoicelineVisual2, g_esPlayer[tank].g_sLoopingVoicelineVisual2, g_esTankCache[tank].g_sLoopingVoicelineVisual2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual3, sizeof esTankCache::g_sLoopingVoicelineVisual3, g_esTank[iType].g_sLoopingVoicelineVisual3, g_esGeneral.g_sLoopingVoicelineVisual3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual3, sizeof esTankCache::g_sLoopingVoicelineVisual3, g_esPlayer[tank].g_sLoopingVoicelineVisual3, g_esTankCache[tank].g_sLoopingVoicelineVisual3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sLoopingVoicelineVisual4, sizeof esTankCache::g_sLoopingVoicelineVisual4, g_esTank[iType].g_sLoopingVoicelineVisual4, g_esGeneral.g_sLoopingVoicelineVisual4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sLoopingVoicelineVisual4, sizeof esTankCache::g_sLoopingVoicelineVisual4, g_esPlayer[tank].g_sLoopingVoicelineVisual4, g_esTankCache[tank].g_sLoopingVoicelineVisual4);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual, sizeof esTankCache::g_sOutlineColorVisual, g_esTank[iType].g_sOutlineColorVisual, g_esGeneral.g_sOutlineColorVisual);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual, sizeof esTankCache::g_sOutlineColorVisual, g_esPlayer[tank].g_sOutlineColorVisual, g_esTankCache[tank].g_sOutlineColorVisual);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual2, sizeof esTankCache::g_sOutlineColorVisual2, g_esTank[iType].g_sOutlineColorVisual2, g_esGeneral.g_sOutlineColorVisual2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual2, sizeof esTankCache::g_sOutlineColorVisual2, g_esPlayer[tank].g_sOutlineColorVisual2, g_esTankCache[tank].g_sOutlineColorVisual2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual3, sizeof esTankCache::g_sOutlineColorVisual3, g_esTank[iType].g_sOutlineColorVisual3, g_esGeneral.g_sOutlineColorVisual3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual3, sizeof esTankCache::g_sOutlineColorVisual3, g_esPlayer[tank].g_sOutlineColorVisual3, g_esTankCache[tank].g_sOutlineColorVisual3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sOutlineColorVisual4, sizeof esTankCache::g_sOutlineColorVisual4, g_esTank[iType].g_sOutlineColorVisual4, g_esGeneral.g_sOutlineColorVisual4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOutlineColorVisual4, sizeof esTankCache::g_sOutlineColorVisual4, g_esPlayer[tank].g_sOutlineColorVisual4, g_esTankCache[tank].g_sOutlineColorVisual4);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual, sizeof esTankCache::g_sScreenColorVisual, g_esTank[iType].g_sScreenColorVisual, g_esGeneral.g_sScreenColorVisual);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual, sizeof esTankCache::g_sScreenColorVisual, g_esPlayer[tank].g_sScreenColorVisual, g_esTankCache[tank].g_sScreenColorVisual);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual2, sizeof esTankCache::g_sScreenColorVisual2, g_esTank[iType].g_sScreenColorVisual2, g_esGeneral.g_sScreenColorVisual2);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual2, sizeof esTankCache::g_sScreenColorVisual2, g_esPlayer[tank].g_sScreenColorVisual2, g_esTankCache[tank].g_sScreenColorVisual2);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual3, sizeof esTankCache::g_sScreenColorVisual3, g_esTank[iType].g_sScreenColorVisual3, g_esGeneral.g_sScreenColorVisual3);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual3, sizeof esTankCache::g_sScreenColorVisual3, g_esPlayer[tank].g_sScreenColorVisual3, g_esTankCache[tank].g_sScreenColorVisual3);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sScreenColorVisual4, sizeof esTankCache::g_sScreenColorVisual4, g_esTank[iType].g_sScreenColorVisual4, g_esGeneral.g_sScreenColorVisual4);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sScreenColorVisual4, sizeof esTankCache::g_sScreenColorVisual4, g_esPlayer[tank].g_sScreenColorVisual4, g_esTankCache[tank].g_sScreenColorVisual4);
					vGetSettingValue(bAccess, true, g_esTankCache[tank].g_sShieldCharacters, sizeof esTankCache::g_sShieldCharacters, g_esTank[iType].g_sShieldCharacters, g_esGeneral.g_sShieldCharacters);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sShieldCharacters, sizeof esTankCache::g_sShieldCharacters, g_esPlayer[tank].g_sShieldCharacters, g_esTankCache[tank].g_sShieldCharacters);
					vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sTankName, sizeof esTankCache::g_sTankName, g_esPlayer[tank].g_sTankName, g_esTank[iType].g_sTankName);

					for (int iPos = 0; iPos < (sizeof esTankCache::g_iTransformType); iPos++)
					{
						g_esTankCache[tank].g_iTransformType[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iTransformType[iPos], g_esTank[iType].g_iTransformType[iPos], 1);

						if (iPos < (sizeof esTankCache::g_iRewardEnabled))
						{
							g_esTankCache[tank].g_flActionDurationReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flActionDurationReward[iPos], g_esGeneral.g_flActionDurationReward[iPos], 1);
							g_esTankCache[tank].g_flActionDurationReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flActionDurationReward[iPos], g_esTankCache[tank].g_flActionDurationReward[iPos], 1);
							g_esTankCache[tank].g_flAdrenalineTimeReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flAdrenalineTimeReward[iPos], g_esGeneral.g_flAdrenalineTimeReward[iPos], 1);
							g_esTankCache[tank].g_flAdrenalineTimeReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flAdrenalineTimeReward[iPos], g_esTankCache[tank].g_flAdrenalineTimeReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoBoostReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAmmoBoostReward[iPos], g_esGeneral.g_iAmmoBoostReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoBoostReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAmmoBoostReward[iPos], g_esTankCache[tank].g_iAmmoBoostReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRefillReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAmmoRefillReward[iPos], g_esGeneral.g_iAmmoRefillReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRefillReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAmmoRefillReward[iPos], g_esTankCache[tank].g_iAmmoRefillReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRegenReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iAmmoRegenReward[iPos], g_esGeneral.g_iAmmoRegenReward[iPos], 1);
							g_esTankCache[tank].g_iAmmoRegenReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iAmmoRegenReward[iPos], g_esTankCache[tank].g_iAmmoRegenReward[iPos], 1);
							g_esTankCache[tank].g_flAttackBoostReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flAttackBoostReward[iPos], g_esGeneral.g_flAttackBoostReward[iPos], 1);
							g_esTankCache[tank].g_flAttackBoostReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flAttackBoostReward[iPos], g_esTankCache[tank].g_flAttackBoostReward[iPos], 1);
							g_esTankCache[tank].g_iBlazeHealthReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iBlazeHealthReward[iPos], g_esGeneral.g_iBlazeHealthReward[iPos], 1);
							g_esTankCache[tank].g_iBlazeHealthReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBlazeHealthReward[iPos], g_esTankCache[tank].g_iBlazeHealthReward[iPos], 1);
							g_esTankCache[tank].g_iBloodDonorReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iBloodDonorReward[iPos], g_esGeneral.g_iBloodDonorReward[iPos], 1);
							g_esTankCache[tank].g_iBloodDonorReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBloodDonorReward[iPos], g_esTankCache[tank].g_iBloodDonorReward[iPos], 1);
							g_esTankCache[tank].g_iBunnyHopReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iBunnyHopReward[iPos], g_esGeneral.g_iBunnyHopReward[iPos], 1);
							g_esTankCache[tank].g_iBunnyHopReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBunnyHopReward[iPos], g_esTankCache[tank].g_iBunnyHopReward[iPos], 1);
							g_esTankCache[tank].g_iBurstDoorsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iBurstDoorsReward[iPos], g_esGeneral.g_iBurstDoorsReward[iPos], 1);
							g_esTankCache[tank].g_iBurstDoorsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBurstDoorsReward[iPos], g_esTankCache[tank].g_iBurstDoorsReward[iPos], 1);
							g_esTankCache[tank].g_iCleanKillsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iCleanKillsReward[iPos], g_esGeneral.g_iCleanKillsReward[iPos], 1);
							g_esTankCache[tank].g_iCleanKillsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iCleanKillsReward[iPos], g_esTankCache[tank].g_iCleanKillsReward[iPos], 1);
							g_esTankCache[tank].g_iClusterBombsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iClusterBombsReward[iPos], g_esGeneral.g_iClusterBombsReward[iPos], 1);
							g_esTankCache[tank].g_iClusterBombsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iClusterBombsReward[iPos], g_esTankCache[tank].g_iClusterBombsReward[iPos], 1);
							g_esTankCache[tank].g_flDamageBoostReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flDamageBoostReward[iPos], g_esGeneral.g_flDamageBoostReward[iPos], 1);
							g_esTankCache[tank].g_flDamageBoostReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flDamageBoostReward[iPos], g_esTankCache[tank].g_flDamageBoostReward[iPos], 1);
							g_esTankCache[tank].g_flDamageResistanceReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flDamageResistanceReward[iPos], g_esGeneral.g_flDamageResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flDamageResistanceReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flDamageResistanceReward[iPos], g_esTankCache[tank].g_flDamageResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flDopamineRadiusReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flDopamineRadiusReward[iPos], g_esGeneral.g_flDopamineRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flDopamineRadiusReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flDopamineRadiusReward[iPos], g_esTankCache[tank].g_flDopamineRadiusReward[iPos], 1);
							g_esTankCache[tank].g_iEternalFlamesReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iEternalFlamesReward[iPos], g_esGeneral.g_iEternalFlamesReward[iPos], 1);
							g_esTankCache[tank].g_iEternalFlamesReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iEternalFlamesReward[iPos], g_esTankCache[tank].g_iEternalFlamesReward[iPos], 1);
							g_esTankCache[tank].g_iFastRecoveryReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iFastRecoveryReward[iPos], g_esGeneral.g_iFastRecoveryReward[iPos], 1);
							g_esTankCache[tank].g_iFastRecoveryReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iFastRecoveryReward[iPos], g_esTankCache[tank].g_iFastRecoveryReward[iPos], 1);
							g_esTankCache[tank].g_flFireRateReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flFireRateReward[iPos], g_esGeneral.g_flFireRateReward[iPos], 1);
							g_esTankCache[tank].g_flFireRateReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flFireRateReward[iPos], g_esTankCache[tank].g_flFireRateReward[iPos], 1);
							g_esTankCache[tank].g_iFriendlyFireReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iFriendlyFireReward[iPos], g_esGeneral.g_iFriendlyFireReward[iPos], 1);
							g_esTankCache[tank].g_iFriendlyFireReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iFriendlyFireReward[iPos], g_esTankCache[tank].g_iFriendlyFireReward[iPos], 1);
							g_esTankCache[tank].g_iGhostBulletsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iGhostBulletsReward[iPos], g_esGeneral.g_iGhostBulletsReward[iPos], 1);
							g_esTankCache[tank].g_iGhostBulletsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGhostBulletsReward[iPos], g_esTankCache[tank].g_iGhostBulletsReward[iPos], 1);
							g_esTankCache[tank].g_flGrenadeLauncherReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flGrenadeLauncherReward[iPos], g_esGeneral.g_flGrenadeLauncherReward[iPos], 1);
							g_esTankCache[tank].g_flGrenadeLauncherReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flGrenadeLauncherReward[iPos], g_esTankCache[tank].g_flGrenadeLauncherReward[iPos], 1);
							g_esTankCache[tank].g_flHealPercentReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flHealPercentReward[iPos], g_esGeneral.g_flHealPercentReward[iPos], 1);
							g_esTankCache[tank].g_flHealPercentReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flHealPercentReward[iPos], g_esTankCache[tank].g_flHealPercentReward[iPos], 1);
							g_esTankCache[tank].g_flHealthcareRadiusReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flHealthcareRadiusReward[iPos], g_esGeneral.g_flHealthcareRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flHealthcareRadiusReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flHealthcareRadiusReward[iPos], g_esTankCache[tank].g_flHealthcareRadiusReward[iPos], 1);
							g_esTankCache[tank].g_iHealthRegenReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iHealthRegenReward[iPos], g_esGeneral.g_iHealthRegenReward[iPos], 1);
							g_esTankCache[tank].g_iHealthRegenReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iHealthRegenReward[iPos], g_esTankCache[tank].g_iHealthRegenReward[iPos], 1);
							g_esTankCache[tank].g_flHeartbeatReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flHeartbeatReward[iPos], g_esGeneral.g_flHeartbeatReward[iPos], 1);
							g_esTankCache[tank].g_flHeartbeatReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flHeartbeatReward[iPos], g_esTankCache[tank].g_flHeartbeatReward[iPos], 1);
							g_esTankCache[tank].g_flHollowpointAmmoReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flHollowpointAmmoReward[iPos], g_esGeneral.g_flHollowpointAmmoReward[iPos], 1);
							g_esTankCache[tank].g_flHollowpointAmmoReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flHollowpointAmmoReward[iPos], g_esTankCache[tank].g_flHollowpointAmmoReward[iPos], 1);
							g_esTankCache[tank].g_flJumpHeightReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flJumpHeightReward[iPos], g_esGeneral.g_flJumpHeightReward[iPos], 1);
							g_esTankCache[tank].g_flJumpHeightReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flJumpHeightReward[iPos], g_esTankCache[tank].g_flJumpHeightReward[iPos], 1);
							g_esTankCache[tank].g_iInfiniteAmmoReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iInfiniteAmmoReward[iPos], g_esGeneral.g_iInfiniteAmmoReward[iPos], 1);
							g_esTankCache[tank].g_iInfiniteAmmoReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iInfiniteAmmoReward[iPos], g_esTankCache[tank].g_iInfiniteAmmoReward[iPos], 1);
							g_esTankCache[tank].g_iLadderActionsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iLadderActionsReward[iPos], g_esGeneral.g_iLadderActionsReward[iPos], 1);
							g_esTankCache[tank].g_iLadderActionsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iLadderActionsReward[iPos], g_esTankCache[tank].g_iLadderActionsReward[iPos], 1);
							g_esTankCache[tank].g_flLadyKillerReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flLadyKillerReward[iPos], g_esGeneral.g_flLadyKillerReward[iPos], 1);
							g_esTankCache[tank].g_flLadyKillerReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flLadyKillerReward[iPos], g_esTankCache[tank].g_flLadyKillerReward[iPos], 1);
							g_esTankCache[tank].g_iLaserSightReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iLaserSightReward[iPos], g_esGeneral.g_iLaserSightReward[iPos], 1);
							g_esTankCache[tank].g_iLaserSightReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iLaserSightReward[iPos], g_esTankCache[tank].g_iLaserSightReward[iPos], 1);
							g_esTankCache[tank].g_iLifeLeechReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iLifeLeechReward[iPos], g_esGeneral.g_iLifeLeechReward[iPos], 1);
							g_esTankCache[tank].g_iLifeLeechReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iLifeLeechReward[iPos], g_esTankCache[tank].g_iLifeLeechReward[iPos], 1);
							g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flLoopingVoicelineInterval[iPos], g_esGeneral.g_flLoopingVoicelineInterval[iPos], 1);
							g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flLoopingVoicelineInterval[iPos], g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos], 1);
							g_esTankCache[tank].g_flLuckyBulletReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flLuckyBulletReward[iPos], g_esGeneral.g_flLuckyBulletReward[iPos], 1);
							g_esTankCache[tank].g_flLuckyBulletReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flLuckyBulletReward[iPos], g_esTankCache[tank].g_flLuckyBulletReward[iPos], 1);
							g_esTankCache[tank].g_iMedicalCutsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMedicalCutsReward[iPos], g_esGeneral.g_iMedicalCutsReward[iPos], 1);
							g_esTankCache[tank].g_iMedicalCutsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMedicalCutsReward[iPos], g_esTankCache[tank].g_iMedicalCutsReward[iPos], 1);
							g_esTankCache[tank].g_iMeleeRangeReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMeleeRangeReward[iPos], g_esGeneral.g_iMeleeRangeReward[iPos], 1);
							g_esTankCache[tank].g_iMeleeRangeReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMeleeRangeReward[iPos], g_esTankCache[tank].g_iMeleeRangeReward[iPos], 1);
							g_esTankCache[tank].g_iMidairDashesReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iMidairDashesReward[iPos], g_esGeneral.g_iMidairDashesReward[iPos], 1);
							g_esTankCache[tank].g_iMidairDashesReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iMidairDashesReward[iPos], g_esTankCache[tank].g_iMidairDashesReward[iPos], 1);
							g_esTankCache[tank].g_flMotivationRadiusReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flMotivationRadiusReward[iPos], g_esGeneral.g_flMotivationRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flMotivationRadiusReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flMotivationRadiusReward[iPos], g_esTankCache[tank].g_flMotivationRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flOverdoseRadiusReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flOverdoseRadiusReward[iPos], g_esGeneral.g_flOverdoseRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flOverdoseRadiusReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flOverdoseRadiusReward[iPos], g_esTankCache[tank].g_flOverdoseRadiusReward[iPos], 1);
							g_esTankCache[tank].g_iOverhealthReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iOverhealthReward[iPos], g_esGeneral.g_iOverhealthReward[iPos], 1);
							g_esTankCache[tank].g_iOverhealthReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iOverhealthReward[iPos], g_esTankCache[tank].g_iOverhealthReward[iPos], 1);
							g_esTankCache[tank].g_iParticleEffectVisual[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iParticleEffectVisual[iPos], g_esGeneral.g_iParticleEffectVisual[iPos], 1);
							g_esTankCache[tank].g_iParticleEffectVisual[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iParticleEffectVisual[iPos], g_esTankCache[tank].g_iParticleEffectVisual[iPos], 1);
							g_esTankCache[tank].g_flPipeBombDurationReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flPipeBombDurationReward[iPos], g_esGeneral.g_flPipeBombDurationReward[iPos], 1);
							g_esTankCache[tank].g_flPipeBombDurationReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPipeBombDurationReward[iPos], g_esTankCache[tank].g_flPipeBombDurationReward[iPos], 1);
							g_esTankCache[tank].g_iPrefsNotify[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iPrefsNotify[iPos], g_esGeneral.g_iPrefsNotify[iPos], 1);
							g_esTankCache[tank].g_iPrefsNotify[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iPrefsNotify[iPos], g_esTankCache[tank].g_iPrefsNotify[iPos], 1);
							g_esTankCache[tank].g_flPunchResistanceReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flPunchResistanceReward[iPos], g_esGeneral.g_flPunchResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flPunchResistanceReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPunchResistanceReward[iPos], g_esTankCache[tank].g_flPunchResistanceReward[iPos], 1);
							g_esTankCache[tank].g_flRapidPistolReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRapidPistolReward[iPos], g_esGeneral.g_flRapidPistolReward[iPos], 1);
							g_esTankCache[tank].g_flRapidPistolReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRapidPistolReward[iPos], g_esTankCache[tank].g_flRapidPistolReward[iPos], 1);
							g_esTankCache[tank].g_iRecoilDampenerReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRecoilDampenerReward[iPos], g_esGeneral.g_iRecoilDampenerReward[iPos], 1);
							g_esTankCache[tank].g_iRecoilDampenerReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRecoilDampenerReward[iPos], g_esTankCache[tank].g_iRecoilDampenerReward[iPos], 1);
							g_esTankCache[tank].g_flRefillPercentReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRefillPercentReward[iPos], g_esGeneral.g_flRefillPercentReward[iPos], 1);
							g_esTankCache[tank].g_flRefillPercentReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRefillPercentReward[iPos], g_esTankCache[tank].g_flRefillPercentReward[iPos], 1);
							g_esTankCache[tank].g_iRegenBurstsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRegenBurstsReward[iPos], g_esGeneral.g_iRegenBurstsReward[iPos], 1);
							g_esTankCache[tank].g_iRegenBurstsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRegenBurstsReward[iPos], g_esTankCache[tank].g_iRegenBurstsReward[iPos], 1);
							g_esTankCache[tank].g_flReloadRateReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flReloadRateReward[iPos], g_esGeneral.g_flReloadRateReward[iPos], 1);
							g_esTankCache[tank].g_flReloadRateReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flReloadRateReward[iPos], g_esTankCache[tank].g_flReloadRateReward[iPos], 1);
							g_esTankCache[tank].g_iRespawnLoadoutReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRespawnLoadoutReward[iPos], g_esGeneral.g_iRespawnLoadoutReward[iPos], 1);
							g_esTankCache[tank].g_iRespawnLoadoutReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRespawnLoadoutReward[iPos], g_esTankCache[tank].g_iRespawnLoadoutReward[iPos], 1);
							g_esTankCache[tank].g_iReviveHealthReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iReviveHealthReward[iPos], g_esGeneral.g_iReviveHealthReward[iPos], 1);
							g_esTankCache[tank].g_iReviveHealthReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iReviveHealthReward[iPos], g_esTankCache[tank].g_iReviveHealthReward[iPos], 1);
							g_esTankCache[tank].g_iRewardBots[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRewardBots[iPos], g_esGeneral.g_iRewardBots[iPos], 1, -1);
							g_esTankCache[tank].g_iRewardBots[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRewardBots[iPos], g_esTankCache[tank].g_iRewardBots[iPos], 1, -1);
							g_esTankCache[tank].g_flRewardChance[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRewardChance[iPos], g_esGeneral.g_flRewardChance[iPos], 1);
							g_esTankCache[tank].g_flRewardChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRewardChance[iPos], g_esTankCache[tank].g_flRewardChance[iPos], 1);
							g_esTankCache[tank].g_flRewardDuration[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRewardDuration[iPos], g_esGeneral.g_flRewardDuration[iPos], 1);
							g_esTankCache[tank].g_flRewardDuration[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRewardDuration[iPos], g_esTankCache[tank].g_flRewardDuration[iPos], 1);
							g_esTankCache[tank].g_iRewardEffect[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRewardEffect[iPos], g_esGeneral.g_iRewardEffect[iPos], 1);
							g_esTankCache[tank].g_iRewardEffect[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRewardEffect[iPos], g_esTankCache[tank].g_iRewardEffect[iPos], 1);
							g_esTankCache[tank].g_iRewardEnabled[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRewardEnabled[iPos], g_esGeneral.g_iRewardEnabled[iPos], 1, -1);
							g_esTankCache[tank].g_iRewardEnabled[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRewardEnabled[iPos], g_esTankCache[tank].g_iRewardEnabled[iPos], 1, -1);
							g_esTankCache[tank].g_iRewardNotify[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRewardNotify[iPos], g_esGeneral.g_iRewardNotify[iPos], 1);
							g_esTankCache[tank].g_iRewardNotify[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRewardNotify[iPos], g_esTankCache[tank].g_iRewardNotify[iPos], 1);
							g_esTankCache[tank].g_flRewardPercentage[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flRewardPercentage[iPos], g_esGeneral.g_flRewardPercentage[iPos], 1);
							g_esTankCache[tank].g_flRewardPercentage[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRewardPercentage[iPos], g_esTankCache[tank].g_flRewardPercentage[iPos], 1);
							g_esTankCache[tank].g_iRewardVisual[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRewardVisual[iPos], g_esGeneral.g_iRewardVisual[iPos], 1);
							g_esTankCache[tank].g_iRewardVisual[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRewardVisual[iPos], g_esTankCache[tank].g_iRewardVisual[iPos], 1);
							g_esTankCache[tank].g_iRiotGearReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iRiotGearReward[iPos], g_esGeneral.g_iRiotGearReward[iPos], 1);
							g_esTankCache[tank].g_iRiotGearReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRiotGearReward[iPos], g_esTankCache[tank].g_iRiotGearReward[iPos], 1);
							g_esTankCache[tank].g_iSafetyBubbleReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSafetyBubbleReward[iPos], g_esGeneral.g_iSafetyBubbleReward[iPos], 1);
							g_esTankCache[tank].g_iSafetyBubbleReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSafetyBubbleReward[iPos], g_esTankCache[tank].g_iSafetyBubbleReward[iPos], 1);
							g_esTankCache[tank].g_iShareRewards[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iShareRewards[iPos], g_esGeneral.g_iShareRewards[iPos], 1);
							g_esTankCache[tank].g_iShareRewards[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iShareRewards[iPos], g_esTankCache[tank].g_iShareRewards[iPos], 1);
							g_esTankCache[tank].g_flShockwaveRadiusReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShockwaveRadiusReward[iPos], g_esGeneral.g_flShockwaveRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flShockwaveRadiusReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShockwaveRadiusReward[iPos], g_esTankCache[tank].g_flShockwaveRadiusReward[iPos], 1);
							g_esTankCache[tank].g_flShoveDamageReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShoveDamageReward[iPos], g_esGeneral.g_flShoveDamageReward[iPos], 1);
							g_esTankCache[tank].g_flShoveDamageReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShoveDamageReward[iPos], g_esTankCache[tank].g_flShoveDamageReward[iPos], 1);
							g_esTankCache[tank].g_iShovePenaltyReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iShovePenaltyReward[iPos], g_esGeneral.g_iShovePenaltyReward[iPos], 1);
							g_esTankCache[tank].g_iShovePenaltyReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iShovePenaltyReward[iPos], g_esTankCache[tank].g_iShovePenaltyReward[iPos], 1);
							g_esTankCache[tank].g_flShoveRateReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flShoveRateReward[iPos], g_esGeneral.g_flShoveRateReward[iPos], 1);
							g_esTankCache[tank].g_flShoveRateReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flShoveRateReward[iPos], g_esTankCache[tank].g_flShoveRateReward[iPos], 1);
							g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flSledgehammerRoundsReward[iPos], g_esGeneral.g_flSledgehammerRoundsReward[iPos], 1);
							g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flSledgehammerRoundsReward[iPos], g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos], 1);
							g_esTankCache[tank].g_iSpecialAmmoReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSpecialAmmoReward[iPos], g_esGeneral.g_iSpecialAmmoReward[iPos], 1);
							g_esTankCache[tank].g_iSpecialAmmoReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSpecialAmmoReward[iPos], g_esTankCache[tank].g_iSpecialAmmoReward[iPos], 1);
							g_esTankCache[tank].g_flSpeedBoostReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flSpeedBoostReward[iPos], g_esGeneral.g_flSpeedBoostReward[iPos], 1);
							g_esTankCache[tank].g_flSpeedBoostReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flSpeedBoostReward[iPos], g_esTankCache[tank].g_flSpeedBoostReward[iPos], 1);
							g_esTankCache[tank].g_iStackRewards[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iStackRewards[iPos], g_esGeneral.g_iStackRewards[iPos], 1);
							g_esTankCache[tank].g_iStackRewards[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iStackRewards[iPos], g_esTankCache[tank].g_iStackRewards[iPos], 1);
							g_esTankCache[tank].g_iStickyGrenadesReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iStickyGrenadesReward[iPos], g_esGeneral.g_iStickyGrenadesReward[iPos], 1);
							g_esTankCache[tank].g_iStickyGrenadesReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iStickyGrenadesReward[iPos], g_esTankCache[tank].g_iStickyGrenadesReward[iPos], 1);
							g_esTankCache[tank].g_flSupplierReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flSupplierReward[iPos], g_esGeneral.g_flSupplierReward[iPos], 1);
							g_esTankCache[tank].g_flSupplierReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flSupplierReward[iPos], g_esTankCache[tank].g_flSupplierReward[iPos], 1);
							g_esTankCache[tank].g_flSwingRateReward[iPos] = flGetSettingValue(bAccess, true, g_esTank[iType].g_flSwingRateReward[iPos], g_esGeneral.g_flSwingRateReward[iPos], 1);
							g_esTankCache[tank].g_flSwingRateReward[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flSwingRateReward[iPos], g_esTankCache[tank].g_flSwingRateReward[iPos], 1);
							g_esTankCache[tank].g_iSyringeDartsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iSyringeDartsReward[iPos], g_esGeneral.g_iSyringeDartsReward[iPos], 1);
							g_esTankCache[tank].g_iSyringeDartsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSyringeDartsReward[iPos], g_esTankCache[tank].g_iSyringeDartsReward[iPos], 1);
							g_esTankCache[tank].g_iThornsReward[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iThornsReward[iPos], g_esGeneral.g_iThornsReward[iPos], 1);
							g_esTankCache[tank].g_iThornsReward[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iThornsReward[iPos], g_esTankCache[tank].g_iThornsReward[iPos], 1);
							g_esTankCache[tank].g_iUsefulRewards[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iUsefulRewards[iPos], g_esGeneral.g_iUsefulRewards[iPos], 1);
							g_esTankCache[tank].g_iUsefulRewards[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iUsefulRewards[iPos], g_esTankCache[tank].g_iUsefulRewards[iPos], 1);
							g_esTankCache[tank].g_iVoicePitchVisual[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iVoicePitchVisual[iPos], g_esGeneral.g_iVoicePitchVisual[iPos], 1);
							g_esTankCache[tank].g_iVoicePitchVisual[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iVoicePitchVisual[iPos], g_esTankCache[tank].g_iVoicePitchVisual[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_iStackLimits))
						{
							g_esTankCache[tank].g_iStackLimits[iPos] = iGetSettingValue(bAccess, true, g_esTank[iType].g_iStackLimits[iPos], g_esGeneral.g_iStackLimits[iPos], 1);
							g_esTankCache[tank].g_iStackLimits[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iStackLimits[iPos], g_esTankCache[tank].g_iStackLimits[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_flComboChance))
						{
							g_esTankCache[tank].g_flComboChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboChance[iPos], g_esTank[iType].g_flComboChance[iPos], 1);
							g_esTankCache[tank].g_iComboCooldown[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iComboCooldown[iPos], g_esTank[iType].g_iComboCooldown[iPos], 1);
							g_esTankCache[tank].g_flComboDamage[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboDamage[iPos], g_esTank[iType].g_flComboDamage[iPos], 1);
							g_esTankCache[tank].g_flComboDeathChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboDeathChance[iPos], g_esTank[iType].g_flComboDeathChance[iPos], 1);
							g_esTankCache[tank].g_flComboDeathRange[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboDeathRange[iPos], g_esTank[iType].g_flComboDeathRange[iPos], 1);
							g_esTankCache[tank].g_flComboDelay[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboDelay[iPos], g_esTank[iType].g_flComboDelay[iPos], 1);
							g_esTankCache[tank].g_flComboDuration[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboDuration[iPos], g_esTank[iType].g_flComboDuration[iPos], 1);
							g_esTankCache[tank].g_flComboInterval[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboInterval[iPos], g_esTank[iType].g_flComboInterval[iPos], 1);
							g_esTankCache[tank].g_flComboMinRadius[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboMinRadius[iPos], g_esTank[iType].g_flComboMinRadius[iPos], 2, 1.0);
							g_esTankCache[tank].g_flComboMaxRadius[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboMaxRadius[iPos], g_esTank[iType].g_flComboMaxRadius[iPos], 2, -1.0);
							g_esTankCache[tank].g_flComboRange[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboRange[iPos], g_esTank[iType].g_flComboRange[iPos], 1);
							g_esTankCache[tank].g_flComboRangeChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboRangeChance[iPos], g_esTank[iType].g_flComboRangeChance[iPos], 1);
							g_esTankCache[tank].g_iComboRangeCooldown[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iComboRangeCooldown[iPos], g_esTank[iType].g_iComboRangeCooldown[iPos], 1);
							g_esTankCache[tank].g_flComboRockChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboRockChance[iPos], g_esTank[iType].g_flComboRockChance[iPos], 1);
							g_esTankCache[tank].g_iComboRockCooldown[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iComboRockCooldown[iPos], g_esTank[iType].g_iComboRockCooldown[iPos], 1);
							g_esTankCache[tank].g_flComboSpeed[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboSpeed[iPos], g_esTank[iType].g_flComboSpeed[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_flComboTypeChance))
						{
							g_esTankCache[tank].g_flComboTypeChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flComboTypeChance[iPos], g_esTank[iType].g_flComboTypeChance[iPos], 1);
						}

						if (iPos < (sizeof esTankCache::g_iSkinColor))
						{
							g_esTankCache[tank].g_iBossHealth[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBossHealth[iPos], g_esTank[iType].g_iBossHealth[iPos], 1);
							g_esTankCache[tank].g_iBossType[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBossType[iPos], g_esTank[iType].g_iBossType[iPos], 1);
						}
					}
				}

				g_esTankCache[tank].g_iBodyEffects = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iBodyEffects, g_esTank[iType].g_iBodyEffects, 1);
				g_esTankCache[tank].g_iGlowEnabled = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGlowEnabled, g_esTank[iType].g_iGlowEnabled, 1);
				g_esTankCache[tank].g_iGlowFlashing = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGlowFlashing, g_esTank[iType].g_iGlowFlashing, 1);
				g_esTankCache[tank].g_iGlowMaxRange = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGlowMaxRange, g_esTank[iType].g_iGlowMaxRange, 1);
				g_esTankCache[tank].g_iGlowMinRange = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGlowMinRange, g_esTank[iType].g_iGlowMinRange, 1);
				g_esTankCache[tank].g_iGlowType = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGlowType, g_esTank[iType].g_iGlowType, 1);
				g_esTankCache[tank].g_iPropsAttached = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iPropsAttached, g_esTank[iType].g_iPropsAttached, 1);
				g_esTankCache[tank].g_iRockEffects = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRockEffects, g_esTank[iType].g_iRockEffects, 1);
				g_esTankCache[tank].g_iRockModel = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRockModel, g_esTank[iType].g_iRockModel, 1);
				g_esTankCache[tank].g_iTankModel = iGetSettingValue(bAccess, true, g_esTank[iType].g_iTankModel, g_esGeneral.g_iTankModel, 1);
				g_esTankCache[tank].g_iTankModel = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iTankModel, g_esTankCache[tank].g_iTankModel, 1);

				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFlameColor, sizeof esTankCache::g_sFlameColor, g_esPlayer[tank].g_sFlameColor, g_esTank[iType].g_sFlameColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sFlashlightColor, sizeof esTankCache::g_sFlashlightColor, g_esPlayer[tank].g_sFlashlightColor, g_esTank[iType].g_sFlashlightColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sGlowColor, sizeof esTankCache::g_sGlowColor, g_esPlayer[tank].g_sGlowColor, g_esTank[iType].g_sGlowColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sOzTankColor, sizeof esTankCache::g_sOzTankColor, g_esPlayer[tank].g_sOzTankColor, g_esTank[iType].g_sOzTankColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sPropTankColor, sizeof esTankCache::g_sPropTankColor, g_esPlayer[tank].g_sPropTankColor, g_esTank[iType].g_sPropTankColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sRockColor, sizeof esTankCache::g_sRockColor, g_esPlayer[tank].g_sRockColor, g_esTank[iType].g_sRockColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sSkinColor, sizeof esTankCache::g_sSkinColor, g_esPlayer[tank].g_sSkinColor, g_esTank[iType].g_sSkinColor);
				vGetSettingValue(bAccess, bHuman, g_esTankCache[tank].g_sTireColor, sizeof esTankCache::g_sTireColor, g_esPlayer[tank].g_sTireColor, g_esTank[iType].g_sTireColor);

				for (int iPos = 0; iPos < (sizeof esTankCache::g_flPropsChance); iPos++)
				{
					if (iPos < (sizeof esTankCache::g_flPropsChance))
					{
						g_esTankCache[tank].g_flPropsChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flPropsChance[iPos], g_esTank[iType].g_flPropsChance[iPos], 1);
					}

					if (iPos < (sizeof esTankCache::g_flBodyChance))
					{
						g_esTankCache[tank].g_flBodyChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flBodyChance[iPos], g_esTank[iType].g_flBodyChance[iPos], 1);
					}

					if (iPos < (sizeof esTankCache::g_iSkinColor))
					{
						g_esTankCache[tank].g_flRockChance[iPos] = flGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_flRockChance[iPos], g_esTank[iType].g_flRockChance[iPos], 1);
						g_esTankCache[tank].g_iSkinColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iSkinColor[iPos], g_esTank[iType].g_iSkinColor[iPos], 1);
						g_esTankCache[tank].g_iLightColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iLightColor[iPos], g_esTank[iType].g_iLightColor[iPos], 1);
						g_esTankCache[tank].g_iOzTankColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iOzTankColor[iPos], g_esTank[iType].g_iOzTankColor[iPos], 1);
						g_esTankCache[tank].g_iFlameColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iFlameColor[iPos], g_esTank[iType].g_iFlameColor[iPos], 1);
						g_esTankCache[tank].g_iRockColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iRockColor[iPos], g_esTank[iType].g_iRockColor[iPos], 1);
						g_esTankCache[tank].g_iTireColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iTireColor[iPos], g_esTank[iType].g_iTireColor[iPos], 1);
						g_esTankCache[tank].g_iPropTankColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iPropTankColor[iPos], g_esTank[iType].g_iPropTankColor[iPos], 1);
						g_esTankCache[tank].g_iFlashlightColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iFlashlightColor[iPos], g_esTank[iType].g_iFlashlightColor[iPos], 1);
						g_esTankCache[tank].g_iCrownColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iCrownColor[iPos], g_esTank[iType].g_iCrownColor[iPos], 1);
					}

					if (iPos < (sizeof esTankCache::g_iGlowColor))
					{
						g_esTankCache[tank].g_iGlowColor[iPos] = iGetSettingValue(bAccess, bHuman, g_esPlayer[tank].g_iGlowColor[iPos], g_esTank[iType].g_iGlowColor[iPos], 1);
					}
				}
			}
			else
			{
				if (!visualsOnly)
				{
					g_esTankCache[tank].g_sArmorCharacters[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sBodyColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sComboSet[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward2[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward3[0] = '\0';
					g_esTankCache[tank].g_sFallVoicelineReward4[0] = '\0';
					g_esTankCache[tank].g_sHealthCharacters[0] = '\0';
					g_esTankCache[tank].g_sItemReward[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sLightColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual2[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual3[0] = '\0';
					g_esTankCache[tank].g_sLoopingVoicelineVisual4[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sOutlineColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual2[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual3[0] = '\0';
					g_esTankCache[tank].g_sScreenColorVisual4[0] = '\0';
					g_esTankCache[tank].g_sShieldCharacters[0] = '\0';
					g_esTankCache[tank].g_sTankName[0] = '\0';
					g_esTankCache[tank].g_flArmorDuration = 0.0;
					g_esTankCache[tank].g_flArmorPercentage = 0.0;
					g_esTankCache[tank].g_flArmorResistance[0] = 0.0;
					g_esTankCache[tank].g_flArmorResistance[1] = 0.0;
					g_esTankCache[tank].g_flAttackInterval = 0.0;
					g_esTankCache[tank].g_flBurnDuration = 0.0;
					g_esTankCache[tank].g_flBurntSkin = -1.0;
					g_esTankCache[tank].g_flClawDamage = -1.0;
					g_esTankCache[tank].g_flHealPercentMultiplier = 1.0;
					g_esTankCache[tank].g_flHittableDamage = -1.0;
					g_esTankCache[tank].g_flIncapDamageMultiplier = 1.0;
					g_esTankCache[tank].g_flMeleeHitValue = 0.0;
					g_esTankCache[tank].g_flPassiveDelay = 0.0;
					g_esTankCache[tank].g_flPassiveInterval = 0.0;
					g_esTankCache[tank].g_flPunchForce = -1.0;
					g_esTankCache[tank].g_flPunchThrow = 0.0;
					g_esTankCache[tank].g_flRandomDuration = 0.0;
					g_esTankCache[tank].g_flRandomInterval = 0.0;
					g_esTankCache[tank].g_flRockDamage = -1.0;
					g_esTankCache[tank].g_flRunSpeed = 0.0;
					g_esTankCache[tank].g_flShieldDuration = 0.0;
					g_esTankCache[tank].g_flShieldPercentage = 0.0;
					g_esTankCache[tank].g_flShieldRate = 0.0;
					g_esTankCache[tank].g_flShieldResistance = 0.0;
					g_esTankCache[tank].g_flThrowForce = 0.0;
					g_esTankCache[tank].g_flThrowInterval = 0.0;
					g_esTankCache[tank].g_flTransformDelay = 0.0;
					g_esTankCache[tank].g_flTransformDuration = 0.0;
					g_esTankCache[tank].g_iAnnounceArrival = 0;
					g_esTankCache[tank].g_iAnnounceDeath = 0;
					g_esTankCache[tank].g_iAnnounceKill = 0;
					g_esTankCache[tank].g_iArrivalMessage = 0;
					g_esTankCache[tank].g_iArrivalSound = 0;
					g_esTankCache[tank].g_iAutoAggravate = 0;
					g_esTankCache[tank].g_iAutoHop = 0;
					g_esTankCache[tank].g_iBaseHealth = 0;
					g_esTankCache[tank].g_iBossEffects = 0;
					g_esTankCache[tank].g_iBossStages = 0;
					g_esTankCache[tank].g_iBulletImmunity = 0;
					g_esTankCache[tank].g_iCheckAbilities = 0;
					g_esTankCache[tank].g_iDeathDetails = 0;
					g_esTankCache[tank].g_iDeathMessage = 0;
					g_esTankCache[tank].g_iDeathRevert = 0;
					g_esTankCache[tank].g_iDeathSound = 0;
					g_esTankCache[tank].g_iDisplayHealth = 0;
					g_esTankCache[tank].g_iDisplayHealthType = 0;
					g_esTankCache[tank].g_iExplosiveImmunity = 0;
					g_esTankCache[tank].g_iExtraHealth = 0;
					g_esTankCache[tank].g_iFireImmunity = 0;
					g_esTankCache[tank].g_iFootstepShake = 1;
					g_esTankCache[tank].g_iGroundPound = 0;
					g_esTankCache[tank].g_iHittableImmunity = 0;
					g_esTankCache[tank].g_iHumanMultiplierMode = 0;
					g_esTankCache[tank].g_iIntangibleBody = 0;
					g_esTankCache[tank].g_iKillMessage = 0;
					g_esTankCache[tank].g_iMeleeHitMode = 0;
					g_esTankCache[tank].g_iMeleeImmunity = 0;
					g_esTankCache[tank].g_iMinimumHumans = 0;
					g_esTankCache[tank].g_iMultiplyHealth = 0;
					g_esTankCache[tank].g_iPassiveHealth = 0;
					g_esTankCache[tank].g_iPrioritizeThrows = 0;
					g_esTankCache[tank].g_iRandomTank = 0;
					g_esTankCache[tank].g_iRockSound = 0;
					g_esTankCache[tank].g_iSkipIncap = 0;
					g_esTankCache[tank].g_iSkipTaunt = 0;
					g_esTankCache[tank].g_iSpawnProtection = 0;
					g_esTankCache[tank].g_iSpawnType = 0;
					g_esTankCache[tank].g_iSweepFist = 0;
					g_esTankCache[tank].g_iTankNote = 0;
					g_esTankCache[tank].g_iTeammateLimit = 0;
					g_esTankCache[tank].g_iThrowRock = 0;
					g_esTankCache[tank].g_iVocalizeArrival = 0;
					g_esTankCache[tank].g_iVocalizeDeath = 0;
					g_esTankCache[tank].g_iVomitImmunity = 0;

					for (int iPos = 0; iPos < (sizeof esTankCache::g_iTransformType); iPos++)
					{
						g_esTankCache[tank].g_iTransformType[iPos] = 0;

						if (iPos < (sizeof esTankCache::g_iRewardEnabled))
						{
							g_esTankCache[tank].g_flActionDurationReward[iPos] = 0.0;
							g_esTankCache[tank].g_flAdrenalineTimeReward[iPos] = 0.0;
							g_esTankCache[tank].g_iAmmoBoostReward[iPos] = 0;
							g_esTankCache[tank].g_iAmmoRefillReward[iPos] = 0;
							g_esTankCache[tank].g_iAmmoRegenReward[iPos] = 0;
							g_esTankCache[tank].g_flAttackBoostReward[iPos] = 0.0;
							g_esTankCache[tank].g_iBlazeHealthReward[iPos] = 0;
							g_esTankCache[tank].g_iBloodDonorReward[iPos] = 0;
							g_esTankCache[tank].g_iBunnyHopReward[iPos] = 0;
							g_esTankCache[tank].g_iBurstDoorsReward[iPos] = 0;
							g_esTankCache[tank].g_iCleanKillsReward[iPos] = 0;
							g_esTankCache[tank].g_iClusterBombsReward[iPos] = 0;
							g_esTankCache[tank].g_flDamageBoostReward[iPos] = 0.0;
							g_esTankCache[tank].g_flDamageResistanceReward[iPos] = 0.0;
							g_esTankCache[tank].g_flDopamineRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_iEternalFlamesReward[iPos] = 0;
							g_esTankCache[tank].g_iFastRecoveryReward[iPos] = 0;
							g_esTankCache[tank].g_flFireRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_iFriendlyFireReward[iPos] = 0;
							g_esTankCache[tank].g_iGhostBulletsReward[iPos] = 0;
							g_esTankCache[tank].g_flGrenadeLauncherReward[iPos] = 0.0;
							g_esTankCache[tank].g_flHealPercentReward[iPos] = 0.0;
							g_esTankCache[tank].g_flHealthcareRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_iHealthRegenReward[iPos] = 0;
							g_esTankCache[tank].g_flHeartbeatReward[iPos] = 0.0;
							g_esTankCache[tank].g_flHollowpointAmmoReward[iPos] = 0.0;
							g_esTankCache[tank].g_flJumpHeightReward[iPos] = 0.0;
							g_esTankCache[tank].g_iInfiniteAmmoReward[iPos] = 0;
							g_esTankCache[tank].g_iLadderActionsReward[iPos] = 0;
							g_esTankCache[tank].g_flLadyKillerReward[iPos] = 0.0;
							g_esTankCache[tank].g_iLaserSightReward[iPos] = 0;
							g_esTankCache[tank].g_iLifeLeechReward[iPos] = 0;
							g_esTankCache[tank].g_flLoopingVoicelineInterval[iPos] = 0.0;
							g_esTankCache[tank].g_flLuckyBulletReward[iPos] = 0.0;
							g_esTankCache[tank].g_iMedicalCutsReward[iPos] = 0;
							g_esTankCache[tank].g_iMeleeRangeReward[iPos] = 0;
							g_esTankCache[tank].g_iMidairDashesReward[iPos] = 0;
							g_esTankCache[tank].g_flMotivationRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_flOverdoseRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_iOverhealthReward[iPos] = 0;
							g_esTankCache[tank].g_iParticleEffectVisual[iPos] = 0;
							g_esTankCache[tank].g_flPipeBombDurationReward[iPos] = 0.0;
							g_esTankCache[tank].g_iPrefsNotify[iPos] = 0;
							g_esTankCache[tank].g_flPunchResistanceReward[iPos] = 0.0;
							g_esTankCache[tank].g_flRapidPistolReward[iPos] = 0.0;
							g_esTankCache[tank].g_iRecoilDampenerReward[iPos] = 0;
							g_esTankCache[tank].g_flRefillPercentReward[iPos] = 0.0;
							g_esTankCache[tank].g_iRegenBurstsReward[iPos] = 0;
							g_esTankCache[tank].g_flReloadRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_iRespawnLoadoutReward[iPos] = 0;
							g_esTankCache[tank].g_iReviveHealthReward[iPos] = 0;
							g_esTankCache[tank].g_iRewardBots[iPos] = -1;
							g_esTankCache[tank].g_flRewardChance[iPos] = 0.0;
							g_esTankCache[tank].g_flRewardDuration[iPos] = 0.0;
							g_esTankCache[tank].g_iRewardEffect[iPos] = 0;
							g_esTankCache[tank].g_iRewardEnabled[iPos] = -1;
							g_esTankCache[tank].g_iRewardNotify[iPos] = 0;
							g_esTankCache[tank].g_flRewardPercentage[iPos] = 0.0;
							g_esTankCache[tank].g_iRewardVisual[iPos] = 0;
							g_esTankCache[tank].g_iRiotGearReward[iPos] = 0;
							g_esTankCache[tank].g_iSafetyBubbleReward[iPos] = 0;
							g_esTankCache[tank].g_iShareRewards[iPos] = 0;
							g_esTankCache[tank].g_flShockwaveRadiusReward[iPos] = 0.0;
							g_esTankCache[tank].g_flShoveDamageReward[iPos] = 0.0;
							g_esTankCache[tank].g_iShovePenaltyReward[iPos] = 0;
							g_esTankCache[tank].g_flShoveRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_flSledgehammerRoundsReward[iPos] = 0.0;
							g_esTankCache[tank].g_iSpecialAmmoReward[iPos] = 0;
							g_esTankCache[tank].g_flSpeedBoostReward[iPos] = 0.0;
							g_esTankCache[tank].g_iStackRewards[iPos] = 0;
							g_esTankCache[tank].g_iStickyGrenadesReward[iPos] = 0;
							g_esTankCache[tank].g_flSupplierReward[iPos] = 0.0;
							g_esTankCache[tank].g_flSwingRateReward[iPos] = 0.0;
							g_esTankCache[tank].g_iSyringeDartsReward[iPos] = 0;
							g_esTankCache[tank].g_iThornsReward[iPos] = 0;
							g_esTankCache[tank].g_iUsefulRewards[iPos] = 0;
							g_esTankCache[tank].g_iVoicePitchVisual[iPos] = 0;
						}

						if (iPos < (sizeof esTankCache::g_iStackLimits))
						{
							g_esTankCache[tank].g_iStackLimits[iPos] = 0;
						}

						if (iPos < (sizeof esTankCache::g_flComboChance))
						{
							g_esTankCache[tank].g_flComboChance[iPos] = 0.0;
							g_esTankCache[tank].g_iComboCooldown[iPos] = 0;
							g_esTankCache[tank].g_flComboDamage[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDeathChance[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDeathRange[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDelay[iPos] = 0.0;
							g_esTankCache[tank].g_flComboDuration[iPos] = 0.0;
							g_esTankCache[tank].g_flComboInterval[iPos] = 0.0;
							g_esTankCache[tank].g_flComboMinRadius[iPos] = 0.0;
							g_esTankCache[tank].g_flComboMaxRadius[iPos] = 0.0;
							g_esTankCache[tank].g_flComboRange[iPos] = 0.0;
							g_esTankCache[tank].g_flComboRangeChance[iPos] = 0.0;
							g_esTankCache[tank].g_iComboRangeCooldown[iPos] = 0;
							g_esTankCache[tank].g_flComboRockChance[iPos] = 0.0;
							g_esTankCache[tank].g_iComboRockCooldown[iPos] = 0;
							g_esTankCache[tank].g_flComboSpeed[iPos] = 0.0;
						}

						if (iPos < (sizeof esTankCache::g_flComboTypeChance))
						{
							g_esTankCache[tank].g_flComboTypeChance[iPos] = 0.0;
						}

						if (iPos < (sizeof esTankCache::g_flPropsChance))
						{
							g_esTankCache[tank].g_flPropsChance[iPos] = 0.0;
						}

						if (iPos < (sizeof esTankCache::g_flBodyChance))
						{
							g_esTankCache[tank].g_flBodyChance[iPos] = 0.0;
						}

						if (iPos < (sizeof esTankCache::g_iSkinColor))
						{
							g_esTankCache[tank].g_flRockChance[iPos] = 0.0;
							g_esTankCache[tank].g_iBossHealth[iPos] = 0;
							g_esTankCache[tank].g_iBossType[iPos] = 0;
						}
					}
				}

				g_esTankCache[tank].g_sFlameColor[0] = '\0';
				g_esTankCache[tank].g_sFlashlightColor[0] = '\0';
				g_esTankCache[tank].g_sGlowColor[0] = '\0';
				g_esTankCache[tank].g_sOzTankColor[0] = '\0';
				g_esTankCache[tank].g_sPropTankColor[0] = '\0';
				g_esTankCache[tank].g_sRockColor[0] = '\0';
				g_esTankCache[tank].g_sSkinColor[0] = '\0';
				g_esTankCache[tank].g_sTireColor[0] = '\0';
				g_esTankCache[tank].g_iBodyEffects = 0;
				g_esTankCache[tank].g_iGlowEnabled = 0;
				g_esTankCache[tank].g_iGlowFlashing = 0;
				g_esTankCache[tank].g_iGlowMaxRange = 0;
				g_esTankCache[tank].g_iGlowMinRange = 0;
				g_esTankCache[tank].g_iGlowType = 0;
				g_esTankCache[tank].g_iPropsAttached = 0;
				g_esTankCache[tank].g_iRockEffects = 0;
				g_esTankCache[tank].g_iRockModel = 0;
				g_esTankCache[tank].g_iTankModel = 0;

				for (int iPos = 0; iPos < (sizeof esTankCache::g_flPropsChance); iPos++)
				{
					if (iPos < (sizeof esTankCache::g_flPropsChance))
					{
						g_esTankCache[tank].g_flPropsChance[iPos] = 0.0;
					}

					if (iPos < (sizeof esTankCache::g_flBodyChance))
					{
						g_esTankCache[tank].g_flBodyChance[iPos] = 0.0;
					}

					if (iPos < (sizeof esTankCache::g_iSkinColor))
					{
						g_esTankCache[tank].g_flRockChance[iPos] = 0.0;
						g_esTankCache[tank].g_iSkinColor[iPos] = 255;
						g_esTankCache[tank].g_iLightColor[iPos] = 255;
						g_esTankCache[tank].g_iOzTankColor[iPos] = 255;
						g_esTankCache[tank].g_iFlameColor[iPos] = 255;
						g_esTankCache[tank].g_iRockColor[iPos] = 255;
						g_esTankCache[tank].g_iTireColor[iPos] = 255;
						g_esTankCache[tank].g_iPropTankColor[iPos] = 255;
						g_esTankCache[tank].g_iFlashlightColor[iPos] = 255;
						g_esTankCache[tank].g_iCrownColor[iPos] = 255;
					}

					if (iPos < (sizeof esTankCache::g_iGlowColor))
					{
						g_esTankCache[tank].g_iGlowColor[iPos] = 255;
					}
				}
				
			}
		}
	}

	if (!visualsOnly)
	{

		Call_StartForward(g_esGeneral.g_gfSettingsCachedForward);
		Call_PushCell(tank);
		Call_PushCell(bAccess);
		Call_PushCell(g_esTank[iType].g_iRealType[0]);
		Call_Finish();
	}
}

void vCacheSurvivorSettings(int survivor)
{
	bool bValid = bIsValidClient(survivor), bHuman = bIsValidClient(survivor, MT_CHECK_FAKECLIENT);
	int iType = g_esShooter[survivor].g_iCharacterType[0];

	if (bIsSurvivor(survivor, MT_CHECK_INDEX|MT_CHECK_INGAME) && iType >= 0)
	{
		g_esSurvivorCache[survivor].g_iCarrierBots = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierBots, g_esHuman.g_iCarrierBots, 1);
		g_esSurvivorCache[survivor].g_iCarrierBots = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierBots, g_esSurvivorCache[survivor].g_iCarrierBots, 1);
		g_esSurvivorCache[survivor].g_iCarrierEnabled = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierEnabled, g_esHuman.g_iCarrierEnabled, 1);
		g_esSurvivorCache[survivor].g_iCarrierEnabled = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierEnabled, g_esSurvivorCache[survivor].g_iCarrierEnabled, 1);

		int iEnabled = (bHuman ? g_esSurvivorCache[survivor].g_iCarrierEnabled : g_esSurvivorCache[survivor].g_iCarrierBots);
		if (iEnabled > 0)
		{
			g_esSurvivorCache[survivor].g_flCarrierChance = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flCarrierChance, g_esHuman.g_flCarrierChance, 1);
			g_esSurvivorCache[survivor].g_flCarrierChance = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flCarrierChance, g_esSurvivorCache[survivor].g_flCarrierChance, 1);
			g_esSurvivorCache[survivor].g_flCarrierDamageMultiplier = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flCarrierDamageMultiplier, g_esHuman.g_flCarrierDamageMultiplier, 1);
			g_esSurvivorCache[survivor].g_flCarrierDamageMultiplier = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flCarrierDamageMultiplier, g_esSurvivorCache[survivor].g_flCarrierDamageMultiplier, 1);
			g_esSurvivorCache[survivor].g_flCarrierDelay = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flCarrierDelay, g_esHuman.g_flCarrierDelay, 1);
			g_esSurvivorCache[survivor].g_flCarrierDelay = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flCarrierDelay, g_esSurvivorCache[survivor].g_flCarrierDelay, 1);
			g_esSurvivorCache[survivor].g_flCarrierHealthMultiplier = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flCarrierHealthMultiplier, g_esHuman.g_flCarrierHealthMultiplier, 1);
			g_esSurvivorCache[survivor].g_flCarrierHealthMultiplier = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flCarrierHealthMultiplier, g_esSurvivorCache[survivor].g_flCarrierHealthMultiplier, 1);
			g_esSurvivorCache[survivor].g_flCarrierVoiceChance = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flCarrierVoiceChance, g_esHuman.g_flCarrierVoiceChance, 1);
			g_esSurvivorCache[survivor].g_flCarrierVoiceChance = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flCarrierVoiceChance, g_esSurvivorCache[survivor].g_flCarrierVoiceChance, 1);
			g_esSurvivorCache[survivor].g_flCarrierVoiceInterval = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flCarrierVoiceInterval, g_esHuman.g_flCarrierVoiceInterval, 1);
			g_esSurvivorCache[survivor].g_flCarrierVoiceInterval = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flCarrierVoiceInterval, g_esSurvivorCache[survivor].g_flCarrierVoiceInterval, 1);
			g_esSurvivorCache[survivor].g_iCarrierBody = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierBody, g_esHuman.g_iCarrierBody, 1);
			g_esSurvivorCache[survivor].g_iCarrierBody = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierBody, g_esSurvivorCache[survivor].g_iCarrierBody, 1);
			g_esSurvivorCache[survivor].g_iCarrierCleanse = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierCleanse, g_esHuman.g_iCarrierCleanse, 1);
			g_esSurvivorCache[survivor].g_iCarrierCleanse = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierCleanse, g_esSurvivorCache[survivor].g_iCarrierCleanse, 1);
			g_esSurvivorCache[survivor].g_iCarrierFilter = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierFilter, g_esHuman.g_iCarrierFilter, 1);
			g_esSurvivorCache[survivor].g_iCarrierFilter = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierFilter, g_esSurvivorCache[survivor].g_iCarrierFilter, 1);
			g_esSurvivorCache[survivor].g_iCarrierInfection = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierInfection, g_esHuman.g_iCarrierInfection, 1);
			g_esSurvivorCache[survivor].g_iCarrierInfection = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierInfection, g_esSurvivorCache[survivor].g_iCarrierInfection, 1);
			g_esSurvivorCache[survivor].g_iCarrierMaxType = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierMaxType, g_esHuman.g_iCarrierMaxType, 1);
			g_esSurvivorCache[survivor].g_iCarrierMaxType = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierMaxType, g_esSurvivorCache[survivor].g_iCarrierMaxType, 1);
			g_esSurvivorCache[survivor].g_iCarrierMinType = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierMinType, g_esHuman.g_iCarrierMinType, 1);
			g_esSurvivorCache[survivor].g_iCarrierMinType = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierMinType, g_esSurvivorCache[survivor].g_iCarrierMinType, 1);
			g_esSurvivorCache[survivor].g_iCarrierMix = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierMix, g_esHuman.g_iCarrierMix, 1);
			g_esSurvivorCache[survivor].g_iCarrierMix = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierMix, g_esSurvivorCache[survivor].g_iCarrierMix, 1);
			g_esSurvivorCache[survivor].g_iCarrierMode = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierMode, g_esHuman.g_iCarrierMode, 1);
			g_esSurvivorCache[survivor].g_iCarrierMode = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierMode, g_esSurvivorCache[survivor].g_iCarrierMode, 1);
			g_esSurvivorCache[survivor].g_iCarrierTeleport = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierTeleport, g_esHuman.g_iCarrierTeleport, 1);
			g_esSurvivorCache[survivor].g_iCarrierTeleport = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierTeleport, g_esSurvivorCache[survivor].g_iCarrierTeleport, 1);
			g_esSurvivorCache[survivor].g_iCarrierVoice = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCarrierVoice, g_esHuman.g_iCarrierVoice, 1);
			g_esSurvivorCache[survivor].g_iCarrierVoice = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCarrierVoice, g_esSurvivorCache[survivor].g_iCarrierVoice, 1);

			vGetSettingValue(bValid, true, g_esSurvivorCache[survivor].g_sCarrierAttackVoicelines, sizeof esSurvivorCache::g_sCarrierAttackVoicelines, g_esSurvivor[iType].g_sCarrierAttackVoicelines, g_esHuman.g_sCarrierAttackVoicelines);
			vGetSettingValue(bValid, bHuman, g_esSurvivorCache[survivor].g_sCarrierAttackVoicelines, sizeof esSurvivorCache::g_sCarrierAttackVoicelines, g_esShooter[survivor].g_sCarrierAttackVoicelines, g_esSurvivorCache[survivor].g_sCarrierAttackVoicelines);
			vGetSettingValue(bValid, true, g_esSurvivorCache[survivor].g_sCarrierBaitVoicelines, sizeof esSurvivorCache::g_sCarrierBaitVoicelines, g_esSurvivor[iType].g_sCarrierBaitVoicelines, g_esHuman.g_sCarrierBaitVoicelines);
			vGetSettingValue(bValid, bHuman, g_esSurvivorCache[survivor].g_sCarrierBaitVoicelines, sizeof esSurvivorCache::g_sCarrierBaitVoicelines, g_esShooter[survivor].g_sCarrierBaitVoicelines, g_esSurvivorCache[survivor].g_sCarrierBaitVoicelines);
		}
		else
		{
			g_esSurvivorCache[survivor].g_sCarrierAttackVoicelines[0] = '\0';
			g_esSurvivorCache[survivor].g_sCarrierBaitVoicelines[0] = '\0';
			g_esSurvivorCache[survivor].g_flCarrierChance = 0.0;
			g_esSurvivorCache[survivor].g_flCarrierDamageMultiplier = 0.0;
			g_esSurvivorCache[survivor].g_flCarrierDelay = 0.0;
			g_esSurvivorCache[survivor].g_flCarrierHealthMultiplier = 0.0;
			g_esSurvivorCache[survivor].g_flCarrierVoiceChance = 0.0;
			g_esSurvivorCache[survivor].g_flCarrierVoiceInterval = 0.0;
			g_esSurvivorCache[survivor].g_iCarrierEnabled = 0;
			g_esSurvivorCache[survivor].g_iCarrierBody = 0;
			g_esSurvivorCache[survivor].g_iCarrierBots = 0;
			g_esSurvivorCache[survivor].g_iCarrierCleanse = 0;
			g_esSurvivorCache[survivor].g_iCarrierFilter = 0;
			g_esSurvivorCache[survivor].g_iCarrierInfection = 0;
			g_esSurvivorCache[survivor].g_iCarrierMaxType = 0;
			g_esSurvivorCache[survivor].g_iCarrierMinType = 0;
			g_esSurvivorCache[survivor].g_iCarrierMix = 0;
			g_esSurvivorCache[survivor].g_iCarrierMode = 0;
			g_esSurvivorCache[survivor].g_iCarrierTeleport = 0;
			g_esSurvivorCache[survivor].g_iCarrierVoice = 0;
		}

		g_esSurvivorCache[survivor].g_iPassiveBots = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iPassiveBots, g_esHuman.g_iPassiveBots, 1, -1);
		g_esSurvivorCache[survivor].g_iPassiveBots = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iPassiveBots, g_esSurvivorCache[survivor].g_iPassiveBots, 1, -1);
		g_esSurvivorCache[survivor].g_iPassiveEnabled = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iPassiveEnabled, g_esHuman.g_iPassiveEnabled, 1, -1);
		g_esSurvivorCache[survivor].g_iPassiveEnabled = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iPassiveEnabled, g_esSurvivorCache[survivor].g_iPassiveEnabled, 1, -1);

		iEnabled = (bHuman ? g_esSurvivorCache[survivor].g_iPassiveEnabled : g_esSurvivorCache[survivor].g_iPassiveBots);
		if (iEnabled >= 0)
		{
			g_esSurvivorCache[survivor].g_flActionDurationPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flActionDurationPassive, g_esHuman.g_flActionDurationPassive, 1);
			g_esSurvivorCache[survivor].g_flActionDurationPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flActionDurationPassive, g_esSurvivorCache[survivor].g_flActionDurationPassive, 1);
			g_esSurvivorCache[survivor].g_flAdrenalineTimePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flAdrenalineTimePassive, g_esHuman.g_flAdrenalineTimePassive, 1);
			g_esSurvivorCache[survivor].g_flAdrenalineTimePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flAdrenalineTimePassive, g_esSurvivorCache[survivor].g_flAdrenalineTimePassive, 1);
			g_esSurvivorCache[survivor].g_flAttackBoostPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flAttackBoostPassive, g_esHuman.g_flAttackBoostPassive, 1);
			g_esSurvivorCache[survivor].g_flAttackBoostPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flAttackBoostPassive, g_esSurvivorCache[survivor].g_flAttackBoostPassive, 1);
			g_esSurvivorCache[survivor].g_flDamageBoostPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flDamageBoostPassive, g_esHuman.g_flDamageBoostPassive, 1);
			g_esSurvivorCache[survivor].g_flDamageBoostPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flDamageBoostPassive, g_esSurvivorCache[survivor].g_flDamageBoostPassive, 1);
			g_esSurvivorCache[survivor].g_flDamageResistancePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flDamageResistancePassive, g_esHuman.g_flDamageResistancePassive, 1);
			g_esSurvivorCache[survivor].g_flDamageResistancePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flDamageResistancePassive, g_esSurvivorCache[survivor].g_flDamageResistancePassive, 1);
			g_esSurvivorCache[survivor].g_flDopamineRadiusPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flDopamineRadiusPassive, g_esHuman.g_flDopamineRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flDopamineRadiusPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flDopamineRadiusPassive, g_esSurvivorCache[survivor].g_flDopamineRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flFireRatePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flFireRatePassive, g_esHuman.g_flFireRatePassive, 1);
			g_esSurvivorCache[survivor].g_flFireRatePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flFireRatePassive, g_esSurvivorCache[survivor].g_flFireRatePassive, 1);
			g_esSurvivorCache[survivor].g_flGrenadeLauncherPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flGrenadeLauncherPassive, g_esHuman.g_flGrenadeLauncherPassive, 1);
			g_esSurvivorCache[survivor].g_flGrenadeLauncherPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flGrenadeLauncherPassive, g_esSurvivorCache[survivor].g_flGrenadeLauncherPassive, 1);
			g_esSurvivorCache[survivor].g_flHealPercentPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flHealPercentPassive, g_esHuman.g_flHealPercentPassive, 1);
			g_esSurvivorCache[survivor].g_flHealPercentPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flHealPercentPassive, g_esSurvivorCache[survivor].g_flHealPercentPassive, 1);
			g_esSurvivorCache[survivor].g_flHealthcareRadiusPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flHealthcareRadiusPassive, g_esHuman.g_flHealthcareRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flHealthcareRadiusPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flHealthcareRadiusPassive, g_esSurvivorCache[survivor].g_flHealthcareRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flHeartbeatPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flHeartbeatPassive, g_esHuman.g_flHeartbeatPassive, 1);
			g_esSurvivorCache[survivor].g_flHeartbeatPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flHeartbeatPassive, g_esSurvivorCache[survivor].g_flHeartbeatPassive, 1);
			g_esSurvivorCache[survivor].g_flJumpHeightPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flJumpHeightPassive, g_esHuman.g_flJumpHeightPassive, 1);
			g_esSurvivorCache[survivor].g_flJumpHeightPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flJumpHeightPassive, g_esSurvivorCache[survivor].g_flJumpHeightPassive, 1);
			g_esSurvivorCache[survivor].g_flLadyKillerPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flLadyKillerPassive, g_esHuman.g_flLadyKillerPassive, 1);
			g_esSurvivorCache[survivor].g_flLadyKillerPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flLadyKillerPassive, g_esSurvivorCache[survivor].g_flLadyKillerPassive, 1);
			g_esSurvivorCache[survivor].g_flLuckyBulletPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flLuckyBulletPassive, g_esHuman.g_flLuckyBulletPassive, 1);
			g_esSurvivorCache[survivor].g_flLuckyBulletPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flLuckyBulletPassive, g_esSurvivorCache[survivor].g_flLuckyBulletPassive, 1);
			g_esSurvivorCache[survivor].g_flMotivationRadiusPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flMotivationRadiusPassive, g_esHuman.g_flMotivationRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flMotivationRadiusPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flMotivationRadiusPassive, g_esSurvivorCache[survivor].g_flMotivationRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flOverdoseRadiusPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flOverdoseRadiusPassive, g_esHuman.g_flOverdoseRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flOverdoseRadiusPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flOverdoseRadiusPassive, g_esSurvivorCache[survivor].g_flOverdoseRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flPipeBombDurationPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flPipeBombDurationPassive, g_esHuman.g_flPipeBombDurationPassive, 1);
			g_esSurvivorCache[survivor].g_flPipeBombDurationPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flPipeBombDurationPassive, g_esSurvivorCache[survivor].g_flPipeBombDurationPassive, 1);
			g_esSurvivorCache[survivor].g_flPunchResistancePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flPunchResistancePassive, g_esHuman.g_flPunchResistancePassive, 1);
			g_esSurvivorCache[survivor].g_flPunchResistancePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flPunchResistancePassive, g_esSurvivorCache[survivor].g_flPunchResistancePassive, 1);
			g_esSurvivorCache[survivor].g_flRapidPistolPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flRapidPistolPassive, g_esHuman.g_flRapidPistolPassive, 1);
			g_esSurvivorCache[survivor].g_flRapidPistolPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flRapidPistolPassive, g_esSurvivorCache[survivor].g_flRapidPistolPassive, 1);
			g_esSurvivorCache[survivor].g_flRefillPercentPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flRefillPercentPassive, g_esHuman.g_flRefillPercentPassive, 1);
			g_esSurvivorCache[survivor].g_flRefillPercentPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flRefillPercentPassive, g_esSurvivorCache[survivor].g_flRefillPercentPassive, 1);
			g_esSurvivorCache[survivor].g_flReloadRatePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flReloadRatePassive, g_esHuman.g_flReloadRatePassive, 1);
			g_esSurvivorCache[survivor].g_flReloadRatePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flReloadRatePassive, g_esSurvivorCache[survivor].g_flReloadRatePassive, 1);
			g_esSurvivorCache[survivor].g_flShockwaveRadiusPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flShockwaveRadiusPassive, g_esHuman.g_flShockwaveRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flShockwaveRadiusPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flShockwaveRadiusPassive, g_esSurvivorCache[survivor].g_flShockwaveRadiusPassive, 1);
			g_esSurvivorCache[survivor].g_flShoveDamagePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flShoveDamagePassive, g_esHuman.g_flShoveDamagePassive, 1);
			g_esSurvivorCache[survivor].g_flShoveDamagePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flShoveDamagePassive, g_esSurvivorCache[survivor].g_flShoveDamagePassive, 1);
			g_esSurvivorCache[survivor].g_flShoveRatePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flShoveRatePassive, g_esHuman.g_flShoveRatePassive, 1);
			g_esSurvivorCache[survivor].g_flShoveRatePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flShoveRatePassive, g_esSurvivorCache[survivor].g_flShoveRatePassive, 1);
			g_esSurvivorCache[survivor].g_flSledgehammerRoundsPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flSledgehammerRoundsPassive, g_esHuman.g_flSledgehammerRoundsPassive, 1);
			g_esSurvivorCache[survivor].g_flSledgehammerRoundsPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flSledgehammerRoundsPassive, g_esSurvivorCache[survivor].g_flSledgehammerRoundsPassive, 1);
			g_esSurvivorCache[survivor].g_flSpeedBoostPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flSpeedBoostPassive, g_esHuman.g_flSpeedBoostPassive, 1);
			g_esSurvivorCache[survivor].g_flSpeedBoostPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flSpeedBoostPassive, g_esSurvivorCache[survivor].g_flSpeedBoostPassive, 1);
			g_esSurvivorCache[survivor].g_flSupplierPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flSupplierPassive, g_esHuman.g_flSupplierPassive, 1);
			g_esSurvivorCache[survivor].g_flSupplierPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flSupplierPassive, g_esSurvivorCache[survivor].g_flSupplierPassive, 1);
			g_esSurvivorCache[survivor].g_flSwingRatePassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flSwingRatePassive, g_esHuman.g_flSwingRatePassive, 1);
			g_esSurvivorCache[survivor].g_flSwingRatePassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flSwingRatePassive, g_esSurvivorCache[survivor].g_flSwingRatePassive, 1);
			g_esSurvivorCache[survivor].g_iAmmoBoostPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iAmmoBoostPassive, g_esHuman.g_iAmmoBoostPassive, 1);
			g_esSurvivorCache[survivor].g_iAmmoBoostPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iAmmoBoostPassive, g_esSurvivorCache[survivor].g_iAmmoBoostPassive, 1);
			g_esSurvivorCache[survivor].g_iAmmoRefillPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iAmmoRefillPassive, g_esHuman.g_iAmmoRefillPassive, 1);
			g_esSurvivorCache[survivor].g_iAmmoRefillPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iAmmoRefillPassive, g_esSurvivorCache[survivor].g_iAmmoRefillPassive, 1);
			g_esSurvivorCache[survivor].g_iAmmoRegenPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iAmmoRegenPassive, g_esHuman.g_iAmmoRegenPassive, 1);
			g_esSurvivorCache[survivor].g_iAmmoRegenPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iAmmoRegenPassive, g_esSurvivorCache[survivor].g_iAmmoRegenPassive, 1);
			g_esSurvivorCache[survivor].g_iBlazeHealthPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iBlazeHealthPassive, g_esHuman.g_iBlazeHealthPassive, 1);
			g_esSurvivorCache[survivor].g_iBlazeHealthPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iBlazeHealthPassive, g_esSurvivorCache[survivor].g_iBlazeHealthPassive, 1);
			g_esSurvivorCache[survivor].g_iBloodDonorPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iBloodDonorPassive, g_esHuman.g_iBloodDonorPassive, 1);
			g_esSurvivorCache[survivor].g_iBloodDonorPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iBloodDonorPassive, g_esSurvivorCache[survivor].g_iBloodDonorPassive, 1);
			g_esSurvivorCache[survivor].g_iBunnyHopPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iBunnyHopPassive, g_esHuman.g_iBunnyHopPassive, 1);
			g_esSurvivorCache[survivor].g_iBunnyHopPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iBunnyHopPassive, g_esSurvivorCache[survivor].g_iBunnyHopPassive, 1);
			g_esSurvivorCache[survivor].g_iBurstDoorsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iBurstDoorsPassive, g_esHuman.g_iBurstDoorsPassive, 1);
			g_esSurvivorCache[survivor].g_iBurstDoorsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iBurstDoorsPassive, g_esSurvivorCache[survivor].g_iBurstDoorsPassive, 1);
			g_esSurvivorCache[survivor].g_iCleanKillsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iCleanKillsPassive, g_esHuman.g_iCleanKillsPassive, 1);
			g_esSurvivorCache[survivor].g_iCleanKillsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iCleanKillsPassive, g_esSurvivorCache[survivor].g_iCleanKillsPassive, 1);
			g_esSurvivorCache[survivor].g_iClusterBombsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iClusterBombsPassive, g_esHuman.g_iClusterBombsPassive, 1);
			g_esSurvivorCache[survivor].g_iClusterBombsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iClusterBombsPassive, g_esSurvivorCache[survivor].g_iClusterBombsPassive, 1);
			g_esSurvivorCache[survivor].g_iEternalFlamesPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iEternalFlamesPassive, g_esHuman.g_iEternalFlamesPassive, 1);
			g_esSurvivorCache[survivor].g_iEternalFlamesPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iEternalFlamesPassive, g_esSurvivorCache[survivor].g_iEternalFlamesPassive, 1);
			g_esSurvivorCache[survivor].g_iFastRecoveryPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iFastRecoveryPassive, g_esHuman.g_iFastRecoveryPassive, 1);
			g_esSurvivorCache[survivor].g_iFastRecoveryPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iFastRecoveryPassive, g_esSurvivorCache[survivor].g_iFastRecoveryPassive, 1);
			g_esSurvivorCache[survivor].g_iFriendlyFirePassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iFriendlyFirePassive, g_esHuman.g_iFriendlyFirePassive, 1);
			g_esSurvivorCache[survivor].g_iFriendlyFirePassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iFriendlyFirePassive, g_esSurvivorCache[survivor].g_iFriendlyFirePassive, 1);
			g_esSurvivorCache[survivor].g_iGhostBulletsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iGhostBulletsPassive, g_esHuman.g_iGhostBulletsPassive, 1);
			g_esSurvivorCache[survivor].g_iGhostBulletsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iGhostBulletsPassive, g_esSurvivorCache[survivor].g_iGhostBulletsPassive, 1);
			g_esSurvivorCache[survivor].g_iHealthRegenPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iHealthRegenPassive, g_esHuman.g_iHealthRegenPassive, 1);
			g_esSurvivorCache[survivor].g_iHealthRegenPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iHealthRegenPassive, g_esSurvivorCache[survivor].g_iHealthRegenPassive, 1);
			g_esSurvivorCache[survivor].g_flHollowpointAmmoPassive = flGetSettingValue(bValid, true, g_esSurvivor[iType].g_flHollowpointAmmoPassive, g_esHuman.g_flHollowpointAmmoPassive, 1);
			g_esSurvivorCache[survivor].g_flHollowpointAmmoPassive = flGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_flHollowpointAmmoPassive, g_esSurvivorCache[survivor].g_flHollowpointAmmoPassive, 1);
			g_esSurvivorCache[survivor].g_iInfiniteAmmoPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iInfiniteAmmoPassive, g_esHuman.g_iInfiniteAmmoPassive, 1);
			g_esSurvivorCache[survivor].g_iInfiniteAmmoPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iInfiniteAmmoPassive, g_esSurvivorCache[survivor].g_iInfiniteAmmoPassive, 1);
			g_esSurvivorCache[survivor].g_iLadderActionsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iLadderActionsPassive, g_esHuman.g_iLadderActionsPassive, 1);
			g_esSurvivorCache[survivor].g_iLadderActionsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iLadderActionsPassive, g_esSurvivorCache[survivor].g_iLadderActionsPassive, 1);
			g_esSurvivorCache[survivor].g_iLaserSightPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iLaserSightPassive, g_esHuman.g_iLaserSightPassive, 1);
			g_esSurvivorCache[survivor].g_iLaserSightPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iLaserSightPassive, g_esSurvivorCache[survivor].g_iLaserSightPassive, 1);
			g_esSurvivorCache[survivor].g_iLifeLeechPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iLifeLeechPassive, g_esHuman.g_iLifeLeechPassive, 1);
			g_esSurvivorCache[survivor].g_iLifeLeechPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iLifeLeechPassive, g_esSurvivorCache[survivor].g_iLifeLeechPassive, 1);
			g_esSurvivorCache[survivor].g_iMedicalCutsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iMedicalCutsPassive, g_esHuman.g_iMedicalCutsPassive, 1);
			g_esSurvivorCache[survivor].g_iMedicalCutsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iMedicalCutsPassive, g_esSurvivorCache[survivor].g_iMedicalCutsPassive, 1);
			g_esSurvivorCache[survivor].g_iMeleeRangePassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iMeleeRangePassive, g_esHuman.g_iMeleeRangePassive, 1);
			g_esSurvivorCache[survivor].g_iMeleeRangePassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iMeleeRangePassive, g_esSurvivorCache[survivor].g_iMeleeRangePassive, 1);
			g_esSurvivorCache[survivor].g_iMidairDashesPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iMidairDashesPassive, g_esHuman.g_iMidairDashesPassive, 1);
			g_esSurvivorCache[survivor].g_iMidairDashesPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iMidairDashesPassive, g_esSurvivorCache[survivor].g_iMidairDashesPassive, 1);
			g_esSurvivorCache[survivor].g_iOverhealthPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iOverhealthPassive, g_esHuman.g_iOverhealthPassive, 1);
			g_esSurvivorCache[survivor].g_iOverhealthPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iOverhealthPassive, g_esSurvivorCache[survivor].g_iOverhealthPassive, 1);
			g_esSurvivorCache[survivor].g_iPassiveNotify = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iPassiveNotify, g_esHuman.g_iPassiveNotify, 1);
			g_esSurvivorCache[survivor].g_iPassiveNotify = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iPassiveNotify, g_esSurvivorCache[survivor].g_iPassiveNotify, 1);
			g_esSurvivorCache[survivor].g_iRecoilDampenerPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iRecoilDampenerPassive, g_esHuman.g_iRecoilDampenerPassive, 1);
			g_esSurvivorCache[survivor].g_iRecoilDampenerPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iRecoilDampenerPassive, g_esSurvivorCache[survivor].g_iRecoilDampenerPassive, 1);
			g_esSurvivorCache[survivor].g_iRegenBurstsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iRegenBurstsPassive, g_esHuman.g_iRegenBurstsPassive, 1);
			g_esSurvivorCache[survivor].g_iRegenBurstsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iRegenBurstsPassive, g_esSurvivorCache[survivor].g_iRegenBurstsPassive, 1);
			g_esSurvivorCache[survivor].g_iRespawnLoadoutPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iRespawnLoadoutPassive, g_esHuman.g_iRespawnLoadoutPassive, 1);
			g_esSurvivorCache[survivor].g_iRespawnLoadoutPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iRespawnLoadoutPassive, g_esSurvivorCache[survivor].g_iRespawnLoadoutPassive, 1);
			g_esSurvivorCache[survivor].g_iReviveHealthPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iReviveHealthPassive, g_esHuman.g_iReviveHealthPassive, 1);
			g_esSurvivorCache[survivor].g_iReviveHealthPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iReviveHealthPassive, g_esSurvivorCache[survivor].g_iReviveHealthPassive, 1);
			g_esSurvivorCache[survivor].g_iRiotGearPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iRiotGearPassive, g_esHuman.g_iRiotGearPassive, 1);
			g_esSurvivorCache[survivor].g_iRiotGearPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iRiotGearPassive, g_esSurvivorCache[survivor].g_iRiotGearPassive, 1);
			g_esSurvivorCache[survivor].g_iSafetyBubblePassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iSafetyBubblePassive, g_esHuman.g_iSafetyBubblePassive, 1);
			g_esSurvivorCache[survivor].g_iSafetyBubblePassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iSafetyBubblePassive, g_esSurvivorCache[survivor].g_iSafetyBubblePassive, 1);
			g_esSurvivorCache[survivor].g_iShovePenaltyPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iShovePenaltyPassive, g_esHuman.g_iShovePenaltyPassive, 1);
			g_esSurvivorCache[survivor].g_iShovePenaltyPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iShovePenaltyPassive, g_esSurvivorCache[survivor].g_iShovePenaltyPassive, 1);
			g_esSurvivorCache[survivor].g_iSpecialAmmoPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iSpecialAmmoPassive, g_esHuman.g_iSpecialAmmoPassive, 1);
			g_esSurvivorCache[survivor].g_iSpecialAmmoPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iSpecialAmmoPassive, g_esSurvivorCache[survivor].g_iSpecialAmmoPassive, 1);
			g_esSurvivorCache[survivor].g_iStickyGrenadesPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iStickyGrenadesPassive, g_esHuman.g_iStickyGrenadesPassive, 1);
			g_esSurvivorCache[survivor].g_iStickyGrenadesPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iStickyGrenadesPassive, g_esSurvivorCache[survivor].g_iStickyGrenadesPassive, 1);
			g_esSurvivorCache[survivor].g_iSyringeDartsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iSyringeDartsPassive, g_esHuman.g_iSyringeDartsPassive, 1);
			g_esSurvivorCache[survivor].g_iSyringeDartsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iSyringeDartsPassive, g_esSurvivorCache[survivor].g_iSyringeDartsPassive, 1);
			g_esSurvivorCache[survivor].g_iThornsPassive = iGetSettingValue(bValid, true, g_esSurvivor[iType].g_iThornsPassive, g_esHuman.g_iThornsPassive, 1);
			g_esSurvivorCache[survivor].g_iThornsPassive = iGetSettingValue(bValid, bHuman, g_esShooter[survivor].g_iThornsPassive, g_esSurvivorCache[survivor].g_iThornsPassive, 1);

			vGetSettingValue(bValid, true, g_esSurvivorCache[survivor].g_sItemPassive, sizeof esSurvivorCache::g_sItemPassive, g_esSurvivor[iType].g_sItemPassive, g_esHuman.g_sItemPassive);
			vGetSettingValue(bValid, bHuman, g_esSurvivorCache[survivor].g_sItemPassive, sizeof esSurvivorCache::g_sItemPassive, g_esShooter[survivor].g_sItemPassive, g_esSurvivorCache[survivor].g_sItemPassive);
		}
		else
		{
			g_esSurvivorCache[survivor].g_sItemPassive[0] = '\0';
			g_esSurvivorCache[survivor].g_flActionDurationPassive = 0.0;
			g_esSurvivorCache[survivor].g_flAdrenalineTimePassive = 0.0;
			g_esSurvivorCache[survivor].g_flAttackBoostPassive = 0.0;
			g_esSurvivorCache[survivor].g_flDamageBoostPassive = 0.0;
			g_esSurvivorCache[survivor].g_flDamageResistancePassive = 0.0;
			g_esSurvivorCache[survivor].g_flDopamineRadiusPassive = 0.0;
			g_esSurvivorCache[survivor].g_flFireRatePassive = 0.0;
			g_esSurvivorCache[survivor].g_flGrenadeLauncherPassive = 0.0;
			g_esSurvivorCache[survivor].g_flHealPercentPassive = 0.0;
			g_esSurvivorCache[survivor].g_flHealthcareRadiusPassive = 0.0;
			g_esSurvivorCache[survivor].g_flHeartbeatPassive = 0.0;
			g_esSurvivorCache[survivor].g_flHollowpointAmmoPassive = 0.0;
			g_esSurvivorCache[survivor].g_flJumpHeightPassive = 0.0;
			g_esSurvivorCache[survivor].g_flLadyKillerPassive = 0.0;
			g_esSurvivorCache[survivor].g_flLuckyBulletPassive = 0.0;
			g_esSurvivorCache[survivor].g_flMotivationRadiusPassive = 0.0;
			g_esSurvivorCache[survivor].g_flOverdoseRadiusPassive = 0.0;
			g_esSurvivorCache[survivor].g_flPipeBombDurationPassive = 0.0;
			g_esSurvivorCache[survivor].g_flPunchResistancePassive = 0.0;
			g_esSurvivorCache[survivor].g_flRapidPistolPassive = 0.0;
			g_esSurvivorCache[survivor].g_flRefillPercentPassive = 0.0;
			g_esSurvivorCache[survivor].g_flReloadRatePassive = 0.0;
			g_esSurvivorCache[survivor].g_flShockwaveRadiusPassive = 0.0;
			g_esSurvivorCache[survivor].g_flShoveDamagePassive = 0.0;
			g_esSurvivorCache[survivor].g_flShoveRatePassive = 0.0;
			g_esSurvivorCache[survivor].g_flSledgehammerRoundsPassive = 0.0;
			g_esSurvivorCache[survivor].g_flSpeedBoostPassive = 0.0;
			g_esSurvivorCache[survivor].g_flSupplierPassive = 0.0;
			g_esSurvivorCache[survivor].g_flSwingRatePassive = 0.0;
			g_esSurvivorCache[survivor].g_iAmmoBoostPassive = 0;
			g_esSurvivorCache[survivor].g_iAmmoRefillPassive = 0;
			g_esSurvivorCache[survivor].g_iAmmoRegenPassive = 0;
			g_esSurvivorCache[survivor].g_iBlazeHealthPassive = 0;
			g_esSurvivorCache[survivor].g_iBloodDonorPassive = 0;
			g_esSurvivorCache[survivor].g_iBunnyHopPassive = 0;
			g_esSurvivorCache[survivor].g_iBurstDoorsPassive = 0;
			g_esSurvivorCache[survivor].g_iCleanKillsPassive = 0;
			g_esSurvivorCache[survivor].g_iClusterBombsPassive = 0;
			g_esSurvivorCache[survivor].g_iEternalFlamesPassive = 0;
			g_esSurvivorCache[survivor].g_iFastRecoveryPassive = 0;
			g_esSurvivorCache[survivor].g_iFriendlyFirePassive = 0;
			g_esSurvivorCache[survivor].g_iGhostBulletsPassive = 0;
			g_esSurvivorCache[survivor].g_iHealthRegenPassive = 0;
			g_esSurvivorCache[survivor].g_iInfiniteAmmoPassive = 0;
			g_esSurvivorCache[survivor].g_iLadderActionsPassive = 0;
			g_esSurvivorCache[survivor].g_iLaserSightPassive = 0;
			g_esSurvivorCache[survivor].g_iLifeLeechPassive = 0;
			g_esSurvivorCache[survivor].g_iMedicalCutsPassive = 0;
			g_esSurvivorCache[survivor].g_iMeleeRangePassive = 0;
			g_esSurvivorCache[survivor].g_iMidairDashesPassive = 0;
			g_esSurvivorCache[survivor].g_iOverhealthPassive = 0;
			g_esSurvivorCache[survivor].g_iPassiveNotify = 0;
			g_esSurvivorCache[survivor].g_iRecoilDampenerPassive = 0;
			g_esSurvivorCache[survivor].g_iRegenBurstsPassive = 0;
			g_esSurvivorCache[survivor].g_iRespawnLoadoutPassive = 0;
			g_esSurvivorCache[survivor].g_iReviveHealthPassive = 0;
			g_esSurvivorCache[survivor].g_iRiotGearPassive = 0;
			g_esSurvivorCache[survivor].g_iSafetyBubblePassive = 0;
			g_esSurvivorCache[survivor].g_iShovePenaltyPassive = 0;
			g_esSurvivorCache[survivor].g_iSpecialAmmoPassive = 0;
			g_esSurvivorCache[survivor].g_iStickyGrenadesPassive = 0;
			g_esSurvivorCache[survivor].g_iSyringeDartsPassive = 0;
			g_esSurvivorCache[survivor].g_iThornsPassive = 0;
		}
	}

	Call_StartForward(g_esGeneral.g_gfSettingsCachedForward);
	Call_PushCell(survivor);
	Call_PushCell(bValid);
	Call_PushCell(0);
	Call_Finish();
}

void vCheckConfig(bool manual)
{
	bool bManual = manual;
	if (FileExists(g_esGeneral.g_sSavePath, true))
	{
		g_esGeneral.g_iFileTimeNew[0] = GetFileTime(g_esGeneral.g_sSavePath, FileTime_LastChange);
		if (g_esGeneral.g_iFileTimeOld[0] != g_esGeneral.g_iFileTimeNew[0] || bManual)
		{
			vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, g_esGeneral.g_sSavePath);
			vLoadConfigs(g_esGeneral.g_sSavePath, 1);
			vPluginStatus();
			vResetTimers();
			vToggleTankRushConVars();
			vToggleLogging();

			bManual = true;
			g_esGeneral.g_iFileTimeOld[0] = g_esGeneral.g_iFileTimeNew[0];
		}
	}

	if (g_esGeneral.g_iConfigEnable == 1)
	{
		if ((g_esGeneral.g_iConfigExecute & MT_CONFIG_DIFFICULTY) && g_esGeneral.g_cvMTDifficulty != null)
		{
			char sDifficultyConfig[PLATFORM_MAX_PATH];
			if (bIsDifficultyConfigFound(sDifficultyConfig, sizeof sDifficultyConfig))
			{
				g_esGeneral.g_iFileTimeNew[1] = GetFileTime(sDifficultyConfig, FileTime_LastChange);
				if (g_esGeneral.g_iFileTimeOld[1] != g_esGeneral.g_iFileTimeNew[1] || bManual)
				{
					vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sDifficultyConfig);
					vCustomConfig(sDifficultyConfig);
					g_esGeneral.g_iFileTimeOld[1] = g_esGeneral.g_iFileTimeNew[1];
				}
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_MAP)
		{
			char sMapConfig[PLATFORM_MAX_PATH];
			if (bIsMapConfigFound(sMapConfig, sizeof sMapConfig))
			{
				g_esGeneral.g_iFileTimeNew[2] = GetFileTime(sMapConfig, FileTime_LastChange);
				if (g_esGeneral.g_iFileTimeOld[2] != g_esGeneral.g_iFileTimeNew[2] || bManual)
				{
					vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sMapConfig);
					vCustomConfig(sMapConfig);
					g_esGeneral.g_iFileTimeOld[2] = g_esGeneral.g_iFileTimeNew[2];
				}
			}
		}

		if ((g_esGeneral.g_iConfigExecute & MT_CONFIG_GAMEMODE) && g_esGeneral.g_cvMTGameMode != null)
		{
			char sModeConfig[PLATFORM_MAX_PATH];
			if (bIsGameModeConfigFound(sModeConfig, sizeof sModeConfig))
			{
				g_esGeneral.g_iFileTimeNew[3] = GetFileTime(sModeConfig, FileTime_LastChange);
				if (g_esGeneral.g_iFileTimeOld[3] != g_esGeneral.g_iFileTimeNew[3] || bManual)
				{
					vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sModeConfig);
					vCustomConfig(sModeConfig);
					g_esGeneral.g_iFileTimeOld[3] = g_esGeneral.g_iFileTimeNew[3];
				}
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_DAY)
		{
			char sDayConfig[PLATFORM_MAX_PATH];
			if (bIsDayConfigFound(sDayConfig, sizeof sDayConfig))
			{
				g_esGeneral.g_iFileTimeNew[4] = GetFileTime(sDayConfig, FileTime_LastChange);
				if (g_esGeneral.g_iFileTimeOld[4] != g_esGeneral.g_iFileTimeNew[4] || bManual)
				{
					vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sDayConfig);
					vCustomConfig(sDayConfig);
					g_esGeneral.g_iFileTimeOld[4] = g_esGeneral.g_iFileTimeNew[4];
				}
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_PLAYERCOUNT)
		{
			char sCountConfig[PLATFORM_MAX_PATH];
			int iCount = iGetPlayerCount();
			BuildPath(Path_SM, sCountConfig, sizeof sCountConfig, "%s%s%i.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_PLAYERCOUNT, iCount);
			if (FileExists(sCountConfig, true))
			{
				g_esGeneral.g_iFileTimeNew[5] = GetFileTime(sCountConfig, FileTime_LastChange);
				bool bTimeCheck = g_esGeneral.g_iFileTimeOld[5] != g_esGeneral.g_iFileTimeNew[5];
				if (bTimeCheck || g_esGeneral.g_iPlayerCount[0] != iCount || bManual)
				{
					if (bTimeCheck)
					{
						vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sCountConfig);
					}

					vCustomConfig(sCountConfig);
					g_esGeneral.g_iFileTimeOld[5] = g_esGeneral.g_iFileTimeNew[5];
					g_esGeneral.g_iPlayerCount[0] = iCount;
				}
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_SURVIVORCOUNT)
		{
			char sCountConfig[PLATFORM_MAX_PATH];
			int iCount = iGetHumanCount();
			BuildPath(Path_SM, sCountConfig, sizeof sCountConfig, "%s%s%i.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_SURVIVORCOUNT, iCount);
			if (FileExists(sCountConfig, true))
			{
				g_esGeneral.g_iFileTimeNew[6] = GetFileTime(sCountConfig, FileTime_LastChange);
				bool bTimeCheck = g_esGeneral.g_iFileTimeOld[6] != g_esGeneral.g_iFileTimeNew[6];
				if (bTimeCheck || g_esGeneral.g_iPlayerCount[1] != iCount || bManual)
				{
					if (bTimeCheck)
					{
						vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sCountConfig);
					}

					vCustomConfig(sCountConfig);
					g_esGeneral.g_iFileTimeOld[6] = g_esGeneral.g_iFileTimeNew[6];
					g_esGeneral.g_iPlayerCount[1] = iCount;
				}
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_INFECTEDCOUNT)
		{
			char sCountConfig[PLATFORM_MAX_PATH];
			int iCount = iGetHumanCount(true);
			BuildPath(Path_SM, sCountConfig, sizeof sCountConfig, "%s%s%i.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_INFECTEDCOUNT, iCount);
			if (FileExists(sCountConfig, true))
			{
				g_esGeneral.g_iFileTimeNew[7] = GetFileTime(sCountConfig, FileTime_LastChange);
				bool bTimeCheck = g_esGeneral.g_iFileTimeOld[7] != g_esGeneral.g_iFileTimeNew[7];
				if (bTimeCheck || g_esGeneral.g_iPlayerCount[2] != iCount || bManual)
				{
					if (bTimeCheck)
					{
						vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sCountConfig);
					}

					vCustomConfig(sCountConfig);
					g_esGeneral.g_iFileTimeOld[7] = g_esGeneral.g_iFileTimeNew[7];
					g_esGeneral.g_iPlayerCount[2] = iCount;
				}
			}
		}
	}
}

void vCustomConfig(const char[] savepath)
{
	DataPack dpConfig;
	CreateDataTimer(1.5, tTimerExecuteCustomConfig, dpConfig, TIMER_FLAG_NO_MAPCHANGE);
	dpConfig.WriteString(savepath);
}

void vDeveloperSettings(int developer)
{
	g_esDeveloper[developer].g_bDevVisual = false;
	g_esDeveloper[developer].g_sDevFallVoiceline = "PlayerLaugh";
	g_esDeveloper[developer].g_sDevFlashlight = "rainbow";
	g_esDeveloper[developer].g_sDevGlowOutline = "rainbow";
	g_esDeveloper[developer].g_sDevLoadout = (g_bSecondGame ? "shotgun_spas,machete,molotov,first_aid_kit,pain_pills" : "autoshotgun,pistol,molotov,first_aid_kit,pain_pills,pistol");
	g_esDeveloper[developer].g_sDevSkinColor = "rainbow";
	g_esDeveloper[developer].g_flDevActionDuration = 2.0;
	g_esDeveloper[developer].g_flDevAdrenalineTime = 99999.0;
	g_esDeveloper[developer].g_flDevAttackBoost = 1.25;
	g_esDeveloper[developer].g_flDevDamageBoost = 1.75;
	g_esDeveloper[developer].g_flDevDamageResistance = 0.5;
	g_esDeveloper[developer].g_flDevDopamineRadius = 150.0;
	g_esDeveloper[developer].g_flDevFireRate = 1.25;
	g_esDeveloper[developer].g_flDevGrenadeLauncher = 10.0;
	g_esDeveloper[developer].g_flDevHealPercent = 100.0;
	g_esDeveloper[developer].g_flDevHealthcareRadius = 150.0;
	g_esDeveloper[developer].g_flDevJumpHeight = 100.0;
	g_esDeveloper[developer].g_flDevLadyKiller = 25.0;
	g_esDeveloper[developer].g_flDevMotivationRadius = 150.0;
	g_esDeveloper[developer].g_flDevOverdoseRadius = 150.0;
	g_esDeveloper[developer].g_flDevPipeBombDuration = 10.0;
	g_esDeveloper[developer].g_flDevPunchResistance = 0.0;
	g_esDeveloper[developer].g_flDevRapidPistol = 0.130;
	g_esDeveloper[developer].g_flDevReloadRate = 1.25;
	g_esDeveloper[developer].g_flDevRewardDuration = 60.0;
	g_esDeveloper[developer].g_flDevShockwaveRadius = 150.0;
	g_esDeveloper[developer].g_flDevShoveDamage = 0.025;
	g_esDeveloper[developer].g_flDevShoveRate = 0.4;
	g_esDeveloper[developer].g_flDevSpeedBoost = 1.25;
	g_esDeveloper[developer].g_flDevSwingRate = 1.25;
	g_esDeveloper[developer].g_iDevAccess = 0;
	g_esDeveloper[developer].g_iDevAmmoRegen = 1;
	g_esDeveloper[developer].g_iDevBlazeHealth = 10;
	g_esDeveloper[developer].g_iDevClusterBombs = 3;
	g_esDeveloper[developer].g_iDevHealthRegen = 1;
	g_esDeveloper[developer].g_iDevInfiniteAmmo = 31;
	g_esDeveloper[developer].g_iDevLifeLeech = 5;
	g_esDeveloper[developer].g_iDevMedicalCuts = 10;
	g_esDeveloper[developer].g_iDevMeleeRange = 150;
	g_esDeveloper[developer].g_iDevMidairDashes = 2;
	g_esDeveloper[developer].g_iDevOverhealth = 200;
	g_esDeveloper[developer].g_iDevPanelPage = 0;
	g_esDeveloper[developer].g_iDevPanelPages = 4;
	g_esDeveloper[developer].g_iDevParticle = MT_ROCK_FIRE;
	g_esDeveloper[developer].g_iDevRegenBursts = 10;
	g_esDeveloper[developer].g_iDevReviveHealth = 100;
	g_esDeveloper[developer].g_iDevPassiveTypes = MT_PASSIVE_INFAMMO;
	g_esDeveloper[developer].g_iDevRewardTypes = MT_REWARD_HEALTH|MT_REWARD_AMMO|MT_REWARD_REFILL|MT_REWARD_ATTACKBOOST|MT_REWARD_DAMAGEBOOST|MT_REWARD_SPEEDBOOST|MT_REWARD_GODMODE|MT_REWARD_ITEM|MT_REWARD_RESPAWN|MT_REWARD_INFAMMO;
	g_esDeveloper[developer].g_iDevSpecialAmmo = 0;
	g_esDeveloper[developer].g_iDevSyringeDarts = 10;
	g_esDeveloper[developer].g_iDevVoicePitch = 100;
	g_esDeveloper[developer].g_iDevWeaponSkin = 1;

	vDefaultCookieSettings(developer);
}

void vExecuteFinaleConfigs(const char[] filename)
{
	if ((g_esGeneral.g_iConfigExecute & MT_CONFIG_FINALE) && g_esGeneral.g_iConfigEnable == 1)
	{
		char sFinaleConfig[PLATFORM_MAX_PATH];
		if (bIsFinaleConfigFound(filename, sFinaleConfig, sizeof sFinaleConfig))
		{
			vCustomConfig(sFinaleConfig);
		}
	}
}

void vReadAdminSettings(int admin, int type, const char[] key, const char[] value)
{
	int iIndex = g_esTank[type].g_iRecordedType[1];
	if (0 <= iIndex <= MT_MAXTYPES)
	{
		if (StrEqual(key, "AccessFlags", false) || StrEqual(key, "Access Flags", false) || StrEqual(key, "Access_Flags", false) || StrEqual(key, "access", false))
		{
			g_esAdmin[iIndex].g_iAccessFlags[admin] = ReadFlagString(value);
		}
		else if (StrEqual(key, "ImmunityFlags", false) || StrEqual(key, "Immunity Flags", false) || StrEqual(key, "Immunity_Flags", false) || StrEqual(key, "immunity", false))
		{
			g_esAdmin[iIndex].g_iImmunityFlags[admin] = ReadFlagString(value);
		}
	}
}

void vReadPlayerSettings(int player, const char[] subsection, const char[] key, const char[] value)
{
	g_esPlayer[player].g_iTankNote = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankNote", "Tank Note", "Tank_Note", "note", g_esPlayer[player].g_iTankNote, value, -1, 1);
	g_esPlayer[player].g_iTankModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankModel", "Tank Model", "Tank_Model", "model", g_esPlayer[player].g_iTankModel, value, -1, 7);
	g_esPlayer[player].g_flBurnDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurnDuration", "Burn Duration", "Burn_Duration", "burndur", g_esPlayer[player].g_flBurnDuration, value, -1.0, 99999.0);
	g_esPlayer[player].g_flBurntSkin = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurntSkin", "Burnt Skin", "Burnt_Skin", "burnt", g_esPlayer[player].g_flBurntSkin, value, -2.0, 1.0);
	g_esPlayer[player].g_iCheckAbilities = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CheckAbilities", "Check Abilities", "Check_Abilities", "check", g_esPlayer[player].g_iCheckAbilities, value, -1, 1);
	g_esPlayer[player].g_iDeathRevert = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "DeathRevert", "Death Revert", "Death_Revert", "revert", g_esPlayer[player].g_iDeathRevert, value, -1, 1);
	g_esPlayer[player].g_iAnnounceArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceArrival", "Announce Arrival", "Announce_Arrival", "arrival", g_esPlayer[player].g_iAnnounceArrival, value, -1, 31);
	g_esPlayer[player].g_iAnnounceDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceDeath", "Announce Death", "Announce_Death", "death", g_esPlayer[player].g_iAnnounceDeath, value, -1, 2);
	g_esPlayer[player].g_iAnnounceKill = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceKill", "Announce Kill", "Announce_Kill", "kill", g_esPlayer[player].g_iAnnounceKill, value, -1, 1);
	g_esPlayer[player].g_iArrivalMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalMessage", "Arrival Message", "Arrival_Message", "arrivalmsg", g_esPlayer[player].g_iArrivalMessage, value, -1, 1023);
	g_esPlayer[player].g_iArrivalSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalSound", "Arrival Sound", "Arrival_Sound", "arrivalsnd", g_esPlayer[player].g_iArrivalSound, value, -1, 1);
	g_esPlayer[player].g_iDeathDetails = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathDetails", "Death Details", "Death_Details", "deathdets", g_esPlayer[player].g_iDeathDetails, value, -1, 5);
	g_esPlayer[player].g_iDeathMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathMessage", "Death Message", "Death_Message", "deathmsg", g_esPlayer[player].g_iDeathMessage, value, -1, 1023);
	g_esPlayer[player].g_iDeathSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathSound", "Death Sound", "Death_Sound", "deathsnd", g_esPlayer[player].g_iDeathSound, value, -1, 1);
	g_esPlayer[player].g_iKillMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "KillMessage", "Kill Message", "Kill_Message", "killmsg", g_esPlayer[player].g_iKillMessage, value, -1, 1023);
	g_esPlayer[player].g_iVocalizeArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeArrival", "Vocalize Arrival", "Vocalize_Arrival", "arrivalvoc", g_esPlayer[player].g_iVocalizeArrival, value, -1, 1);
	g_esPlayer[player].g_iVocalizeDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeDeath", "Vocalize Death", "Vocalize_Death", "deathvoc", g_esPlayer[player].g_iVocalizeDeath, value, -1, 1);
	g_esPlayer[player].g_iTeammateLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, key, "TeammateLimit", "Teammate Limit", "Teammate_Limit", "teamlimit", g_esPlayer[player].g_iTeammateLimit, value, -1, 32);
	g_esShooter[player].g_flCarrierChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierChance", "Carrier Chance", "Carrier_Chance", "cachance", g_esShooter[player].g_flCarrierChance, value, -1.0, 100.0);
	g_esShooter[player].g_flCarrierDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierDamageMultiplier", "Carrier Damage Multiplier", "Carrier_Damage_Multiplier", "cadmgmulti", g_esShooter[player].g_flCarrierDamageMultiplier, value, -1.0, 99999.0);
	g_esShooter[player].g_flCarrierDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierDelay", "Carrier Delay", "Carrier_Delay", "cadelay", g_esShooter[player].g_flCarrierDelay, value, -1.0, 99999.0);
	g_esShooter[player].g_flCarrierHealthMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierHealthMultiplier", "Carrier Health Multiplier", "Carrier_Health_Multiplier", "cahpmulti", g_esShooter[player].g_flCarrierHealthMultiplier, value, -1.0, 99999.0);
	g_esShooter[player].g_flCarrierVoiceChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoiceChance", "Carrier Voice Chance", "Carrier_Voice_Chance", "cavoicechance", g_esShooter[player].g_flCarrierVoiceChance, value, -1.0, 100.0);
	g_esShooter[player].g_flCarrierVoiceInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoiceInterval", "Carrier Voice Interval", "Carrier_Voice_Interval", "cavoiceint", g_esShooter[player].g_flCarrierVoiceInterval, value, -1.0, 99999.0);
	g_esShooter[player].g_iCarrierEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierEnabled", "Carrier Enabled", "Carrier_Enabled", "caenabled", g_esShooter[player].g_iCarrierEnabled, value, -1, 1);
	g_esShooter[player].g_iCarrierBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBots", "Carrier Bots", "Carrier_Bots", "cabots", g_esShooter[player].g_iCarrierBots, value, -1, 1);
	g_esShooter[player].g_iCarrierBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBody", "Carrier Body", "Carrier_Body", "cabody", g_esShooter[player].g_iCarrierBody, value, -1, 1);
	g_esShooter[player].g_iCarrierCleanse = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierCleanse", "Carrier Cleanse", "Carrier_Cleanse", "cacleanse", g_esShooter[player].g_iCarrierCleanse, value, -1, 1);
	g_esShooter[player].g_iCarrierFilter = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierFilter", "Carrier Filter", "Carrier_Filter", "cafilter", g_esShooter[player].g_iCarrierFilter, value, -1, 127);
	g_esShooter[player].g_iCarrierInfection = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierInfection", "Carrier Infection", "Carrier_Infection", "cainfect", g_esShooter[player].g_iCarrierInfection, value, -1, 511);
	g_esShooter[player].g_iCarrierMix = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierMix", "Carrier Mix", "Carrier_Mix", "camix", g_esShooter[player].g_iCarrierMix, value, -1, 1);
	g_esShooter[player].g_iCarrierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierMode", "Carrier Mode", "Carrier_Mode", "camode", g_esShooter[player].g_iCarrierMode, value, -1, 6);
	g_esShooter[player].g_iCarrierTeleport = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierTeleport", "Carrier Teleport", "Carrier_Teleport", "cateleport", g_esShooter[player].g_iCarrierTeleport, value, -1, 1);
	g_esShooter[player].g_iCarrierVoice = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoice", "Carrier Voice", "Carrier_Voice", "cavoice", g_esShooter[player].g_iCarrierVoice, value, -1, 1);
	g_esShooter[player].g_flActionDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ActionDurationPassive", "Action Duration Passive", "Action_Duration_Passive", "actionduration", g_esShooter[player].g_flActionDurationPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flAdrenalineTimePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AdrenalineTimePassive", "Adrenaline Time Passive", "Adrenaline_Time_Passive", "adrenaline", g_esShooter[player].g_flAdrenalineTimePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flAttackBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AttackBoostPassive", "Attack Boost Passive", "Attack_Boost_Passive", "attackboost", g_esShooter[player].g_flAttackBoostPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flDamageBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageBoostPassive", "Damage Boost Passive", "Damage_Boost_Passive", "dmgboost", g_esShooter[player].g_flDamageBoostPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flDamageResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageResistancePassive", "Damage Resistance Passive", "Damage_Resistance_Passive", "dmgres", g_esShooter[player].g_flDamageResistancePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flDopamineRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DopamineRadiusPassive", "Dopamine Radius Passive", "Dopamine_Radius_Passive", "dopamine", g_esShooter[player].g_flDopamineRadiusPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flFireRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FireRatePassive", "Fire Rate Passive", "Fire_Rate_Passive", "firerate", g_esShooter[player].g_flFireRatePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flGrenadeLauncherPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GrenadeLauncherPassive", "Grenade Launcher Passive", "Grenade_Launcher_Passive", "grenade", g_esShooter[player].g_flGrenadeLauncherPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flHealPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealPercentPassive", "Heal Percent Passive", "Heal_Percent_Passive", "healpercent", g_esShooter[player].g_flHealPercentPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flHealthcareRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthcareRadiusPassive", "Healthcare Radius Passive", "Healthcare_Radius_Passive", "healthcare", g_esShooter[player].g_flHealthcareRadiusPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flHeartbeatPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HearbeatPassive", "Hearbeat Passive", "Hearbeat_Passive", "hearbeat", g_esShooter[player].g_flHeartbeatPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flHollowpointAmmoPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HollowpointAmmoPassive", "Hollowpoint Ammo Passive", "Hollowpoint_Ammo_Passive", "hollowpoint", g_esShooter[player].g_flHollowpointAmmoPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flJumpHeightPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "JumpHeightPassive", "Jump Height Passive", "Jump_Height_Passive", "jumpheight", g_esShooter[player].g_flJumpHeightPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flLadyKillerPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadyKillerPassive", "Lady Killer Passive", "Lady_Killer_Passive", "ladykiller", g_esShooter[player].g_flLadyKillerPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flLuckyBulletPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LuckyBulletPassive", "Lucky Bullet Passive", "Lucky_Bullet_Passive", "luckybullet", g_esShooter[player].g_flLuckyBulletPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flMotivationRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MotivationRadiusPassive", "Motivation Radius Passive", "Motivation_Radius_Passive", "motivation", g_esShooter[player].g_flMotivationRadiusPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flOverdoseRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverdoseRadiusPassive", "Overdose Radius Passive", "Overdose_Radius_Passive", "overdose", g_esShooter[player].g_flOverdoseRadiusPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flPipeBombDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PipebombDurationPassive", "Pipebomb Duration Passive", "Pipebomb_Duration_Passive", "pipeduration", g_esShooter[player].g_flPipeBombDurationPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flPunchResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PunchResistancePassive", "Punch Resistance Passive", "Punch_Resistance_Passive", "punchres", g_esShooter[player].g_flPunchResistancePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flRapidPistolPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RapidPistolPassive", "Rapid Pistol Passive", "Rapid_Pistol_Passive", "rapidpistol", g_esShooter[player].g_flRapidPistolPassive, value, -1.0, 1.0);
	g_esShooter[player].g_flRefillPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RefillPercentPassive", "Refill Percent Passive", "Refill_Percent_Passive", "refillpercent", g_esShooter[player].g_flRefillPercentPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flReloadRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReloadRatePassive", "Reload Rate Passive", "Reload_Rate_Passive", "reloadrate", g_esShooter[player].g_flReloadRatePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flShockwaveRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShockwaveRadiusPassive", "Shockwave Radius Passive", "Shockwave_Radius_Passive", "shockwave", g_esShooter[player].g_flShockwaveRadiusPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flShoveDamagePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveDamagePassive", "Shove Damage Passive", "Shove_Damage_Passive", "shovedmg", g_esShooter[player].g_flShoveDamagePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flShoveRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveRatePassive", "Shove Rate Passive", "Shove_Rate_Passive", "shoverate", g_esShooter[player].g_flShoveRatePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flSledgehammerRoundsPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SledgehammerRoundsPassive", "Sledgehammer Rounds Passive", "Sledgehammer_Rounds_Passive", "sledgehammer", g_esShooter[player].g_flSledgehammerRoundsPassive, value, -1.0, 100.0);
	g_esShooter[player].g_flSpeedBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpeedBoostPassive", "Speed Boost Passive", "Speed_Boost_Passive", "speedboost", g_esShooter[player].g_flSpeedBoostPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flSupplierPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esShooter[player].g_flSupplierPassive, value, -1.0, 99999.0);
	g_esShooter[player].g_flSwingRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SwingRatePassive", "Swing Rate Passive", "Swing_Rate_Passive", "swingrate", g_esShooter[player].g_flSwingRatePassive, value, -1.0, 99999.0);
	g_esShooter[player].g_iPassiveEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveEnabled", "Passive Enabled", "Passive_Enabled", "psenabled", g_esShooter[player].g_iPassiveEnabled, value, -2, 2147483647);
	g_esShooter[player].g_iPassiveBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveBots", "Passive Bots", "Passive_Bots", "psbots", g_esShooter[player].g_iPassiveBots, value, -2, 2147483647);
	g_esShooter[player].g_iPassiveNotify = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveNotify", "Passive Notify", "Passive_Notify", "psnotify", g_esShooter[player].g_iPassiveNotify, value, -1, 1);
	g_esShooter[player].g_iAmmoBoostPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoBoostPassive", "Ammo Boost Passive", "Ammo_Boost_Passive", "ammoboost", g_esShooter[player].g_iAmmoBoostPassive, value, -1, 1);
	g_esShooter[player].g_iAmmoRefillPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRefillPassive", "Ammo Refill Passive", "Ammo_Refill_Passive", "ammorefill", g_esShooter[player].g_iAmmoRefillPassive, value, -1, 1);
	g_esShooter[player].g_iAmmoRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRegenPassive", "Ammo Regen Passive", "Ammo_Regen_Passive", "ammoregen", g_esShooter[player].g_iAmmoRegenPassive, value, -1, 99999);
	g_esShooter[player].g_iBlazeHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BlazeHealthPassive", "Blaze Health Passive", "Blaze_Health_Passive", "blaze", g_esShooter[player].g_iBlazeHealthPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iBloodDonorPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BloodDonorPassive", "Blood Donor Passive", "Blood_Donor_Passive", "donor", g_esShooter[player].g_iBloodDonorPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iBunnyHopPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BunnyHopPassive", "Bunny Hop Passive", "Bunny_Hop_Passive", "bhop", g_esShooter[player].g_iBunnyHopPassive, value, -1, 1);
	g_esShooter[player].g_iBurstDoorsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BurstDoorsPassive", "Burst Doors Passive", "Burst_Doors_Passive", "burstdoors", g_esShooter[player].g_iBurstDoorsPassive, value, -1, 1);
	g_esShooter[player].g_iCleanKillsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CleanKillsPassive", "Clean Kills Passive", "Clean_Kills_Passive", "cleankills", g_esShooter[player].g_iCleanKillsPassive, value, -1, 1);
	g_esShooter[player].g_iClusterBombsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ClusterBombsPassive", "Cluster Bombs Passive", "Cluster_Bombs_Passive", "cluster", g_esShooter[player].g_iClusterBombsPassive, value, -1, 5);
	g_esShooter[player].g_iEternalFlamesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "EternalFlamesPassive", "Eternal Flames Passive", "Eternal_Flames_Passive", "eternal", g_esShooter[player].g_iEternalFlamesPassive, value, -1, 1);
	g_esShooter[player].g_iFastRecoveryPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FastRecoveryPassive", "Fast Recovery Passive", "Fast_Recovery_Passive", "fastrecovery", g_esShooter[player].g_iFastRecoveryPassive, value, -1, 1);
	g_esShooter[player].g_iFriendlyFirePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FriendlyFirePassive", "Friendly Fire Passive", "Friendly_Fire_Passive", "friendlyfire", g_esShooter[player].g_iFriendlyFirePassive, value, -1, 1);
	g_esShooter[player].g_iGhostBulletsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GhostBulletsPassive", "Ghost Bullets Passive", "Ghost_Bullets_Passive", "ghost", g_esShooter[player].g_iGhostBulletsPassive, value, -1, 1);
	g_esShooter[player].g_iHealthRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthRegenPassive", "Health Regen Passive", "Health_Regen_Passive", "hpregen", g_esShooter[player].g_iHealthRegenPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iInfiniteAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "InfiniteAmmoPassive", "Infinite Ammo Passive", "Infinite_Ammo_Passive", "infammo", g_esShooter[player].g_iInfiniteAmmoPassive, value, -1, 31);
	g_esShooter[player].g_iLadderActionsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadderActionsPassive", "Ladder Actions Passive", "Ladder_Action_Passive", "ladderacts", g_esShooter[player].g_iLadderActionsPassive, value, -1, 1);
	g_esShooter[player].g_iLaserSightPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LaserSightPassive", "Laser Sight Passive", "Laser_Sight_Passive", "lasersight", g_esShooter[player].g_iLaserSightPassive, value, -1, 1);
	g_esShooter[player].g_iLifeLeechPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LifeLeechPassive", "Life Leech Passive", "Life_Leech_Passive", "lifeleech", g_esShooter[player].g_iLifeLeechPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iMedicalCutsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MedicalCutsPassive", "Medical Cuts Passive", "Medical_Cuts_Passive", "medcuts", g_esShooter[player].g_iMedicalCutsPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iMeleeRangePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MeleeRangePassive", "Melee Range Passive", "Melee_Range_Passive", "meleerange", g_esShooter[player].g_iMeleeRangePassive, value, -1, 99999);
	g_esShooter[player].g_iMidairDashesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MidairDashesPassive", "Midair Dashes Passive", "Midair_Dashes_Passive", "middash", g_esShooter[player].g_iMidairDashesPassive, value, -1, 99999);
	g_esShooter[player].g_iOverhealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverhealthPassive", "Overhealth Passive", "Overhealth_Passive", "overhealth", g_esShooter[player].g_iOverhealthPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iRecoilDampenerPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RecoilDampenerPassive", "Recoil Dampener Passive", "Recoil_Dampener_Passive", "recoil", g_esShooter[player].g_iRecoilDampenerPassive, value, -1, 1);
	g_esShooter[player].g_iRegenBurstsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RegenBurstsPassive", "Regen Bursts Passive", "Regen_Bursts_Passive", "regbursts", g_esShooter[player].g_iRegenBurstsPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iRespawnLoadoutPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RespawnLoadoutPassive", "Respawn Loadout Passive", "Respawn_Loadout_Passive", "resloadout", g_esShooter[player].g_iRespawnLoadoutPassive, value, -1, 1);
	g_esShooter[player].g_iReviveHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReviveHealthPassive", "Revive Health Passive", "Revive_Health_Passive", "revivehp", g_esShooter[player].g_iReviveHealthPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iRiotGearPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RiotGearPassive", "Riot Gear Passive", "Riot_Gear_Passive", "riotgear", g_esShooter[player].g_iRiotGearPassive, value, -1, 1);
	g_esShooter[player].g_iSafetyBubblePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SafetyBubblePassive", "Safety Bubble Passive", "Safety_Bubble_Passive", "safetybubble", g_esShooter[player].g_iSafetyBubblePassive, value, -1, 1);
	g_esShooter[player].g_iShovePenaltyPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShovePenaltyPassive", "Shove Penalty Passive", "Shove_Penalty_Passive", "shovepenalty", g_esShooter[player].g_iShovePenaltyPassive, value, -1, 1);
	g_esShooter[player].g_iSpecialAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpecialAmmoPassive", "Special Ammo Passive", "Special_Ammo_Passive", "specammo", g_esShooter[player].g_iSpecialAmmoPassive, value, -1, 3);
	g_esShooter[player].g_iStickyGrenadesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "StickyGrenadesPassive", "Sticky Grenades Passive", "Sticky_Grenades_Passive", "sticky", g_esShooter[player].g_iStickyGrenadesPassive, value, -1, 1);
	g_esShooter[player].g_iSyringeDartsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SyringeDartsPassive", "Syringe Darts Passive", "Syringe_Darts_Passive", "syringe", g_esShooter[player].g_iSyringeDartsPassive, value, -1, MT_MAXHEALTH);
	g_esShooter[player].g_iThornsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ThornsPassive", "Thorns Passive", "Thorns_Passive", "thorns", g_esShooter[player].g_iThornsPassive, value, -1, 1);
	g_esPlayer[player].g_iGlowEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowEnabled", "Glow Enabled", "Glow_Enabled", "genabled", g_esPlayer[player].g_iGlowEnabled, value, -1, 1);
	g_esPlayer[player].g_iGlowFlashing = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowFlashing", "Glow Flashing", "Glow_Flashing", "flashing", g_esPlayer[player].g_iGlowFlashing, value, -1, 1);
	g_esPlayer[player].g_iGlowType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowType", "Glow Type", "Glow_Type", "type", g_esPlayer[player].g_iGlowType, value, -1, 1);
	g_esPlayer[player].g_iBaseHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "BaseHealth", "Base Health", "Base_Health", "basehp", g_esPlayer[player].g_iBaseHealth, value, -1, MT_MAXHEALTH);
	g_esPlayer[player].g_flArmorPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorPercentage", "Armor Percentage", "Armor_Percentage", "armorpercent", g_esPlayer[player].g_flArmorPercentage, value, -1.0, 1.0);
	g_esPlayer[player].g_flArmorResistance[0] = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esPlayer[player].g_flArmorResistance[0], value, -1.0, 1.0);
	g_esPlayer[player].g_flShieldPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldPercentage", "Shield Percentage", "Shield_Percentage", "shieldpercent", g_esPlayer[player].g_flShieldPercentage, value, -1.0, 1.0);
	g_esPlayer[player].g_flShieldRate = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldRate", "Shield Rate", "Shield_Rate", "shieldrate", g_esPlayer[player].g_flShieldRate, value, -1.0, 1.0);
	g_esPlayer[player].g_flPassiveDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveDelay", "Passive Delay", "Passive_Delay", "passdelay", g_esPlayer[player].g_flPassiveDelay, value, -1.0, 99999.0);
	g_esPlayer[player].g_iPassiveHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveHealth", "Passive Health", "Passive_Health", "passhp", g_esPlayer[player].g_iPassiveHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	g_esPlayer[player].g_flPassiveInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveInterval", "Passive Interval", "Passive_Interval", "passint", g_esPlayer[player].g_flPassiveInterval, value, -1.0, 99999.0);
	g_esPlayer[player].g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esPlayer[player].g_iDisplayHealth, value, -1, 11);
	g_esPlayer[player].g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esPlayer[player].g_iDisplayHealthType, value, -1, 2);
	g_esPlayer[player].g_iExtraHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ExtraHealth", "Extra Health", "Extra_Health", "extrahp", g_esPlayer[player].g_iExtraHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	g_esPlayer[player].g_flHealPercentMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthPercentageMultiplier", "Health Percentage Multiplier", "Health_Percentage_Multiplier", "hpmulti", g_esPlayer[player].g_flHealPercentMultiplier, value, -1.0, 99999.0);
	g_esPlayer[player].g_iHumanMultiplierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HumanMultiplierMode", "Human Multiplier Mode", "Human_Multiplier_Mode", "humanmultimode", g_esPlayer[player].g_iHumanMultiplierMode, value, -1, 1);
	g_esPlayer[player].g_iMinimumHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MinimumHumans", "Minimum Humans", "Minimum_Humans", "minhumans", g_esPlayer[player].g_iMinimumHumans, value, -1, 32);
	g_esPlayer[player].g_iMultiplyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MultiplyHealth", "Multiply Health", "Multiply_Health", "multihp", g_esPlayer[player].g_iMultiplyHealth, value, -1, 3);
	g_esPlayer[player].g_iSpawnProtection = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "SpawnProtection", "Spawn Protection", "Spawn_Protection", "protect", g_esPlayer[player].g_iSpawnProtection, value, -1, 4);
	g_esPlayer[player].g_flArmorDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorDuration", "Armor Duration", "Armor_Duration", "armorduration", g_esPlayer[player].g_flArmorDuration, value, -1.0, 99999.0);
	g_esPlayer[player].g_flArmorResistance[1] = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esPlayer[player].g_flArmorResistance[1], value, -1.0, 1.0);
	g_esPlayer[player].g_flShieldDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldDuration", "Shield Duration", "Shield_Duration", "shieldduration", g_esPlayer[player].g_flShieldDuration, value, -1.0, 99999.0);
	g_esPlayer[player].g_flShieldResistance = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldResistance", "Shield Resistance", "Shield_Resistance", "shieldres", g_esPlayer[player].g_flShieldResistance, value, -1.0, 1.0);
	g_esPlayer[player].g_iBossEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossEffects", "Boss Effects", "Boss_Effects", "bosseffects", g_esPlayer[player].g_iBossEffects, value, -1, 15);
	g_esPlayer[player].g_iBossStages = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossStages", "Boss Stages", "Boss_Stages", "bossstages", g_esPlayer[player].g_iBossStages, value, -1, 4);
	g_esPlayer[player].g_iRandomTank = iGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomTank", "Random Tank", "Random_Tank", "random", g_esPlayer[player].g_iRandomTank, value, -1, 1);
	g_esPlayer[player].g_flRandomDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomDuration", "Random Duration", "Random_Duration", "randduration", g_esPlayer[player].g_flRandomDuration, value, -1.0, 99999.0);
	g_esPlayer[player].g_flRandomInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomInterval", "Random Interval", "Random_Interval", "randinterval", g_esPlayer[player].g_flRandomInterval, value, -1.0, 99999.0);
	g_esPlayer[player].g_flTransformDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDelay", "Transform Delay", "Transform_Delay", "transdelay", g_esPlayer[player].g_flTransformDelay, value, -1.0, 99999.0);
	g_esPlayer[player].g_flTransformDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDuration", "Transform Duration", "Transform_Duration", "transduration", g_esPlayer[player].g_flTransformDuration, value, -1.0, 99999.0);
	g_esPlayer[player].g_iSpawnType = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "SpawnType", "Spawn Type", "Spawn_Type", "spawntype", g_esPlayer[player].g_iSpawnType, value, -1, 3);
	g_esPlayer[player].g_iRockModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, key, "RockModel", "Rock Model", "Rock_Model", "rockmodel", g_esPlayer[player].g_iRockModel, value, -1, 2);
	g_esPlayer[player].g_iPropsAttached = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, key, "PropsAttached", "Props Attached", "Props_Attached", "attached", g_esPlayer[player].g_iPropsAttached, value, -1, 511);
	g_esPlayer[player].g_iBodyEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "BodyEffects", "Body Effects", "Body_Effects", "body", g_esPlayer[player].g_iBodyEffects, value, -1, 127);
	g_esPlayer[player].g_iRockEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "RockEffects", "Rock Effects", "Rock_Effects", "rock", g_esPlayer[player].g_iRockEffects, value, -1, 15);
	g_esPlayer[player].g_flAttackInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "AttackInterval", "Attack Interval", "Attack_Interval", "attack", g_esPlayer[player].g_flAttackInterval, value, -1.0, 99999.0);
	g_esPlayer[player].g_iAutoHop = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "BunnyHop", "Bunny Hop", "Bunny_Hop", "bhop", g_esPlayer[player].g_iAutoHop, value, -1, 1);
	g_esPlayer[player].g_flClawDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ClawDamage", "Claw Damage", "Claw_Damage", "claw", g_esPlayer[player].g_flClawDamage, value, -2.0, 99999.0);
	g_esPlayer[player].g_iFootstepShake = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "FootstepShake", "Footstep Shake", "Footstep_Shake", "shake", g_esPlayer[player].g_iFootstepShake, value, -1, 1);
	g_esPlayer[player].g_iGroundPound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "GroundPound", "Ground Pound", "Ground_Pound", "pound", g_esPlayer[player].g_iGroundPound, value, -1, 1);
	g_esPlayer[player].g_flHittableDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "HittableDamage", "Hittable Damage", "Hittable_Damage", "hittable", g_esPlayer[player].g_flHittableDamage, value, -2.0, 99999.0);
	g_esPlayer[player].g_flIncapDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IncapDamageMultiplier", "Incap Damage Multiplier", "Incap_Damage_Multiplier", "incapdmgmulti", g_esPlayer[player].g_flIncapDamageMultiplier, value, -1.0, 99999.0);
	g_esPlayer[player].g_iIntangibleBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IntangibleBody", "Intangible Body", "Intangible_Body", "intangible", g_esPlayer[player].g_iIntangibleBody, value, -1, 1);
	g_esPlayer[player].g_iMeleeHitMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitMode", "Melee Hit Mode", "Melee_Hit_Mode", "meleehit", g_esPlayer[player].g_iMeleeHitMode, value, -1, 2);
	g_esPlayer[player].g_flMeleeHitValue = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitValue", "Melee Hit Value", "Melee_Hit_Value", "meleevalue", g_esPlayer[player].g_flMeleeHitValue, value, -1.0, 99999.0);
	g_esPlayer[player].g_flPunchForce = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PunchForce", "Punch Force", "Punch_Force", "punchforce", g_esPlayer[player].g_flPunchForce, value, -2.0, 99999.0);
	g_esPlayer[player].g_flPunchThrow = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PunchThrow", "Punch Throw", "Punch_Throw", "punchthrow", g_esPlayer[player].g_flPunchThrow, value, -1.0, 100.0);
	g_esPlayer[player].g_flRockDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RockDamage", "Rock Damage", "Rock_Damage", "rockdmg", g_esPlayer[player].g_flRockDamage, value, -2.0, 99999.0);
	g_esPlayer[player].g_iRockSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RockSound", "Rock Sound", "Rock_Sound", "rocksnd", g_esPlayer[player].g_iRockSound, value, -1, 1);
	g_esPlayer[player].g_flRunSpeed = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RunSpeed", "Run Speed", "Run_Speed", "speed", g_esPlayer[player].g_flRunSpeed, value, -1.0, 99.0);
	g_esPlayer[player].g_iSkipIncap = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SkipIncap", "Skip Incap", "Skip_Incap", "incap", g_esPlayer[player].g_iSkipIncap, value, -1, 1);
	g_esPlayer[player].g_iSkipTaunt = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SkipTaunt", "Skip Taunt", "Skip_Taunt", "taunt", g_esPlayer[player].g_iSkipTaunt, value, -1, 1);
	g_esPlayer[player].g_iSweepFist = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SweepFist", "Sweep Fist", "Sweep_Fist", "sweep", g_esPlayer[player].g_iSweepFist, value, -1, 1);
	g_esPlayer[player].g_flThrowForce = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowForce", "Throw Force", "Throw_Force", "throwforce", g_esPlayer[player].g_flThrowForce, value, -1.0, 99999.0);
	g_esPlayer[player].g_flThrowInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowInterval", "Throw Interval", "Throw_Interval", "throwint", g_esPlayer[player].g_flThrowInterval, value, -1.0, 99999.0);
	g_esPlayer[player].g_iThrowRock = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowRock", "Throw Rock", "Throw_Rock", "throwrock", g_esPlayer[player].g_iThrowRock, value, -1, 1);
	g_esPlayer[player].g_iBulletImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "BulletImmunity", "Bullet Immunity", "Bullet_Immunity", "bullet", g_esPlayer[player].g_iBulletImmunity, value, -1, 1);
	g_esPlayer[player].g_iExplosiveImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "ExplosiveImmunity", "Explosive Immunity", "Explosive_Immunity", "explosive", g_esPlayer[player].g_iExplosiveImmunity, value, -1, 1);
	g_esPlayer[player].g_iFireImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "FireImmunity", "Fire Immunity", "Fire_Immunity", "fire", g_esPlayer[player].g_iFireImmunity, value, -1, 1);
	g_esPlayer[player].g_iHittableImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "HittableImmunity", "Hittable Immunity", "Hittable_Immunity", "hittable", g_esPlayer[player].g_iHittableImmunity, value, -1, 1);
	g_esPlayer[player].g_iMeleeImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "MeleeImmunity", "Melee Immunity", "Melee_Immunity", "melee", g_esPlayer[player].g_iMeleeImmunity, value, -1, 1);
	g_esPlayer[player].g_iVomitImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "VomitImmunity", "Vomit Immunity", "Vomit_Immunity", "vomit", g_esPlayer[player].g_iVomitImmunity, value, -1, 1);
	g_esPlayer[player].g_iFavoriteType = iGetKeyValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "FavoriteType", "Favorite Type", "Favorite_Type", "favorite", g_esPlayer[player].g_iFavoriteType, value, -1, g_esGeneral.g_iMaxType);
	g_esPlayer[player].g_iAccessFlags = iGetAdminFlagsValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "AccessFlags", "Access Flags", "Access_Flags", "access", value);
	g_esPlayer[player].g_iImmunityFlags = iGetAdminFlagsValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "ImmunityFlags", "Immunity Flags", "Immunity_Flags", "immunity", value);

	vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierAttackVoicelines", "Carrier Attack Voicelines", "Carrier_Attack_Voicelines", "caattacklines", g_esShooter[player].g_sCarrierAttackVoicelines, sizeof esShooter::g_sCarrierAttackVoicelines, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBaitVoicelines", "Carrier Bait Voicelines", "Carrier_Bait_Voicelines", "cabaitlines", g_esShooter[player].g_sCarrierBaitVoicelines, sizeof esShooter::g_sCarrierBaitVoicelines, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ItemPassive", "Item Passive", "Item_Passive", "item", g_esShooter[player].g_sItemPassive, sizeof esShooter::g_sItemPassive, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorCharacters", "Armor Characters", "Armor_Characters", "armorchars", g_esPlayer[player].g_sArmorCharacters, sizeof esPlayer::g_sArmorCharacters, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esPlayer[player].g_sHealthCharacters, sizeof esPlayer::g_sHealthCharacters, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldCharacters", "Shield Characters", "Shield_Characters", "shieldchars", g_esPlayer[player].g_sShieldCharacters, sizeof esPlayer::g_sShieldCharacters, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, key, "ComboSet", "Combo Set", "Combo_Set", "set", g_esPlayer[player].g_sComboSet, sizeof esPlayer::g_sComboSet, value);

	if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
	{
		if (StrEqual(key, "SkinColor", false) || StrEqual(key, "Skin Color", false) || StrEqual(key, "Skin_Color", false) || StrEqual(key, "skin", false))
		{
			char sValue[64], sSet[4][4];
			vGetConfigColors(sValue, sizeof sValue, value);
			strcopy(g_esPlayer[player].g_sSkinColor, sizeof esPlayer::g_sSkinColor, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_iSkinColor); iPos++)
			{
				g_esPlayer[player].g_iSkinColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
			}
		}
		else
		{
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankName", "Tank Name", "Tank_Name", "name", g_esPlayer[player].g_sTankName, sizeof esPlayer::g_sTankName, value);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_REWARDS, false))
	{
		char sValue[2560], sSet[8][320];
		strcopy(sValue, sizeof sValue, value);
		ReplaceString(sValue, sizeof sValue, " ", "");
		ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
		for (int iPos = 0; iPos < (sizeof esPlayer::g_iStackLimits); iPos++)
		{
			if (iPos < (sizeof esPlayer::g_iRewardEnabled))
			{
				g_esPlayer[player].g_flRewardChance[iPos] = flGetClampedValue(key, "RewardChance", "Reward Chance", "Reward_Chance", "chance", g_esPlayer[player].g_flRewardChance[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flRewardDuration[iPos] = flGetClampedValue(key, "RewardDuration", "Reward Duration", "Reward_Duration", "duration", g_esPlayer[player].g_flRewardDuration[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flRewardPercentage[iPos] = flGetClampedValue(key, "RewardPercentage", "Reward Percentage", "Reward_Percentage", "percent", g_esPlayer[player].g_flRewardPercentage[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flActionDurationReward[iPos] = flGetClampedValue(key, "ActionDurationReward", "Action Duration Reward", "Action_Duration_Reward", "actionduration", g_esPlayer[player].g_flActionDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flAdrenalineTimeReward[iPos] = flGetClampedValue(key, "AdrenalineTimeReward", "Adrenaline Time Reward", "Adrenaline_Time_Reward", "adrenaline", g_esPlayer[player].g_flAdrenalineTimeReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flAttackBoostReward[iPos] = flGetClampedValue(key, "AttackBoostReward", "Attack Boost Reward", "Attack_Boost_Reward", "attackboost", g_esPlayer[player].g_flAttackBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flDamageBoostReward[iPos] = flGetClampedValue(key, "DamageBoostReward", "Damage Boost Reward", "Damage_Boost_Reward", "dmgboost", g_esPlayer[player].g_flDamageBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flDamageResistanceReward[iPos] = flGetClampedValue(key, "DamageResistanceReward", "Damage Resistance Reward", "Damage_Resistance_Reward", "dmgres", g_esPlayer[player].g_flDamageResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
				g_esPlayer[player].g_flDopamineRadiusReward[iPos] = flGetClampedValue(key, "DopamineRadiusReward", "Dopamine Radius Reward", "Dopamine_Radius_Reward", "dopamine", g_esPlayer[player].g_flDopamineRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flFireRateReward[iPos] = flGetClampedValue(key, "FireRateReward", "Fire Rate Reward", "Fire_Rate_Reward", "firerate", g_esPlayer[player].g_flFireRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flGrenadeLauncherReward[iPos] = flGetClampedValue(key, "GrenadeLauncherReward", "Grenade Launcher Reward", "Grenade_Launcher_Reward", "grenade", g_esPlayer[player].g_flGrenadeLauncherReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flHealPercentReward[iPos] = flGetClampedValue(key, "HealPercentReward", "Heal Percent Reward", "Heal_Percent_Reward", "healpercent", g_esPlayer[player].g_flHealPercentReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flHealthcareRadiusReward[iPos] = flGetClampedValue(key, "HealthcareRadiusReward", "Healthcare Radius Reward", "Healthcare_Radius_Reward", "healthcare", g_esPlayer[player].g_flHealthcareRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flHeartbeatReward[iPos] = flGetClampedValue(key, "HeartbeatReward", "Heartbeat Reward", "Heartbeat_Reward", "heartbeat", g_esPlayer[player].g_flHeartbeatReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flHollowpointAmmoReward[iPos] = flGetClampedValue(key, "HollowpointAmmoReward", "Hollowpoint Ammo Reward", "Hollowpoint_Ammo_Reward", "hollowpoint", g_esPlayer[player].g_flHollowpointAmmoReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flJumpHeightReward[iPos] = flGetClampedValue(key, "JumpHeightReward", "Jump Height Reward", "Jump_Height_Reward", "jumpheight", g_esPlayer[player].g_flJumpHeightReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flLadyKillerReward[iPos] = flGetClampedValue(key, "LadyKillerReward", "Lady Killer Reward", "Lady_Killer_Reward", "ladykiller", g_esPlayer[player].g_flLadyKillerReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flLoopingVoicelineInterval[iPos] = flGetClampedValue(key, "LoopingVoicelineInterval", "Looping Voiceline Interval", "Looping_Voiceline_Interval", "loopinterval", g_esPlayer[player].g_flLoopingVoicelineInterval[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flLuckyBulletReward[iPos] = flGetClampedValue(key, "LuckyBulletReward", "Lucky Bullet Reward", "Lucky_Bullet_Reward", "luckybullet", g_esPlayer[player].g_flLuckyBulletReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flMotivationRadiusReward[iPos] = flGetClampedValue(key, "MotivationRadiusReward", "Motivation Radius Reward", "Motivation_Radius_Reward", "motivation", g_esPlayer[player].g_flMotivationRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flOverdoseRadiusReward[iPos] = flGetClampedValue(key, "OverdoseRadiusReward", "Overdose Radius Reward", "Overdose_Radius_Reward", "overdose", g_esPlayer[player].g_flOverdoseRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flPipeBombDurationReward[iPos] = flGetClampedValue(key, "PipebombDurationReward", "Pipebomb Duration Reward", "Pipebomb_Duration_Reward", "pipeduration", g_esPlayer[player].g_flPipeBombDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flPunchResistanceReward[iPos] = flGetClampedValue(key, "PunchResistanceReward", "Punch Resistance Reward", "Punch_Resistance_Reward", "punchres", g_esPlayer[player].g_flPunchResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
				g_esPlayer[player].g_flRapidPistolReward[iPos] = flGetClampedValue(key, "RapidPistolReward", "Rapid Pistol Reward", "Rapid_Pistol_Reward", "rapidpistol", g_esPlayer[player].g_flRapidPistolReward[iPos], sSet[iPos], -1.0, 1.0);
				g_esPlayer[player].g_flRefillPercentReward[iPos] = flGetClampedValue(key, "RefillPercentReward", "Refill Percent Reward", "Refill_Percent_Reward", "refillpercent", g_esPlayer[player].g_flRefillPercentReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flReloadRateReward[iPos] = flGetClampedValue(key, "ReloadRateReward", "Reload Rate Reward", "Reload_Rate_Reward", "reloadrate", g_esPlayer[player].g_flReloadRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flShockwaveRadiusReward[iPos] = flGetClampedValue(key, "ShockwaveRadiusReward", "Shockwave Radius Reward", "Shockwave_Radius_Reward", "shockwave", g_esPlayer[player].g_flShockwaveRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flShoveDamageReward[iPos] = flGetClampedValue(key, "ShoveDamageReward", "Shove Damage Reward", "Shove_Damage_Reward", "shovedmg", g_esPlayer[player].g_flShoveDamageReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flShoveRateReward[iPos] = flGetClampedValue(key, "ShoveRateReward", "Shove Rate Reward", "Shove_Rate_Reward", "shoverate", g_esPlayer[player].g_flShoveRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flSledgehammerRoundsReward[iPos] = flGetClampedValue(key, "SledgehammerRoundsReward", "Sledgehammer Rounds Reward", "Sledgehammer_Rounds_Reward", "sledgehammer", g_esPlayer[player].g_flSledgehammerRoundsReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esPlayer[player].g_flSpeedBoostReward[iPos] = flGetClampedValue(key, "SpeedBoostReward", "Speed Boost Reward", "Speed_Boost_Reward", "speedboost", g_esPlayer[player].g_flSpeedBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flSupplierReward[iPos] = flGetClampedValue(key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esPlayer[player].g_flSupplierReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_flSwingRateReward[iPos] = flGetClampedValue(key, "SwingRateReward", "Swing Rate Reward", "Swing_Rate_Reward", "swingrate", g_esPlayer[player].g_flSwingRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esPlayer[player].g_iRewardEnabled[iPos] = iGetClampedValue(key, "RewardEnabled", "Reward Enabled", "Reward_Enabled", "renabled", g_esPlayer[player].g_iRewardEnabled[iPos], sSet[iPos], -2, 2147483647);
				g_esPlayer[player].g_iRewardBots[iPos] = iGetClampedValue(key, "RewardBots", "Reward Bots", "Reward_Bots", "rbots", g_esPlayer[player].g_iRewardBots[iPos], sSet[iPos], -2, 2147483647);
				g_esPlayer[player].g_iRewardEffect[iPos] = iGetClampedValue(key, "RewardEffect", "Reward Effect", "Reward_Effect", "effect", g_esPlayer[player].g_iRewardEffect[iPos], sSet[iPos], -1, 15);
				g_esPlayer[player].g_iRewardNotify[iPos] = iGetClampedValue(key, "RewardNotify", "Reward Notify", "Reward_Notify", "rnotify", g_esPlayer[player].g_iRewardNotify[iPos], sSet[iPos], -1, 3);
				g_esPlayer[player].g_iRewardVisual[iPos] = iGetClampedValue(key, "RewardVisual", "Reward Visual", "Reward_Visual", "visual", g_esPlayer[player].g_iRewardVisual[iPos], sSet[iPos], -1, 127);
				g_esPlayer[player].g_iAmmoBoostReward[iPos] = iGetClampedValue(key, "AmmoBoostReward", "Ammo Boost Reward", "Ammo_Boost_Reward", "ammoboost", g_esPlayer[player].g_iAmmoBoostReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iAmmoRefillReward[iPos] = iGetClampedValue(key, "AmmoRefillReward", "Ammo Refill Reward", "Ammo_Refill_Reward", "ammorefill", g_esPlayer[player].g_iAmmoRefillReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iAmmoRegenReward[iPos] = iGetClampedValue(key, "AmmoRegenReward", "Ammo Regen Reward", "Ammo_Regen_Reward", "ammoregen", g_esPlayer[player].g_iAmmoRegenReward[iPos], sSet[iPos], -1, 99999);
				g_esPlayer[player].g_iBlazeHealthReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esPlayer[player].g_iBlazeHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iBloodDonorReward[iPos] = iGetClampedValue(key, "BloodDonorReward", "Blood Donor Reward", "Blood_Donor_Reward", "donor", g_esPlayer[player].g_iBloodDonorReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iBunnyHopReward[iPos] = iGetClampedValue(key, "BunnyHopReward", "Bunny Hop Reward", "Bunny_Hop_Reward", "bhop", g_esPlayer[player].g_iBunnyHopReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iBurstDoorsReward[iPos] = iGetClampedValue(key, "BurstDoorsReward", "Burst Doors Reward", "Burst_Doors_Reward", "burstdoors", g_esPlayer[player].g_iBurstDoorsReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iCleanKillsReward[iPos] = iGetClampedValue(key, "CleanKillsReward", "Clean Kills Reward", "Clean_Kills_Reward", "cleankills", g_esPlayer[player].g_iCleanKillsReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iClusterBombsReward[iPos] = iGetClampedValue(key, "ClusterBombsReward", "Cluster Bombs Reward", "Cluster_Bombs_Reward", "cluster", g_esPlayer[player].g_iClusterBombsReward[iPos], sSet[iPos], -1, 5);
				g_esPlayer[player].g_iEternalFlamesReward[iPos] = iGetClampedValue(key, "EternalFlamesReward", "Eternal Flames Reward", "Eternal_Flames_Reward", "eternal", g_esPlayer[player].g_iEternalFlamesReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iFastRecoveryReward[iPos] = iGetClampedValue(key, "FastRecoveryReward", "Fast Recovery Reward", "Fast_Recovery_Reward", "fastrecovery", g_esPlayer[player].g_iFastRecoveryReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iFriendlyFireReward[iPos] = iGetClampedValue(key, "FriendlyFireReward", "Friendly Fire Reward", "Friendly_Fire_Reward", "friendlyfire", g_esPlayer[player].g_iFriendlyFireReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iGhostBulletsReward[iPos] = iGetClampedValue(key, "GhostBulletsReward", "Ghost Bullets Reward", "Ghost_Bullets_Reward", "ghost", g_esPlayer[player].g_iGhostBulletsReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iHealthRegenReward[iPos] = iGetClampedValue(key, "HealthRegenReward", "Health Regen Reward", "Health_Regen_Reward", "hpregen", g_esPlayer[player].g_iHealthRegenReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iInfiniteAmmoReward[iPos] = iGetClampedValue(key, "InfiniteAmmoReward", "Infinite Ammo Reward", "Infinite_Ammo_Reward", "infammo", g_esPlayer[player].g_iInfiniteAmmoReward[iPos], sSet[iPos], -1, 31);
				g_esPlayer[player].g_iLadderActionsReward[iPos] = iGetClampedValue(key, "LadderActionsReward", "Ladder Actions Reward", "Ladder_Action_Reward", "ladderacts", g_esPlayer[player].g_iLadderActionsReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iLaserSightReward[iPos] = iGetClampedValue(key, "LaserSightReward", "Laser Sight Reward", "Laser_Sight_Reward", "lasersight", g_esPlayer[player].g_iLaserSightReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iLifeLeechReward[iPos] = iGetClampedValue(key, "LifeLeechReward", "Life Leech Reward", "Life_Leech_Reward", "lifeleech", g_esPlayer[player].g_iLifeLeechReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iMedicalCutsReward[iPos] = iGetClampedValue(key, "MedicalCutsReward", "Medical Cuts Reward", "Medical_Cuts_Reward", "medcuts", g_esPlayer[player].g_iMedicalCutsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iMeleeRangeReward[iPos] = iGetClampedValue(key, "MeleeRangeReward", "Melee Range Reward", "Melee_Range_Reward", "meleerange", g_esPlayer[player].g_iMeleeRangeReward[iPos], sSet[iPos], -1, 99999);
				g_esPlayer[player].g_iMidairDashesReward[iPos] = iGetClampedValue(key, "MidairDashesReward", "Midair Dashes Reward", "Midair_Dashes_Reward", "middash", g_esPlayer[player].g_iMidairDashesReward[iPos], sSet[iPos], -1, 99999);
				g_esPlayer[player].g_iOverhealthReward[iPos] = iGetClampedValue(key, "OverhealthReward", "Overhealth Reward", "Overhealth_Reward", "overhealth", g_esPlayer[player].g_iOverhealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iParticleEffectVisual[iPos] = iGetClampedValue(key, "ParticleEffectVisual", "Particle Effect Visual", "Particle_Effect_Visual", "particle", g_esPlayer[player].g_iParticleEffectVisual[iPos], sSet[iPos], -1, 15);
				g_esPlayer[player].g_iPrefsNotify[iPos] = iGetClampedValue(key, "PrefsNotify", "Prefs Notify", "Prefs_Notify", "pnotify", g_esPlayer[player].g_iPrefsNotify[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iRecoilDampenerReward[iPos] = iGetClampedValue(key, "RecoilDampenerReward", "Recoil Dampener Reward", "Recoil_Dampener_Reward", "recoil", g_esPlayer[player].g_iRecoilDampenerReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iRegenBurstsReward[iPos] = iGetClampedValue(key, "RegenBurstsReward", "Regen Bursts Reward", "Regen_Bursts_Reward", "regbursts", g_esPlayer[player].g_iRegenBurstsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iRespawnLoadoutReward[iPos] = iGetClampedValue(key, "RespawnLoadoutReward", "Respawn Loadout Reward", "Respawn_Loadout_Reward", "resloadout", g_esPlayer[player].g_iRespawnLoadoutReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iReviveHealthReward[iPos] = iGetClampedValue(key, "ReviveHealthReward", "Revive Health Reward", "Revive_Health_Reward", "revivehp", g_esPlayer[player].g_iReviveHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iRiotGearReward[iPos] = iGetClampedValue(key, "RiotGearReward", "Riot Gear Reward", "Riot_Gear_Reward", "riotgear", g_esPlayer[player].g_iRiotGearReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iSafetyBubbleReward[iPos] = iGetClampedValue(key, "SafetyBubbleReward", "Safety Bubble Reward", "Safety_Bubble_Reward", "safetybubble", g_esPlayer[player].g_iSafetyBubbleReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iShareRewards[iPos] = iGetClampedValue(key, "ShareRewards", "Share Rewards", "Share_Rewards", "share", g_esPlayer[player].g_iShareRewards[iPos], sSet[iPos], -1, 3);
				g_esPlayer[player].g_iShovePenaltyReward[iPos] = iGetClampedValue(key, "ShovePenaltyReward", "Shove Penalty Reward", "Shove_Penalty_Reward", "shovepenalty", g_esPlayer[player].g_iShovePenaltyReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iSpecialAmmoReward[iPos] = iGetClampedValue(key, "SpecialAmmoReward", "Special Ammo Reward", "Special_Ammo_Reward", "specammo", g_esPlayer[player].g_iSpecialAmmoReward[iPos], sSet[iPos], -1, 3);
				g_esPlayer[player].g_iStackRewards[iPos] = iGetClampedValue(key, "StackRewards", "Stack Rewards", "Stack_Rewards", "rstack", g_esPlayer[player].g_iStackRewards[iPos], sSet[iPos], -1, 2147483647);
				g_esPlayer[player].g_iStickyGrenadesReward[iPos] = iGetClampedValue(key, "StickyGrenadesReward", "Sticky Grenades Reward", "Sticky_Grenades_Reward", "sticky", g_esPlayer[player].g_iStickyGrenadesReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iSyringeDartsReward[iPos] = iGetClampedValue(key, "SyringeDartsReward", "Syringe Darts Reward", "Syringe_Darts_Reward", "syringe", g_esPlayer[player].g_iSyringeDartsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esPlayer[player].g_iThornsReward[iPos] = iGetClampedValue(key, "ThornsReward", "Thorns Reward", "Thorns_Reward", "thorns", g_esPlayer[player].g_iThornsReward[iPos], sSet[iPos], -1, 1);
				g_esPlayer[player].g_iUsefulRewards[iPos] = iGetClampedValue(key, "UsefulRewards", "Useful Rewards", "Useful_Rewards", "useful", g_esPlayer[player].g_iUsefulRewards[iPos], sSet[iPos], -1, 15);
				g_esPlayer[player].g_iVoicePitchVisual[iPos] = iGetClampedValue(key, "VoicePitchVisual", "Voice Pitch Visual", "Voice_Pitch_Visual", "voicepitch", g_esPlayer[player].g_iVoicePitchVisual[iPos], sSet[iPos], -1, 255);

				vGetConfigColors(sValue, sizeof sValue, sSet[iPos], ';');
				vGetStringValue(key, "BodyColorVisual", "Body Color Visual", "Body_Color_Visual", "bodycolor", iPos, g_esPlayer[player].g_sBodyColorVisual, sizeof esPlayer::g_sBodyColorVisual, g_esPlayer[player].g_sBodyColorVisual2, sizeof esPlayer::g_sBodyColorVisual2, g_esPlayer[player].g_sBodyColorVisual3, sizeof esPlayer::g_sBodyColorVisual3, g_esPlayer[player].g_sBodyColorVisual4, sizeof esPlayer::g_sBodyColorVisual4, sValue);
				vGetStringValue(key, "FallVoicelineReward", "Fall Voiceline Reward", "Fall_Voiceline_Reward", "fallvoice", iPos, g_esPlayer[player].g_sFallVoicelineReward, sizeof esPlayer::g_sFallVoicelineReward, g_esPlayer[player].g_sFallVoicelineReward2, sizeof esPlayer::g_sFallVoicelineReward2, g_esPlayer[player].g_sFallVoicelineReward3, sizeof esPlayer::g_sFallVoicelineReward3, g_esPlayer[player].g_sFallVoicelineReward4, sizeof esPlayer::g_sFallVoicelineReward4, sSet[iPos]);
				vGetStringValue(key, "GlowColorVisual", "Glow Color Visual", "Glow_Color_Visual", "glowcolor", iPos, g_esPlayer[player].g_sOutlineColorVisual, sizeof esPlayer::g_sOutlineColorVisual, g_esPlayer[player].g_sOutlineColorVisual2, sizeof esPlayer::g_sOutlineColorVisual2, g_esPlayer[player].g_sOutlineColorVisual3, sizeof esPlayer::g_sOutlineColorVisual3, g_esPlayer[player].g_sOutlineColorVisual4, sizeof esPlayer::g_sOutlineColorVisual4, sValue);
				vGetStringValue(key, "ItemReward", "Item Reward", "Item_Reward", "item", iPos, g_esPlayer[player].g_sItemReward, sizeof esPlayer::g_sItemReward, g_esPlayer[player].g_sItemReward2, sizeof esPlayer::g_sItemReward2, g_esPlayer[player].g_sItemReward3, sizeof esPlayer::g_sItemReward3, g_esPlayer[player].g_sItemReward4, sizeof esPlayer::g_sItemReward4, sSet[iPos]);
				vGetStringValue(key, "LightColorVisual", "Light Color Visual", "Light_Color_Visual", "lightcolor", iPos, g_esPlayer[player].g_sLightColorVisual, sizeof esPlayer::g_sLightColorVisual, g_esPlayer[player].g_sLightColorVisual2, sizeof esPlayer::g_sLightColorVisual2, g_esPlayer[player].g_sLightColorVisual3, sizeof esPlayer::g_sLightColorVisual3, g_esPlayer[player].g_sLightColorVisual4, sizeof esPlayer::g_sLightColorVisual4, sValue);
				vGetStringValue(key, "LoopingVoicelineVisual", "Looping Voiceline Visual", "Looping_Voiceline_Visual", "loopvoice", iPos, g_esPlayer[player].g_sLoopingVoicelineVisual, sizeof esPlayer::g_sLoopingVoicelineVisual, g_esPlayer[player].g_sLoopingVoicelineVisual2, sizeof esPlayer::g_sLoopingVoicelineVisual2, g_esPlayer[player].g_sLoopingVoicelineVisual3, sizeof esPlayer::g_sLoopingVoicelineVisual3, g_esPlayer[player].g_sLoopingVoicelineVisual4, sizeof esPlayer::g_sLoopingVoicelineVisual4, sSet[iPos]);
				vGetStringValue(key, "ScreenColorVisual", "Screen Color Visual", "Screen_Color_Visual", "screencolor", iPos, g_esPlayer[player].g_sScreenColorVisual, sizeof esPlayer::g_sScreenColorVisual, g_esPlayer[player].g_sScreenColorVisual2, sizeof esPlayer::g_sScreenColorVisual2, g_esPlayer[player].g_sScreenColorVisual3, sizeof esPlayer::g_sScreenColorVisual3, g_esPlayer[player].g_sScreenColorVisual4, sizeof esPlayer::g_sScreenColorVisual4, sValue);
			}

			g_esPlayer[player].g_iStackLimits[iPos] = iGetClampedValue(key, "StackLimits", "Stack Limits", "Stack_Limits", "limits", g_esPlayer[player].g_iStackLimits[iPos], sSet[iPos], -1, 99999);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_SURVIVORS, false))
	{
		if (StrEqual(key, "CarrierType", false) || StrEqual(key, "Carrier Type", false) || StrEqual(key, "Carrier_Type", false) || StrEqual(key, "catype", false))
		{
			char sValue[10], sRange[2][5];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

			g_esShooter[player].g_iCarrierMinType = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, MT_MAXTYPES) : g_esShooter[player].g_iCarrierMinType;
			g_esShooter[player].g_iCarrierMaxType = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, MT_MAXTYPES) : g_esShooter[player].g_iCarrierMaxType;
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_GLOW, false))
	{
		if (StrEqual(key, "GlowColor", false) || StrEqual(key, "Glow Color", false) || StrEqual(key, "Glow_Color", false))
		{
			char sValue[64], sSet[3][4];
			vGetConfigColors(sValue, sizeof sValue, value);
			strcopy(g_esPlayer[player].g_sGlowColor, sizeof esPlayer::g_sGlowColor, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_iGlowColor); iPos++)
			{
				g_esPlayer[player].g_iGlowColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
			}
		}
		else if (StrEqual(key, "GlowRange", false) || StrEqual(key, "Glow Range", false) || StrEqual(key, "Glow_Range", false))
		{
			char sValue[14], sRange[2][7];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

			g_esPlayer[player].g_iGlowMinRange = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, 99999) : g_esPlayer[player].g_iGlowMinRange;
			g_esPlayer[player].g_iGlowMaxRange = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, 99999) : g_esPlayer[player].g_iGlowMaxRange;
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_BOSS, false))
	{
		char sValue[44], sSet[4][11];
		strcopy(sValue, sizeof sValue, value);
		ReplaceString(sValue, sizeof sValue, " ", "");
		ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
		for (int iPos = 0; iPos < (sizeof esPlayer::g_iBossHealth); iPos++)
		{
			g_esPlayer[player].g_iBossHealth[iPos] = iGetClampedValue(key, "BossHealthStages", "Boss Health Stages", "Boss_Health_Stages", "bosshpstages", g_esPlayer[player].g_iBossHealth[iPos], sSet[iPos], -1, MT_MAXHEALTH);
			g_esPlayer[player].g_iBossType[iPos] = iGetClampedValue(key, "BossTypes", "Boss Types", "Boss_Types", "bosstypes", g_esPlayer[player].g_iBossType[iPos], sSet[iPos], -1, MT_MAXTYPES);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_COMBO, false))
	{
		if (StrEqual(key, "ComboTypeChance", false) || StrEqual(key, "Combo Type Chance", false) || StrEqual(key, "Combo_Type_Chance", false) || StrEqual(key, "typechance", false))
		{
			char sValue[42], sSet[7][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_flComboTypeChance); iPos++)
			{
				g_esPlayer[player].g_flComboTypeChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esPlayer[player].g_flComboTypeChance[iPos];
			}
		}
		else
		{
			char sValue[140], sSet[10][14];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_flComboChance); iPos++)
			{
				if (StrEqual(key, "ComboRadius", false) || StrEqual(key, "Combo Radius", false) || StrEqual(key, "Combo_Radius", false) || StrEqual(key, "radius", false))
				{
					char sRange[2][7], sSubset[14];
					strcopy(sSubset, sizeof sSubset, sSet[iPos]);
					ReplaceString(sSubset, sizeof sSubset, " ", "");
					ExplodeString(sSubset, ";", sRange, sizeof sRange, sizeof sRange[]);

					g_esPlayer[player].g_flComboMinRadius[iPos] = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -200.0, 1.0) : g_esPlayer[player].g_flComboMinRadius[iPos];
					g_esPlayer[player].g_flComboMaxRadius[iPos] = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 200.0) : g_esPlayer[player].g_flComboMaxRadius[iPos];
				}
				else
				{
					g_esPlayer[player].g_flComboChance[iPos] = flGetClampedValue(key, "ComboChance", "Combo Chance", "Combo_Chance", "chance", g_esPlayer[player].g_flComboChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esPlayer[player].g_iComboCooldown[iPos] = iGetClampedValue(key, "ComboCooldown", "Combo Cooldown", "Combo_Cooldown", "cooldown", g_esPlayer[player].g_iComboCooldown[iPos], sSet[iPos], -1, 99999);
					g_esPlayer[player].g_flComboDamage[iPos] = flGetClampedValue(key, "ComboDamage", "Combo Damage", "Combo_Damage", "damage", g_esPlayer[player].g_flComboDamage[iPos], sSet[iPos], -1.0, 99999.0);
					g_esPlayer[player].g_flComboDeathChance[iPos] = flGetClampedValue(key, "ComboDeathChance", "Combo Death Chance", "Combo_Death_Chance", "deathchance", g_esPlayer[player].g_flComboDeathChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esPlayer[player].g_flComboDeathRange[iPos] = flGetClampedValue(key, "ComboDeathRange", "Combo Death Range", "Combo_Death_Range", "deathrange", g_esPlayer[player].g_flComboDeathRange[iPos], sSet[iPos], -1.0, 99999.0);
					g_esPlayer[player].g_flComboDelay[iPos] = flGetClampedValue(key, "ComboDelay", "Combo Delay", "Combo_Delay", "delay", g_esPlayer[player].g_flComboDelay[iPos], sSet[iPos], -1.0, 99999.0);
					g_esPlayer[player].g_flComboDuration[iPos] = flGetClampedValue(key, "ComboDuration", "Combo Duration", "Combo_Duration", "duration", g_esPlayer[player].g_flComboDuration[iPos], sSet[iPos], -1.0, 99999.0);
					g_esPlayer[player].g_flComboInterval[iPos] = flGetClampedValue(key, "ComboInterval", "Combo Interval", "Combo_Interval", "interval", g_esPlayer[player].g_flComboInterval[iPos], sSet[iPos], -1.0, 99999.0);
					g_esPlayer[player].g_flComboRange[iPos] = flGetClampedValue(key, "ComboRange", "Combo Range", "Combo_Range", "range", g_esPlayer[player].g_flComboRange[iPos], sSet[iPos], -1.0, 99999.0);
					g_esPlayer[player].g_flComboRangeChance[iPos] = flGetClampedValue(key, "ComboRangeChance", "Combo Range Chance", "Combo_Range_Chance", "rangechance", g_esPlayer[player].g_flComboRangeChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esPlayer[player].g_iComboRangeCooldown[iPos] = iGetClampedValue(key, "ComboRangeCooldown", "Combo Range Cooldown", "Combo_Range_Cooldown", "rangecooldown", g_esPlayer[player].g_iComboRangeCooldown[iPos], sSet[iPos], -1, 99999);
					g_esPlayer[player].g_flComboRockChance[iPos] = flGetClampedValue(key, "ComboRockChance", "Combo Rock Chance", "Combo_Rock_Chance", "rockchance", g_esPlayer[player].g_flComboRockChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esPlayer[player].g_iComboRockCooldown[iPos] = iGetClampedValue(key, "ComboRockCooldown", "Combo Rock Cooldown", "Combo_Rock_Cooldown", "rockcooldown", g_esPlayer[player].g_iComboRockCooldown[iPos], sSet[iPos], -1, 99999);
					g_esPlayer[player].g_flComboSpeed[iPos] = flGetClampedValue(key, "ComboSpeed", "Combo Speed", "Combo_Speed", "speed", g_esPlayer[player].g_flComboSpeed[iPos], sSet[iPos], -1.0, 99999.0);
				}
			}
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_TRANSFORM, false))
	{
		if (StrEqual(key, "TransformTypes", false) || StrEqual(key, "Transform Types", false) || StrEqual(key, "Transform_Types", false) || StrEqual(key, "transtypes", false))
		{
			char sValue[50], sSet[10][5];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_iTransformType); iPos++)
			{
				g_esPlayer[player].g_iTransformType[iPos] = (sSet[iPos][0] != '\0') ? iClamp(StringToInt(sSet[iPos]), -1, MT_MAXTYPES) : g_esPlayer[player].g_iTransformType[iPos];
			}
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_PROPS, false))
	{
		if (StrEqual(key, "PropsChance", false) || StrEqual(key, "Props Chance", false) || StrEqual(key, "Props_Chance", false) || StrEqual(key, "chance", false))
		{
			char sValue[54], sSet[9][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_flPropsChance); iPos++)
			{
				g_esPlayer[player].g_flPropsChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esPlayer[player].g_flPropsChance[iPos];
			}
		}
		else
		{
			char sValue[64], sSet[4][4];
			vGetConfigColors(sValue, sizeof sValue, value);
			vSaveConfigColors(key, "OxygenTankColor", "Oxygen Tank Color", "Oxygen_Tank_Color", "oxygen", g_esPlayer[player].g_sOzTankColor, sizeof esPlayer::g_sOzTankColor, value);
			vSaveConfigColors(key, "FlameColor", "Flame Color", "Flame_Color", "flame", g_esPlayer[player].g_sFlameColor, sizeof esPlayer::g_sFlameColor, value);
			vSaveConfigColors(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esPlayer[player].g_sRockColor, sizeof esPlayer::g_sRockColor, value);
			vSaveConfigColors(key, "TireColor", "Tire Color", "Tire_Color", "tire", g_esPlayer[player].g_sTireColor, sizeof esPlayer::g_sTireColor, value);
			vSaveConfigColors(key, "PropaneTankColor", "Propane Tank Color", "Propane_Tank_Color", "propane", g_esPlayer[player].g_sPropTankColor, sizeof esPlayer::g_sPropTankColor, value);
			vSaveConfigColors(key, "FlashlightColor", "Flashlight Color", "Flashlight_Color", "flashlight", g_esPlayer[player].g_sFlashlightColor, sizeof esPlayer::g_sFlashlightColor, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);

			for (int iPos = 0; iPos < (sizeof esPlayer::g_iLightColor); iPos++)
			{
				g_esPlayer[player].g_iLightColor[iPos] = iGetClampedValue(key, "LightColor", "Light Color", "Light_Color", "light", g_esPlayer[player].g_iLightColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iOzTankColor[iPos] = iGetClampedValue(key, "OxygenTankColor", "Oxygen Tank Color", "Oxygen_Tank_Color", "oxygen", g_esPlayer[player].g_iOzTankColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iFlameColor[iPos] = iGetClampedValue(key, "FlameColor", "Flame Color", "Flame_Color", "flame", g_esPlayer[player].g_iFlameColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iRockColor[iPos] = iGetClampedValue(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esPlayer[player].g_iRockColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iTireColor[iPos] = iGetClampedValue(key, "TireColor", "Tire Color", "Tire_Color", "tire", g_esPlayer[player].g_iTireColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iPropTankColor[iPos] = iGetClampedValue(key, "PropaneTankColor", "Propane Tank Color", "Propane_Tank_Color", "propane", g_esPlayer[player].g_iPropTankColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iFlashlightColor[iPos] = iGetClampedValue(key, "FlashlightColor", "Flashlight Color", "Flashlight_Color", "flashlight", g_esPlayer[player].g_iFlashlightColor[iPos], sSet[iPos], -1, 255);
				g_esPlayer[player].g_iCrownColor[iPos] = iGetClampedValue(key, "CrownColor", "Crown Color", "Crown_Color", "crown", g_esPlayer[player].g_iCrownColor[iPos], sSet[iPos], -1, 255);
			}
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_PARTICLES, false))
	{
		if (StrEqual(key, "BodyChance", false) || StrEqual(key, "Body Chance", false) || StrEqual(key, "Body_Chance", false) || StrEqual(key, "bchance", false))
		{
			char sValue[42], sSet[7][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_flBodyChance); iPos++)
			{
				g_esPlayer[player].g_flBodyChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esPlayer[player].g_flBodyChance[iPos];
			}
		}
		else if (StrEqual(key, "RockChance", false) || StrEqual(key, "Rock Chance", false) || StrEqual(key, "Rock_Chance", false) || StrEqual(key, "rchance", false))
		{
			char sValue[24], sSet[4][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esPlayer::g_flRockChance); iPos++)
			{
				g_esPlayer[player].g_flRockChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esPlayer[player].g_flRockChance[iPos];
			}
		}
	}
	else if (!strncmp(subsection, "Tank", 4, false) || subsection[0] == '#' || IsCharNumeric(subsection[0]) || StrEqual(subsection, "all", false) || FindCharInString(subsection, ',') != -1 || FindCharInString(subsection, '-') != -1)
	{
		int iStartPos = 0, iIndex = 0, iRealType = 0;
		if (!strncmp(subsection, "Tank", 4, false) || subsection[0] == '#')
		{
			iStartPos = iGetConfigSectionNumber(subsection, strlen(subsection)), iIndex = StringToInt(subsection[iStartPos]);
			vReadAdminSettings(player, iIndex, key, value);
		}
		else if (IsCharNumeric(subsection[0]) || StrEqual(subsection, "all", false) || FindCharInString(subsection, ',') != -1 || FindCharInString(subsection, '-') != -1)
		{
			if (IsCharNumeric(subsection[0]) && FindCharInString(subsection, ',') == -1 && FindCharInString(subsection, '-') == -1)
			{
				iIndex = StringToInt(subsection);
				vReadAdminSettings(player, iIndex, key, value);
			}
			else if (StrEqual(subsection, "all", false) || FindCharInString(subsection, ',') != -1 || FindCharInString(subsection, '-') != -1)
			{
				for (iIndex = g_esGeneral.g_iMinType; iIndex <= g_esGeneral.g_iMaxType; iIndex++)
				{
					if (iIndex <= 0)
					{
						continue;
					}

					iRealType = iFindSectionType(subsection, iIndex);
					if (iIndex == iRealType || StrEqual(subsection, "all", false))
					{
						vReadAdminSettings(player, iIndex, key, value);
					}
				}
			}
		}
	}
}

void vReadSpecialSettings(int type, int mode, const char[] subsection, const char[] specsection, const char[] key, const char[] value)
{
	int iIndex = g_esTank[type].g_iRecordedType[0];
	if (0 <= iIndex <= MT_MAXTYPES)
	{
		if (StrContains(specsection, MT_CONFIG_SECTION_SMOKER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_BOOMER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_HUNTER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_SPITTER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_JOCKEY, false) != -1
			|| StrContains(specsection, MT_CONFIG_SECTION_CHARGER, false) != -1 || StrEqual(specsection, MT_CONFIG_SECTION_SPECIAL, false) || StrContains(specsection, MT_CONFIG_SECTION_SPECIAL2, false) != -1 || StrEqual(specsection, MT_CONFIG_SECTION_INFECTED, false) || StrContains(specsection, MT_CONFIG_SECTION_INFECTED2, false) != -1)
		{
			g_esSpecial[iIndex].g_iSpecialTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialTypes", "Special Types", "Special_Types", "spectypes", g_esSpecial[iIndex].g_iSpecialTypes, value, -1, 63);
			g_esSpecial[iIndex].g_iSpecialTypes = (g_esSpecial[iIndex].g_iSpecialTypes > 0) ? iGetSpecialTypes(g_esSpecial[iIndex].g_iSpecialTypes, specsection) : 0;
			g_esSpecial[iIndex].g_iGameType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "GameType", "Game Type", "Game_Type", "game", g_esSpecial[iIndex].g_iGameType, value, -1, 2);
			g_esSpecial[iIndex].g_flSpecialChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialChance", "Special Chance", "Special_Chance", "chance", g_esSpecial[iIndex].g_flSpecialChance, value, -1.0, 100.0);
			g_esSpecial[iIndex].g_iSpecialNote = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialNote", "Special Note", "Special_Note", "note", g_esSpecial[iIndex].g_iSpecialNote, value, -1, 1);
			g_esSpecial[iIndex].g_iSpecialModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialModel", "Special Model", "Special_Model", "model", g_esSpecial[iIndex].g_iSpecialModel, value, -1, 3);
			g_esSpecial[iIndex].g_flBurnDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurnDuration", "Burn Duration", "Burn_Duration", "burndur", g_esSpecial[iIndex].g_flBurnDuration, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flBurntSkin = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurntSkin", "Burnt Skin", "Burnt_Skin", "burnt", g_esSpecial[iIndex].g_flBurntSkin, value, -2.0, 1.0);
			g_esSpecial[iIndex].g_iSpawnEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpawnEnabled", "Spawn Enabled", "Spawn_Enabled", "spawn", g_esSpecial[iIndex].g_iSpawnEnabled, value, -1, 1);
			g_esSpecial[iIndex].g_iMenuEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "MenuEnabled", "Menu Enabled", "Menu_Enabled", "menu", g_esSpecial[iIndex].g_iMenuEnabled, value, -1, 1);
			g_esSpecial[iIndex].g_iDeathRevert = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "DeathRevert", "Death Revert", "Death_Revert", "revert", g_esSpecial[iIndex].g_iDeathRevert, value, -1, 1);
			g_esSpecial[iIndex].g_iRequiresHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "RequiresHumans", "Requires Humans", "Requires_Humans", "hrequire", g_esSpecial[iIndex].g_iRequiresHumans, value, -1, 32);
			g_esSpecial[iIndex].g_iAnnounceArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceArrival", "Announce Arrival", "Announce_Arrival", "arrival", g_esSpecial[iIndex].g_iAnnounceArrival, value, -1, 31);
			g_esSpecial[iIndex].g_iAnnounceDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceDeath", "Announce Death", "Announce_Death", "death", g_esSpecial[iIndex].g_iAnnounceDeath, value, -1, 2);
			g_esSpecial[iIndex].g_iAnnounceKill = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceKill", "Announce Kill", "Announce_Kill", "kill", g_esSpecial[iIndex].g_iAnnounceKill, value, -1, 1);
			g_esSpecial[iIndex].g_iArrivalMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalMessage", "Arrival Message", "Arrival_Message", "arrivalmsg", g_esSpecial[iIndex].g_iArrivalMessage, value, -1, 1023);
			g_esSpecial[iIndex].g_iArrivalSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalSound", "Arrival Sound", "Arrival_Sound", "arrivalsnd", g_esSpecial[iIndex].g_iArrivalSound, value, -1, 1);
			g_esSpecial[iIndex].g_iDeathDetails = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathDetails", "Death Details", "Death_Details", "deathdets", g_esSpecial[iIndex].g_iDeathDetails, value, -1, 5);
			g_esSpecial[iIndex].g_iDeathMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathMessage", "Death Message", "Death_Message", "deathmsg", g_esSpecial[iIndex].g_iDeathMessage, value, -1, 1023);
			g_esSpecial[iIndex].g_iDeathSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathSound", "Death Sound", "Death_Sound", "deathsnd", g_esSpecial[iIndex].g_iDeathSound, value, -1, 1);
			g_esSpecial[iIndex].g_iKillMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "KillMessage", "Kill Message", "Kill_Message", "killmsg", g_esSpecial[iIndex].g_iKillMessage, value, -1, 1023);
			g_esSpecial[iIndex].g_iVocalizeArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeArrival", "Vocalize Arrival", "Vocalize_Arrival", "arrivalvoc", g_esSpecial[iIndex].g_iVocalizeArrival, value, -1, 1);
			g_esSpecial[iIndex].g_iVocalizeDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeDeath", "Vocalize Death", "Vocalize_Death", "deathvoc", g_esSpecial[iIndex].g_iVocalizeDeath, value, -1, 1);
			g_esSpecial[iIndex].g_iGlowEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowEnabled", "Glow Enabled", "Glow_Enabled", "genabled", g_esSpecial[iIndex].g_iGlowEnabled, value, -1, 1);
			g_esSpecial[iIndex].g_iGlowFlashing = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowFlashing", "Glow Flashing", "Glow_Flashing", "flashing", g_esSpecial[iIndex].g_iGlowFlashing, value, -1, 1);
			g_esSpecial[iIndex].g_iGlowType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowType", "Glow Type", "Glow_Type", "type", g_esSpecial[iIndex].g_iGlowType, value, -1, 1);
			g_esSpecial[iIndex].g_flArmorPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorPercentage", "Armor Percentage", "Armor_Percentage", "armorpercent", g_esSpecial[iIndex].g_flArmorPercentage, value, -1.0, 1.0);
			g_esSpecial[iIndex].g_flArmorResistance[0] = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esSpecial[iIndex].g_flArmorResistance[0], value, -1.0, 1.0);
			g_esSpecial[iIndex].g_flShieldPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldPercentage", "Shield Percentage", "Shield_Percentage", "shieldpercent", g_esSpecial[iIndex].g_flShieldPercentage, value, -1.0, 1.0);
			g_esSpecial[iIndex].g_flShieldRate = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldRate", "Shield Rate", "Shield_Rate", "shieldrate", g_esSpecial[iIndex].g_flShieldRate, value, -1.0, 1.0);
			g_esSpecial[iIndex].g_flPassiveDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveDelay", "Passive Delay", "Passive_Delay", "passdelay", g_esSpecial[iIndex].g_flPassiveDelay, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iPassiveHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveHealth", "Passive Health", "Passive_Health", "passhp", g_esSpecial[iIndex].g_iPassiveHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
			g_esSpecial[iIndex].g_flPassiveInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveInterval", "Passive Interval", "Passive_Interval", "passint", g_esSpecial[iIndex].g_flPassiveInterval, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esSpecial[iIndex].g_iDisplayHealth, value, -1, 11);
			g_esSpecial[iIndex].g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esSpecial[iIndex].g_iDisplayHealthType, value, -1, 2);
			g_esSpecial[iIndex].g_flHealPercentMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthPercentageMultiplier", "Health Percentage Multiplier", "Health_Percentage_Multiplier", "hpmulti", g_esSpecial[iIndex].g_flHealPercentMultiplier, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iHumanMultiplierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HumanMultiplierMode", "Human Multiplier Mode", "Human_Multiplier_Mode", "humanmultimode", g_esSpecial[iIndex].g_iHumanMultiplierMode, value, -1, 1);
			g_esSpecial[iIndex].g_iMinimumHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MinimumHumans", "Minimum Humans", "Minimum_Humans", "minhumans", g_esSpecial[iIndex].g_iMinimumHumans, value, -1, 32);
			g_esSpecial[iIndex].g_iMultiplyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MultiplyHealth", "Multiply Health", "Multiply_Health", "multihp", g_esSpecial[iIndex].g_iMultiplyHealth, value, -1, 3);
			g_esSpecial[iIndex].g_iSpawnProtection = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "SpawnProtection", "Spawn Protection", "Spawn_Protection", "protect", g_esSpecial[iIndex].g_iSpawnProtection, value, -1, 3);
			g_esSpecial[iIndex].g_flArmorDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorDuration", "Armor Duration", "Armor_Duration", "armorduration", g_esSpecial[iIndex].g_flArmorDuration, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flArmorResistance[1] = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esSpecial[iIndex].g_flArmorResistance[1], value, -1.0, 1.0);
			g_esSpecial[iIndex].g_flShieldDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldDuration", "Shield Duration", "Shield_Duration", "shieldduration", g_esSpecial[iIndex].g_flShieldDuration, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flShieldResistance = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldResistance", "Shield Resistance", "Shield_Resistance", "shieldres", g_esSpecial[iIndex].g_flShieldResistance, value, -1.0, 1.0);
			g_esSpecial[iIndex].g_iHumanSupport = iGetKeyValue(subsection, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, key, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, g_esSpecial[iIndex].g_iHumanSupport, value, -1, 2);
			g_esSpecial[iIndex].g_iTypeLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "TypeLimit", "Type Limit", "Type_Limit", "typelimit", g_esSpecial[iIndex].g_iTypeLimit, value, -1, 32);
			g_esSpecial[iIndex].g_iFinaleSpecial = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "FinaleSpecial", "Finale Special", "Finale_Special", "finale", g_esSpecial[iIndex].g_iFinaleSpecial, value, -1, 4);
			g_esSpecial[iIndex].g_flCloseAreasOnly = flGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "CloseAreasOnly", "Close Areas Only", "Close_Areas_Only", "closeareas", g_esSpecial[iIndex].g_flCloseAreasOnly, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flOpenAreasOnly = flGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "OpenAreasOnly", "Open Areas Only", "Open_Areas_Only", "openareas", g_esSpecial[iIndex].g_flOpenAreasOnly, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iBossBaseType = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossBaseType", "Boss Base Type", "Boss_Base_Type", "bossbase", g_esSpecial[iIndex].g_iBossBaseType, value, -1, MT_MAXTYPES);
			g_esSpecial[iIndex].g_iBossEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossEffects", "Boss Effects", "Boss_Effects", "bosseffects", g_esSpecial[iIndex].g_iBossEffects, value, -1, 15);
			g_esSpecial[iIndex].g_iBossLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossLimit", "Boss Limit", "Boss_Limit", "bosslimit", g_esSpecial[iIndex].g_iBossLimit, value, -1, 32);
			g_esSpecial[iIndex].g_iBossStages = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossStages", "Boss Stages", "Boss_Stages", "bossstages", g_esSpecial[iIndex].g_iBossStages, value, -1, 4);
			g_esSpecial[iIndex].g_iRandomSpecial = iGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomSpecial", "Random Special", "Random_Special", "random", g_esSpecial[iIndex].g_iRandomSpecial, value, -1, 1);
			g_esSpecial[iIndex].g_flRandomDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomDuration", "Random Duration", "Random_Duration", "randduration", g_esSpecial[iIndex].g_flRandomDuration, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flRandomInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomInterval", "Random Interval", "Random_Interval", "randinterval", g_esSpecial[iIndex].g_flRandomInterval, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flTransformDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDelay", "Transform Delay", "Transform_Delay", "transdelay", g_esSpecial[iIndex].g_flTransformDelay, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flTransformDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDuration", "Transform Duration", "Transform_Duration", "transduration", g_esSpecial[iIndex].g_flTransformDuration, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iSpawnType = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "SpawnType", "Spawn Type", "Spawn_Type", "spawntype", g_esSpecial[iIndex].g_iSpawnType, value, -1, 4);
			g_esSpecial[iIndex].g_iRockModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, key, "RockModel", "Rock Model", "Rock_Model", "rockmodel", g_esSpecial[iIndex].g_iRockModel, value, -1, 2);
			g_esSpecial[iIndex].g_iBodyEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "BodyEffects", "Body Effects", "Body_Effects", "body", g_esSpecial[iIndex].g_iBodyEffects, value, -1, 127);
			g_esSpecial[iIndex].g_iRockEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "RockEffects", "Rock Effects", "Rock_Effects", "rock", g_esSpecial[iIndex].g_iRockEffects, value, -1, 15);
			g_esSpecial[iIndex].g_flAttackInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "AttackInterval", "Attack Interval", "Attack_Interval", "attack", g_esSpecial[iIndex].g_flAttackInterval, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iAutoHop = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "BunnyHop", "Bunny Hop", "Bunny_Hop", "bhop", g_esSpecial[iIndex].g_iAutoHop, value, -1, 1);
			g_esSpecial[iIndex].g_flClawDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ClawDamage", "Claw Damage", "Claw_Damage", "claw", g_esSpecial[iIndex].g_flClawDamage, value, -2.0, 99999.0);
			g_esSpecial[iIndex].g_flHittableDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "HittableDamage", "Hittable Damage", "Hittable_Damage", "hittable", g_esSpecial[iIndex].g_flHittableDamage, value, -2.0, 99999.0);
			g_esSpecial[iIndex].g_flIncapDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IncapDamageMultiplier", "Incap Damage Multiplier", "Incap_Damage_Multiplier", "incapdmgmulti", g_esSpecial[iIndex].g_flIncapDamageMultiplier, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iIntangibleBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IntangibleBody", "Intangible Body", "Intangible_Body", "intangible", g_esSpecial[iIndex].g_iIntangibleBody, value, -1, 1);
			g_esSpecial[iIndex].g_iMeleeHitMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitMode", "Melee Hit Mode", "Melee_Hit_Mode", "meleehit", g_esSpecial[iIndex].g_iMeleeHitMode, value, -1, 2);
			g_esSpecial[iIndex].g_flMeleeHitValue = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitValue", "Melee Hit Value", "Melee_Hit_Value", "meleevalue", g_esSpecial[iIndex].g_flMeleeHitValue, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_flPinDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PinDamage", "Pin Damage", "Pin_Damage", "pindmg", g_esSpecial[iIndex].g_flPinDamage, value, -2.0, 99999.0);
			g_esSpecial[iIndex].g_flRunSpeed = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RunSpeed", "Run Speed", "Run_Speed", "speed", g_esSpecial[iIndex].g_flRunSpeed, value, -1.0, 99.0);
			g_esSpecial[iIndex].g_flSpecialInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SpecialInterval", "Special Interval", "Special_Interval", "specint", g_esSpecial[iIndex].g_flSpecialInterval, value, -1.0, 99999.0);
			g_esSpecial[iIndex].g_iThrowRock = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowRock", "Throw Rock", "Throw_Rock", "throwrock", g_esSpecial[iIndex].g_iThrowRock, value, -1, 1);
			g_esSpecial[iIndex].g_iBulletImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "BulletImmunity", "Bullet Immunity", "Bullet_Immunity", "bullet", g_esSpecial[iIndex].g_iBulletImmunity, value, -1, 1);
			g_esSpecial[iIndex].g_iExplosiveImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "ExplosiveImmunity", "Explosive Immunity", "Explosive_Immunity", "explosive", g_esSpecial[iIndex].g_iExplosiveImmunity, value, -1, 1);
			g_esSpecial[iIndex].g_iFireImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "FireImmunity", "Fire Immunity", "Fire_Immunity", "fire", g_esSpecial[iIndex].g_iFireImmunity, value, -1, 1);
			g_esSpecial[iIndex].g_iHittableImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "HittableImmunity", "Hittable Immunity", "Hittable_Immunity", "hittable", g_esSpecial[iIndex].g_iHittableImmunity, value, -1, 1);
			g_esSpecial[iIndex].g_iMeleeImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "MeleeImmunity", "Melee Immunity", "Melee_Immunity", "melee", g_esSpecial[iIndex].g_iMeleeImmunity, value, -1, 1);
			g_esSpecial[iIndex].g_iVomitImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "VomitImmunity", "Vomit Immunity", "Vomit_Immunity", "vomit", g_esSpecial[iIndex].g_iVomitImmunity, value, -1, 1);

			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorCharacters", "Armor Characters", "Armor_Characters", "armorchars", g_esSpecial[iIndex].g_sArmorCharacters, sizeof esSpecial::g_sArmorCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esSpecial[iIndex].g_sHealthCharacters, sizeof esSpecial::g_sHealthCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldCharacters", "Shield Characters", "Shield_Characters", "shieldchars", g_esSpecial[iIndex].g_sShieldCharacters, sizeof esSpecial::g_sShieldCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, key, "ComboSet", "Combo Set", "Combo_Set", "set", g_esSpecial[iIndex].g_sComboSet, sizeof esSpecial::g_sComboSet, value);

			if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
			{
				if (StrEqual(key, "SkinColor", false) || StrEqual(key, "Skin Color", false) || StrEqual(key, "Skin_Color", false) || StrEqual(key, "skin", false))
				{
					char sValue[64], sSet[4][4];
					vGetConfigColors(sValue, sizeof sValue, value);
					strcopy(g_esSpecial[iIndex].g_sSkinColor, sizeof esSpecial::g_sSkinColor, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_iSkinColor); iPos++)
					{
						g_esSpecial[iIndex].g_iSkinColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
					}
				}
				else if (StrContains(key, "Class", false) != -1)
				{
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BoomerClass", "Boomer Class", "Boomer_Class", "bclass", g_esSpecial[iIndex].g_sBoomerClass, sizeof esSpecial::g_sBoomerClass, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "ChargerClass", "Charger Class", "Charger_Class", "cclass", g_esSpecial[iIndex].g_sChargerClass, sizeof esSpecial::g_sChargerClass, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "HunterClass", "Hunter Class", "Hunter_Class", "hclass", g_esSpecial[iIndex].g_sHunterClass, sizeof esSpecial::g_sHunterClass, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "JockeyClass", "Jockey Class", "Jockey_Class", "jclass", g_esSpecial[iIndex].g_sJockeyClass, sizeof esSpecial::g_sJockeyClass, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SmokerClass", "Smoker Class", "Smoker_Class", "smclass", g_esSpecial[iIndex].g_sSmokerClass, sizeof esSpecial::g_sSmokerClass, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpitterClass", "Spitter Class", "Spitter_Class", "spclass", g_esSpecial[iIndex].g_sSpitterClass, sizeof esSpecial::g_sSpitterClass, value);
				}
				else if (StrContains(key, "Name", false) != -1)
				{
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BoomerName", "Boomer Name", "Boomer_Name", "bname", g_esSpecial[iIndex].g_sBoomerName, sizeof esSpecial::g_sBoomerName, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "ChargerName", "Charger Name", "Charger_Name", "cname", g_esSpecial[iIndex].g_sChargerName, sizeof esSpecial::g_sChargerName, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "HunterName", "Hunter Name", "Hunter_Name", "hname", g_esSpecial[iIndex].g_sHunterName, sizeof esSpecial::g_sHunterName, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "JockeyName", "Jockey Name", "Jockey_Name", "jname", g_esSpecial[iIndex].g_sJockeyName, sizeof esSpecial::g_sJockeyName, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SmokerName", "Smoker Name", "Smoker_Name", "smname", g_esSpecial[iIndex].g_sSmokerName, sizeof esSpecial::g_sSmokerName, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpitterName", "Spitter Name", "Spitter_Name", "spname", g_esSpecial[iIndex].g_sSpitterName, sizeof esSpecial::g_sSpitterName, value);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_REWARDS, false))
			{
				char sValue[2560], sSet[8][320];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esSpecial::g_iStackLimits); iPos++)
				{
					if (iPos < (sizeof esSpecial::g_iRewardEnabled))
					{
						g_esSpecial[iIndex].g_flRewardChance[iPos] = flGetClampedValue(key, "RewardChance", "Reward Chance", "Reward_Chance", "chance", g_esSpecial[iIndex].g_flRewardChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flRewardDuration[iPos] = flGetClampedValue(key, "RewardDuration", "Reward Duration", "Reward_Duration", "duration", g_esSpecial[iIndex].g_flRewardDuration[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flRewardPercentage[iPos] = flGetClampedValue(key, "RewardPercentage", "Reward Percentage", "Reward_Percentage", "percent", g_esSpecial[iIndex].g_flRewardPercentage[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flActionDurationReward[iPos] = flGetClampedValue(key, "ActionDurationReward", "Action Duration Reward", "Action_Duration_Reward", "actionduration", g_esSpecial[iIndex].g_flActionDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flAdrenalineTimeReward[iPos] = flGetClampedValue(key, "AdrenalineTimeReward", "Adrenaline Time Reward", "Adrenaline_Time_Reward", "adrenaline", g_esSpecial[iIndex].g_flAdrenalineTimeReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flAttackBoostReward[iPos] = flGetClampedValue(key, "AttackBoostReward", "Attack Boost Reward", "Attack_Boost_Reward", "attackboost", g_esSpecial[iIndex].g_flAttackBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flDamageBoostReward[iPos] = flGetClampedValue(key, "DamageBoostReward", "Damage Boost Reward", "Damage_Boost_Reward", "dmgboost", g_esSpecial[iIndex].g_flDamageBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flDamageResistanceReward[iPos] = flGetClampedValue(key, "DamageResistanceReward", "Damage Resistance Reward", "Damage_Resistance_Reward", "dmgres", g_esSpecial[iIndex].g_flDamageResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esSpecial[iIndex].g_flDopamineRadiusReward[iPos] = flGetClampedValue(key, "DopamineRadiusReward", "Dopamine Radius Reward", "Dopamine_Radius_Reward", "dopamine", g_esSpecial[iIndex].g_flDopamineRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flFireRateReward[iPos] = flGetClampedValue(key, "FireRateReward", "Fire Rate Reward", "Fire_Rate_Reward", "firerate", g_esSpecial[iIndex].g_flFireRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flGrenadeLauncherReward[iPos] = flGetClampedValue(key, "GrenadeLauncherReward", "Grenade Launcher Reward", "Grenade_Launcher_Reward", "grenade", g_esSpecial[iIndex].g_flGrenadeLauncherReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flHealPercentReward[iPos] = flGetClampedValue(key, "HealPercentReward", "Heal Percent Reward", "Heal_Percent_Reward", "healpercent", g_esSpecial[iIndex].g_flHealPercentReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flHealthcareRadiusReward[iPos] = flGetClampedValue(key, "HealthcareRadiusReward", "Healthcare Radius Reward", "Healthcare_Radius_Reward", "healthcare", g_esSpecial[iIndex].g_flHealthcareRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flHeartbeatReward[iPos] = flGetClampedValue(key, "HeartbeatReward", "Heartbeat Reward", "Heartbeat_Reward", "heartbeat", g_esSpecial[iIndex].g_flHeartbeatReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flHollowpointAmmoReward[iPos] = flGetClampedValue(key, "HollowpointAmmoReward", "Hollowpoint Ammo Reward", "Hollowpoint_Ammo_Reward", "hollowpoint", g_esSpecial[iIndex].g_flHollowpointAmmoReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flJumpHeightReward[iPos] = flGetClampedValue(key, "JumpHeightReward", "Jump Height Reward", "Jump_Height_Reward", "jumpheight", g_esSpecial[iIndex].g_flJumpHeightReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flLadyKillerReward[iPos] = flGetClampedValue(key, "LadyKillerReward", "Lady Killer Reward", "Lady_Killer_Reward", "ladykiller", g_esSpecial[iIndex].g_flLadyKillerReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flLoopingVoicelineInterval[iPos] = flGetClampedValue(key, "LoopingVoicelineInterval", "Looping Voiceline Interval", "Looping_Voiceline_Interval", "loopinterval", g_esSpecial[iIndex].g_flLoopingVoicelineInterval[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flLuckyBulletReward[iPos] = flGetClampedValue(key, "LuckyBulletReward", "Lucky Bullet Reward", "Lucky_Bullet_Reward", "luckybullet", g_esSpecial[iIndex].g_flLuckyBulletReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flMotivationRadiusReward[iPos] = flGetClampedValue(key, "MotivationRadiusReward", "Motivation Radius Reward", "Motivation_Radius_Reward", "motivation", g_esSpecial[iIndex].g_flMotivationRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flOverdoseRadiusReward[iPos] = flGetClampedValue(key, "OverdoseRadiusReward", "Overdose Radius Reward", "Overdose_Radius_Reward", "overdose", g_esSpecial[iIndex].g_flOverdoseRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flPipeBombDurationReward[iPos] = flGetClampedValue(key, "PipebombDurationReward", "Pipebomb Duration Reward", "Pipebomb_Duration_Reward", "pipeduration", g_esSpecial[iIndex].g_flPipeBombDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flPunchResistanceReward[iPos] = flGetClampedValue(key, "PunchResistanceReward", "Punch Resistance Reward", "Punch_Resistance_Reward", "punchres", g_esSpecial[iIndex].g_flPunchResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esSpecial[iIndex].g_flRapidPistolReward[iPos] = flGetClampedValue(key, "RapidPistolReward", "Rapid Pistol Reward", "Rapid_Pistol_Reward", "rapidpistol", g_esSpecial[iIndex].g_flRapidPistolReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esSpecial[iIndex].g_flRefillPercentReward[iPos] = flGetClampedValue(key, "RefillPercentReward", "Refill Percent Reward", "Refill_Percent_Reward", "refillpercent", g_esSpecial[iIndex].g_flRefillPercentReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flReloadRateReward[iPos] = flGetClampedValue(key, "ReloadRateReward", "Reload Rate Reward", "Reload_Rate_Reward", "reloadrate", g_esSpecial[iIndex].g_flReloadRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flShockwaveRadiusReward[iPos] = flGetClampedValue(key, "ShockwaveRadiusReward", "Shockwave Radius Reward", "Shockwave_Radius_Reward", "shockwave", g_esSpecial[iIndex].g_flShockwaveRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flShoveDamageReward[iPos] = flGetClampedValue(key, "ShoveDamageReward", "Shove Damage Reward", "Shove_Damage_Reward", "shovedmg", g_esSpecial[iIndex].g_flShoveDamageReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flShoveRateReward[iPos] = flGetClampedValue(key, "ShoveRateReward", "Shove Rate Reward", "Shove_Rate_Reward", "shoverate", g_esSpecial[iIndex].g_flShoveRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flSledgehammerRoundsReward[iPos] = flGetClampedValue(key, "SledgehammerRoundsReward", "Sledgehammer Rounds Reward", "Sledgehammer_Rounds_Reward", "sledgehammer", g_esSpecial[iIndex].g_flSledgehammerRoundsReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecial[iIndex].g_flSpeedBoostReward[iPos] = flGetClampedValue(key, "SpeedBoostReward", "Speed Boost Reward", "Speed_Boost_Reward", "speedboost", g_esSpecial[iIndex].g_flSpeedBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flSupplierReward[iPos] = flGetClampedValue(key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esSpecial[iIndex].g_flSupplierReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_flSwingRateReward[iPos] = flGetClampedValue(key, "SwingRateReward", "Swing Rate Reward", "Swing_Rate_Reward", "swingrate", g_esSpecial[iIndex].g_flSwingRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecial[iIndex].g_iRewardEnabled[iPos] = iGetClampedValue(key, "RewardEnabled", "Reward Enabled", "Reward_Enabled", "renabled", g_esSpecial[iIndex].g_iRewardEnabled[iPos], sSet[iPos], -2, 2147483647);
						g_esSpecial[iIndex].g_iRewardBots[iPos] = iGetClampedValue(key, "RewardBots", "Reward Bots", "Reward_Bots", "rbots", g_esSpecial[iIndex].g_iRewardBots[iPos], sSet[iPos], -2, 2147483647);
						g_esSpecial[iIndex].g_iRewardEffect[iPos] = iGetClampedValue(key, "RewardEffect", "Reward Effect", "Reward_Effect", "effect", g_esSpecial[iIndex].g_iRewardEffect[iPos], sSet[iPos], -1, 15);
						g_esSpecial[iIndex].g_iRewardNotify[iPos] = iGetClampedValue(key, "RewardNotify", "Reward Notify", "Reward_Notify", "rnotify", g_esSpecial[iIndex].g_iRewardNotify[iPos], sSet[iPos], -1, 3);
						g_esSpecial[iIndex].g_iRewardVisual[iPos] = iGetClampedValue(key, "RewardVisual", "Reward Visual", "Reward_Visual", "visual", g_esSpecial[iIndex].g_iRewardVisual[iPos], sSet[iPos], -1, 127);
						g_esSpecial[iIndex].g_iAmmoBoostReward[iPos] = iGetClampedValue(key, "AmmoBoostReward", "Ammo Boost Reward", "Ammo_Boost_Reward", "ammoboost", g_esSpecial[iIndex].g_iAmmoBoostReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iAmmoRefillReward[iPos] = iGetClampedValue(key, "AmmoRefillReward", "Ammo Refill Reward", "Ammo_Refill_Reward", "ammorefill", g_esSpecial[iIndex].g_iAmmoRefillReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iAmmoRegenReward[iPos] = iGetClampedValue(key, "AmmoRegenReward", "Ammo Regen Reward", "Ammo_Regen_Reward", "ammoregen", g_esSpecial[iIndex].g_iAmmoRegenReward[iPos], sSet[iPos], -1, 99999);
						g_esSpecial[iIndex].g_iBlazeHealthReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esSpecial[iIndex].g_iBlazeHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iBloodDonorReward[iPos] = iGetClampedValue(key, "BloodDonorReward", "Blood Donor Reward", "Blood_Donor_Reward", "donor", g_esSpecial[iIndex].g_iBloodDonorReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iBunnyHopReward[iPos] = iGetClampedValue(key, "BunnyHopReward", "Bunny Hop Reward", "Bunny_Hop_Reward", "bhop", g_esSpecial[iIndex].g_iBunnyHopReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iBurstDoorsReward[iPos] = iGetClampedValue(key, "BurstDoorsReward", "Burst Doors Reward", "Burst_Doors_Reward", "burstdoors", g_esSpecial[iIndex].g_iBurstDoorsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iCleanKillsReward[iPos] = iGetClampedValue(key, "CleanKillsReward", "Clean Kills Reward", "Clean_Kills_Reward", "cleankills", g_esSpecial[iIndex].g_iCleanKillsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iClusterBombsReward[iPos] = iGetClampedValue(key, "ClusterBombsReward", "Cluster Bombs Reward", "Cluster_Bombs_Reward", "cluster", g_esSpecial[iIndex].g_iClusterBombsReward[iPos], sSet[iPos], -1, 5);
						g_esSpecial[iIndex].g_iEternalFlamesReward[iPos] = iGetClampedValue(key, "EternalFlamesReward", "Eternal Flames Reward", "Eternal_Flames_Reward", "eternal", g_esSpecial[iIndex].g_iEternalFlamesReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iFastRecoveryReward[iPos] = iGetClampedValue(key, "FastRecoveryReward", "Fast Recovery Reward", "Fast_Recovery_Reward", "fastrecovery", g_esSpecial[iIndex].g_iFastRecoveryReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iFriendlyFireReward[iPos] = iGetClampedValue(key, "FriendlyFireReward", "Friendly Fire Reward", "Friendly_Fire_Reward", "friendlyfire", g_esSpecial[iIndex].g_iFriendlyFireReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iGhostBulletsReward[iPos] = iGetClampedValue(key, "GhostBulletsReward", "Ghost Bullets Reward", "Ghost_Bullets_Reward", "ghost", g_esSpecial[iIndex].g_iGhostBulletsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iHealthRegenReward[iPos] = iGetClampedValue(key, "HealthRegenReward", "Health Regen Reward", "Health_Regen_Reward", "hpregen", g_esSpecial[iIndex].g_iHealthRegenReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iInfiniteAmmoReward[iPos] = iGetClampedValue(key, "InfiniteAmmoReward", "Infinite Ammo Reward", "Infinite_Ammo_Reward", "infammo", g_esSpecial[iIndex].g_iInfiniteAmmoReward[iPos], sSet[iPos], -1, 31);
						g_esSpecial[iIndex].g_iLadderActionsReward[iPos] = iGetClampedValue(key, "LadderActionsReward", "Ladder Actions Reward", "Ladder_Action_Reward", "ladderacts", g_esSpecial[iIndex].g_iLadderActionsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iLaserSightReward[iPos] = iGetClampedValue(key, "LaserSightReward", "Laser Sight Reward", "Laser_Sight_Reward", "lasersight", g_esSpecial[iIndex].g_iLaserSightReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iLifeLeechReward[iPos] = iGetClampedValue(key, "LifeLeechReward", "Life Leech Reward", "Life_Leech_Reward", "lifeleech", g_esSpecial[iIndex].g_iLifeLeechReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iMedicalCutsReward[iPos] = iGetClampedValue(key, "MedicalCutsReward", "Medical Cuts Reward", "Medical_Cuts_Reward", "medcuts", g_esSpecial[iIndex].g_iMedicalCutsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iMeleeRangeReward[iPos] = iGetClampedValue(key, "MeleeRangeReward", "Melee Range Reward", "Melee_Range_Reward", "meleerange", g_esSpecial[iIndex].g_iMeleeRangeReward[iPos], sSet[iPos], -1, 99999);
						g_esSpecial[iIndex].g_iMidairDashesReward[iPos] = iGetClampedValue(key, "MidairDashesReward", "Midair Dashes Reward", "Midair_Dashes_Reward", "middash", g_esSpecial[iIndex].g_iMidairDashesReward[iPos], sSet[iPos], -1, 99999);
						g_esSpecial[iIndex].g_iOverhealthReward[iPos] = iGetClampedValue(key, "OverhealthReward", "Overhealth Reward", "Overhealth_Reward", "overhealth", g_esSpecial[iIndex].g_iOverhealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iParticleEffectVisual[iPos] = iGetClampedValue(key, "ParticleEffectVisual", "Particle Effect Visual", "Particle_Effect_Visual", "particle", g_esSpecial[iIndex].g_iParticleEffectVisual[iPos], sSet[iPos], -1, 15);
						g_esSpecial[iIndex].g_iPrefsNotify[iPos] = iGetClampedValue(key, "PrefsNotify", "Prefs Notify", "Prefs_Notify", "pnotify", g_esSpecial[iIndex].g_iPrefsNotify[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iRecoilDampenerReward[iPos] = iGetClampedValue(key, "RecoilDampenerReward", "Recoil Dampener Reward", "Recoil_Dampener_Reward", "recoil", g_esSpecial[iIndex].g_iRecoilDampenerReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iRegenBurstsReward[iPos] = iGetClampedValue(key, "RegenBurstsReward", "Regen Bursts Reward", "Regen_Bursts_Reward", "regbursts", g_esSpecial[iIndex].g_iRegenBurstsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iRespawnLoadoutReward[iPos] = iGetClampedValue(key, "RespawnLoadoutReward", "Respawn Loadout Reward", "Respawn_Loadout_Reward", "resloadout", g_esSpecial[iIndex].g_iRespawnLoadoutReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iReviveHealthReward[iPos] = iGetClampedValue(key, "ReviveHealthReward", "Revive Health Reward", "Revive_Health_Reward", "revivehp", g_esSpecial[iIndex].g_iReviveHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iRiotGearReward[iPos] = iGetClampedValue(key, "RiotGearReward", "Riot Gear Reward", "Riot_Gear_Reward", "riotgear", g_esSpecial[iIndex].g_iRiotGearReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iSafetyBubbleReward[iPos] = iGetClampedValue(key, "SafetyBubbleReward", "Safety Bubble Reward", "Safety_Bubble_Reward", "safetybubble", g_esSpecial[iIndex].g_iSafetyBubbleReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iShareRewards[iPos] = iGetClampedValue(key, "ShareRewards", "Share Rewards", "Share_Rewards", "share", g_esSpecial[iIndex].g_iShareRewards[iPos], sSet[iPos], -1, 3);
						g_esSpecial[iIndex].g_iShovePenaltyReward[iPos] = iGetClampedValue(key, "ShovePenaltyReward", "Shove Penalty Reward", "Shove_Penalty_Reward", "shovepenalty", g_esSpecial[iIndex].g_iShovePenaltyReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iSpecialAmmoReward[iPos] = iGetClampedValue(key, "SpecialAmmoReward", "Special Ammo Reward", "Special_Ammo_Reward", "specammo", g_esSpecial[iIndex].g_iSpecialAmmoReward[iPos], sSet[iPos], -1, 3);
						g_esSpecial[iIndex].g_iStackRewards[iPos] = iGetClampedValue(key, "StackRewards", "Stack Rewards", "Stack_Rewards", "rstack", g_esSpecial[iIndex].g_iStackRewards[iPos], sSet[iPos], -1, 2147483647);
						g_esSpecial[iIndex].g_iStickyGrenadesReward[iPos] = iGetClampedValue(key, "StickyGrenadesReward", "Sticky Grenades Reward", "Sticky_Grenades_Reward", "sticky", g_esSpecial[iIndex].g_iStickyGrenadesReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iSyringeDartsReward[iPos] = iGetClampedValue(key, "SyringeDartsReward", "Syringe Darts Reward", "Syringe_Darts_Reward", "syringe", g_esSpecial[iIndex].g_iSyringeDartsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecial[iIndex].g_iThornsReward[iPos] = iGetClampedValue(key, "ThornsReward", "Thorns Reward", "Thorns_Reward", "thorns", g_esSpecial[iIndex].g_iThornsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecial[iIndex].g_iUsefulRewards[iPos] = iGetClampedValue(key, "UsefulRewards", "Useful Rewards", "Useful_Rewards", "useful", g_esSpecial[iIndex].g_iUsefulRewards[iPos], sSet[iPos], -1, 15);
						g_esSpecial[iIndex].g_iVoicePitchVisual[iPos] = iGetClampedValue(key, "VoicePitchVisual", "Voice Pitch Visual", "Voice_Pitch_Visual", "voicepitch", g_esSpecial[iIndex].g_iVoicePitchVisual[iPos], sSet[iPos], -1, 255);

						vGetConfigColors(sValue, sizeof sValue, sSet[iPos], ';');
						vGetStringValue(key, "BodyColorVisual", "Body Color Visual", "Body_Color_Visual", "bodycolor", iPos, g_esSpecial[iIndex].g_sBodyColorVisual, sizeof esSpecial::g_sBodyColorVisual, g_esSpecial[iIndex].g_sBodyColorVisual2, sizeof esSpecial::g_sBodyColorVisual2, g_esSpecial[iIndex].g_sBodyColorVisual3, sizeof esSpecial::g_sBodyColorVisual3, g_esSpecial[iIndex].g_sBodyColorVisual4, sizeof esSpecial::g_sBodyColorVisual4, sValue);
						vGetStringValue(key, "FallVoicelineReward", "Fall Voiceline Reward", "Fall_Voiceline_Reward", "fallvoice", iPos, g_esSpecial[iIndex].g_sFallVoicelineReward, sizeof esSpecial::g_sFallVoicelineReward, g_esSpecial[iIndex].g_sFallVoicelineReward2, sizeof esSpecial::g_sFallVoicelineReward2, g_esSpecial[iIndex].g_sFallVoicelineReward3, sizeof esSpecial::g_sFallVoicelineReward3, g_esSpecial[iIndex].g_sFallVoicelineReward4, sizeof esSpecial::g_sFallVoicelineReward4, sSet[iPos]);
						vGetStringValue(key, "GlowColorVisual", "Glow Color Visual", "Glow_Color_Visual", "glowcolor", iPos, g_esSpecial[iIndex].g_sOutlineColorVisual, sizeof esSpecial::g_sOutlineColorVisual, g_esSpecial[iIndex].g_sOutlineColorVisual2, sizeof esSpecial::g_sOutlineColorVisual2, g_esSpecial[iIndex].g_sOutlineColorVisual3, sizeof esSpecial::g_sOutlineColorVisual3, g_esSpecial[iIndex].g_sOutlineColorVisual4, sizeof esSpecial::g_sOutlineColorVisual4, sValue);
						vGetStringValue(key, "ItemReward", "Item Reward", "Item_Reward", "item", iPos, g_esSpecial[iIndex].g_sItemReward, sizeof esSpecial::g_sItemReward, g_esSpecial[iIndex].g_sItemReward2, sizeof esSpecial::g_sItemReward2, g_esSpecial[iIndex].g_sItemReward3, sizeof esSpecial::g_sItemReward3, g_esSpecial[iIndex].g_sItemReward4, sizeof esSpecial::g_sItemReward4, sValue);
						vGetStringValue(key, "LightColorVisual", "Light Color Visual", "Light_Color_Visual", "lightcolor", iPos, g_esSpecial[iIndex].g_sLightColorVisual, sizeof esSpecial::g_sLightColorVisual, g_esSpecial[iIndex].g_sLightColorVisual2, sizeof esSpecial::g_sLightColorVisual2, g_esSpecial[iIndex].g_sLightColorVisual3, sizeof esSpecial::g_sLightColorVisual3, g_esSpecial[iIndex].g_sLightColorVisual4, sizeof esSpecial::g_sLightColorVisual4, sValue);
						vGetStringValue(key, "LoopingVoicelineVisual", "Looping Voiceline Visual", "Looping_Voiceline_Visual", "loopvoice", iPos, g_esSpecial[iIndex].g_sLoopingVoicelineVisual, sizeof esSpecial::g_sLoopingVoicelineVisual, g_esSpecial[iIndex].g_sLoopingVoicelineVisual2, sizeof esSpecial::g_sLoopingVoicelineVisual2, g_esSpecial[iIndex].g_sLoopingVoicelineVisual3, sizeof esSpecial::g_sLoopingVoicelineVisual3, g_esSpecial[iIndex].g_sLoopingVoicelineVisual4, sizeof esSpecial::g_sLoopingVoicelineVisual4, sSet[iPos]);
						vGetStringValue(key, "ScreenColorVisual", "Screen Color Visual", "Screen_Color_Visual", "screencolor", iPos, g_esSpecial[iIndex].g_sScreenColorVisual, sizeof esSpecial::g_sScreenColorVisual, g_esSpecial[iIndex].g_sScreenColorVisual2, sizeof esSpecial::g_sScreenColorVisual2, g_esSpecial[iIndex].g_sScreenColorVisual3, sizeof esSpecial::g_sScreenColorVisual3, g_esSpecial[iIndex].g_sScreenColorVisual4, sizeof esSpecial::g_sScreenColorVisual4, sValue);
					}

					g_esSpecial[iIndex].g_iStackLimits[iPos] = iGetClampedValue(key, "StackLimits", "Stack Limits", "Stack_Limits", "limits", g_esSpecial[iIndex].g_iStackLimits[iPos], sSet[iPos], -1, 99999);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_GLOW, false))
			{
				if (StrEqual(key, "GlowColor", false) || StrEqual(key, "Glow Color", false) || StrEqual(key, "Glow_Color", false))
				{
					char sValue[64], sSet[3][4];
					vGetConfigColors(sValue, sizeof sValue, value);
					strcopy(g_esSpecial[iIndex].g_sGlowColor, sizeof esSpecial::g_sGlowColor, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_iGlowColor); iPos++)
					{
						g_esSpecial[iIndex].g_iGlowColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
					}
				}
				else if (StrEqual(key, "GlowRange", false) || StrEqual(key, "Glow Range", false) || StrEqual(key, "Glow_Range", false))
				{
					char sValue[50], sRange[2][7];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

					g_esSpecial[iIndex].g_iGlowMinRange = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, 99999) : g_esSpecial[iIndex].g_iGlowMinRange;
					g_esSpecial[iIndex].g_iGlowMaxRange = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, 99999) : g_esSpecial[iIndex].g_iGlowMaxRange;
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_HEALTH, false))
			{
				char sSettings[4][128];
				for (int iPos = 0; iPos < (sizeof g_sSpecialNames); iPos++)
				{
					vGetSpecialSettingNames(sSettings, sizeof sSettings[], "BaseHealth", "Base Health", "Base_Health", "basehp", iPos);
					g_esSpecial[iIndex].g_iBaseHealth[iPos] = iGetClampedValue(key, sSettings[0], sSettings[1], sSettings[2], sSettings[3], g_esSpecial[iIndex].g_iBaseHealth[iPos], value, -1, MT_MAXHEALTH);
					vGetSpecialSettingNames(sSettings, sizeof sSettings[], "ExtraHealth", "Extra Health", "Extra_Health", "extrahp", iPos);
					g_esSpecial[iIndex].g_iExtraHealth[iPos] = iGetClampedValue(key, sSettings[0], sSettings[1], sSettings[2], sSettings[3], g_esSpecial[iIndex].g_iExtraHealth[iPos], value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_BOSS, false))
			{
				char sValue[44], sSet[4][11];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esSpecial::g_iBossHealth); iPos++)
				{
					g_esSpecial[iIndex].g_iBossHealth[iPos] = iGetClampedValue(key, "BossHealthStages", "Boss Health Stages", "Boss_Health_Stages", "bosshpstages", g_esSpecial[iIndex].g_iBossHealth[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esSpecial[iIndex].g_iBossType[iPos] = iGetClampedValue(key, "BossTypes", "Boss Types", "Boss_Types", "bosstypes", g_esSpecial[iIndex].g_iBossType[iPos], sSet[iPos], -1, MT_MAXTYPES);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_COMBO, false))
			{
				if (StrEqual(key, "ComboTypeChance", false) || StrEqual(key, "Combo Type Chance", false) || StrEqual(key, "Combo_Type_Chance", false) || StrEqual(key, "typechance", false))
				{
					char sValue[42], sSet[7][6];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_flComboTypeChance); iPos++)
					{
						g_esSpecial[iIndex].g_flComboTypeChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esSpecial[iIndex].g_flComboTypeChance[iPos];
					}
				}
				else
				{
					char sValue[140], sSet[10][14];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_flComboChance); iPos++)
					{
						if (StrEqual(key, "ComboRadius", false) || StrEqual(key, "Combo Radius", false) || StrEqual(key, "Combo_Radius", false) || StrEqual(key, "radius", false))
						{
							char sRange[2][7], sSubset[14];
							strcopy(sSubset, sizeof sSubset, sSet[iPos]);
							ReplaceString(sSubset, sizeof sSubset, " ", "");
							ExplodeString(sSubset, ";", sRange, sizeof sRange, sizeof sRange[]);

							g_esSpecial[iIndex].g_flComboMinRadius[iPos] = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -200.0, 1.0) : g_esSpecial[iIndex].g_flComboMinRadius[iPos];
							g_esSpecial[iIndex].g_flComboMaxRadius[iPos] = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 200.0) : g_esSpecial[iIndex].g_flComboMaxRadius[iPos];
						}
						else
						{
							g_esSpecial[iIndex].g_flComboChance[iPos] = flGetClampedValue(key, "ComboChance", "Combo Chance", "Combo_Chance", "chance", g_esSpecial[iIndex].g_flComboChance[iPos], sSet[iPos], -1.0, 100.0);
							g_esSpecial[iIndex].g_iComboCooldown[iPos] = iGetClampedValue(key, "ComboCooldown", "Combo Cooldown", "Combo_Cooldown", "cooldown", g_esSpecial[iIndex].g_iComboCooldown[iPos], sSet[iPos], -1, 99999);
							g_esSpecial[iIndex].g_flComboDamage[iPos] = flGetClampedValue(key, "ComboDamage", "Combo Damage", "Combo_Damage", "damage", g_esSpecial[iIndex].g_flComboDamage[iPos], sSet[iPos], -1.0, 99999.0);
							g_esSpecial[iIndex].g_flComboDeathChance[iPos] = flGetClampedValue(key, "ComboDeathChance", "Combo Death Chance", "Combo_Death_Chance", "deathchance", g_esSpecial[iIndex].g_flComboDeathChance[iPos], sSet[iPos], -1.0, 100.0);
							g_esSpecial[iIndex].g_flComboDeathRange[iPos] = flGetClampedValue(key, "ComboDeathRange", "Combo Death Range", "Combo_Death_Range", "deathrange", g_esSpecial[iIndex].g_flComboDeathRange[iPos], sSet[iPos], -1.0, 99999.0);
							g_esSpecial[iIndex].g_flComboDelay[iPos] = flGetClampedValue(key, "ComboDelay", "Combo Delay", "Combo_Delay", "delay", g_esSpecial[iIndex].g_flComboDelay[iPos], sSet[iPos], -1.0, 99999.0);
							g_esSpecial[iIndex].g_flComboDuration[iPos] = flGetClampedValue(key, "ComboDuration", "Combo Duration", "Combo_Duration", "duration", g_esSpecial[iIndex].g_flComboDuration[iPos], sSet[iPos], -1.0, 99999.0);
							g_esSpecial[iIndex].g_flComboInterval[iPos] = flGetClampedValue(key, "ComboInterval", "Combo Interval", "Combo_Interval", "interval", g_esSpecial[iIndex].g_flComboInterval[iPos], sSet[iPos], -1.0, 99999.0);
							g_esSpecial[iIndex].g_flComboRange[iPos] = flGetClampedValue(key, "ComboRange", "Combo Range", "Combo_Range", "range", g_esSpecial[iIndex].g_flComboRange[iPos], sSet[iPos], -1.0, 99999.0);
							g_esSpecial[iIndex].g_flComboRangeChance[iPos] = flGetClampedValue(key, "ComboRangeChance", "Combo Range Chance", "Combo_Range_Chance", "rangechance", g_esSpecial[iIndex].g_flComboRangeChance[iPos], sSet[iPos], -1.0, 100.0);
							g_esSpecial[iIndex].g_iComboRangeCooldown[iPos] = iGetClampedValue(key, "ComboRangeCooldown", "Combo Range Cooldown", "Combo_Range_Cooldown", "rangecooldown", g_esSpecial[iIndex].g_iComboRangeCooldown[iPos], sSet[iPos], -1, 99999);
							g_esSpecial[iIndex].g_flComboRockChance[iPos] = flGetClampedValue(key, "ComboRockChance", "Combo Rock Chance", "Combo_Rock_Chance", "rockchance", g_esSpecial[iIndex].g_flComboRockChance[iPos], sSet[iPos], -1.0, 100.0);
							g_esSpecial[iIndex].g_iComboRockCooldown[iPos] = iGetClampedValue(key, "ComboRockCooldown", "Combo Rock Cooldown", "Combo_Rock_Cooldown", "rockcooldown", g_esSpecial[iIndex].g_iComboRockCooldown[iPos], sSet[iPos], -1, 99999);
							g_esSpecial[iIndex].g_flComboSpeed[iPos] = flGetClampedValue(key, "ComboSpeed", "Combo Speed", "Combo_Speed", "speed", g_esSpecial[iIndex].g_flComboSpeed[iPos], sSet[iPos], -1.0, 99999.0);
						}
					}
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_TRANSFORM, false))
			{
				if (StrEqual(key, "TransformTypes", false) || StrEqual(key, "Transform Types", false) || StrEqual(key, "Transform_Types", false) || StrEqual(key, "transtypes", false))
				{
					char sValue[50], sSet[10][5];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_iTransformType); iPos++)
					{
						g_esSpecial[iIndex].g_iTransformType[iPos] = (sSet[iPos][0] != '\0') ? iClamp(StringToInt(sSet[iPos]), -1, MT_MAXTYPES) : g_esSpecial[iIndex].g_iTransformType[iPos];
					}
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_PROPS, false))
			{
				char sValue[64], sSet[4][4];
				vGetConfigColors(sValue, sizeof sValue, value);
				vSaveConfigColors(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esSpecial[iIndex].g_sRockColor, sizeof esSpecial::g_sRockColor, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);

				for (int iPos = 0; iPos < (sizeof esSpecial::g_iRockColor); iPos++)
				{
					g_esSpecial[iIndex].g_iRockColor[iPos] = iGetClampedValue(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esSpecial[iIndex].g_iRockColor[iPos], sSet[iPos], -1, 255);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_PARTICLES, false))
			{
				if (StrEqual(key, "BodyChance", false) || StrEqual(key, "Body Chance", false) || StrEqual(key, "Body_Chance", false) || StrEqual(key, "bchance", false))
				{
					char sValue[54], sSet[9][6];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_flBodyChance); iPos++)
					{
						g_esSpecial[iIndex].g_flBodyChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esSpecial[iIndex].g_flBodyChance[iPos];
					}
				}
				else if (StrEqual(key, "RockChance", false) || StrEqual(key, "Rock Chance", false) || StrEqual(key, "Rock_Chance", false) || StrEqual(key, "rchance", false))
				{
					char sValue[54], sSet[9][6];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esSpecial::g_flRockChance); iPos++)
					{
						g_esSpecial[iIndex].g_flRockChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esSpecial[iIndex].g_flRockChance[iPos];
					}
				}
			}
		}

		if (StrContains(specsection, MT_CONFIG_SECTION_COMMON, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_WITCH, false) != -1 || StrEqual(specsection, MT_CONFIG_SECTION_MOB, false) || StrEqual(specsection, MT_CONFIG_SECTION_INFECTED, false) || StrContains(specsection, MT_CONFIG_SECTION_INFECTED2, false) != -1)
		{
			g_esHorde[iIndex].g_iMobVariants = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "MobVariants", "Mob Variants", "Mob_Variants", "mobvariants	", g_esHorde[iIndex].g_iMobVariants, value, -1, 3);
			g_esHorde[iIndex].g_flCommonBioChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonBioChance", "Common Bio Chance", "Common_Bio_Chance", "commbiochance", g_esHorde[iIndex].g_flCommonBioChance, value, -1.0, 100.0);
			g_esHorde[iIndex].g_flCommonChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonChance", "Common Chance", "Common_Chance", "commchance", g_esHorde[iIndex].g_flCommonChance, value, -1.0, 100.0);
			g_esHorde[iIndex].g_flCommonDamagePoints = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonDamagePoints", "Common Damage Points", "Common_Damage_Points", "commdmgpoints", g_esHorde[iIndex].g_flCommonDamagePoints, value, -1.0, float(MT_MAXHEALTH));
			g_esHorde[iIndex].g_flCommonDeathPoints = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonDeathPoints", "Common Death Points", "Common_Death_Points", "commdeathpoints", g_esHorde[iIndex].g_flCommonDeathPoints, value, -1.0, float(MT_MAXHEALTH));
			g_esHorde[iIndex].g_flCommonGoal = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonGoal", "Common Goal", "Common_Goal", "commgoal", g_esHorde[iIndex].g_flCommonGoal, value, -1.0, float(MT_MAXHEALTH));
			g_esHorde[iIndex].g_iCommonVariant = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonVariant", "Common Variant", "Common_Variant", "commvariant", g_esHorde[iIndex].g_iCommonVariant, value, -1, 255);
			g_esHorde[iIndex].g_flWitchChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchChance", "Witch Chance", "Witch_Chance", "witchchance", g_esHorde[iIndex].g_flWitchChance, value, -1.0, 100.0);
			g_esHorde[iIndex].g_iWitchFilter = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchFilter", "Witch Filter", "Witch_Filter", "witchfilter", g_esHorde[iIndex].g_iWitchFilter, value, -1, 511);
			g_esHorde[iIndex].g_iWitchMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchMode", "Witch Mode", "Witch_Mode", "witchmode", g_esHorde[iIndex].g_iWitchMode, value, -1, 1);
			g_esHorde[iIndex].g_flWitchMutateChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchMutateChance", "Witch Mutate Chance", "Witch_Mutate_Chance", "witchmutatechance", g_esHorde[iIndex].g_flWitchMutateChance, value, -1.0, 100.0);
			g_esHorde[iIndex].g_flWitchRange = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchRange", "Witch Range", "Witch_Range", "witchrange", g_esHorde[iIndex].g_flWitchRange, value, -1.0, 99999.0);
			g_esHorde[iIndex].g_iWitchTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchTypes", "Witch Types", "Witch_Types", "witchtypes", g_esHorde[iIndex].g_iWitchTypes, value, -1, 7);
			g_esHorde[iIndex].g_iGlowEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowEnabled", "Glow Enabled", "Glow_Enabled", "genabled", g_esHorde[iIndex].g_iGlowEnabled, value, -1, 1);
			g_esHorde[iIndex].g_iGlowFlashing = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowFlashing", "Glow Flashing", "Glow_Flashing", "flashing", g_esHorde[iIndex].g_iGlowFlashing, value, -1, 1);
			g_esHorde[iIndex].g_iGlowType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowType", "Glow Type", "Glow_Type", "type", g_esHorde[iIndex].g_iGlowType, value, -1, 1);
			g_esHorde[iIndex].g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esHorde[iIndex].g_iDisplayHealth, value, -1, 11);
			g_esHorde[iIndex].g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esHorde[iIndex].g_iDisplayHealthType, value, -1, 2);
			g_esHorde[iIndex].g_iBodyEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "BodyEffects", "Body Effects", "Body_Effects", "body", g_esHorde[iIndex].g_iBodyEffects, value, -1, 127);

			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esHorde[iIndex].g_sHealthCharacters, sizeof esHorde::g_sHealthCharacters, value);

			if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
			{
				if (StrEqual(key, "SkinColor", false) || StrEqual(key, "Skin Color", false) || StrEqual(key, "Skin_Color", false) || StrEqual(key, "skin", false))
				{
					char sValue[64], sSet[4][4];
					vGetConfigColors(sValue, sizeof sValue, value);
					strcopy(g_esHorde[iIndex].g_sSkinColor, sizeof esHorde::g_sSkinColor, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esHorde::g_iSkinColor); iPos++)
					{
						g_esHorde[iIndex].g_iSkinColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
					}
				}
				else if (StrContains(key, "Name", false) != -1)
				{
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonName", "Common Name", "Common_Name", "commname", g_esHorde[iIndex].g_sCommonName, sizeof esHorde::g_sCommonName, value);
					vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchName", "Witch Name", "Witch_Name", "witchname", g_esHorde[iIndex].g_sWitchName, sizeof esHorde::g_sWitchName, value);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_GLOW, false))
			{
				if (StrEqual(key, "GlowColor", false) || StrEqual(key, "Glow Color", false) || StrEqual(key, "Glow_Color", false))
				{
					char sValue[64], sSet[3][4];
					vGetConfigColors(sValue, sizeof sValue, value);
					strcopy(g_esHorde[iIndex].g_sGlowColor, sizeof esHorde::g_sGlowColor, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esHorde::g_iGlowColor); iPos++)
					{
						g_esHorde[iIndex].g_iGlowColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
					}
				}
				else if (StrEqual(key, "GlowRange", false) || StrEqual(key, "Glow Range", false) || StrEqual(key, "Glow_Range", false))
				{
					char sValue[50], sRange[2][7];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

					g_esHorde[iIndex].g_iGlowMinRange = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, 99999) : g_esHorde[iIndex].g_iGlowMinRange;
					g_esHorde[iIndex].g_iGlowMaxRange = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, 99999) : g_esHorde[iIndex].g_iGlowMaxRange;
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_PARTICLES, false))
			{
				if (StrEqual(key, "BodyChance", false) || StrEqual(key, "Body Chance", false) || StrEqual(key, "Body_Chance", false) || StrEqual(key, "bchance", false))
				{
					char sValue[54], sSet[9][6];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esHorde::g_flBodyChance); iPos++)
					{
						g_esHorde[iIndex].g_flBodyChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esHorde[iIndex].g_flBodyChance[iPos];
					}
				}
			}
		}

		vConfigsLoadedForward(subsection, key, value, iIndex, -1, mode, true, specsection);
	}
}

void vReadSpecificSettings(int mode, const char[] section, const char[] subsection, const char[] specsection, const char[] key, const char[] value)
{
	if (StrEqual(section, MT_CONFIG_SECTION_SETTINGS, false) || StrEqual(section, MT_CONFIG_SECTION_SETTINGS2, false) || StrEqual(section, MT_CONFIG_SECTION_SETTINGS3, false) || StrEqual(section, MT_CONFIG_SECTION_SETTINGS4, false))
	{
		if (StrContains(specsection, MT_CONFIG_SECTION_NICK, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_ROCHELLE, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_ELLIS, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_COACH, false) != -1
			|| StrContains(specsection, MT_CONFIG_SECTION_BILL, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_ZOEY, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_FRANCIS, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_LOUIS, false) != -1
			|| StrContains(specsection, MT_CONFIG_SECTION_WEAPON, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_SMOKER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_BOOMER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_HUNTER, false) != -1
			|| StrContains(specsection, MT_CONFIG_SECTION_SPITTER, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_JOCKEY, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_CHARGER, false) != -1 || StrEqual(specsection, MT_CONFIG_SECTION_SPECIAL, false)
			|| StrContains(specsection, MT_CONFIG_SECTION_SPECIAL2, false) != -1 || StrEqual(specsection, MT_CONFIG_SECTION_INFECTED, false) || StrContains(specsection, MT_CONFIG_SECTION_INFECTED2, false) != -1)
		{
			g_esSpecific.g_iSpecialTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialTypes", "Special Types", "Special_Types", "spectypes", g_esSpecific.g_iSpecialTypes, value, -1, 63);
			g_esSpecific.g_iSpecialTypes = (g_esSpecific.g_iSpecialTypes > 0) ? iGetSpecialTypes(g_esSpecific.g_iSpecialTypes, specsection) : 0;
			g_esSpecific.g_iDeathRevert = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "DeathRevert", "Death Revert", "Death_Revert", "revert", g_esSpecific.g_iDeathRevert, value, -1, 1);
			g_esSpecific.g_iFinalesOnly = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "FinalesOnly", "Finales Only", "Finales_Only", "finale", g_esSpecific.g_iFinalesOnly, value, -1, 4);
			g_esSpecific.g_iRequiresHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "RequiresHumans", "Requires Humans", "Requires_Humans", "hrequire", g_esSpecific.g_iRequiresHumans, value, -1, 32);
			g_esSpecific.g_flSpecialChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialChance", "Special Chance", "Special_Chance", "chance", g_esSpecific.g_flSpecialChance, value, -1.0, 100.0);
			g_esSpecific.g_iSpecialNote = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialNote", "Special Note", "Special_Note", "note", g_esSpecific.g_iSpecialNote, value, -1, 1);
			g_esSpecific.g_iSpecialModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialModel", "Special Model", "Special_Model", "model", g_esSpecific.g_iSpecialModel, value, -1, 3);
			g_esSpecific.g_flBurnDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurnDuration", "Burn Duration", "Burn_Duration", "burndur", g_esSpecific.g_flBurnDuration, value, -1.0, 99999.0);
			g_esSpecific.g_flBurntSkin = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurntSkin", "Burnt Skin", "Burnt_Skin", "burnt", g_esSpecific.g_flBurntSkin, value, -2.0, 1.0);
			g_esSpecific.g_iCycleTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CycleTypes", "Cycle Types", "Cycle_Types", "cycle", g_esSpecific.g_iCycleTypes, value, -1, 4);
			g_esSpecific.g_iSpawnEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpawnEnabled", "Spawn Enabled", "Spawn_Enabled", "spawn", g_esSpecific.g_iSpawnEnabled, value, -1, 1);
			g_esSpecific.g_iAnnounceArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceArrival", "Announce Arrival", "Announce_Arrival", "arrival", g_esSpecific.g_iAnnounceArrival, value, -1, 31);
			g_esSpecific.g_iAnnounceDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceDeath", "Announce Death", "Announce_Death", "death", g_esSpecific.g_iAnnounceDeath, value, -1, 2);
			g_esSpecific.g_iAnnounceKill = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceKill", "Announce Kill", "Announce_Kill", "kill", g_esSpecific.g_iAnnounceKill, value, -1, 1);
			g_esSpecific.g_iArrivalMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalMessage", "Arrival Message", "Arrival_Message", "arrivalmsg", g_esSpecific.g_iArrivalMessage, value, -1, 1023);
			g_esSpecific.g_iArrivalSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalSound", "Arrival Sound", "Arrival_Sound", "arrivalsnd", g_esSpecific.g_iArrivalSound, value, -1, 1);
			g_esSpecific.g_iDeathDetails = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathDetails", "Death Details", "Death_Details", "deathdets", g_esSpecific.g_iDeathDetails, value, -1, 5);
			g_esSpecific.g_iDeathMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathMessage", "Death Message", "Death_Message", "deathmsg", g_esSpecific.g_iDeathMessage, value, -1, 1023);
			g_esSpecific.g_iDeathSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathSound", "Death Sound", "Death_Sound", "deathsnd", g_esSpecific.g_iDeathSound, value, -1, 1);
			g_esSpecific.g_iKillMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "KillMessage", "Kill Message", "Kill_Message", "killmsg", g_esSpecific.g_iKillMessage, value, -1, 1023);
			g_esSpecific.g_iVocalizeArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeArrival", "Vocalize Arrival", "Vocalize_Arrival", "arrivalvoc", g_esSpecific.g_iVocalizeArrival, value, -1, 1);
			g_esSpecific.g_iVocalizeDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeDeath", "Vocalize Death", "Vocalize_Death", "deathvoc", g_esSpecific.g_iVocalizeDeath, value, -1, 1);
			g_esSpecific.g_flArmorPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorPercentage", "Armor Percentage", "Armor_Percentage", "armorpercent", g_esSpecific.g_flArmorPercentage, value, -1.0, 1.0);
			g_esSpecific.g_flArmorResistance[0] = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esSpecific.g_flArmorResistance[0], value, -1.0, 1.0);
			g_esSpecific.g_flShieldPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldPercentage", "Shield Percentage", "Shield_Percentage", "shieldpercent", g_esSpecific.g_flShieldPercentage, value, -1.0, 1.0);
			g_esSpecific.g_flShieldRate = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldRate", "Shield Rate", "Shield_Rate", "shieldrate", g_esSpecific.g_flShieldRate, value, -1.0, 1.0);
			g_esSpecific.g_flPassiveDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveDelay", "Passive Delay", "Passive_Delay", "passdelay", g_esSpecific.g_flPassiveDelay, value, -1.0, 99999.0);
			g_esSpecific.g_iPassiveHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveHealth", "Passive Health", "Passive_Health", "passhp", g_esSpecific.g_iPassiveHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
			g_esSpecific.g_flPassiveInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveInterval", "Passive Interval", "Passive_Interval", "passint", g_esSpecific.g_flPassiveInterval, value, -1.0, 99999.0);
			g_esSpecific.g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esSpecific.g_iDisplayHealth, value, -1, 11);
			g_esSpecific.g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esSpecific.g_iDisplayHealthType, value, -1, 2);
			g_esSpecific.g_flHealPercentMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthPercentageMultiplier", "Health Percentage Multiplier", "Health_Percentage_Multiplier", "hpmulti", g_esSpecific.g_flHealPercentMultiplier, value, -1.0, 99999.0);
			g_esSpecific.g_iHumanMultiplierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HumanMultiplierMode", "Human Multiplier Mode", "Human_Multiplier_Mode", "humanmultimode", g_esSpecific.g_iHumanMultiplierMode, value, -1, 1);
			g_esSpecific.g_iMinimumHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MinimumHumans", "Minimum Humans", "Minimum_Humans", "minhumans", g_esSpecific.g_iMinimumHumans, value, -1, 32);
			g_esSpecific.g_iMultiplyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MultiplyHealth", "Multiply Health", "Multiply_Health", "multihp", g_esSpecific.g_iMultiplyHealth, value, -1, 3);
			g_esSpecific.g_iSpawnProtection = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "SpawnProtection", "Spawn Protection", "Spawn_Protection", "protect", g_esSpecific.g_iSpawnProtection, value, -1, 3);
			g_esSpecific.g_flArmorDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorDuration", "Armor Duration", "Armor_Duration", "armorduration", g_esSpecific.g_flArmorDuration, value, -1.0, 99999.0);
			g_esSpecific.g_flArmorResistance[1] = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esSpecific.g_flArmorResistance[1], value, -1.0, 1.0);
			g_esSpecific.g_flShieldDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldDuration", "Shield Duration", "Shield_Duration", "shieldduration", g_esSpecific.g_flShieldDuration, value, -1.0, 99999.0);
			g_esSpecific.g_flShieldResistance = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldResistance", "Shield Resistance", "Shield_Resistance", "shieldres", g_esSpecific.g_flShieldResistance, value, -1.0, 1.0);
			g_esSpecific.g_flAttackInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "AttackInterval", "Attack Interval", "Attack_Interval", "attack", g_esSpecific.g_flAttackInterval, value, -1.0, 99999.0);
			g_esSpecific.g_iAutoHop = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "BunnyHop", "Bunny Hop", "Bunny_Hop", "bhop", g_esSpecific.g_iAutoHop, value, -1, 1);
			g_esSpecific.g_flClawDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ClawDamage", "Claw Damage", "Claw_Damage", "claw", g_esSpecific.g_flClawDamage, value, -2.0, 99999.0);
			g_esSpecific.g_flHittableDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "HittableDamage", "Hittable Damage", "Hittable_Damage", "hittable", g_esSpecific.g_flHittableDamage, value, -2.0, 99999.0);
			g_esSpecific.g_flIncapDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IncapDamageMultiplier", "Incap Damage Multiplier", "Incap_Damage_Multiplier", "incapdmgmulti", g_esSpecific.g_flIncapDamageMultiplier, value, -1.0, 99999.0);
			g_esSpecific.g_iIntangibleBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IntangibleBody", "Intangible Body", "Intangible_Body", "intangible", g_esSpecific.g_iIntangibleBody, value, -1, 1);
			g_esSpecific.g_iMeleeHitMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitMode", "Melee Hit Mode", "Melee_Hit_Mode", "meleehit", g_esSpecific.g_iMeleeHitMode, value, -1, 2);
			g_esSpecific.g_flMeleeHitValue = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitValue", "Melee Hit Value", "Melee_Hit_Value", "meleevalue", g_esSpecific.g_flMeleeHitValue, value, -1.0, 99999.0);
			g_esSpecific.g_flPinDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PinDamage", "Pin Damage", "Pin_Damage", "pindmg", g_esSpecific.g_flPinDamage, value, -2.0, 99999.0);
			g_esSpecific.g_flRunSpeed = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RunSpeed", "Run Speed", "Run_Speed", "speed", g_esSpecific.g_flRunSpeed, value, -1.0, 99.0);
			g_esSpecific.g_flSpecialInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SpecialInterval", "Special Interval", "Special_Interval", "specint", g_esSpecific.g_flSpecialInterval, value, -1.0, 99999.0);
			g_esSpecific.g_iThrowRock = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowRock", "Throw Rock", "Throw_Rock", "throwrock", g_esSpecific.g_iThrowRock, value, -1, 1);
			g_esSpecific.g_iBulletImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "BulletImmunity", "Bullet Immunity", "Bullet_Immunity", "bullet", g_esSpecific.g_iBulletImmunity, value, -1, 1);
			g_esSpecific.g_iExplosiveImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "ExplosiveImmunity", "Explosive Immunity", "Explosive_Immunity", "explosive", g_esSpecific.g_iExplosiveImmunity, value, -1, 1);
			g_esSpecific.g_iFireImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "FireImmunity", "Fire Immunity", "Fire_Immunity", "fire", g_esSpecific.g_iFireImmunity, value, -1, 1);
			g_esSpecific.g_iHittableImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "HittableImmunity", "Hittable Immunity", "Hittable_Immunity", "hittable", g_esSpecific.g_iHittableImmunity, value, -1, 1);
			g_esSpecific.g_iMeleeImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "MeleeImmunity", "Melee Immunity", "Melee_Immunity", "melee", g_esSpecific.g_iMeleeImmunity, value, -1, 1);
			g_esSpecific.g_iVomitImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "VomitImmunity", "Vomit Immunity", "Vomit_Immunity", "vomit", g_esSpecific.g_iVomitImmunity, value, -1, 1);

			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorCharacters", "Armor Characters", "Armor_Characters", "armorchars", g_esSpecific.g_sArmorCharacters, sizeof esSpecific::g_sArmorCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esSpecific.g_sHealthCharacters, sizeof esSpecific::g_sHealthCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldCharacters", "Shield Characters", "Shield_Characters", "shieldchars", g_esSpecific.g_sShieldCharacters, sizeof esSpecific::g_sShieldCharacters, value);

			if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
			{
				if (StrEqual(key, "TypeRange", false) || StrEqual(key, "Type Range", false) || StrEqual(key, "Type_Range", false) || StrEqual(key, "types", false))
				{
					char sValue[10], sRange[2][5];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

					g_esSpecific.g_iMinType = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, MT_MAXTYPES) : g_esSpecific.g_iMinType;
					g_esSpecific.g_iMaxType = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, MT_MAXTYPES) : g_esSpecific.g_iMaxType;
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_CLASSES, false))
			{
				if (g_esGeneral.g_alClassKeys[0] != null)
				{
					g_esGeneral.g_alClassKeys[0].PushString(key);
				}

				if (g_esGeneral.g_alClassKeys[1] != null)
				{
					g_esGeneral.g_alClassKeys[1].PushString(value);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_SURVIVORS, false))
			{
				char sSpecSection[32];
				for (int iIndex = 0; iIndex < MT_MAXSURVIVORS; iIndex++)
				{
					switch (iIndex)
					{
						case 0: strcopy(sSpecSection, sizeof sSpecSection, (g_bSecondGame ? MT_CONFIG_SECTION_NICK : MT_CONFIG_SECTION_BILL));
						case 1: strcopy(sSpecSection, sizeof sSpecSection, (g_bSecondGame ? MT_CONFIG_SECTION_ROCHELLE : MT_CONFIG_SECTION_ZOEY));
						case 2: strcopy(sSpecSection, sizeof sSpecSection, (g_bSecondGame ? MT_CONFIG_SECTION_COACH : MT_CONFIG_SECTION_FRANCIS));
						case 3: strcopy(sSpecSection, sizeof sSpecSection, (g_bSecondGame ? MT_CONFIG_SECTION_ELLIS : MT_CONFIG_SECTION_LOUIS));
						case 4: strcopy(sSpecSection, sizeof sSpecSection, MT_CONFIG_SECTION_BILL);
						case 5: strcopy(sSpecSection, sizeof sSpecSection, MT_CONFIG_SECTION_ZOEY);
						case 6: strcopy(sSpecSection, sizeof sSpecSection, MT_CONFIG_SECTION_FRANCIS);
						case 7: strcopy(sSpecSection, sizeof sSpecSection, MT_CONFIG_SECTION_LOUIS);
					}

					if (StrContains(specsection, sSpecSection, false) != -1)
					{
						g_esSurvivor[iIndex].g_flCarrierChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierChance", "Carrier Chance", "Carrier_Chance", "cachance", g_esSurvivor[iIndex].g_flCarrierChance, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flCarrierDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierDamageMultiplier", "Carrier Damage Multiplier", "Carrier_Damage_Multiplier", "cadmgmulti", g_esSurvivor[iIndex].g_flCarrierDamageMultiplier, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flCarrierDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierDelay", "Carrier Delay", "Carrier_Delay", "cadelay", g_esSurvivor[iIndex].g_flCarrierDelay, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flCarrierHealthMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierHealthMultiplier", "Carrier Health Multiplier", "Carrier_Health_Multiplier", "cahpmulti", g_esSurvivor[iIndex].g_flCarrierHealthMultiplier, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flCarrierVoiceChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoiceChance", "Carrier Voice Chance", "Carrier_Voice_Chance", "cavoicechance", g_esSurvivor[iIndex].g_flCarrierVoiceChance, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flCarrierVoiceInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoiceInterval", "Carrier Voice Interval", "Carrier_Voice_Interval", "cavoiceint", g_esSurvivor[iIndex].g_flCarrierVoiceInterval, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_iCarrierEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierEnabled", "Carrier Enabled", "Carrier_Enabled", "caenabled", g_esSurvivor[iIndex].g_iCarrierEnabled, value, -1, 1);
						g_esSurvivor[iIndex].g_iCarrierBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBots", "Carrier Bots", "Carrier_Bots", "cabots", g_esSurvivor[iIndex].g_iCarrierBots, value, -1, 1);
						g_esSurvivor[iIndex].g_iCarrierBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBody", "Carrier Body", "Carrier_Body", "cabody", g_esSurvivor[iIndex].g_iCarrierBody, value, -1, 1);
						g_esSurvivor[iIndex].g_iCarrierCleanse = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierCleanse", "Carrier Cleanse", "Carrier_Cleanse", "cacleanse", g_esSurvivor[iIndex].g_iCarrierCleanse, value, -1, 1);
						g_esSurvivor[iIndex].g_iCarrierFilter = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierFilter", "Carrier Filter", "Carrier_Filter", "cafilter", g_esSurvivor[iIndex].g_iCarrierFilter, value, -1, 127);
						g_esSurvivor[iIndex].g_iCarrierInfection = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierInfection", "Carrier Infection", "Carrier_Infection", "cainfect", g_esSurvivor[iIndex].g_iCarrierInfection, value, -1, 511);
						g_esSurvivor[iIndex].g_iCarrierMix = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierMix", "Carrier Mix", "Carrier_Mix", "camix", g_esSurvivor[iIndex].g_iCarrierMix, value, -1, 1);
						g_esSurvivor[iIndex].g_iCarrierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierMode", "Carrier Mode", "Carrier_Mode", "camode", g_esSurvivor[iIndex].g_iCarrierMode, value, -1, 6);
						g_esSurvivor[iIndex].g_iCarrierTeleport = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierTeleport", "Carrier Teleport", "Carrier_Teleport", "cateleport", g_esSurvivor[iIndex].g_iCarrierTeleport, value, -1, 1);
						g_esSurvivor[iIndex].g_iCarrierVoice = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoice", "Carrier Voice", "Carrier_Voice", "cavoice", g_esSurvivor[iIndex].g_iCarrierVoice, value, -1, 1);
						g_esSurvivor[iIndex].g_flActionDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ActionDurationPassive", "Action Duration Passive", "Action_Duration_Passive", "actionduration", g_esSurvivor[iIndex].g_flActionDurationPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flAdrenalineTimePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AdrenalineTimePassive", "Adrenaline Time Passive", "Adrenaline_Time_Passive", "adrenaline", g_esSurvivor[iIndex].g_flAdrenalineTimePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flAttackBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AttackBoostPassive", "Attack Boost Passive", "Attack_Boost_Passive", "attackboost", g_esSurvivor[iIndex].g_flAttackBoostPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flDamageBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageBoostPassive", "Damage Boost Passive", "Damage_Boost_Passive", "dmgboost", g_esSurvivor[iIndex].g_flDamageBoostPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flDamageResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageResistancePassive", "Damage Resistance Passive", "Damage_Resistance_Passive", "dmgres", g_esSurvivor[iIndex].g_flDamageResistancePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flDopamineRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DopamineRadiusPassive", "Dopamine Radius Passive", "Dopamine_Radius_Passive", "dopamine", g_esSurvivor[iIndex].g_flDopamineRadiusPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flFireRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FireRatePassive", "Fire Rate Passive", "Fire_Rate_Passive", "firerate", g_esSurvivor[iIndex].g_flFireRatePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flGrenadeLauncherPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GrenadeLauncherPassive", "Grenade Launcher Passive", "Grenade_Launcher_Passive", "grenade", g_esSurvivor[iIndex].g_flGrenadeLauncherPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flHealPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealPercentPassive", "Heal Percent Passive", "Heal_Percent_Passive", "healpercent", g_esSurvivor[iIndex].g_flHealPercentPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flHealthcareRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthcareRadiusPassive", "Healthcare Radius Passive", "Healthcare_Radius_Passive", "healthcare", g_esSurvivor[iIndex].g_flHealthcareRadiusPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flHeartbeatPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HeartbeatPassive", "Heartbeat Passive", "Heartbeat_Passive", "heartbeat", g_esSurvivor[iIndex].g_flHeartbeatPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flHollowpointAmmoPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HollowpointAmmoPassive", "Hollowpoint Ammo Passive", "Hollowpoint_Ammo_Passive", "hollowpoint", g_esSurvivor[iIndex].g_flHollowpointAmmoPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flJumpHeightPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "JumpHeightPassive", "Jump Height Passive", "Jump_Height_Passive", "jumpheight", g_esSurvivor[iIndex].g_flJumpHeightPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flLadyKillerPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadyKillerPassive", "Lady Killer Passive", "Lady_Killer_Passive", "ladykiller", g_esSurvivor[iIndex].g_flLadyKillerPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flLuckyBulletPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LuckyBulletPassive", "Lucky Bullet Passive", "Lucky_Bullet_Passive", "luckybullet", g_esSurvivor[iIndex].g_flLuckyBulletPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flMotivationRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MotivationRadiusPassive", "Motivation Radius Passive", "Motivation_Radius_Passive", "motivation", g_esSurvivor[iIndex].g_flMotivationRadiusPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flOverdoseRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverdoseRadiusPassive", "Overdose Radius Passive", "Overdose_Radius_Passive", "overdose", g_esSurvivor[iIndex].g_flOverdoseRadiusPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flPipeBombDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PipebombDurationPassive", "Pipebomb Duration Passive", "Pipebomb_Duration_Passive", "pipeduration", g_esSurvivor[iIndex].g_flPipeBombDurationPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flPunchResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PunchResistancePassive", "Punch Resistance Passive", "Punch_Resistance_Passive", "punchres", g_esSurvivor[iIndex].g_flPunchResistancePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flRapidPistolPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RapidPistolPassive", "Rapid Pistol Passive", "Rapid_Pistol_Passive", "rapidpistol", g_esSurvivor[iIndex].g_flRapidPistolPassive, value, -1.0, 1.0);
						g_esSurvivor[iIndex].g_flRefillPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RefillPercentPassive", "Refill Percent Passive", "Refill_Percent_Passive", "refillpercent", g_esSurvivor[iIndex].g_flRefillPercentPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flReloadRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReloadRatePassive", "Reload Rate Passive", "Reload_Rate_Passive", "reloadrate", g_esSurvivor[iIndex].g_flReloadRatePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flShockwaveRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShockwaveRadiusPassive", "Shockwave Radius Passive", "Shockwave_Radius_Passive", "shockwave", g_esSurvivor[iIndex].g_flShockwaveRadiusPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flShoveDamagePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveDamagePassive", "Shove Damage Passive", "Shove_Damage_Passive", "shovedmg", g_esSurvivor[iIndex].g_flShoveDamagePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flShoveRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveRatePassive", "Shove Rate Passive", "Shove_Rate_Passive", "shoverate", g_esSurvivor[iIndex].g_flShoveRatePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flSledgehammerRoundsPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SledgehammerRoundsPassive", "Sledgehammer Rounds Passive", "Sledgehammer_Rounds_Passive", "sledgehammer", g_esSurvivor[iIndex].g_flSledgehammerRoundsPassive, value, -1.0, 100.0);
						g_esSurvivor[iIndex].g_flSpeedBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpeedBoostPassive", "Speed Boost Passive", "Speed_Boost_Passive", "speedboost", g_esSurvivor[iIndex].g_flSpeedBoostPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flSupplierPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esSurvivor[iIndex].g_flSupplierPassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_flSwingRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SwingRatePassive", "Swing Rate Passive", "Swing_Rate_Passive", "swingrate", g_esSurvivor[iIndex].g_flSwingRatePassive, value, -1.0, 99999.0);
						g_esSurvivor[iIndex].g_iPassiveEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveEnabled", "Passive Enabled", "Passive_Enabled", "psenabled", g_esSurvivor[iIndex].g_iPassiveEnabled, value, -2, 2147483647);
						g_esSurvivor[iIndex].g_iPassiveBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveBots", "Passive Bots", "Passive_Bots", "psbots", g_esSurvivor[iIndex].g_iPassiveBots, value, -2, 2147483647);
						g_esSurvivor[iIndex].g_iPassiveNotify = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveNotify", "Passive Notify", "Passive_Notify", "psnotify", g_esSurvivor[iIndex].g_iPassiveNotify, value, -1, 1);
						g_esSurvivor[iIndex].g_iAmmoBoostPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoBoostPassive", "Ammo Boost Passive", "Ammo_Boost_Passive", "ammoboost", g_esSurvivor[iIndex].g_iAmmoBoostPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iAmmoRefillPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRefillPassive", "Ammo Refill Passive", "Ammo_Refill_Passive", "ammorefill", g_esSurvivor[iIndex].g_iAmmoRefillPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iAmmoRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRegenPassive", "Ammo Regen Passive", "Ammo_Regen_Passive", "ammoregen", g_esSurvivor[iIndex].g_iAmmoRegenPassive, value, -1, 99999);
						g_esSurvivor[iIndex].g_iBlazeHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BlazeHealthPassive", "Blaze Health Passive", "Blaze_Health_Passive", "blaze", g_esSurvivor[iIndex].g_iBlazeHealthPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iBloodDonorPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BloodDonorPassive", "Blood Donor Passive", "Blood_Donor_Passive", "donor", g_esSurvivor[iIndex].g_iBloodDonorPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iBunnyHopPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BunnyHopPassive", "Bunny Hop Passive", "Bunny_Hop_Passive", "bhop", g_esSurvivor[iIndex].g_iBunnyHopPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iBurstDoorsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BurstDoorsPassive", "Burst Doors Passive", "Burst_Doors_Passive", "burstdoors", g_esSurvivor[iIndex].g_iBurstDoorsPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iCleanKillsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CleanKillsPassive", "Clean Kills Passive", "Clean_Kills_Passive", "cleankills", g_esSurvivor[iIndex].g_iCleanKillsPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iClusterBombsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ClusterBombsPassive", "Cluster Bombs Passive", "Cluster_Bombs_Passive", "cluster", g_esSurvivor[iIndex].g_iClusterBombsPassive, value, -1, 5);
						g_esSurvivor[iIndex].g_iEternalFlamesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "EternalFlamesPassive", "Eternal Flames Passive", "Eternal_Flames_Passive", "eternal", g_esSurvivor[iIndex].g_iEternalFlamesPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iFastRecoveryPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FastRecoveryPassive", "Fast Recovery Passive", "Fast_Recovery_Passive", "fastrecovery", g_esSurvivor[iIndex].g_iFastRecoveryPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iFriendlyFirePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FriendlyFirePassive", "Friendly Fire Passive", "Friendly_Fire_Passive", "friendlyfire", g_esSurvivor[iIndex].g_iFriendlyFirePassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iGhostBulletsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GhostBulletsPassive", "Ghost Bullets Passive", "Ghost_Bullets_Passive", "ghost", g_esSurvivor[iIndex].g_iGhostBulletsPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iHealthRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthRegenPassive", "Health Regen Passive", "Health_Regen_Passive", "hpregen", g_esSurvivor[iIndex].g_iHealthRegenPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iInfiniteAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "InfiniteAmmoPassive", "Infinite Ammo Passive", "Infinite_Ammo_Passive", "infammo", g_esSurvivor[iIndex].g_iInfiniteAmmoPassive, value, -1, 31);
						g_esSurvivor[iIndex].g_iLadderActionsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadderActionsPassive", "Ladder Actions Passive", "Ladder_Action_Passive", "ladderacts", g_esSurvivor[iIndex].g_iLadderActionsPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iLaserSightPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LaserSightPassive", "Laser Sight Passive", "Laser_Sight_Passive", "lasersight", g_esSurvivor[iIndex].g_iLaserSightPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iLifeLeechPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LifeLeechPassive", "Life Leech Passive", "Life_Leech_Passive", "lifeleech", g_esSurvivor[iIndex].g_iLifeLeechPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iMedicalCutsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MedicalCutsPassive", "Medical Cuts Passive", "Medical_Cuts_Passive", "medcuts", g_esSurvivor[iIndex].g_iMedicalCutsPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iMeleeRangePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MeleeRangePassive", "Melee Range Passive", "Melee_Range_Passive", "meleerange", g_esSurvivor[iIndex].g_iMeleeRangePassive, value, -1, 99999);
						g_esSurvivor[iIndex].g_iMidairDashesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MidairDashesPassive", "Midair Dashes Passive", "Midair_Dashes_Passive", "middash", g_esSurvivor[iIndex].g_iMidairDashesPassive, value, -1, 99999);
						g_esSurvivor[iIndex].g_iOverhealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverhealthPassive", "Overhealth Passive", "Overhealth_Passive", "overhealth", g_esSurvivor[iIndex].g_iOverhealthPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iRecoilDampenerPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RecoilDampenerPassive", "Recoil Dampener Passive", "Recoil_Dampener_Passive", "recoil", g_esSurvivor[iIndex].g_iRecoilDampenerPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iRegenBurstsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RegenBurstsPassive", "Regen Bursts Passive", "Regen_Bursts_Passive", "regbursts", g_esSurvivor[iIndex].g_iRegenBurstsPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iRespawnLoadoutPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RespawnLoadoutPassive", "Respawn Loadout Passive", "Respawn_Loadout_Passive", "resloadout", g_esSurvivor[iIndex].g_iRespawnLoadoutPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iReviveHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReviveHealthPassive", "Revive Health Passive", "Revive_Health_Passive", "revivehp", g_esSurvivor[iIndex].g_iReviveHealthPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iRiotGearPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RiotGearPassive", "Riot Gear Passive", "Riot_Gear_Passive", "riotgear", g_esSurvivor[iIndex].g_iRiotGearPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iSafetyBubblePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SafetyBubblePassive", "Safety Bubble Passive", "Safety_Bubble_Passive", "safetybubble", g_esSurvivor[iIndex].g_iSafetyBubblePassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iShovePenaltyPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShovePenaltyPassive", "Shove Penalty Passive", "Shove_Penalty_Passive", "shovepenalty", g_esSurvivor[iIndex].g_iShovePenaltyPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iSpecialAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpecialAmmoPassive", "Special Ammo Passive", "Special_Ammo_Passive", "specammo", g_esSurvivor[iIndex].g_iSpecialAmmoPassive, value, -1, 3);
						g_esSurvivor[iIndex].g_iStickyGrenadesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "StickyGrenadesPassive", "Sticky Grenades Passive", "Sticky_Grenades_Passive", "sticky", g_esSurvivor[iIndex].g_iStickyGrenadesPassive, value, -1, 1);
						g_esSurvivor[iIndex].g_iSyringeDartsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SyringeDartsPassive", "Syringe Darts Passive", "Syringe_Darts_Passive", "syringe", g_esSurvivor[iIndex].g_iSyringeDartsPassive, value, -1, MT_MAXHEALTH);
						g_esSurvivor[iIndex].g_iThornsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ThornsPassive", "Thorns Passive", "Thorns_Passive", "thorns", g_esSurvivor[iIndex].g_iThornsPassive, value, -1, 1);

						vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierAttackVoicelines", "Carrier Attack Voicelines", "Carrier_Attack_Voicelines", "caattacklines", g_esSurvivor[iIndex].g_sCarrierAttackVoicelines, sizeof esSurvivor::g_sCarrierAttackVoicelines, value);
						vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBaitVoicelines", "Carrier Bait Voicelines", "Carrier_Bait_Voicelines", "cabaitlines", g_esSurvivor[iIndex].g_sCarrierBaitVoicelines, sizeof esSurvivor::g_sCarrierBaitVoicelines, value);
						vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ItemPassive", "Item Passive", "Item_Passive", "item", g_esSurvivor[iIndex].g_sItemPassive, sizeof esSurvivor::g_sItemPassive, value);

						if (StrEqual(key, "CarrierType", false) || StrEqual(key, "Carrier Type", false) || StrEqual(key, "Carrier_Type", false) || StrEqual(key, "catype", false))
						{
							char sValue[10], sRange[2][5];
							strcopy(sValue, sizeof sValue, value);
							ReplaceString(sValue, sizeof sValue, " ", "");
							ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

							g_esSurvivor[iIndex].g_iCarrierMinType = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, MT_MAXTYPES) : g_esSurvivor[iIndex].g_iCarrierMinType;
							g_esSurvivor[iIndex].g_iCarrierMaxType = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, MT_MAXTYPES) : g_esSurvivor[iIndex].g_iCarrierMaxType;
						}
					}
				}
#if defined _WeaponHandling_included
				strcopy(sSpecSection, sizeof sSpecSection, specsection);
				if (StrContains(sSpecSection, MT_CONFIG_SECTION_WEAPON, false) == 0)
				{
					int iWeaponIndex = view_as<int>(GetWeaponTypeFromClassname(sSpecSection)), iIndex = (iWeaponIndex > 0) ? iWeaponIndex : -1;
					if (iIndex > 0)
					{
						g_esWeapon[iIndex].g_iWeaponIndex = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "WeaponIndex", "Weapon Index", "Weapon_Index", "weaponid", g_esWeapon[iIndex].g_iWeaponIndex, value, -1, 400);
						if (g_esWeapon[iIndex].g_iWeaponIndex > 0)
						{
							iIndex = (g_esWeapon[iIndex].g_iWeaponIndex + 100);
							g_esWeapon[iIndex].g_iWeaponIndex = iIndex;
							if (!StrEqual(sSpecSection, "weapon_melee", false))
							{
								strcopy(g_esWeapon[iIndex].g_sWeaponName, sizeof esWeapon::g_sWeaponName, sSpecSection);
							}

							if (g_esGeneral.g_iMaxWeapons < iIndex)
							{
								g_esGeneral.g_iMaxWeapons = iIndex;
							}
						}

						g_esWeapon[iIndex].g_iWeaponIndex = iIndex;
						g_esWeapon[iIndex].g_iWeaponCharacter = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "WeaponCharacter", "Weapon Character", "Weapon_Character", "weaponchar", g_esWeapon[iIndex].g_iWeaponCharacter, value, -1, 7);
						g_esWeapon[iIndex].g_flActionDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ActionDurationPassive", "Action Duration Passive", "Action_Duration_Passive", "actionduration", g_esWeapon[iIndex].g_flActionDurationPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flAdrenalineTimePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AdrenalineTimePassive", "Adrenaline Time Passive", "Adrenaline_Time_Passive", "adrenaline", g_esWeapon[iIndex].g_flAdrenalineTimePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flAttackBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AttackBoostPassive", "Attack Boost Passive", "Attack_Boost_Passive", "attackboost", g_esWeapon[iIndex].g_flAttackBoostPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flDamageBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageBoostPassive", "Damage Boost Passive", "Damage_Boost_Passive", "dmgboost", g_esWeapon[iIndex].g_flDamageBoostPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flDamageResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageResistancePassive", "Damage Resistance Passive", "Damage_Resistance_Passive", "dmgres", g_esWeapon[iIndex].g_flDamageResistancePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flDopamineRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DopamineRadiusPassive", "Dopamine Radius Passive", "Dopamine_Radius_Passive", "dopamine", g_esWeapon[iIndex].g_flDopamineRadiusPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flFireRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FireRatePassive", "Fire Rate Passive", "Fire_Rate_Passive", "firerate", g_esWeapon[iIndex].g_flFireRatePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flGrenadeLauncherPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GrenadeLauncherPassive", "Grenade Launcher Passive", "Grenade_Launcher_Passive", "grenade", g_esWeapon[iIndex].g_flGrenadeLauncherPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flHealPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealPercentPassive", "Heal Percent Passive", "Heal_Percent_Passive", "healpercent", g_esWeapon[iIndex].g_flHealPercentPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flHealthcareRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthcareRadiusPassive", "Healthcare Radius Passive", "Healthcare_Radius_Passive", "healthcare", g_esWeapon[iIndex].g_flHealthcareRadiusPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flHeartbeatPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HeartbeatPassive", "Heartbeat Passive", "Heartbeat_Passive", "heartbeat", g_esWeapon[iIndex].g_flHeartbeatPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flHollowpointAmmoPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HollowpointAmmoPassive", "Hollowpoint Ammo Passive", "Hollowpoint_Ammo_Passive", "hollowpoint", g_esWeapon[iIndex].g_flHollowpointAmmoPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flJumpHeightPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "JumpHeightPassive", "Jump Height Passive", "Jump_Height_Passive", "jumpheight", g_esWeapon[iIndex].g_flJumpHeightPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flLadyKillerPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadyKillerPassive", "Lady Killer Passive", "Lady_Killer_Passive", "ladykiller", g_esWeapon[iIndex].g_flLadyKillerPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flLuckyBulletPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LuckyBulletPassive", "Lucky Bullet Passive", "Lucky_Bullet_Passive", "luckybullet", g_esWeapon[iIndex].g_flLuckyBulletPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flMotivationRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MotivationRadiusPassive", "Motivation Radius Passive", "Motivation_Radius_Passive", "motivation", g_esWeapon[iIndex].g_flMotivationRadiusPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flOverdoseRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverdoseRadiusPassive", "Overdose Radius Passive", "Overdose_Radius_Passive", "overdose", g_esWeapon[iIndex].g_flOverdoseRadiusPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flPipeBombDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PipebombDurationPassive", "Pipebomb Duration Passive", "Pipebomb_Duration_Passive", "pipeduration", g_esWeapon[iIndex].g_flPipeBombDurationPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flPunchResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PunchResistancePassive", "Punch Resistance Passive", "Punch_Resistance_Passive", "punchres", g_esWeapon[iIndex].g_flPunchResistancePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flRapidPistolPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RapidPistolPassive", "Rapid Pistol Passive", "Rapid_Pistol_Passive", "rapidpistol", g_esWeapon[iIndex].g_flRapidPistolPassive, value, -1.0, 1.0);
						g_esWeapon[iIndex].g_flRefillPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RefillPercentPassive", "Refill Percent Passive", "Refill_Percent_Passive", "refillpercent", g_esWeapon[iIndex].g_flRefillPercentPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flReloadRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReloadRatePassive", "Reload Rate Passive", "Reload_Rate_Passive", "reloadrate", g_esWeapon[iIndex].g_flReloadRatePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flShockwaveRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShockwaveRadiusPassive", "Shockwave Radius Passive", "Shockwave_Radius_Passive", "shockwave", g_esWeapon[iIndex].g_flShockwaveRadiusPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flShoveDamagePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveDamagePassive", "Shove Damage Passive", "Shove_Damage_Passive", "shovedmg", g_esWeapon[iIndex].g_flShoveDamagePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flShoveRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveRatePassive", "Shove Rate Passive", "Shove_Rate_Passive", "shoverate", g_esWeapon[iIndex].g_flShoveRatePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flSledgehammerRoundsPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SledgehammerRoundsPassive", "Sledgehammer Rounds Passive", "Sledgehammer_Rounds_Passive", "sledgehammer", g_esWeapon[iIndex].g_flSledgehammerRoundsPassive, value, -1.0, 100.0);
						g_esWeapon[iIndex].g_flSpeedBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpeedBoostPassive", "Speed Boost Passive", "Speed_Boost_Passive", "speedboost", g_esWeapon[iIndex].g_flSpeedBoostPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flSupplierPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esWeapon[iIndex].g_flSupplierPassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_flSwingRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SwingRatePassive", "Swing Rate Passive", "Swing_Rate_Passive", "swingrate", g_esWeapon[iIndex].g_flSwingRatePassive, value, -1.0, 99999.0);
						g_esWeapon[iIndex].g_iPassiveEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveEnabled", "Passive Enabled", "Passive_Enabled", "psenabled", g_esWeapon[iIndex].g_iPassiveEnabled, value, -2, 2147483647);
						g_esWeapon[iIndex].g_iPassiveBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveBots", "Passive Bots", "Passive_Bots", "psbots", g_esWeapon[iIndex].g_iPassiveBots, value, -2, 2147483647);
						g_esWeapon[iIndex].g_iPassiveNotify = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveNotify", "Passive Notify", "Passive_Notify", "psnotify", g_esWeapon[iIndex].g_iPassiveNotify, value, -1, 1);
						g_esWeapon[iIndex].g_iStackPassives = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "StackPassives", "Stack Passives", "Stack_Passives", "psstack", g_esWeapon[iIndex].g_iStackPassives, value, -2, 2147483647);
						g_esWeapon[iIndex].g_iAmmoBoostPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoBoostPassive", "Ammo Boost Passive", "Ammo_Boost_Passive", "ammoboost", g_esWeapon[iIndex].g_iAmmoBoostPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iAmmoRefillPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRefillPassive", "Ammo Refill Passive", "Ammo_Refill_Passive", "ammorefill", g_esWeapon[iIndex].g_iAmmoRefillPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iAmmoRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRegenPassive", "Ammo Regen Passive", "Ammo_Regen_Passive", "ammoregen", g_esWeapon[iIndex].g_iAmmoRegenPassive, value, -1, 99999);
						g_esWeapon[iIndex].g_iBlazeHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BlazeHealthPassive", "Blaze Health Passive", "Blaze_Health_Passive", "blaze", g_esWeapon[iIndex].g_iBlazeHealthPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iBloodDonorPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BloodDonorPassive", "Blood Donor Passive", "Blood_Donor_Passive", "donor", g_esWeapon[iIndex].g_iBloodDonorPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iBunnyHopPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BunnyHopPassive", "Bunny Hop Passive", "Bunny_Hop_Passive", "bhop", g_esWeapon[iIndex].g_iBunnyHopPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iBurstDoorsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BurstDoorsPassive", "Burst Doors Passive", "Burst_Doors_Passive", "burstdoors", g_esWeapon[iIndex].g_iBurstDoorsPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iCleanKillsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CleanKillsPassive", "Clean Kills Passive", "Clean_Kills_Passive", "cleankills", g_esWeapon[iIndex].g_iCleanKillsPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iClusterBombsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ClusterBombsPassive", "Cluster Bombs Passive", "Cluster_Bombs_Passive", "cluster", g_esWeapon[iIndex].g_iClusterBombsPassive, value, -1, 5);
						g_esWeapon[iIndex].g_iEternalFlamesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "EternalFlamesPassive", "Eternal Flames Passive", "Eternal_Flames_Passive", "eternal", g_esWeapon[iIndex].g_iEternalFlamesPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iFastRecoveryPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FastRecoveryPassive", "Fast Recovery Passive", "Fast_Recovery_Passive", "fastrecovery", g_esWeapon[iIndex].g_iFastRecoveryPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iFriendlyFirePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FriendlyFirePassive", "Friendly Fire Passive", "Friendly_Fire_Passive", "friendlyfire", g_esWeapon[iIndex].g_iFriendlyFirePassive, value, -1, 1);
						g_esWeapon[iIndex].g_iGhostBulletsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GhostBulletsPassive", "Ghost Bullets Passive", "Ghost_Bullets_Passive", "ghost", g_esWeapon[iIndex].g_iGhostBulletsPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iHealthRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthRegenPassive", "Health Regen Passive", "Health_Regen_Passive", "hpregen", g_esWeapon[iIndex].g_iHealthRegenPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iInfiniteAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "InfiniteAmmoPassive", "Infinite Ammo Passive", "Infinite_Ammo_Passive", "infammo", g_esWeapon[iIndex].g_iInfiniteAmmoPassive, value, -1, 31);
						g_esWeapon[iIndex].g_iLadderActionsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadderActionsPassive", "Ladder Actions Passive", "Ladder_Action_Passive", "ladderacts", g_esWeapon[iIndex].g_iLadderActionsPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iLaserSightPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LaserSightPassive", "Laser Sight Passive", "Laser_Sight_Passive", "lasersight", g_esWeapon[iIndex].g_iLaserSightPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iLifeLeechPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LifeLeechPassive", "Life Leech Passive", "Life_Leech_Passive", "lifeleech", g_esWeapon[iIndex].g_iLifeLeechPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iMedicalCutsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MedicalCutsPassive", "Medical Cuts Passive", "Medical_Cuts_Passive", "medcuts", g_esWeapon[iIndex].g_iMedicalCutsPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iMeleeRangePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MeleeRangePassive", "Melee Range Passive", "Melee_Range_Passive", "meleerange", g_esWeapon[iIndex].g_iMeleeRangePassive, value, -1, 99999);
						g_esWeapon[iIndex].g_iMidairDashesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MidairDashesPassive", "Midair Dashes Passive", "Midair_Dashes_Passive", "middash", g_esWeapon[iIndex].g_iMidairDashesPassive, value, -1, 99999);
						g_esWeapon[iIndex].g_iOverhealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverhealthPassive", "Overhealth Passive", "Overhealth_Passive", "overhealth", g_esWeapon[iIndex].g_iOverhealthPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iRecoilDampenerPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RecoilDampenerPassive", "Recoil Dampener Passive", "Recoil_Dampener_Passive", "recoil", g_esWeapon[iIndex].g_iRecoilDampenerPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iRegenBurstsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RegenBurstsPassive", "Regen Bursts Passive", "Regen_Bursts_Passive", "regbursts", g_esWeapon[iIndex].g_iRegenBurstsPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iRespawnLoadoutPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RespawnLoadoutPassive", "Respawn Loadout Passive", "Respawn_Loadout_Passive", "resloadout", g_esWeapon[iIndex].g_iRespawnLoadoutPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iReviveHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReviveHealthPassive", "Revive Health Passive", "Revive_Health_Passive", "revivehp", g_esWeapon[iIndex].g_iReviveHealthPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iRiotGearPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RiotGearPassive", "Riot Gear Passive", "Riot_Gear_Passive", "riotgear", g_esWeapon[iIndex].g_iRiotGearPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iSafetyBubblePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SafetyBubblePassive", "Safety Bubble Passive", "Safety_Bubble_Passive", "safetybubble", g_esWeapon[iIndex].g_iSafetyBubblePassive, value, -1, 1);
						g_esWeapon[iIndex].g_iShovePenaltyPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShovePenaltyPassive", "Shove Penalty Passive", "Shove_Penalty_Passive", "shovepenalty", g_esWeapon[iIndex].g_iShovePenaltyPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iSpecialAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpecialAmmoPassive", "Special Ammo Passive", "Special_Ammo_Passive", "specammo", g_esWeapon[iIndex].g_iSpecialAmmoPassive, value, -1, 3);
						g_esWeapon[iIndex].g_iStickyGrenadesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "StickyGrenadesPassive", "Sticky Grenades Passive", "Sticky_Grenades_Passive", "sticky", g_esWeapon[iIndex].g_iStickyGrenadesPassive, value, -1, 1);
						g_esWeapon[iIndex].g_iSyringeDartsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SyringeDartsPassive", "Syringe Darts Passive", "Syringe_Darts_Passive", "syringe", g_esWeapon[iIndex].g_iSyringeDartsPassive, value, -1, MT_MAXHEALTH);
						g_esWeapon[iIndex].g_iThornsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ThornsPassive", "Thorns Passive", "Thorns_Passive", "thorns", g_esWeapon[iIndex].g_iThornsPassive, value, -1, 1);

						vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ItemPassive", "Item Passive", "Item_Passive", "item", g_esWeapon[iIndex].g_sItemPassive, sizeof esWeapon::g_sItemPassive, value);
						vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "WeaponName", "Weapon Name", "Weapon_Name", "weaponname", g_esWeapon[iIndex].g_sWeaponName, sizeof esWeapon::g_sWeaponName, value);
					}
				}
#endif
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_REWARDS, false))
			{
				char sValue[2560], sSet[8][320];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esSpecific::g_iStackLimits); iPos++)
				{
					if (iPos < (sizeof esSpecific::g_iRewardEnabled))
					{
						g_esSpecific.g_flRewardChance[iPos] = flGetClampedValue(key, "RewardChance", "Reward Chance", "Reward_Chance", "chance", g_esSpecific.g_flRewardChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flRewardDuration[iPos] = flGetClampedValue(key, "RewardDuration", "Reward Duration", "Reward_Duration", "duration", g_esSpecific.g_flRewardDuration[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flRewardPercentage[iPos] = flGetClampedValue(key, "RewardPercentage", "Reward Percentage", "Reward_Percentage", "percent", g_esSpecific.g_flRewardPercentage[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flActionDurationReward[iPos] = flGetClampedValue(key, "ActionDurationReward", "Action Duration Reward", "Action_Duration_Reward", "actionduration", g_esSpecific.g_flActionDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flAdrenalineTimeReward[iPos] = flGetClampedValue(key, "AdrenalineTimeReward", "Adrenaline Time Reward", "Adrenaline_Time_Reward", "adrenaline", g_esSpecific.g_flAdrenalineTimeReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flAttackBoostReward[iPos] = flGetClampedValue(key, "AttackBoostReward", "Attack Boost Reward", "Attack_Boost_Reward", "attackboost", g_esSpecific.g_flAttackBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flDamageBoostReward[iPos] = flGetClampedValue(key, "DamageBoostReward", "Damage Boost Reward", "Damage_Boost_Reward", "dmgboost", g_esSpecific.g_flDamageBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flDamageResistanceReward[iPos] = flGetClampedValue(key, "DamageResistanceReward", "Damage Resistance Reward", "Damage_Resistance_Reward", "dmgres", g_esSpecific.g_flDamageResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esSpecific.g_flDopamineRadiusReward[iPos] = flGetClampedValue(key, "DopamineRadiusReward", "Dopamine Radius Reward", "Dopamine_Radius_Reward", "dopamine", g_esSpecific.g_flDopamineRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flFireRateReward[iPos] = flGetClampedValue(key, "FireRateReward", "Fire Rate Reward", "Fire_Rate_Reward", "firerate", g_esSpecific.g_flFireRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flGrenadeLauncherReward[iPos] = flGetClampedValue(key, "GrenadeLauncherReward", "Grenade Launcher Reward", "Grenade_Launcher_Reward", "grenade", g_esSpecific.g_flGrenadeLauncherReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flHealPercentReward[iPos] = flGetClampedValue(key, "HealPercentReward", "Heal Percent Reward", "Heal_Percent_Reward", "healpercent", g_esSpecific.g_flHealPercentReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flHealthcareRadiusReward[iPos] = flGetClampedValue(key, "HealthcareRadiusReward", "Healthcare Radius Reward", "Healthcare_Radius_Reward", "healthcare", g_esSpecific.g_flHealthcareRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flHeartbeatReward[iPos] = flGetClampedValue(key, "HeartbeatReward", "Heartbeat Reward", "Heartbeat_Reward", "heartbeat", g_esSpecific.g_flHeartbeatReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flHollowpointAmmoReward[iPos] = flGetClampedValue(key, "HollowpointAmmoReward", "Hollowpoint Ammo Reward", "Hollowpoint_Ammo_Reward", "hollowpoint", g_esSpecific.g_flHollowpointAmmoReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flJumpHeightReward[iPos] = flGetClampedValue(key, "JumpHeightReward", "Jump Height Reward", "Jump_Height_Reward", "jumpheight", g_esSpecific.g_flJumpHeightReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flLadyKillerReward[iPos] = flGetClampedValue(key, "LadyKillerReward", "Lady Killer Reward", "Lady_Killer_Reward", "ladykiller", g_esSpecific.g_flLadyKillerReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flLoopingVoicelineInterval[iPos] = flGetClampedValue(key, "LoopingVoicelineInterval", "Looping Voiceline Interval", "Looping_Voiceline_Interval", "loopinterval", g_esSpecific.g_flLoopingVoicelineInterval[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flLuckyBulletReward[iPos] = flGetClampedValue(key, "LuckyBulletReward", "Lucky Bullet Reward", "Lucky_Bullet_Reward", "luckybullet", g_esSpecific.g_flLuckyBulletReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flMotivationRadiusReward[iPos] = flGetClampedValue(key, "MotivationRadiusReward", "Motivation Radius Reward", "Motivation_Radius_Reward", "motivation", g_esSpecific.g_flMotivationRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flOverdoseRadiusReward[iPos] = flGetClampedValue(key, "OverdoseRadiusReward", "Overdose Radius Reward", "Overdose_Radius_Reward", "overdose", g_esSpecific.g_flOverdoseRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flPipeBombDurationReward[iPos] = flGetClampedValue(key, "PipebombDurationReward", "Pipebomb Duration Reward", "Pipebomb_Duration_Reward", "pipeduration", g_esSpecific.g_flPipeBombDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flPunchResistanceReward[iPos] = flGetClampedValue(key, "PunchResistanceReward", "Punch Resistance Reward", "Punch_Resistance_Reward", "punchres", g_esSpecific.g_flPunchResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esSpecific.g_flRapidPistolReward[iPos] = flGetClampedValue(key, "RapidPistolReward", "Rapid Pistol Reward", "Rapid_Pistol_Reward", "rapidpistol", g_esSpecific.g_flRapidPistolReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esSpecific.g_flRefillPercentReward[iPos] = flGetClampedValue(key, "RefillPercentReward", "Refill Percent Reward", "Refill_Percent_Reward", "refillpercent", g_esSpecific.g_flRefillPercentReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flReloadRateReward[iPos] = flGetClampedValue(key, "ReloadRateReward", "Reload Rate Reward", "Reload_Rate_Reward", "reloadrate", g_esSpecific.g_flReloadRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flShockwaveRadiusReward[iPos] = flGetClampedValue(key, "ShockwaveRadiusReward", "Shockwave Radius Reward", "Shockwave_Radius_Reward", "shockwave", g_esSpecific.g_flShockwaveRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flShoveDamageReward[iPos] = flGetClampedValue(key, "ShoveDamageReward", "Shove Damage Reward", "Shove_Damage_Reward", "shovedmg", g_esSpecific.g_flShoveDamageReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flShoveRateReward[iPos] = flGetClampedValue(key, "ShoveRateReward", "Shove Rate Reward", "Shove_Rate_Reward", "shoverate", g_esSpecific.g_flShoveRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flSledgehammerRoundsReward[iPos] = flGetClampedValue(key, "SledgehammerRoundsReward", "Sledgehammer Rounds Reward", "Sledgehammer_Rounds_Reward", "sledgehammer", g_esSpecific.g_flSledgehammerRoundsReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esSpecific.g_flSpeedBoostReward[iPos] = flGetClampedValue(key, "SpeedBoostReward", "Speed Boost Reward", "Speed_Boost_Reward", "speedboost", g_esSpecific.g_flSpeedBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flSupplierReward[iPos] = flGetClampedValue(key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esSpecific.g_flSupplierReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_flSwingRateReward[iPos] = flGetClampedValue(key, "SwingRateReward", "Swing Rate Reward", "Swing_Rate_Reward", "swingrate", g_esSpecific.g_flSwingRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esSpecific.g_iRewardEnabled[iPos] = iGetClampedValue(key, "RewardEnabled", "Reward Enabled", "Reward_Enabled", "renabled", g_esSpecific.g_iRewardEnabled[iPos], sSet[iPos], -2, 2147483647);
						g_esSpecific.g_iRewardBots[iPos] = iGetClampedValue(key, "RewardBots", "Reward Bots", "Reward_Bots", "rbots", g_esSpecific.g_iRewardBots[iPos], sSet[iPos], -2, 2147483647);
						g_esSpecific.g_iRewardEffect[iPos] = iGetClampedValue(key, "RewardEffect", "Reward Effect", "Reward_Effect", "effect", g_esSpecific.g_iRewardEffect[iPos], sSet[iPos], -1, 15);
						g_esSpecific.g_iRewardNotify[iPos] = iGetClampedValue(key, "RewardNotify", "Reward Notify", "Reward_Notify", "rnotify", g_esSpecific.g_iRewardNotify[iPos], sSet[iPos], -1, 3);
						g_esSpecific.g_iRewardVisual[iPos] = iGetClampedValue(key, "RewardVisual", "Reward Visual", "Reward_Visual", "visual", g_esSpecific.g_iRewardVisual[iPos], sSet[iPos], -1, 127);
						g_esSpecific.g_iAmmoBoostReward[iPos] = iGetClampedValue(key, "AmmoBoostReward", "Ammo Boost Reward", "Ammo_Boost_Reward", "ammoboost", g_esSpecific.g_iAmmoBoostReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iAmmoRefillReward[iPos] = iGetClampedValue(key, "AmmoRefillReward", "Ammo Refill Reward", "Ammo_Refill_Reward", "ammorefill", g_esSpecific.g_iAmmoRefillReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iAmmoRegenReward[iPos] = iGetClampedValue(key, "AmmoRegenReward", "Ammo Regen Reward", "Ammo_Regen_Reward", "ammoregen", g_esSpecific.g_iAmmoRegenReward[iPos], sSet[iPos], -1, 99999);
						g_esSpecific.g_iBlazeHealthReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esSpecific.g_iBlazeHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iBloodDonorReward[iPos] = iGetClampedValue(key, "BloodDonorReward", "Blood Donor Reward", "Blood_Donor_Reward", "donor", g_esSpecific.g_iBloodDonorReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iBunnyHopReward[iPos] = iGetClampedValue(key, "BunnyHopReward", "Bunny Hop Reward", "Bunny_Hop_Reward", "bhop", g_esSpecific.g_iBunnyHopReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iBurstDoorsReward[iPos] = iGetClampedValue(key, "BurstDoorsReward", "Burst Doors Reward", "Burst_Doors_Reward", "burstdoors", g_esSpecific.g_iBurstDoorsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iCleanKillsReward[iPos] = iGetClampedValue(key, "CleanKillsReward", "Clean Kills Reward", "Clean_Kills_Reward", "cleankills", g_esSpecific.g_iCleanKillsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iClusterBombsReward[iPos] = iGetClampedValue(key, "ClusterBombsReward", "Cluster Bombs Reward", "Cluster_Bombs_Reward", "cluster", g_esSpecific.g_iClusterBombsReward[iPos], sSet[iPos], -1, 5);
						g_esSpecific.g_iEternalFlamesReward[iPos] = iGetClampedValue(key, "EternalFlamesReward", "Eternal Flames Reward", "Eternal_Flames_Reward", "eternal", g_esSpecific.g_iEternalFlamesReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iFastRecoveryReward[iPos] = iGetClampedValue(key, "FastRecoveryReward", "Fast Recovery Reward", "Fast_Recovery_Reward", "fastrecovery", g_esSpecific.g_iFastRecoveryReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iFriendlyFireReward[iPos] = iGetClampedValue(key, "FriendlyFireReward", "Friendly Fire Reward", "Friendly_Fire_Reward", "friendlyfire", g_esSpecific.g_iFriendlyFireReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iGhostBulletsReward[iPos] = iGetClampedValue(key, "GhostBulletsReward", "Ghost Bullets Reward", "Ghost_Bullets_Reward", "ghost", g_esSpecific.g_iGhostBulletsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iHealthRegenReward[iPos] = iGetClampedValue(key, "HealthRegenReward", "Health Regen Reward", "Health_Regen_Reward", "hpregen", g_esSpecific.g_iHealthRegenReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iInfiniteAmmoReward[iPos] = iGetClampedValue(key, "InfiniteAmmoReward", "Infinite Ammo Reward", "Infinite_Ammo_Reward", "infammo", g_esSpecific.g_iInfiniteAmmoReward[iPos], sSet[iPos], -1, 31);
						g_esSpecific.g_iLadderActionsReward[iPos] = iGetClampedValue(key, "LadderActionsReward", "Ladder Actions Reward", "Ladder_Action_Reward", "ladderacts", g_esSpecific.g_iLadderActionsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iLaserSightReward[iPos] = iGetClampedValue(key, "LaserSightReward", "Laser Sight Reward", "Laser_Sight_Reward", "lasersight", g_esSpecific.g_iLaserSightReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iLifeLeechReward[iPos] = iGetClampedValue(key, "LifeLeechReward", "Life Leech Reward", "Life_Leech_Reward", "lifeleech", g_esSpecific.g_iLifeLeechReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iMedicalCutsReward[iPos] = iGetClampedValue(key, "MedicalCutsReward", "Medical Cuts Reward", "Medical_Cuts_Reward", "medcuts", g_esSpecific.g_iMedicalCutsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iMeleeRangeReward[iPos] = iGetClampedValue(key, "MeleeRangeReward", "Melee Range Reward", "Melee_Range_Reward", "meleerange", g_esSpecific.g_iMeleeRangeReward[iPos], sSet[iPos], -1, 99999);
						g_esSpecific.g_iMidairDashesReward[iPos] = iGetClampedValue(key, "MidairDashesReward", "Midair Dashes Reward", "Midair_Dashes_Reward", "middash", g_esSpecific.g_iMidairDashesReward[iPos], sSet[iPos], -1, 99999);
						g_esSpecific.g_iOverhealthReward[iPos] = iGetClampedValue(key, "OverhealthReward", "Overhealth Reward", "Overhealth_Reward", "overhealth", g_esSpecific.g_iOverhealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iParticleEffectVisual[iPos] = iGetClampedValue(key, "ParticleEffectVisual", "Particle Effect Visual", "Particle_Effect_Visual", "particle", g_esSpecific.g_iParticleEffectVisual[iPos], sSet[iPos], -1, 15);
						g_esSpecific.g_iPrefsNotify[iPos] = iGetClampedValue(key, "PrefsNotify", "Prefs Notify", "Prefs_Notify", "pnotify", g_esSpecific.g_iPrefsNotify[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iRecoilDampenerReward[iPos] = iGetClampedValue(key, "RecoilDampenerReward", "Recoil Dampener Reward", "Recoil_Dampener_Reward", "recoil", g_esSpecific.g_iRecoilDampenerReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iRegenBurstsReward[iPos] = iGetClampedValue(key, "RegenBurstsReward", "Regen Bursts Reward", "Regen_Bursts_Reward", "regbursts", g_esSpecific.g_iRegenBurstsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iRespawnLoadoutReward[iPos] = iGetClampedValue(key, "RespawnLoadoutReward", "Respawn Loadout Reward", "Respawn_Loadout_Reward", "resloadout", g_esSpecific.g_iRespawnLoadoutReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iReviveHealthReward[iPos] = iGetClampedValue(key, "ReviveHealthReward", "Revive Health Reward", "Revive_Health_Reward", "revivehp", g_esSpecific.g_iReviveHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iRiotGearReward[iPos] = iGetClampedValue(key, "RiotGearReward", "Riot Gear Reward", "Riot_Gear_Reward", "riotgear", g_esSpecific.g_iRiotGearReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iSafetyBubbleReward[iPos] = iGetClampedValue(key, "SafetyBubbleReward", "Safety Bubble Reward", "Safety_Bubble_Reward", "safetybubble", g_esSpecific.g_iSafetyBubbleReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iShareRewards[iPos] = iGetClampedValue(key, "ShareRewards", "Share Rewards", "Share_Rewards", "share", g_esSpecific.g_iShareRewards[iPos], sSet[iPos], -1, 3);
						g_esSpecific.g_iShovePenaltyReward[iPos] = iGetClampedValue(key, "ShovePenaltyReward", "Shove Penalty Reward", "Shove_Penalty_Reward", "shovepenalty", g_esSpecific.g_iShovePenaltyReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iSpecialAmmoReward[iPos] = iGetClampedValue(key, "SpecialAmmoReward", "Special Ammo Reward", "Special_Ammo_Reward", "specammo", g_esSpecific.g_iSpecialAmmoReward[iPos], sSet[iPos], -1, 3);
						g_esSpecific.g_iStackRewards[iPos] = iGetClampedValue(key, "StackRewards", "Stack Rewards", "Stack_Rewards", "rstack", g_esSpecific.g_iStackRewards[iPos], sSet[iPos], -1, 2147483647);
						g_esSpecific.g_iStickyGrenadesReward[iPos] = iGetClampedValue(key, "StickyGrenadesReward", "Sticky Grenades Reward", "Sticky_Grenades_Reward", "sticky", g_esSpecific.g_iStickyGrenadesReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iSyringeDartsReward[iPos] = iGetClampedValue(key, "SyringeDartsReward", "Syringe Darts Reward", "Syringe_Darts_Reward", "syringe", g_esSpecific.g_iSyringeDartsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esSpecific.g_iThornsReward[iPos] = iGetClampedValue(key, "ThornsReward", "Thorns Reward", "Thorns_Reward", "thorns", g_esSpecific.g_iThornsReward[iPos], sSet[iPos], -1, 1);
						g_esSpecific.g_iUsefulRewards[iPos] = iGetClampedValue(key, "UsefulRewards", "Useful Rewards", "Useful_Rewards", "useful", g_esSpecific.g_iUsefulRewards[iPos], sSet[iPos], -1, 15);
						g_esSpecific.g_iVoicePitchVisual[iPos] = iGetClampedValue(key, "VoicePitchVisual", "Voice Pitch Visual", "Voice_Pitch_Visual", "voicepitch", g_esSpecific.g_iVoicePitchVisual[iPos], sSet[iPos], -1, 255);

						vGetConfigColors(sValue, sizeof sValue, sSet[iPos], ';');
						vGetStringValue(key, "BodyColorVisual", "Body Color Visual", "Body_Color_Visual", "bodycolor", iPos, g_esSpecific.g_sBodyColorVisual, sizeof esSpecific::g_sBodyColorVisual, g_esSpecific.g_sBodyColorVisual2, sizeof esSpecific::g_sBodyColorVisual2, g_esSpecific.g_sBodyColorVisual3, sizeof esSpecific::g_sBodyColorVisual3, g_esSpecific.g_sBodyColorVisual4, sizeof esSpecific::g_sBodyColorVisual4, sValue);
						vGetStringValue(key, "FallVoicelineReward", "Fall Voiceline Reward", "Fall_Voiceline_Reward", "fallvoice", iPos, g_esSpecific.g_sFallVoicelineReward, sizeof esSpecific::g_sFallVoicelineReward, g_esSpecific.g_sFallVoicelineReward2, sizeof esSpecific::g_sFallVoicelineReward2, g_esSpecific.g_sFallVoicelineReward3, sizeof esSpecific::g_sFallVoicelineReward3, g_esSpecific.g_sFallVoicelineReward4, sizeof esSpecific::g_sFallVoicelineReward4, sSet[iPos]);
						vGetStringValue(key, "GlowColorVisual", "Glow Color Visual", "Glow_Color_Visual", "glowcolor", iPos, g_esSpecific.g_sOutlineColorVisual, sizeof esSpecific::g_sOutlineColorVisual, g_esSpecific.g_sOutlineColorVisual2, sizeof esSpecific::g_sOutlineColorVisual2, g_esSpecific.g_sOutlineColorVisual3, sizeof esSpecific::g_sOutlineColorVisual3, g_esSpecific.g_sOutlineColorVisual4, sizeof esSpecific::g_sOutlineColorVisual4, sValue);
						vGetStringValue(key, "ItemReward", "Item Reward", "Item_Reward", "item", iPos, g_esSpecific.g_sItemReward, sizeof esSpecific::g_sItemReward, g_esSpecific.g_sItemReward2, sizeof esSpecific::g_sItemReward2, g_esSpecific.g_sItemReward3, sizeof esSpecific::g_sItemReward3, g_esSpecific.g_sItemReward4, sizeof esSpecific::g_sItemReward4, sSet[iPos]);
						vGetStringValue(key, "LightColorVisual", "Light Color Visual", "Light_Color_Visual", "lightcolor", iPos, g_esSpecific.g_sLightColorVisual, sizeof esSpecific::g_sLightColorVisual, g_esSpecific.g_sLightColorVisual2, sizeof esSpecific::g_sLightColorVisual2, g_esSpecific.g_sLightColorVisual3, sizeof esSpecific::g_sLightColorVisual3, g_esSpecific.g_sLightColorVisual4, sizeof esSpecific::g_sLightColorVisual4, sValue);
						vGetStringValue(key, "LoopingVoicelineVisual", "Looping Voiceline Visual", "Looping_Voiceline_Visual", "loopvoice", iPos, g_esSpecific.g_sLoopingVoicelineVisual, sizeof esSpecific::g_sLoopingVoicelineVisual, g_esSpecific.g_sLoopingVoicelineVisual2, sizeof esSpecific::g_sLoopingVoicelineVisual2, g_esSpecific.g_sLoopingVoicelineVisual3, sizeof esSpecific::g_sLoopingVoicelineVisual3, g_esSpecific.g_sLoopingVoicelineVisual4, sizeof esSpecific::g_sLoopingVoicelineVisual4, sSet[iPos]);
						vGetStringValue(key, "ScreenColorVisual", "Screen Color Visual", "Screen_Color_Visual", "screencolor", iPos, g_esSpecific.g_sScreenColorVisual, sizeof esSpecific::g_sScreenColorVisual, g_esSpecific.g_sScreenColorVisual2, sizeof esSpecific::g_sScreenColorVisual2, g_esSpecific.g_sScreenColorVisual3, sizeof esSpecific::g_sScreenColorVisual3, g_esSpecific.g_sScreenColorVisual4, sizeof esSpecific::g_sScreenColorVisual4, sValue);
					}

					g_esSpecific.g_iStackLimits[iPos] = iGetClampedValue(key, "StackLimits", "Stack Limits", "Stack_Limits", "limits", g_esSpecific.g_iStackLimits[iPos], sSet[iPos], -1, 99999);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_HEALTH, false))
			{
				char sSettings[4][128];
				for (int iPos = 0; iPos < (sizeof g_sSpecialNames); iPos++)
				{
					vGetSpecialSettingNames(sSettings, sizeof sSettings[], "BaseHealth", "Base Health", "Base_Health", "basehp", iPos);
					g_esSpecific.g_iBaseHealth[iPos] = iGetClampedValue(key, sSettings[0], sSettings[1], sSettings[2], sSettings[3], g_esSpecific.g_iBaseHealth[iPos], value, -1, MT_MAXHEALTH);
					vGetSpecialSettingNames(sSettings, sizeof sSettings[], "ExtraHealth", "Extra Health", "Extra_Health", "extrahp", iPos);
					g_esSpecific.g_iExtraHealth[iPos] = iGetClampedValue(key, sSettings[0], sSettings[1], sSettings[2], sSettings[3], g_esSpecific.g_iExtraHealth[iPos], value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
				}
			}
		}

		if (StrContains(specsection, MT_CONFIG_SECTION_COMMON, false) != -1 || StrContains(specsection, MT_CONFIG_SECTION_WITCH, false) != -1 || StrEqual(specsection, MT_CONFIG_SECTION_MOB, false) || StrEqual(specsection, MT_CONFIG_SECTION_INFECTED, false) || StrContains(specsection, MT_CONFIG_SECTION_INFECTED2, false) != -1)
		{
			g_esMob.g_iMobVariants = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "MobVariants", "Mob Variants", "Mob_Variants", "mobvariants	", g_esMob.g_iMobVariants, value, -1, 3);
			g_esMob.g_flCommonBioChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonBioChance", "Common Bio Chance", "Common_Bio_Chance", "commbiochance", g_esMob.g_flCommonBioChance, value, -1.0, 100.0);
			g_esMob.g_flCommonChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonChance", "Common Chance", "Common_Chance", "commchance", g_esMob.g_flCommonChance, value, -1.0, 100.0);
			g_esMob.g_flCommonCheck = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonCheck", "Common Check", "Common_Check", "commcheck", g_esMob.g_flCommonCheck, value, -1.0, 99999.0);
			g_esMob.g_flCommonDamagePoints = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonDamagePoints", "Common Damage Points", "Common_Damage_Points", "commdmgpoints", g_esMob.g_flCommonDamagePoints, value, -1.0, float(MT_MAXHEALTH));
			g_esMob.g_flCommonDeathPoints = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonDeathPoints", "Common Death Points", "Common_Death_Points", "commdeathpoints", g_esMob.g_flCommonDeathPoints, value, -1.0, float(MT_MAXHEALTH));
			g_esMob.g_iCommonFilter = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonFilter", "Common Filter", "Common_Filter", "commfilter", g_esMob.g_iCommonFilter, value, -1, 127);
			g_esMob.g_flCommonGoal = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonGoal", "Common Goal", "Common_Goal", "commgoal", g_esMob.g_flCommonGoal, value, -1.0, float(MT_MAXHEALTH));
			g_esMob.g_iCommonVariant = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CommonVariant", "Common Variant", "Common_Variant", "commvariant", g_esMob.g_iCommonVariant, value, -1, 255);
			g_esMob.g_flWitchChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchChance", "Witch Chance", "Witch_Chance", "witchchance", g_esMob.g_flWitchChance, value, -1.0, 100.0);
			g_esMob.g_iWitchFilter = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchFilter", "Witch Filter", "Witch_Filter", "witchfilter", g_esMob.g_iWitchFilter, value, -1, 511);
			g_esMob.g_iWitchMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchMode", "Witch Mode", "Witch_Mode", "witchmode", g_esMob.g_iWitchMode, value, -1, 1);
			g_esMob.g_flWitchMutateChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchMutateChance", "Witch Mutate Chance", "Witch_Mutate_Chance", "witchmutatechance", g_esMob.g_flWitchMutateChance, value, -1.0, 100.0);
			g_esMob.g_flWitchRange = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchRange", "Witch Range", "Witch_Range", "witchrange", g_esMob.g_flWitchRange, value, -1.0, 99999.0);
			g_esMob.g_iWitchTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "WitchTypes", "Witch Types", "Witch_Types", "witchtypes", g_esMob.g_iWitchTypes, value, -1, 7);
			g_esMob.g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esMob.g_iDisplayHealth, value, -1, 11);
			g_esMob.g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esMob.g_iDisplayHealthType, value, -1, 2);

			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esMob.g_sHealthCharacters, sizeof esMob::g_sHealthCharacters, value);
		}

		vConfigsLoadedForward(subsection, key, value, -1, -1, mode, true, specsection);
	}
	else if (!strncmp(section, "Tank", 4, false) || section[0] == '#' || IsCharNumeric(section[0]) || StrEqual(section, "all", false) || FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
	{
		int iStartPos = 0, iIndex = 0, iRealType = 0;
		if (!strncmp(section, "Tank", 4, false) || section[0] == '#')
		{
			iStartPos = iGetConfigSectionNumber(section, strlen(section)), iIndex = StringToInt(section[iStartPos]);
			vReadSpecialSettings(iIndex, mode, subsection, specsection, key, value);
		}
		else if (IsCharNumeric(section[0]) || StrEqual(section, "all", false) || FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
		{
			if (IsCharNumeric(section[0]) && FindCharInString(section, ',') == -1 && FindCharInString(section, '-') == -1)
			{
				iIndex = StringToInt(section);
				vReadSpecialSettings(iIndex, mode, subsection, specsection, key, value);
			}
			else if (StrEqual(section, "all", false) || FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
			{
				for (iIndex = iGetMinType(); iIndex <= iGetMaxType(); iIndex++)
				{
					if (iIndex <= 0)
					{
						continue;
					}

					iRealType = iFindSectionType(section, iIndex);
					if (iIndex == iRealType || StrEqual(section, "all", false))
					{
						vReadSpecialSettings(iIndex, mode, subsection, specsection, key, value);
					}
				}
			}
		}
	}
}

void vReadTankSettings(int type, int mode, const char[] subsection, const char[] key, const char[] value)
{
	int iIndex = g_esTank[type].g_iRecordedType[0];
	if (0 <= iIndex <= MT_MAXTYPES)
	{
		g_esTank[iIndex].g_iTankEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankEnabled", "Tank Enabled", "Tank_Enabled", "tenabled", g_esTank[iIndex].g_iTankEnabled, value, -1, 1);
		g_esTank[iIndex].g_iGameType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "GameType", "Game Type", "Game_Type", "game", g_esTank[iIndex].g_iGameType, value, -1, 2);
		g_esTank[iIndex].g_flTankChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankChance", "Tank Chance", "Tank_Chance", "chance", g_esTank[iIndex].g_flTankChance, value, -1.0, 100.0);
		g_esTank[iIndex].g_iTankNote = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankNote", "Tank Note", "Tank_Note", "note", g_esTank[iIndex].g_iTankNote, value, -1, 1);
		g_esTank[iIndex].g_iTankModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankModel", "Tank Model", "Tank_Model", "model", g_esTank[iIndex].g_iTankModel, value, -1, 7);
		g_esTank[iIndex].g_flBurnDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurnDuration", "Burn Duration", "Burn_Duration", "burndur", g_esTank[iIndex].g_flBurnDuration, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flBurntSkin = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurntSkin", "Burnt Skin", "Burnt_Skin", "burnt", g_esTank[iIndex].g_flBurntSkin, value, -2.0, 1.0);
		g_esTank[iIndex].g_iSpawnEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpawnEnabled", "Spawn Enabled", "Spawn_Enabled", "spawn", g_esTank[iIndex].g_iSpawnEnabled, value, -1, 1);
		g_esTank[iIndex].g_iMenuEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "MenuEnabled", "Menu Enabled", "Menu_Enabled", "menu", g_esTank[iIndex].g_iMenuEnabled, value, -1, 1);
		g_esTank[iIndex].g_iCheckAbilities = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CheckAbilities", "Check Abilities", "Check_Abilities", "check", g_esTank[iIndex].g_iCheckAbilities, value, -1, 1);
		g_esTank[iIndex].g_iDeathRevert = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "DeathRevert", "Death Revert", "Death_Revert", "revert", g_esTank[iIndex].g_iDeathRevert, value, -1, 1);
		g_esTank[iIndex].g_iRequiresHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "RequiresHumans", "Requires Humans", "Requires_Humans", "hrequire", g_esTank[iIndex].g_iRequiresHumans, value, -1, 32);
		g_esTank[iIndex].g_iAnnounceArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceArrival", "Announce Arrival", "Announce_Arrival", "arrival", g_esTank[iIndex].g_iAnnounceArrival, value, -1, 31);
		g_esTank[iIndex].g_iAnnounceDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceDeath", "Announce Death", "Announce_Death", "death", g_esTank[iIndex].g_iAnnounceDeath, value, -1, 2);
		g_esTank[iIndex].g_iAnnounceKill = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceKill", "Announce Kill", "Announce_Kill", "kill", g_esTank[iIndex].g_iAnnounceKill, value, -1, 1);
		g_esTank[iIndex].g_iArrivalMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalMessage", "Arrival Message", "Arrival_Message", "arrivalmsg", g_esTank[iIndex].g_iArrivalMessage, value, -1, 1023);
		g_esTank[iIndex].g_iArrivalSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalSound", "Arrival Sound", "Arrival_Sound", "arrivalsnd", g_esTank[iIndex].g_iArrivalSound, value, -1, 1);
		g_esTank[iIndex].g_iDeathDetails = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathDetails", "Death Details", "Death_Details", "deathdets", g_esTank[iIndex].g_iDeathDetails, value, -1, 5);
		g_esTank[iIndex].g_iDeathMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathMessage", "Death Message", "Death_Message", "deathmsg", g_esTank[iIndex].g_iDeathMessage, value, -1, 1023);
		g_esTank[iIndex].g_iDeathSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathSound", "Death Sound", "Death_Sound", "deathsnd", g_esTank[iIndex].g_iDeathSound, value, -1, 1);
		g_esTank[iIndex].g_iKillMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "KillMessage", "Kill Message", "Kill_Message", "killmsg", g_esTank[iIndex].g_iKillMessage, value, -1, 1023);
		g_esTank[iIndex].g_iVocalizeArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeArrival", "Vocalize Arrival", "Vocalize_Arrival", "arrivalvoc", g_esTank[iIndex].g_iVocalizeArrival, value, -1, 1);
		g_esTank[iIndex].g_iVocalizeDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeDeath", "Vocalize Death", "Vocalize_Death", "deathvoc", g_esTank[iIndex].g_iVocalizeDeath, value, -1, 1);
		g_esTank[iIndex].g_iTeammateLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, key, "TeammateLimit", "Teammate Limit", "Teammate_Limit", "teamlimit", g_esTank[iIndex].g_iTeammateLimit, value, -1, 32);
		g_esTank[iIndex].g_iAutoAggravate = iGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "AutoAggravate", "Auto Aggravate", "Auto_Aggravate", "autoaggro", g_esTank[iIndex].g_iAutoAggravate, value, -1, 1);
		g_esTank[iIndex].g_iPrioritizeThrows = iGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "PrioritizeThrows", "Prioritize Throws", "Prioritize_Throws", "priothrow", g_esTank[iIndex].g_iPrioritizeThrows, value, -1, 1);
		g_esTank[iIndex].g_iGlowEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowEnabled", "Glow Enabled", "Glow_Enabled", "genabled", g_esTank[iIndex].g_iGlowEnabled, value, -1, 1);
		g_esTank[iIndex].g_iGlowFlashing = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowFlashing", "Glow Flashing", "Glow_Flashing", "flashing", g_esTank[iIndex].g_iGlowFlashing, value, -1, 1);
		g_esTank[iIndex].g_iGlowType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowType", "Glow Type", "Glow_Type", "type", g_esTank[iIndex].g_iGlowType, value, -1, 1);
		g_esTank[iIndex].g_iBaseHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "BaseHealth", "Base Health", "Base_Health", "basehp", g_esTank[iIndex].g_iBaseHealth, value, -1, MT_MAXHEALTH);
		g_esTank[iIndex].g_flArmorPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorPercentage", "Armor Percentage", "Armor_Percentage", "armorpercent", g_esTank[iIndex].g_flArmorPercentage, value, -1.0, 1.0);
		g_esTank[iIndex].g_flArmorResistance[0] = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esTank[iIndex].g_flArmorResistance[0], value, -1.0, 1.0);
		g_esTank[iIndex].g_flShieldPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldPercentage", "Shield Percentage", "Shield_Percentage", "shieldpercent", g_esTank[iIndex].g_flShieldPercentage, value, -1.0, 1.0);
		g_esTank[iIndex].g_flShieldRate = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldRate", "Shield Rate", "Shield_Rate", "shieldrate", g_esTank[iIndex].g_flShieldRate, value, -1.0, 1.0);
		g_esTank[iIndex].g_flPassiveDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveDelay", "Passive Delay", "Passive_Delay", "passdelay", g_esTank[iIndex].g_flPassiveDelay, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iPassiveHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveHealth", "Passive Health", "Passive_Health", "passhp", g_esTank[iIndex].g_iPassiveHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
		g_esTank[iIndex].g_flPassiveInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveInterval", "Passive Interval", "Passive_Interval", "passint", g_esTank[iIndex].g_flPassiveInterval, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esTank[iIndex].g_iDisplayHealth, value, -1, 11);
		g_esTank[iIndex].g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esTank[iIndex].g_iDisplayHealthType, value, -1, 2);
		g_esTank[iIndex].g_iExtraHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ExtraHealth", "Extra Health", "Extra_Health", "extrahp", g_esTank[iIndex].g_iExtraHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
		g_esTank[iIndex].g_flHealPercentMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthPercentageMultiplier", "Health Percentage Multiplier", "Health_Percentage_Multiplier", "hpmulti", g_esTank[iIndex].g_flHealPercentMultiplier, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iHumanMultiplierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HumanMultiplierMode", "Human Multiplier Mode", "Human_Multiplier_Mode", "humanmultimode", g_esTank[iIndex].g_iHumanMultiplierMode, value, -1, 1);
		g_esTank[iIndex].g_iMinimumHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MinimumHumans", "Minimum Humans", "Minimum_Humans", "minhumans", g_esTank[iIndex].g_iMinimumHumans, value, -1, 32);
		g_esTank[iIndex].g_iMultiplyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MultiplyHealth", "Multiply Health", "Multiply_Health", "multihp", g_esTank[iIndex].g_iMultiplyHealth, value, -1, 3);
		g_esTank[iIndex].g_iSpawnProtection = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "SpawnProtection", "Spawn Protection", "Spawn_Protection", "protect", g_esTank[iIndex].g_iSpawnProtection, value, -1, 3);
		g_esTank[iIndex].g_flArmorDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorDuration", "Armor Duration", "Armor_Duration", "armorduration", g_esTank[iIndex].g_flArmorDuration, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flArmorResistance[1] = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esTank[iIndex].g_flArmorResistance[1], value, -1.0, 1.0);
		g_esTank[iIndex].g_flShieldDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldDuration", "Shield Duration", "Shield_Duration", "shieldduration", g_esTank[iIndex].g_flShieldDuration, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flShieldResistance = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldResistance", "Shield Resistance", "Shield_Resistance", "shieldres", g_esTank[iIndex].g_flShieldResistance, value, -1.0, 1.0);
		g_esTank[iIndex].g_iHumanSupport = iGetKeyValue(subsection, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, key, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, g_esTank[iIndex].g_iHumanSupport, value, -1, 2);
		g_esTank[iIndex].g_iTypeLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "TypeLimit", "Type Limit", "Type_Limit", "typelimit", g_esTank[iIndex].g_iTypeLimit, value, -1, 32);
		g_esTank[iIndex].g_iFinaleTank = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "FinaleTank", "Finale Tank", "Finale_Tank", "finale", g_esTank[iIndex].g_iFinaleTank, value, -1, 4);
		g_esTank[iIndex].g_flCloseAreasOnly = flGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "CloseAreasOnly", "Close Areas Only", "Close_Areas_Only", "closeareas", g_esTank[iIndex].g_flCloseAreasOnly, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flOpenAreasOnly = flGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "OpenAreasOnly", "Open Areas Only", "Open_Areas_Only", "openareas", g_esTank[iIndex].g_flOpenAreasOnly, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iBossBaseType = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossBaseType", "Boss Base Type", "Boss_Base_Type", "bossbase", g_esTank[iIndex].g_iBossBaseType, value, -1, MT_MAXTYPES);
		g_esTank[iIndex].g_iBossEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossEffects", "Boss Effects", "Boss_Effects", "bosseffects", g_esTank[iIndex].g_iBossEffects, value, -1, 15);
		g_esTank[iIndex].g_iBossLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossLimit", "Boss Limit", "Boss_Limit", "bosslimit", g_esTank[iIndex].g_iBossLimit, value, -1, 32);
		g_esTank[iIndex].g_iBossStages = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossStages", "Boss Stages", "Boss_Stages", "bossstages", g_esTank[iIndex].g_iBossStages, value, -1, 4);
		g_esTank[iIndex].g_iRandomTank = iGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomTank", "Random Tank", "Random_Tank", "random", g_esTank[iIndex].g_iRandomTank, value, -1, 1);
		g_esTank[iIndex].g_flRandomDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomDuration", "Random Duration", "Random_Duration", "randduration", g_esTank[iIndex].g_flRandomDuration, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flRandomInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomInterval", "Random Interval", "Random_Interval", "randinterval", g_esTank[iIndex].g_flRandomInterval, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flTransformDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDelay", "Transform Delay", "Transform_Delay", "transdelay", g_esTank[iIndex].g_flTransformDelay, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flTransformDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDuration", "Transform Duration", "Transform_Duration", "transduration", g_esTank[iIndex].g_flTransformDuration, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iSpawnType = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "SpawnType", "Spawn Type", "Spawn_Type", "spawntype", g_esTank[iIndex].g_iSpawnType, value, -1, 4);
		g_esTank[iIndex].g_iRockModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, key, "RockModel", "Rock Model", "Rock_Model", "rockmodel", g_esTank[iIndex].g_iRockModel, value, -1, 2);
		g_esTank[iIndex].g_iPropsAttached = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, key, "PropsAttached", "Props Attached", "Props_Attached", "attached", g_esTank[iIndex].g_iPropsAttached, value, -1, 511);
		g_esTank[iIndex].g_iBodyEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "BodyEffects", "Body Effects", "Body_Effects", "body", g_esTank[iIndex].g_iBodyEffects, value, -1, 127);
		g_esTank[iIndex].g_iRockEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "RockEffects", "Rock Effects", "Rock_Effects", "rock", g_esTank[iIndex].g_iRockEffects, value, -1, 15);
		g_esTank[iIndex].g_flAttackInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "AttackInterval", "Attack Interval", "Attack_Interval", "attack", g_esTank[iIndex].g_flAttackInterval, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iAutoHop = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "BunnyHop", "Bunny Hop", "Bunny_Hop", "bhop", g_esTank[iIndex].g_iAutoHop, value, -1, 1);
		g_esTank[iIndex].g_flClawDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ClawDamage", "Claw Damage", "Claw_Damage", "claw", g_esTank[iIndex].g_flClawDamage, value, -2.0, 99999.0);
		g_esTank[iIndex].g_iFootstepShake = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "FootstepShake", "Footstep Shake", "Footstep_Shake", "shake", g_esTank[iIndex].g_iFootstepShake, value, -1, 1);
		g_esTank[iIndex].g_iGroundPound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "GroundPound", "Ground Pound", "Ground_Pound", "pound", g_esTank[iIndex].g_iGroundPound, value, -1, 1);
		g_esTank[iIndex].g_flHittableDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "HittableDamage", "Hittable Damage", "Hittable_Damage", "hittable", g_esTank[iIndex].g_flHittableDamage, value, -2.0, 99999.0);
		g_esTank[iIndex].g_flIncapDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IncapDamageMultiplier", "Incap Damage Multiplier", "Incap_Damage_Multiplier", "incapdmgmulti", g_esTank[iIndex].g_flIncapDamageMultiplier, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iIntangibleBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IntangibleBody", "Intangible Body", "Intangible_Body", "intangible", g_esTank[iIndex].g_iIntangibleBody, value, -1, 1);
		g_esTank[iIndex].g_iMeleeHitMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitMode", "Melee Hit Mode", "Melee_Hit_Mode", "meleehit", g_esTank[iIndex].g_iMeleeHitMode, value, -1, 2);
		g_esTank[iIndex].g_flMeleeHitValue = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitValue", "Melee Hit Value", "Melee_Hit_Value", "meleevalue", g_esTank[iIndex].g_flMeleeHitValue, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flPunchForce = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PunchForce", "Punch Force", "Punch_Force", "punchforce", g_esTank[iIndex].g_flPunchForce, value, -2.0, 99999.0);
		g_esTank[iIndex].g_flPunchThrow = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PunchThrow", "Punch Throw", "Punch_Throw", "punchthrow", g_esTank[iIndex].g_flPunchThrow, value, -1.0, 100.0);
		g_esTank[iIndex].g_flRockDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RockDamage", "Rock Damage", "Rock_Damage", "rockdmg", g_esTank[iIndex].g_flRockDamage, value, -2.0, 99999.0);
		g_esTank[iIndex].g_iRockSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RockSound", "Rock Sound", "Rock_Sound", "rocksnd", g_esTank[iIndex].g_iRockSound, value, -1, 1);
		g_esTank[iIndex].g_flRunSpeed = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RunSpeed", "Run Speed", "Run_Speed", "speed", g_esTank[iIndex].g_flRunSpeed, value, -1.0, 99.0);
		g_esTank[iIndex].g_iSkipIncap = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SkipIncap", "Skip Incap", "Skip_Incap", "incap", g_esTank[iIndex].g_iSkipIncap, value, -1, 1);
		g_esTank[iIndex].g_iSkipTaunt = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SkipTaunt", "Skip Taunt", "Skip_Taunt", "taunt", g_esTank[iIndex].g_iSkipTaunt, value, -1, 1);
		g_esTank[iIndex].g_iSweepFist = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SweepFist", "Sweep Fist", "Sweep_Fist", "sweep", g_esTank[iIndex].g_iSweepFist, value, -1, 1);
		g_esTank[iIndex].g_flThrowForce = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowForce", "Throw Force", "Throw_Force", "throwforce", g_esTank[iIndex].g_flThrowForce, value, -1.0, 99999.0);
		g_esTank[iIndex].g_flThrowInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowInterval", "Throw Interval", "Throw_Interval", "throwint", g_esTank[iIndex].g_flThrowInterval, value, -1.0, 99999.0);
		g_esTank[iIndex].g_iThrowRock = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowRock", "Throw Rock", "Throw_Rock", "throwrock", g_esTank[iIndex].g_iThrowRock, value, -1, 1);
		g_esTank[iIndex].g_iBulletImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "BulletImmunity", "Bullet Immunity", "Bullet_Immunity", "bullet", g_esTank[iIndex].g_iBulletImmunity, value, -1, 1);
		g_esTank[iIndex].g_iExplosiveImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "ExplosiveImmunity", "Explosive Immunity", "Explosive_Immunity", "explosive", g_esTank[iIndex].g_iExplosiveImmunity, value, -1, 1);
		g_esTank[iIndex].g_iFireImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "FireImmunity", "Fire Immunity", "Fire_Immunity", "fire", g_esTank[iIndex].g_iFireImmunity, value, -1, 1);
		g_esTank[iIndex].g_iHittableImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "HittableImmunity", "Hittable Immunity", "Hittable_Immunity", "hittable", g_esTank[iIndex].g_iHittableImmunity, value, -1, 1);
		g_esTank[iIndex].g_iMeleeImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "MeleeImmunity", "Melee Immunity", "Melee_Immunity", "melee", g_esTank[iIndex].g_iMeleeImmunity, value, -1, 1);
		g_esTank[iIndex].g_iVomitImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "VomitImmunity", "Vomit Immunity", "Vomit_Immunity", "vomit", g_esTank[iIndex].g_iVomitImmunity, value, -1, 1);
		g_esTank[iIndex].g_iAccessFlags = iGetAdminFlagsValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "AccessFlags", "Access Flags", "Access_Flags", "access", value);
		g_esTank[iIndex].g_iImmunityFlags = iGetAdminFlagsValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "ImmunityFlags", "Immunity Flags", "Immunity_Flags", "immunity", value);

		vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorCharacters", "Armor Characters", "Armor_Characters", "armorchars", g_esTank[iIndex].g_sArmorCharacters, sizeof esTank::g_sArmorCharacters, value);
		vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esTank[iIndex].g_sHealthCharacters, sizeof esTank::g_sHealthCharacters, value);
		vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldCharacters", "Shield Characters", "Shield_Characters", "shieldchars", g_esTank[iIndex].g_sShieldCharacters, sizeof esTank::g_sShieldCharacters, value);
		vGetKeyValue(subsection, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, key, "ComboSet", "Combo Set", "Combo_Set", "set", g_esTank[iIndex].g_sComboSet, sizeof esTank::g_sComboSet, value);

		if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
		{
			if (StrEqual(key, "SkinColor", false) || StrEqual(key, "Skin Color", false) || StrEqual(key, "Skin_Color", false) || StrEqual(key, "skin", false))
			{
				char sValue[64], sSet[4][4];
				vGetConfigColors(sValue, sizeof sValue, value);
				strcopy(g_esTank[iIndex].g_sSkinColor, sizeof esTank::g_sSkinColor, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_iSkinColor); iPos++)
				{
					g_esTank[iIndex].g_iSkinColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
				}
			}
			else
			{
				vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankClass", "Tank Class", "Tank_Class", "class", g_esTank[iIndex].g_sTankClass, sizeof esTank::g_sTankClass, value);
				vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankName", "Tank Name", "Tank_Name", "name", g_esTank[iIndex].g_sTankName, sizeof esTank::g_sTankName, value);
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_REWARDS, false))
		{
			char sValue[2560], sSet[8][320];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTank::g_iStackLimits); iPos++)
			{
				if (iPos < (sizeof esTank::g_iRewardEnabled))
				{
					g_esTank[iIndex].g_flRewardChance[iPos] = flGetClampedValue(key, "RewardChance", "Reward Chance", "Reward_Chance", "chance", g_esTank[iIndex].g_flRewardChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flRewardDuration[iPos] = flGetClampedValue(key, "RewardDuration", "Reward Duration", "Reward_Duration", "duration", g_esTank[iIndex].g_flRewardDuration[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flRewardPercentage[iPos] = flGetClampedValue(key, "RewardPercentage", "Reward Percentage", "Reward_Percentage", "percent", g_esTank[iIndex].g_flRewardPercentage[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flActionDurationReward[iPos] = flGetClampedValue(key, "ActionDurationReward", "Action Duration Reward", "Action_Duration_Reward", "actionduration", g_esTank[iIndex].g_flActionDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flAdrenalineTimeReward[iPos] = flGetClampedValue(key, "AdrenalineTimeReward", "Adrenaline Time Reward", "Adrenaline_Time_Reward", "adrenaline", g_esTank[iIndex].g_flAdrenalineTimeReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flAttackBoostReward[iPos] = flGetClampedValue(key, "AttackBoostReward", "Attack Boost Reward", "Attack_Boost_Reward", "attackboost", g_esTank[iIndex].g_flAttackBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flDamageBoostReward[iPos] = flGetClampedValue(key, "DamageBoostReward", "Damage Boost Reward", "Damage_Boost_Reward", "dmgboost", g_esTank[iIndex].g_flDamageBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flDamageResistanceReward[iPos] = flGetClampedValue(key, "DamageResistanceReward", "Damage Resistance Reward", "Damage_Resistance_Reward", "dmgres", g_esTank[iIndex].g_flDamageResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
					g_esTank[iIndex].g_flDopamineRadiusReward[iPos] = flGetClampedValue(key, "DopamineRadiusReward", "Dopamine Radius Reward", "Dopamine_Radius_Reward", "dopamine", g_esTank[iIndex].g_flDopamineRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flFireRateReward[iPos] = flGetClampedValue(key, "FireRateReward", "Fire Rate Reward", "Fire_Rate_Reward", "firerate", g_esTank[iIndex].g_flFireRateReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flGrenadeLauncherReward[iPos] = flGetClampedValue(key, "GrenadeLauncherReward", "Grenade Launcher Reward", "Grenade_Launcher_Reward", "grenade", g_esTank[iIndex].g_flGrenadeLauncherReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flHealPercentReward[iPos] = flGetClampedValue(key, "HealPercentReward", "Heal Percent Reward", "Heal_Percent_Reward", "healpercent", g_esTank[iIndex].g_flHealPercentReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flHealthcareRadiusReward[iPos] = flGetClampedValue(key, "HealthcareRadiusReward", "Healthcare Radius Reward", "Healthcare_Radius_Reward", "healthcare", g_esTank[iIndex].g_flHealthcareRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flHeartbeatReward[iPos] = flGetClampedValue(key, "HeartbeatReward", "Heartbeat Reward", "Heartbeat_Reward", "heartbeat", g_esTank[iIndex].g_flHeartbeatReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flHollowpointAmmoReward[iPos] = flGetClampedValue(key, "HollowpointAmmoReward", "Hollowpoint Ammo Reward", "Hollowpoint_Ammo_Reward", "hollowpoint", g_esTank[iIndex].g_flHollowpointAmmoReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flJumpHeightReward[iPos] = flGetClampedValue(key, "JumpHeightReward", "Jump Height Reward", "Jump_Height_Reward", "jumpheight", g_esTank[iIndex].g_flJumpHeightReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flLadyKillerReward[iPos] = flGetClampedValue(key, "LadyKillerReward", "Lady Killer Reward", "Lady_Killer_Reward", "ladykiller", g_esTank[iIndex].g_flLadyKillerReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flLoopingVoicelineInterval[iPos] = flGetClampedValue(key, "LoopingVoicelineInterval", "Looping Voiceline Interval", "Looping_Voiceline_Interval", "loopinterval", g_esTank[iIndex].g_flLoopingVoicelineInterval[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flLuckyBulletReward[iPos] = flGetClampedValue(key, "LuckyBulletReward", "Lucky Bullet Reward", "Lucky_Bullet_Reward", "luckybullet", g_esTank[iIndex].g_flLuckyBulletReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flMotivationRadiusReward[iPos] = flGetClampedValue(key, "MotivationRadiusReward", "Motivation Radius Reward", "Motivation_Radius_Reward", "motivation", g_esTank[iIndex].g_flMotivationRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flOverdoseRadiusReward[iPos] = flGetClampedValue(key, "OverdoseRadiusReward", "Overdose Radius Reward", "Overdose_Radius_Reward", "overdose", g_esTank[iIndex].g_flOverdoseRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flPipeBombDurationReward[iPos] = flGetClampedValue(key, "PipebombDurationReward", "Pipebomb Duration Reward", "Pipebomb_Duration_Reward", "pipeduration", g_esTank[iIndex].g_flPipeBombDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flPunchResistanceReward[iPos] = flGetClampedValue(key, "PunchResistanceReward", "Punch Resistance Reward", "Punch_Resistance_Reward", "punchres", g_esTank[iIndex].g_flPunchResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
					g_esTank[iIndex].g_flRapidPistolReward[iPos] = flGetClampedValue(key, "RapidPistolReward", "Rapid Pistol Reward", "Rapid_Pistol_Reward", "rapidpistol", g_esTank[iIndex].g_flRapidPistolReward[iPos], sSet[iPos], -1.0, 1.0);
					g_esTank[iIndex].g_flRefillPercentReward[iPos] = flGetClampedValue(key, "RefillPercentReward", "Refill Percent Reward", "Refill_Percent_Reward", "refillpercent", g_esTank[iIndex].g_flRefillPercentReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flReloadRateReward[iPos] = flGetClampedValue(key, "ReloadRateReward", "Reload Rate Reward", "Reload_Rate_Reward", "reloadrate", g_esTank[iIndex].g_flReloadRateReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flShockwaveRadiusReward[iPos] = flGetClampedValue(key, "ShockwaveRadiusReward", "Shockwave Radius Reward", "Shockwave_Radius_Reward", "shockwave", g_esTank[iIndex].g_flShockwaveRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flShoveDamageReward[iPos] = flGetClampedValue(key, "ShoveDamageReward", "Shove Damage Reward", "Shove_Damage_Reward", "shovedmg", g_esTank[iIndex].g_flShoveDamageReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flShoveRateReward[iPos] = flGetClampedValue(key, "ShoveRateReward", "Shove Rate Reward", "Shove_Rate_Reward", "shoverate", g_esTank[iIndex].g_flShoveRateReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flSledgehammerRoundsReward[iPos] = flGetClampedValue(key, "SledgehammerRoundsReward", "Sledgehammer Rounds Reward", "Sledgehammer_Rounds_Reward", "sledgehammer", g_esTank[iIndex].g_flSledgehammerRoundsReward[iPos], sSet[iPos], -1.0, 100.0);
					g_esTank[iIndex].g_flSpeedBoostReward[iPos] = flGetClampedValue(key, "SpeedBoostReward", "Speed Boost Reward", "Speed_Boost_Reward", "speedboost", g_esTank[iIndex].g_flSpeedBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flSupplierReward[iPos] = flGetClampedValue(key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esTank[iIndex].g_flSupplierReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_flSwingRateReward[iPos] = flGetClampedValue(key, "SwingRateReward", "Swing Rate Reward", "Swing_Rate_Reward", "swingrate", g_esTank[iIndex].g_flSwingRateReward[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTank[iIndex].g_iRewardEnabled[iPos] = iGetClampedValue(key, "RewardEnabled", "Reward Enabled", "Reward_Enabled", "renabled", g_esTank[iIndex].g_iRewardEnabled[iPos], sSet[iPos], -2, 2147483647);
					g_esTank[iIndex].g_iRewardBots[iPos] = iGetClampedValue(key, "RewardBots", "Reward Bots", "Reward_Bots", "rbots", g_esTank[iIndex].g_iRewardBots[iPos], sSet[iPos], -2, 2147483647);
					g_esTank[iIndex].g_iRewardEffect[iPos] = iGetClampedValue(key, "RewardEffect", "Reward Effect", "Reward_Effect", "effect", g_esTank[iIndex].g_iRewardEffect[iPos], sSet[iPos], -1, 15);
					g_esTank[iIndex].g_iRewardNotify[iPos] = iGetClampedValue(key, "RewardNotify", "Reward Notify", "Reward_Notify", "rnotify", g_esTank[iIndex].g_iRewardNotify[iPos], sSet[iPos], -1, 3);
					g_esTank[iIndex].g_iRewardVisual[iPos] = iGetClampedValue(key, "RewardVisual", "Reward Visual", "Reward_Visual", "visual", g_esTank[iIndex].g_iRewardVisual[iPos], sSet[iPos], -1, 127);
					g_esTank[iIndex].g_iAmmoBoostReward[iPos] = iGetClampedValue(key, "AmmoBoostReward", "Ammo Boost Reward", "Ammo_Boost_Reward", "ammoboost", g_esTank[iIndex].g_iAmmoBoostReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iAmmoRefillReward[iPos] = iGetClampedValue(key, "AmmoRefillReward", "Ammo Refill Reward", "Ammo_Refill_Reward", "ammorefill", g_esTank[iIndex].g_iAmmoRefillReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iAmmoRegenReward[iPos] = iGetClampedValue(key, "AmmoRegenReward", "Ammo Regen Reward", "Ammo_Regen_Reward", "ammoregen", g_esTank[iIndex].g_iAmmoRegenReward[iPos], sSet[iPos], -1, 99999);
					g_esTank[iIndex].g_iBlazeHealthReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esTank[iIndex].g_iBlazeHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iBloodDonorReward[iPos] = iGetClampedValue(key, "BloodDonorReward", "Blood Donor Reward", "Blood_Donor_Reward", "donor", g_esTank[iIndex].g_iBloodDonorReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iBunnyHopReward[iPos] = iGetClampedValue(key, "BunnyHopReward", "Bunny Hop Reward", "Bunny_Hop_Reward", "bhop", g_esTank[iIndex].g_iBunnyHopReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iBurstDoorsReward[iPos] = iGetClampedValue(key, "BurstDoorsReward", "Burst Doors Reward", "Burst_Doors_Reward", "burstdoors", g_esTank[iIndex].g_iBurstDoorsReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iCleanKillsReward[iPos] = iGetClampedValue(key, "CleanKillsReward", "Clean Kills Reward", "Clean_Kills_Reward", "cleankills", g_esTank[iIndex].g_iCleanKillsReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iClusterBombsReward[iPos] = iGetClampedValue(key, "ClusterBombsReward", "Cluster Bombs Reward", "Cluster_Bombs_Reward", "cluster", g_esTank[iIndex].g_iClusterBombsReward[iPos], sSet[iPos], -1, 5);
					g_esTank[iIndex].g_iEternalFlamesReward[iPos] = iGetClampedValue(key, "EternalFlamesReward", "Eternal Flames Reward", "Eternal_Flames_Reward", "eternal", g_esTank[iIndex].g_iEternalFlamesReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iFastRecoveryReward[iPos] = iGetClampedValue(key, "FastRecoveryReward", "Fast Recovery Reward", "Fast_Recovery_Reward", "fastrecovery", g_esTank[iIndex].g_iFastRecoveryReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iFriendlyFireReward[iPos] = iGetClampedValue(key, "FriendlyFireReward", "Friendly Fire Reward", "Friendly_Fire_Reward", "friendlyfire", g_esTank[iIndex].g_iFriendlyFireReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iGhostBulletsReward[iPos] = iGetClampedValue(key, "GhostBulletsReward", "Ghost Bullets Reward", "Ghost_Bullets_Reward", "ghost", g_esTank[iIndex].g_iGhostBulletsReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iHealthRegenReward[iPos] = iGetClampedValue(key, "HealthRegenReward", "Health Regen Reward", "Health_Regen_Reward", "hpregen", g_esTank[iIndex].g_iHealthRegenReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iInfiniteAmmoReward[iPos] = iGetClampedValue(key, "InfiniteAmmoReward", "Infinite Ammo Reward", "Infinite_Ammo_Reward", "infammo", g_esTank[iIndex].g_iInfiniteAmmoReward[iPos], sSet[iPos], -1, 31);
					g_esTank[iIndex].g_iLadderActionsReward[iPos] = iGetClampedValue(key, "LadderActionsReward", "Ladder Actions Reward", "Ladder_Action_Reward", "ladderacts", g_esTank[iIndex].g_iLadderActionsReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iLaserSightReward[iPos] = iGetClampedValue(key, "LaserSightReward", "Laser Sight Reward", "Laser_Sight_Reward", "lasersight", g_esTank[iIndex].g_iLaserSightReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iLifeLeechReward[iPos] = iGetClampedValue(key, "LifeLeechReward", "Life Leech Reward", "Life_Leech_Reward", "lifeleech", g_esTank[iIndex].g_iLifeLeechReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iMedicalCutsReward[iPos] = iGetClampedValue(key, "MedicalCutsReward", "Medical Cuts Reward", "Medical_Cuts_Reward", "medcuts", g_esTank[iIndex].g_iMedicalCutsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iMeleeRangeReward[iPos] = iGetClampedValue(key, "MeleeRangeReward", "Melee Range Reward", "Melee_Range_Reward", "meleerange", g_esTank[iIndex].g_iMeleeRangeReward[iPos], sSet[iPos], -1, 99999);
					g_esTank[iIndex].g_iMidairDashesReward[iPos] = iGetClampedValue(key, "MidairDashesReward", "Midair Dashes Reward", "Midair_Dashes_Reward", "middash", g_esTank[iIndex].g_iMidairDashesReward[iPos], sSet[iPos], -1, 99999);
					g_esTank[iIndex].g_iOverhealthReward[iPos] = iGetClampedValue(key, "OverhealthReward", "Overhealth Reward", "Overhealth_Reward", "overhealth", g_esTank[iIndex].g_iOverhealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iParticleEffectVisual[iPos] = iGetClampedValue(key, "ParticleEffectVisual", "Particle Effect Visual", "Particle_Effect_Visual", "particle", g_esTank[iIndex].g_iParticleEffectVisual[iPos], sSet[iPos], -1, 15);
					g_esTank[iIndex].g_iPrefsNotify[iPos] = iGetClampedValue(key, "PrefsNotify", "Prefs Notify", "Prefs_Notify", "pnotify", g_esTank[iIndex].g_iPrefsNotify[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iRecoilDampenerReward[iPos] = iGetClampedValue(key, "RecoilDampenerReward", "Recoil Dampener Reward", "Recoil_Dampener_Reward", "recoil", g_esTank[iIndex].g_iRecoilDampenerReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iRegenBurstsReward[iPos] = iGetClampedValue(key, "RegenBurstsReward", "Regen Bursts Reward", "Regen_Bursts_Reward", "regbursts", g_esTank[iIndex].g_iRegenBurstsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iRespawnLoadoutReward[iPos] = iGetClampedValue(key, "RespawnLoadoutReward", "Respawn Loadout Reward", "Respawn_Loadout_Reward", "resloadout", g_esTank[iIndex].g_iRespawnLoadoutReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iReviveHealthReward[iPos] = iGetClampedValue(key, "ReviveHealthReward", "Revive Health Reward", "Revive_Health_Reward", "revivehp", g_esTank[iIndex].g_iReviveHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iRiotGearReward[iPos] = iGetClampedValue(key, "RiotGearReward", "Riot Gear Reward", "Riot_Gear_Reward", "riotgear", g_esTank[iIndex].g_iRiotGearReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iSafetyBubbleReward[iPos] = iGetClampedValue(key, "SafetyBubbleReward", "Safety Bubble Reward", "Safety_Bubble_Reward", "safetybubble", g_esTank[iIndex].g_iSafetyBubbleReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iShareRewards[iPos] = iGetClampedValue(key, "ShareRewards", "Share Rewards", "Share_Rewards", "share", g_esTank[iIndex].g_iShareRewards[iPos], sSet[iPos], -1, 3);
					g_esTank[iIndex].g_iShovePenaltyReward[iPos] = iGetClampedValue(key, "ShovePenaltyReward", "Shove Penalty Reward", "Shove_Penalty_Reward", "shovepenalty", g_esTank[iIndex].g_iShovePenaltyReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iSpecialAmmoReward[iPos] = iGetClampedValue(key, "SpecialAmmoReward", "Special Ammo Reward", "Special_Ammo_Reward", "specammo", g_esTank[iIndex].g_iSpecialAmmoReward[iPos], sSet[iPos], -1, 3);
					g_esTank[iIndex].g_iStackRewards[iPos] = iGetClampedValue(key, "StackRewards", "Stack Rewards", "Stack_Rewards", "rstack", g_esTank[iIndex].g_iStackRewards[iPos], sSet[iPos], -1, 2147483647);
					g_esTank[iIndex].g_iStickyGrenadesReward[iPos] = iGetClampedValue(key, "StickyGrenadesReward", "Sticky Grenades Reward", "Sticky_Grenades_Reward", "sticky", g_esTank[iIndex].g_iStickyGrenadesReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iSyringeDartsReward[iPos] = iGetClampedValue(key, "SyringeDartsReward", "Syringe Darts Reward", "Syringe_Darts_Reward", "syringe", g_esTank[iIndex].g_iSyringeDartsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
					g_esTank[iIndex].g_iThornsReward[iPos] = iGetClampedValue(key, "ThornsReward", "Thorns Reward", "Thorns_Reward", "thorns", g_esTank[iIndex].g_iThornsReward[iPos], sSet[iPos], -1, 1);
					g_esTank[iIndex].g_iUsefulRewards[iPos] = iGetClampedValue(key, "UsefulRewards", "Useful Rewards", "Useful_Rewards", "useful", g_esTank[iIndex].g_iUsefulRewards[iPos], sSet[iPos], -1, 15);
					g_esTank[iIndex].g_iVoicePitchVisual[iPos] = iGetClampedValue(key, "VoicePitchVisual", "Voice Pitch Visual", "Voice_Pitch_Visual", "voicepitch", g_esTank[iIndex].g_iVoicePitchVisual[iPos], sSet[iPos], -1, 255);

					vGetConfigColors(sValue, sizeof sValue, sSet[iPos], ';');
					vGetStringValue(key, "BodyColorVisual", "Body Color Visual", "Body_Color_Visual", "bodycolor", iPos, g_esTank[iIndex].g_sBodyColorVisual, sizeof esTank::g_sBodyColorVisual, g_esTank[iIndex].g_sBodyColorVisual2, sizeof esTank::g_sBodyColorVisual2, g_esTank[iIndex].g_sBodyColorVisual3, sizeof esTank::g_sBodyColorVisual3, g_esTank[iIndex].g_sBodyColorVisual4, sizeof esTank::g_sBodyColorVisual4, sValue);
					vGetStringValue(key, "FallVoicelineReward", "Fall Voiceline Reward", "Fall_Voiceline_Reward", "fallvoice", iPos, g_esTank[iIndex].g_sFallVoicelineReward, sizeof esTank::g_sFallVoicelineReward, g_esTank[iIndex].g_sFallVoicelineReward2, sizeof esTank::g_sFallVoicelineReward2, g_esTank[iIndex].g_sFallVoicelineReward3, sizeof esTank::g_sFallVoicelineReward3, g_esTank[iIndex].g_sFallVoicelineReward4, sizeof esTank::g_sFallVoicelineReward4, sSet[iPos]);
					vGetStringValue(key, "GlowColorVisual", "Glow Color Visual", "Glow_Color_Visual", "glowcolor", iPos, g_esTank[iIndex].g_sOutlineColorVisual, sizeof esTank::g_sOutlineColorVisual, g_esTank[iIndex].g_sOutlineColorVisual2, sizeof esTank::g_sOutlineColorVisual2, g_esTank[iIndex].g_sOutlineColorVisual3, sizeof esTank::g_sOutlineColorVisual3, g_esTank[iIndex].g_sOutlineColorVisual4, sizeof esTank::g_sOutlineColorVisual4, sValue);
					vGetStringValue(key, "ItemReward", "Item Reward", "Item_Reward", "item", iPos, g_esTank[iIndex].g_sItemReward, sizeof esTank::g_sItemReward, g_esTank[iIndex].g_sItemReward2, sizeof esTank::g_sItemReward2, g_esTank[iIndex].g_sItemReward3, sizeof esTank::g_sItemReward3, g_esTank[iIndex].g_sItemReward4, sizeof esTank::g_sItemReward4, sValue);
					vGetStringValue(key, "LightColorVisual", "Light Color Visual", "Light_Color_Visual", "lightcolor", iPos, g_esTank[iIndex].g_sLightColorVisual, sizeof esTank::g_sLightColorVisual, g_esTank[iIndex].g_sLightColorVisual2, sizeof esTank::g_sLightColorVisual2, g_esTank[iIndex].g_sLightColorVisual3, sizeof esTank::g_sLightColorVisual3, g_esTank[iIndex].g_sLightColorVisual4, sizeof esTank::g_sLightColorVisual4, sValue);
					vGetStringValue(key, "LoopingVoicelineVisual", "Looping Voiceline Visual", "Looping_Voiceline_Visual", "loopvoice", iPos, g_esTank[iIndex].g_sLoopingVoicelineVisual, sizeof esTank::g_sLoopingVoicelineVisual, g_esTank[iIndex].g_sLoopingVoicelineVisual2, sizeof esTank::g_sLoopingVoicelineVisual2, g_esTank[iIndex].g_sLoopingVoicelineVisual3, sizeof esTank::g_sLoopingVoicelineVisual3, g_esTank[iIndex].g_sLoopingVoicelineVisual4, sizeof esTank::g_sLoopingVoicelineVisual4, sSet[iPos]);
					vGetStringValue(key, "ScreenColorVisual", "Screen Color Visual", "Screen_Color_Visual", "screencolor", iPos, g_esTank[iIndex].g_sScreenColorVisual, sizeof esTank::g_sScreenColorVisual, g_esTank[iIndex].g_sScreenColorVisual2, sizeof esTank::g_sScreenColorVisual2, g_esTank[iIndex].g_sScreenColorVisual3, sizeof esTank::g_sScreenColorVisual3, g_esTank[iIndex].g_sScreenColorVisual4, sizeof esTank::g_sScreenColorVisual4, sValue);
				}

				g_esTank[iIndex].g_iStackLimits[iPos] = iGetClampedValue(key, "StackLimits", "Stack Limits", "Stack_Limits", "limits", g_esTank[iIndex].g_iStackLimits[iPos], sSet[iPos], -1, 99999);
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_GLOW, false))
		{
			if (StrEqual(key, "GlowColor", false) || StrEqual(key, "Glow Color", false) || StrEqual(key, "Glow_Color", false))
			{
				char sValue[64], sSet[3][4];
				vGetConfigColors(sValue, sizeof sValue, value);
				strcopy(g_esTank[iIndex].g_sGlowColor, sizeof esTank::g_sGlowColor, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_iGlowColor); iPos++)
				{
					g_esTank[iIndex].g_iGlowColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
				}
			}
			else if (StrEqual(key, "GlowRange", false) || StrEqual(key, "Glow Range", false) || StrEqual(key, "Glow_Range", false))
			{
				char sValue[50], sRange[2][7];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

				g_esTank[iIndex].g_iGlowMinRange = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, 99999) : g_esTank[iIndex].g_iGlowMinRange;
				g_esTank[iIndex].g_iGlowMaxRange = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, 99999) : g_esTank[iIndex].g_iGlowMaxRange;
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_BOSS, false))
		{
			char sValue[44], sSet[4][11];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTank::g_iBossHealth); iPos++)
			{
				g_esTank[iIndex].g_iBossHealth[iPos] = iGetClampedValue(key, "BossHealthStages", "Boss Health Stages", "Boss_Health_Stages", "bosshpstages", g_esTank[iIndex].g_iBossHealth[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTank[iIndex].g_iBossType[iPos] = iGetClampedValue(key, "BossTypes", "Boss Types", "Boss_Types", "bosstypes", g_esTank[iIndex].g_iBossType[iPos], sSet[iPos], -1, MT_MAXTYPES);
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_COMBO, false))
		{
			if (StrEqual(key, "ComboTypeChance", false) || StrEqual(key, "Combo Type Chance", false) || StrEqual(key, "Combo_Type_Chance", false) || StrEqual(key, "typechance", false))
			{
				char sValue[42], sSet[7][6];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_flComboTypeChance); iPos++)
				{
					g_esTank[iIndex].g_flComboTypeChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTank[iIndex].g_flComboTypeChance[iPos];
				}
			}
			else
			{
				char sValue[140], sSet[10][14];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_flComboChance); iPos++)
				{
					if (StrEqual(key, "ComboRadius", false) || StrEqual(key, "Combo Radius", false) || StrEqual(key, "Combo_Radius", false) || StrEqual(key, "radius", false))
					{
						char sRange[2][7], sSubset[14];
						strcopy(sSubset, sizeof sSubset, sSet[iPos]);
						ReplaceString(sSubset, sizeof sSubset, " ", "");
						ExplodeString(sSubset, ";", sRange, sizeof sRange, sizeof sRange[]);

						g_esTank[iIndex].g_flComboMinRadius[iPos] = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -200.0, 1.0) : g_esTank[iIndex].g_flComboMinRadius[iPos];
						g_esTank[iIndex].g_flComboMaxRadius[iPos] = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 200.0) : g_esTank[iIndex].g_flComboMaxRadius[iPos];
					}
					else
					{
						g_esTank[iIndex].g_flComboChance[iPos] = flGetClampedValue(key, "ComboChance", "Combo Chance", "Combo_Chance", "chance", g_esTank[iIndex].g_flComboChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esTank[iIndex].g_iComboCooldown[iPos] = iGetClampedValue(key, "ComboCooldown", "Combo Cooldown", "Combo_Cooldown", "cooldown", g_esTank[iIndex].g_iComboCooldown[iPos], sSet[iPos], -1, 99999);
						g_esTank[iIndex].g_flComboDamage[iPos] = flGetClampedValue(key, "ComboDamage", "Combo Damage", "Combo_Damage", "damage", g_esTank[iIndex].g_flComboDamage[iPos], sSet[iPos], -1.0, 99999.0);
						g_esTank[iIndex].g_flComboDeathChance[iPos] = flGetClampedValue(key, "ComboDeathChance", "Combo Death Chance", "Combo_Death_Chance", "deathchance", g_esTank[iIndex].g_flComboDeathChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esTank[iIndex].g_flComboDeathRange[iPos] = flGetClampedValue(key, "ComboDeathRange", "Combo Death Range", "Combo_Death_Range", "deathrange", g_esTank[iIndex].g_flComboDeathRange[iPos], sSet[iPos], -1.0, 99999.0);
						g_esTank[iIndex].g_flComboDelay[iPos] = flGetClampedValue(key, "ComboDelay", "Combo Delay", "Combo_Delay", "delay", g_esTank[iIndex].g_flComboDelay[iPos], sSet[iPos], -1.0, 99999.0);
						g_esTank[iIndex].g_flComboDuration[iPos] = flGetClampedValue(key, "ComboDuration", "Combo Duration", "Combo_Duration", "duration", g_esTank[iIndex].g_flComboDuration[iPos], sSet[iPos], -1.0, 99999.0);
						g_esTank[iIndex].g_flComboInterval[iPos] = flGetClampedValue(key, "ComboInterval", "Combo Interval", "Combo_Interval", "interval", g_esTank[iIndex].g_flComboInterval[iPos], sSet[iPos], -1.0, 99999.0);
						g_esTank[iIndex].g_flComboRange[iPos] = flGetClampedValue(key, "ComboRange", "Combo Range", "Combo_Range", "range", g_esTank[iIndex].g_flComboRange[iPos], sSet[iPos], -1.0, 99999.0);
						g_esTank[iIndex].g_flComboRangeChance[iPos] = flGetClampedValue(key, "ComboRangeChance", "Combo Range Chance", "Combo_Range_Chance", "rangechance", g_esTank[iIndex].g_flComboRangeChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esTank[iIndex].g_iComboRangeCooldown[iPos] = iGetClampedValue(key, "ComboRangeCooldown", "Combo Range Cooldown", "Combo_Range_Cooldown", "rangecooldown", g_esTank[iIndex].g_iComboRangeCooldown[iPos], sSet[iPos], -1, 99999);
						g_esTank[iIndex].g_flComboRockChance[iPos] = flGetClampedValue(key, "ComboRockChance", "Combo Rock Chance", "Combo_Rock_Chance", "rockchance", g_esTank[iIndex].g_flComboRockChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esTank[iIndex].g_iComboRockCooldown[iPos] = iGetClampedValue(key, "ComboRockCooldown", "Combo Rock Cooldown", "Combo_Rock_Cooldown", "rockcooldown", g_esTank[iIndex].g_iComboRockCooldown[iPos], sSet[iPos], -1, 99999);
						g_esTank[iIndex].g_flComboSpeed[iPos] = flGetClampedValue(key, "ComboSpeed", "Combo Speed", "Combo_Speed", "speed", g_esTank[iIndex].g_flComboSpeed[iPos], sSet[iPos], -1.0, 99999.0);
					}
				}
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_TRANSFORM, false))
		{
			if (StrEqual(key, "TransformTypes", false) || StrEqual(key, "Transform Types", false) || StrEqual(key, "Transform_Types", false) || StrEqual(key, "transtypes", false))
			{
				char sValue[50], sSet[10][5];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_iTransformType); iPos++)
				{
					g_esTank[iIndex].g_iTransformType[iPos] = (sSet[iPos][0] != '\0') ? iClamp(StringToInt(sSet[iPos]), -1, MT_MAXTYPES) : g_esTank[iIndex].g_iTransformType[iPos];
				}
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_PROPS, false))
		{
			if (StrEqual(key, "PropsChance", false) || StrEqual(key, "Props Chance", false) || StrEqual(key, "Props_Chance", false) || StrEqual(key, "chance", false))
			{
				char sValue[54], sSet[9][6];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_flPropsChance); iPos++)
				{
					g_esTank[iIndex].g_flPropsChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTank[iIndex].g_flPropsChance[iPos];
				}
			}
			else
			{
				char sValue[64], sSet[4][4];
				vGetConfigColors(sValue, sizeof sValue, value);
				vSaveConfigColors(key, "OxygenTankColor", "Oxygen Tank Color", "Oxygen_Tank_Color", "oxygen", g_esTank[iIndex].g_sOzTankColor, sizeof esTank::g_sOzTankColor, value);
				vSaveConfigColors(key, "FlameColor", "Flame Color", "Flame_Color", "flame", g_esTank[iIndex].g_sFlameColor, sizeof esTank::g_sFlameColor, value);
				vSaveConfigColors(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esTank[iIndex].g_sRockColor, sizeof esTank::g_sRockColor, value);
				vSaveConfigColors(key, "TireColor", "Tire Color", "Tire_Color", "tire", g_esTank[iIndex].g_sTireColor, sizeof esTank::g_sTireColor, value);
				vSaveConfigColors(key, "PropaneTankColor", "Propane Tank Color", "Propane_Tank_Color", "propane", g_esTank[iIndex].g_sPropTankColor, sizeof esTank::g_sPropTankColor, value);
				vSaveConfigColors(key, "FlashlightColor", "Flashlight Color", "Flashlight_Color", "flashlight", g_esTank[iIndex].g_sFlashlightColor, sizeof esTank::g_sFlashlightColor, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);

				for (int iPos = 0; iPos < (sizeof esTank::g_iLightColor); iPos++)
				{
					g_esTank[iIndex].g_iLightColor[iPos] = iGetClampedValue(key, "LightColor", "Light Color", "Light_Color", "light", g_esTank[iIndex].g_iLightColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iOzTankColor[iPos] = iGetClampedValue(key, "OxygenTankColor", "Oxygen Tank Color", "Oxygen_Tank_Color", "oxygen", g_esTank[iIndex].g_iOzTankColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iFlameColor[iPos] = iGetClampedValue(key, "FlameColor", "Flame Color", "Flame_Color", "flame", g_esTank[iIndex].g_iFlameColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iRockColor[iPos] = iGetClampedValue(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esTank[iIndex].g_iRockColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iTireColor[iPos] = iGetClampedValue(key, "TireColor", "Tire Color", "Tire_Color", "tire", g_esTank[iIndex].g_iTireColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iPropTankColor[iPos] = iGetClampedValue(key, "PropaneTankColor", "Propane Tank Color", "Propane_Tank_Color", "propane", g_esTank[iIndex].g_iPropTankColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iFlashlightColor[iPos] = iGetClampedValue(key, "FlashlightColor", "Flashlight Color", "Flashlight_Color", "flashlight", g_esTank[iIndex].g_iFlashlightColor[iPos], sSet[iPos], -1, 255);
					g_esTank[iIndex].g_iCrownColor[iPos] = iGetClampedValue(key, "CrownColor", "Crown Color", "Crown_Color", "crown", g_esTank[iIndex].g_iCrownColor[iPos], sSet[iPos], -1, 255);
				}
			}
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_PARTICLES, false))
		{
			if (StrEqual(key, "BodyChance", false) || StrEqual(key, "Body Chance", false) || StrEqual(key, "Body_Chance", false) || StrEqual(key, "bchance", false))
			{
				char sValue[54], sSet[9][6];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_flBodyChance); iPos++)
				{
					g_esTank[iIndex].g_flBodyChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTank[iIndex].g_flBodyChance[iPos];
				}
			}
			else if (StrEqual(key, "RockChance", false) || StrEqual(key, "Rock Chance", false) || StrEqual(key, "Rock_Chance", false) || StrEqual(key, "rchance", false))
			{
				char sValue[54], sSet[9][6];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esTank::g_flRockChance); iPos++)
				{
					g_esTank[iIndex].g_flRockChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTank[iIndex].g_flRockChance[iPos];
				}
			}
		}

		if (g_esTank[iIndex].g_iAbilityCount == -1 && (StrContains(subsection, "ability", false) != -1 || (((!strncmp(key, "ability", 7, false) && StrContains(key, "enabled", false) != -1) || StrEqual(key, "aenabled", false)
			|| (StrContains(key, " hit", false) != -1 && StrContains(key, "mode", false) == -1) || StrEqual(key, "hit", false) || StrContains(key, "break", false) != -1 || StrEqual(key, "rock", false)) && StringToInt(value) > 0)))
		{
			g_esTank[iIndex].g_iAbilityCount = 0;
		}

		if (g_esTank[iIndex].g_iAbilityCount != -1 && (bFoundSection(subsection, 0) || bFoundSection(subsection, 1) || bFoundSection(subsection, 2) || bFoundSection(subsection, 3))
			&& (((!strncmp(key, "ability", 7, false) && StrContains(key, "enabled", false) != -1) || StrEqual(key, "aenabled", false) || (StrContains(key, " hit", false) != -1
			&& StrContains(key, "mode", false) == -1) || StrEqual(key, "hit", false) || StrContains(key, "break", false) != -1 || StrEqual(key, "rock", false)) && StringToInt(value) > 0))
		{
			g_esTank[iIndex].g_iAbilityCount++;
		}

		vConfigsLoadedForward(subsection, key, value, iIndex, -1, mode, false);
	}
}

void vReadTeammateSettings(int special, int mode, const char[] subsection, const char[] specsection, const char[] key, const char[] value)
{
	g_esTeammate[special].g_iSpecialNote = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialNote", "Special Note", "Special_Note", "note", g_esTeammate[special].g_iSpecialNote, value, -1, 1);
	g_esTeammate[special].g_iSpecialModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpecialModel", "Special Model", "Special_Model", "model", g_esTeammate[special].g_iSpecialModel, value, -1, 3);
	g_esTeammate[special].g_flBurnDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurnDuration", "Burn Duration", "Burn_Duration", "burndur", g_esTeammate[special].g_flBurnDuration, value, -1.0, 99999.0);
	g_esTeammate[special].g_flBurntSkin = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurntSkin", "Burnt Skin", "Burnt_Skin", "burnt", g_esTeammate[special].g_flBurntSkin, value, -2.0, 1.0);
	g_esTeammate[special].g_iDeathRevert = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "DeathRevert", "Death Revert", "Death_Revert", "revert", g_esTeammate[special].g_iDeathRevert, value, -1, 1);
	g_esTeammate[special].g_iAnnounceArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceArrival", "Announce Arrival", "Announce_Arrival", "arrival", g_esTeammate[special].g_iAnnounceArrival, value, -1, 31);
	g_esTeammate[special].g_iAnnounceDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceDeath", "Announce Death", "Announce_Death", "death", g_esTeammate[special].g_iAnnounceDeath, value, -1, 2);
	g_esTeammate[special].g_iAnnounceKill = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceKill", "Announce Kill", "Announce_Kill", "kill", g_esTeammate[special].g_iAnnounceKill, value, -1, 1);
	g_esTeammate[special].g_iArrivalMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalMessage", "Arrival Message", "Arrival_Message", "arrivalmsg", g_esTeammate[special].g_iArrivalMessage, value, -1, 1023);
	g_esTeammate[special].g_iArrivalSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalSound", "Arrival Sound", "Arrival_Sound", "arrivalsnd", g_esTeammate[special].g_iArrivalSound, value, -1, 1);
	g_esTeammate[special].g_iDeathDetails = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathDetails", "Death Details", "Death_Details", "deathdets", g_esTeammate[special].g_iDeathDetails, value, -1, 5);
	g_esTeammate[special].g_iDeathMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathMessage", "Death Message", "Death_Message", "deathmsg", g_esTeammate[special].g_iDeathMessage, value, -1, 1023);
	g_esTeammate[special].g_iDeathSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathSound", "Death Sound", "Death_Sound", "deathsnd", g_esTeammate[special].g_iDeathSound, value, -1, 1);
	g_esTeammate[special].g_iKillMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "KillMessage", "Kill Message", "Kill_Message", "killmsg", g_esTeammate[special].g_iKillMessage, value, -1, 1023);
	g_esTeammate[special].g_iVocalizeArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeArrival", "Vocalize Arrival", "Vocalize_Arrival", "arrivalvoc", g_esTeammate[special].g_iVocalizeArrival, value, -1, 1);
	g_esTeammate[special].g_iVocalizeDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeDeath", "Vocalize Death", "Vocalize_Death", "deathvoc", g_esTeammate[special].g_iVocalizeDeath, value, -1, 1);
	g_esTeammate[special].g_iGlowEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowEnabled", "Glow Enabled", "Glow_Enabled", "genabled", g_esTeammate[special].g_iGlowEnabled, value, -1, 1);
	g_esTeammate[special].g_iGlowFlashing = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowFlashing", "Glow Flashing", "Glow_Flashing", "flashing", g_esTeammate[special].g_iGlowFlashing, value, -1, 1);
	g_esTeammate[special].g_iGlowType = iGetKeyValue(subsection, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, MT_CONFIG_SECTION_GLOW, key, "GlowType", "Glow Type", "Glow_Type", "type", g_esTeammate[special].g_iGlowType, value, -1, 1);
	g_esTeammate[special].g_flArmorPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorPercentage", "Armor Percentage", "Armor_Percentage", "armorpercent", g_esTeammate[special].g_flArmorPercentage, value, -1.0, 1.0);
	g_esTeammate[special].g_flArmorResistance[0] = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esTeammate[special].g_flArmorResistance[0], value, -1.0, 1.0);
	g_esTeammate[special].g_flShieldPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldPercentage", "Shield Percentage", "Shield_Percentage", "shieldpercent", g_esTeammate[special].g_flShieldPercentage, value, -1.0, 1.0);
	g_esTeammate[special].g_flShieldRate = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldRate", "Shield Rate", "Shield_Rate", "shieldrate", g_esTeammate[special].g_flShieldRate, value, -1.0, 1.0);
	g_esTeammate[special].g_flPassiveDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveDelay", "Passive Delay", "Passive_Delay", "passdelay", g_esTeammate[special].g_flPassiveDelay, value, -1.0, 99999.0);
	g_esTeammate[special].g_iPassiveHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveHealth", "Passive Health", "Passive_Health", "passhp", g_esTeammate[special].g_iPassiveHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
	g_esTeammate[special].g_flPassiveInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveInterval", "Passive Interval", "Passive_Interval", "passint", g_esTeammate[special].g_flPassiveInterval, value, -1.0, 99999.0);
	g_esTeammate[special].g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esTeammate[special].g_iDisplayHealth, value, -1, 11);
	g_esTeammate[special].g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esTeammate[special].g_iDisplayHealthType, value, -1, 2);
	g_esTeammate[special].g_flHealPercentMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthPercentageMultiplier", "Health Percentage Multiplier", "Health_Percentage_Multiplier", "hpmulti", g_esTeammate[special].g_flHealPercentMultiplier, value, -1.0, 99999.0);
	g_esTeammate[special].g_iHumanMultiplierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HumanMultiplierMode", "Human Multiplier Mode", "Human_Multiplier_Mode", "humanmultimode", g_esTeammate[special].g_iHumanMultiplierMode, value, -1, 1);
	g_esTeammate[special].g_iMinimumHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MinimumHumans", "Minimum Humans", "Minimum_Humans", "minhumans", g_esTeammate[special].g_iMinimumHumans, value, -1, 32);
	g_esTeammate[special].g_iMultiplyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MultiplyHealth", "Multiply Health", "Multiply_Health", "multihp", g_esTeammate[special].g_iMultiplyHealth, value, -1, 3);
	g_esTeammate[special].g_iSpawnProtection = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "SpawnProtection", "Spawn Protection", "Spawn_Protection", "protect", g_esTeammate[special].g_iSpawnProtection, value, -1, 3);
	g_esTeammate[special].g_flArmorDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorDuration", "Armor Duration", "Armor_Duration", "armorduration", g_esTeammate[special].g_flArmorDuration, value, -1.0, 99999.0);
	g_esTeammate[special].g_flArmorResistance[1] = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esTeammate[special].g_flArmorResistance[1], value, -1.0, 1.0);
	g_esTeammate[special].g_flShieldDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldDuration", "Shield Duration", "Shield_Duration", "shieldduration", g_esTeammate[special].g_flShieldDuration, value, -1.0, 99999.0);
	g_esTeammate[special].g_flShieldResistance = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldResistance", "Shield Resistance", "Shield_Resistance", "shieldres", g_esTeammate[special].g_flShieldResistance, value, -1.0, 1.0);
	g_esTeammate[special].g_iBossEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossEffects", "Boss Effects", "Boss_Effects", "bosseffects", g_esTeammate[special].g_iBossEffects, value, -1, 15);
	g_esTeammate[special].g_iBossStages = iGetKeyValue(subsection, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, MT_CONFIG_SECTION_BOSS, key, "BossStages", "Boss Stages", "Boss_Stages", "bossstages", g_esTeammate[special].g_iBossStages, value, -1, 4);
	g_esTeammate[special].g_iRandomSpecial = iGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomSpecial", "Random Special", "Random_Special", "random", g_esTeammate[special].g_iRandomSpecial, value, -1, 1);
	g_esTeammate[special].g_flRandomDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomDuration", "Random Duration", "Random_Duration", "randduration", g_esTeammate[special].g_flRandomDuration, value, -1.0, 99999.0);
	g_esTeammate[special].g_flRandomInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, MT_CONFIG_SECTION_RANDOM, key, "RandomInterval", "Random Interval", "Random_Interval", "randinterval", g_esTeammate[special].g_flRandomInterval, value, -1.0, 99999.0);
	g_esTeammate[special].g_flTransformDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDelay", "Transform Delay", "Transform_Delay", "transdelay", g_esTeammate[special].g_flTransformDelay, value, -1.0, 99999.0);
	g_esTeammate[special].g_flTransformDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, MT_CONFIG_SECTION_TRANSFORM, key, "TransformDuration", "Transform Duration", "Transform_Duration", "transduration", g_esTeammate[special].g_flTransformDuration, value, -1.0, 99999.0);
	g_esTeammate[special].g_iSpawnType = iGetKeyValue(subsection, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, MT_CONFIG_SECTION_SPAWN, key, "SpawnType", "Spawn Type", "Spawn_Type", "spawntype", g_esTeammate[special].g_iSpawnType, value, -1, 4);
	g_esTeammate[special].g_iRockModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, MT_CONFIG_SECTION_PROPS, key, "RockModel", "Rock Model", "Rock_Model", "rockmodel", g_esTeammate[special].g_iRockModel, value, -1, 2);
	g_esTeammate[special].g_iBodyEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "BodyEffects", "Body Effects", "Body_Effects", "body", g_esTeammate[special].g_iBodyEffects, value, -1, 127);
	g_esTeammate[special].g_iRockEffects = iGetKeyValue(subsection, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, MT_CONFIG_SECTION_PARTICLES, key, "RockEffects", "Rock Effects", "Rock_Effects", "rock", g_esTeammate[special].g_iRockEffects, value, -1, 15);
	g_esTeammate[special].g_flAttackInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "AttackInterval", "Attack Interval", "Attack_Interval", "attack", g_esTeammate[special].g_flAttackInterval, value, -1.0, 99999.0);
	g_esTeammate[special].g_iAutoHop = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "BunnyHop", "Bunny Hop", "Bunny_Hop", "bhop", g_esTeammate[special].g_iAutoHop, value, -1, 1);
	g_esTeammate[special].g_flClawDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ClawDamage", "Claw Damage", "Claw_Damage", "claw", g_esTeammate[special].g_flClawDamage, value, -2.0, 99999.0);
	g_esTeammate[special].g_flHittableDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "HittableDamage", "Hittable Damage", "Hittable_Damage", "hittable", g_esTeammate[special].g_flHittableDamage, value, -2.0, 99999.0);
	g_esTeammate[special].g_flIncapDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IncapDamageMultiplier", "Incap Damage Multiplier", "Incap_Damage_Multiplier", "incapdmgmulti", g_esTeammate[special].g_flIncapDamageMultiplier, value, -1.0, 99999.0);
	g_esTeammate[special].g_iIntangibleBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IntangibleBody", "Intangible Body", "Intangible_Body", "intangible", g_esTeammate[special].g_iIntangibleBody, value, -1, 1);
	g_esTeammate[special].g_iMeleeHitMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitMode", "Melee Hit Mode", "Melee_Hit_Mode", "meleehit", g_esTeammate[special].g_iMeleeHitMode, value, -1, 2);
	g_esTeammate[special].g_flMeleeHitValue = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitValue", "Melee Hit Value", "Melee_Hit_Value", "meleevalue", g_esTeammate[special].g_flMeleeHitValue, value, -1.0, 99999.0);
	g_esTeammate[special].g_flPinDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PinDamage", "Pin Damage", "Pin_Damage", "pindmg", g_esTeammate[special].g_flPinDamage, value, -2.0, 99999.0);
	g_esTeammate[special].g_flRunSpeed = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RunSpeed", "Run Speed", "Run_Speed", "speed", g_esTeammate[special].g_flRunSpeed, value, -1.0, 99.0);
	g_esTeammate[special].g_flSpecialInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SpecialInterval", "Special Interval", "Special_Interval", "specint", g_esTeammate[special].g_flSpecialInterval, value, -1.0, 99999.0);
	g_esTeammate[special].g_iThrowRock = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowRock", "Throw Rock", "Throw_Rock", "throwrock", g_esTeammate[special].g_iThrowRock, value, -1, 1);
	g_esTeammate[special].g_iBulletImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "BulletImmunity", "Bullet Immunity", "Bullet_Immunity", "bullet", g_esTeammate[special].g_iBulletImmunity, value, -1, 1);
	g_esTeammate[special].g_iExplosiveImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "ExplosiveImmunity", "Explosive Immunity", "Explosive_Immunity", "explosive", g_esTeammate[special].g_iExplosiveImmunity, value, -1, 1);
	g_esTeammate[special].g_iFireImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "FireImmunity", "Fire Immunity", "Fire_Immunity", "fire", g_esTeammate[special].g_iFireImmunity, value, -1, 1);
	g_esTeammate[special].g_iHittableImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "HittableImmunity", "Hittable Immunity", "Hittable_Immunity", "hittable", g_esTeammate[special].g_iHittableImmunity, value, -1, 1);
	g_esTeammate[special].g_iMeleeImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "MeleeImmunity", "Melee Immunity", "Melee_Immunity", "melee", g_esTeammate[special].g_iMeleeImmunity, value, -1, 1);
	g_esTeammate[special].g_iVomitImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "VomitImmunity", "Vomit Immunity", "Vomit_Immunity", "vomit", g_esTeammate[special].g_iVomitImmunity, value, -1, 1);

	vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorCharacters", "Armor Characters", "Armor_Characters", "armorchars", g_esTeammate[special].g_sArmorCharacters, sizeof esTeammate::g_sArmorCharacters, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esTeammate[special].g_sHealthCharacters, sizeof esTeammate::g_sHealthCharacters, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldCharacters", "Shield Characters", "Shield_Characters", "shieldchars", g_esTeammate[special].g_sShieldCharacters, sizeof esTeammate::g_sShieldCharacters, value);
	vGetKeyValue(subsection, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, MT_CONFIG_SECTION_COMBO, key, "ComboSet", "Combo Set", "Combo_Set", "set", g_esTeammate[special].g_sComboSet, sizeof esTeammate::g_sComboSet, value);

	if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
	{
		if (StrEqual(key, "SkinColor", false) || StrEqual(key, "Skin Color", false) || StrEqual(key, "Skin_Color", false) || StrEqual(key, "skin", false))
		{
			char sValue[64], sSet[4][4];
			vGetConfigColors(sValue, sizeof sValue, value);
			strcopy(g_esTeammate[special].g_sSkinColor, sizeof esTeammate::g_sSkinColor, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_iSkinColor); iPos++)
			{
				g_esTeammate[special].g_iSkinColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
			}
		}
		else if (StrContains(key, "Name", false) != -1)
		{
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BoomerName", "Boomer Name", "Boomer_Name", "bname", g_esTeammate[special].g_sBoomerName, sizeof esTeammate::g_sBoomerName, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "ChargerName", "Charger Name", "Charger_Name", "cname", g_esTeammate[special].g_sChargerName, sizeof esTeammate::g_sChargerName, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "HunterName", "Hunter Name", "Hunter_Name", "hname", g_esTeammate[special].g_sHunterName, sizeof esTeammate::g_sHunterName, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "JockeyName", "Jockey Name", "Jockey_Name", "jname", g_esTeammate[special].g_sJockeyName, sizeof esTeammate::g_sJockeyName, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SmokerName", "Smoker Name", "Smoker_Name", "smname", g_esTeammate[special].g_sSmokerName, sizeof esTeammate::g_sSmokerName, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpitterName", "Spitter Name", "Spitter_Name", "spname", g_esTeammate[special].g_sSpitterName, sizeof esTeammate::g_sSpitterName, value);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_REWARDS, false))
	{
		char sValue[2560], sSet[8][320];
		strcopy(sValue, sizeof sValue, value);
		ReplaceString(sValue, sizeof sValue, " ", "");
		ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
		for (int iPos = 0; iPos < (sizeof esTeammate::g_iStackLimits); iPos++)
		{
			if (iPos < (sizeof esTeammate::g_iRewardEnabled))
			{
				g_esTeammate[special].g_flRewardChance[iPos] = flGetClampedValue(key, "RewardChance", "Reward Chance", "Reward_Chance", "chance", g_esTeammate[special].g_flRewardChance[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flRewardDuration[iPos] = flGetClampedValue(key, "RewardDuration", "Reward Duration", "Reward_Duration", "duration", g_esTeammate[special].g_flRewardDuration[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flRewardPercentage[iPos] = flGetClampedValue(key, "RewardPercentage", "Reward Percentage", "Reward_Percentage", "percent", g_esTeammate[special].g_flRewardPercentage[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flActionDurationReward[iPos] = flGetClampedValue(key, "ActionDurationReward", "Action Duration Reward", "Action_Duration_Reward", "actionduration", g_esTeammate[special].g_flActionDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flAdrenalineTimeReward[iPos] = flGetClampedValue(key, "AdrenalineTimeReward", "Adrenaline Time Reward", "Adrenaline_Time_Reward", "adrenaline", g_esTeammate[special].g_flAdrenalineTimeReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flAttackBoostReward[iPos] = flGetClampedValue(key, "AttackBoostReward", "Attack Boost Reward", "Attack_Boost_Reward", "attackboost", g_esTeammate[special].g_flAttackBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flDamageBoostReward[iPos] = flGetClampedValue(key, "DamageBoostReward", "Damage Boost Reward", "Damage_Boost_Reward", "dmgboost", g_esTeammate[special].g_flDamageBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flDamageResistanceReward[iPos] = flGetClampedValue(key, "DamageResistanceReward", "Damage Resistance Reward", "Damage_Resistance_Reward", "dmgres", g_esTeammate[special].g_flDamageResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
				g_esTeammate[special].g_flDopamineRadiusReward[iPos] = flGetClampedValue(key, "DopamineRadiusReward", "Dopamine Radius Reward", "Dopamine_Radius_Reward", "dopamine", g_esTeammate[special].g_flDopamineRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flFireRateReward[iPos] = flGetClampedValue(key, "FireRateReward", "Fire Rate Reward", "Fire_Rate_Reward", "firerate", g_esTeammate[special].g_flFireRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flGrenadeLauncherReward[iPos] = flGetClampedValue(key, "GrenadeLauncherReward", "Grenade Launcher Reward", "Grenade_Launcher_Reward", "grenade", g_esTeammate[special].g_flGrenadeLauncherReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flHealPercentReward[iPos] = flGetClampedValue(key, "HealPercentReward", "Heal Percent Reward", "Heal_Percent_Reward", "healpercent", g_esTeammate[special].g_flHealPercentReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flHealthcareRadiusReward[iPos] = flGetClampedValue(key, "HealthcareRadiusReward", "Healthcare Radius Reward", "Healthcare_Radius_Reward", "healthcare", g_esTeammate[special].g_flHealthcareRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flHeartbeatReward[iPos] = flGetClampedValue(key, "HeartbeatReward", "Heartbeat Reward", "Heartbeat_Reward", "heartbeat", g_esTeammate[special].g_flHeartbeatReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flHollowpointAmmoReward[iPos] = flGetClampedValue(key, "HollowpointAmmoReward", "Hollowpoint Ammo Reward", "Hollowpoint_Ammo_Reward", "hollowpoint", g_esTeammate[special].g_flHollowpointAmmoReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flJumpHeightReward[iPos] = flGetClampedValue(key, "JumpHeightReward", "Jump Height Reward", "Jump_Height_Reward", "jumpheight", g_esTeammate[special].g_flJumpHeightReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flLadyKillerReward[iPos] = flGetClampedValue(key, "LadyKillerReward", "Lady Killer Reward", "Lady_Killer_Reward", "ladykiller", g_esTeammate[special].g_flLadyKillerReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flLoopingVoicelineInterval[iPos] = flGetClampedValue(key, "LoopingVoicelineInterval", "Looping Voiceline Interval", "Looping_Voiceline_Interval", "loopinterval", g_esTeammate[special].g_flLoopingVoicelineInterval[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flLuckyBulletReward[iPos] = flGetClampedValue(key, "LuckyBulletReward", "Lucky Bullet Reward", "Lucky_Bullet_Reward", "luckybullet", g_esTeammate[special].g_flLuckyBulletReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flMotivationRadiusReward[iPos] = flGetClampedValue(key, "MotivationRadiusReward", "Motivation Radius Reward", "Motivation_Radius_Reward", "motivation", g_esTeammate[special].g_flMotivationRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flOverdoseRadiusReward[iPos] = flGetClampedValue(key, "OverdoseRadiusReward", "Overdose Radius Reward", "Overdose_Radius_Reward", "overdose", g_esTeammate[special].g_flOverdoseRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flPipeBombDurationReward[iPos] = flGetClampedValue(key, "PipebombDurationReward", "Pipebomb Duration Reward", "Pipebomb_Duration_Reward", "pipeduration", g_esTeammate[special].g_flPipeBombDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flPunchResistanceReward[iPos] = flGetClampedValue(key, "PunchResistanceReward", "Punch Resistance Reward", "Punch_Resistance_Reward", "punchres", g_esTeammate[special].g_flPunchResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
				g_esTeammate[special].g_flRapidPistolReward[iPos] = flGetClampedValue(key, "RapidPistolReward", "Rapid Pistol Reward", "Rapid_Pistol_Reward", "rapidpistol", g_esTeammate[special].g_flRapidPistolReward[iPos], sSet[iPos], -1.0, 1.0);
				g_esTeammate[special].g_flRefillPercentReward[iPos] = flGetClampedValue(key, "RefillPercentReward", "Refill Percent Reward", "Refill_Percent_Reward", "refillpercent", g_esTeammate[special].g_flRefillPercentReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flReloadRateReward[iPos] = flGetClampedValue(key, "ReloadRateReward", "Reload Rate Reward", "Reload_Rate_Reward", "reloadrate", g_esTeammate[special].g_flReloadRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flShockwaveRadiusReward[iPos] = flGetClampedValue(key, "ShockwaveRadiusReward", "Shockwave Radius Reward", "Shockwave_Radius_Reward", "shockwave", g_esTeammate[special].g_flShockwaveRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flShoveDamageReward[iPos] = flGetClampedValue(key, "ShoveDamageReward", "Shove Damage Reward", "Shove_Damage_Reward", "shovedmg", g_esTeammate[special].g_flShoveDamageReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flShoveRateReward[iPos] = flGetClampedValue(key, "ShoveRateReward", "Shove Rate Reward", "Shove_Rate_Reward", "shoverate", g_esTeammate[special].g_flShoveRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flSledgehammerRoundsReward[iPos] = flGetClampedValue(key, "SledgehammerRoundsReward", "Sledgehammer Rounds Reward", "Sledgehammer_Rounds_Reward", "sledgehammer", g_esTeammate[special].g_flSledgehammerRoundsReward[iPos], sSet[iPos], -1.0, 100.0);
				g_esTeammate[special].g_flSpeedBoostReward[iPos] = flGetClampedValue(key, "SpeedBoostReward", "Speed Boost Reward", "Speed_Boost_Reward", "speedboost", g_esTeammate[special].g_flSpeedBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flSupplierReward[iPos] = flGetClampedValue(key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esTeammate[special].g_flSupplierReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_flSwingRateReward[iPos] = flGetClampedValue(key, "SwingRateReward", "Swing Rate Reward", "Swing_Rate_Reward", "swingrate", g_esTeammate[special].g_flSwingRateReward[iPos], sSet[iPos], -1.0, 99999.0);
				g_esTeammate[special].g_iRewardEnabled[iPos] = iGetClampedValue(key, "RewardEnabled", "Reward Enabled", "Reward_Enabled", "renabled", g_esTeammate[special].g_iRewardEnabled[iPos], sSet[iPos], -2, 2147483647);
				g_esTeammate[special].g_iRewardBots[iPos] = iGetClampedValue(key, "RewardBots", "Reward Bots", "Reward_Bots", "rbots", g_esTeammate[special].g_iRewardBots[iPos], sSet[iPos], -2, 2147483647);
				g_esTeammate[special].g_iRewardEffect[iPos] = iGetClampedValue(key, "RewardEffect", "Reward Effect", "Reward_Effect", "effect", g_esTeammate[special].g_iRewardEffect[iPos], sSet[iPos], -1, 15);
				g_esTeammate[special].g_iRewardNotify[iPos] = iGetClampedValue(key, "RewardNotify", "Reward Notify", "Reward_Notify", "rnotify", g_esTeammate[special].g_iRewardNotify[iPos], sSet[iPos], -1, 3);
				g_esTeammate[special].g_iRewardVisual[iPos] = iGetClampedValue(key, "RewardVisual", "Reward Visual", "Reward_Visual", "visual", g_esTeammate[special].g_iRewardVisual[iPos], sSet[iPos], -1, 127);
				g_esTeammate[special].g_iAmmoBoostReward[iPos] = iGetClampedValue(key, "AmmoBoostReward", "Ammo Boost Reward", "Ammo_Boost_Reward", "ammoboost", g_esTeammate[special].g_iAmmoBoostReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iAmmoRefillReward[iPos] = iGetClampedValue(key, "AmmoRefillReward", "Ammo Refill Reward", "Ammo_Refill_Reward", "ammorefill", g_esTeammate[special].g_iAmmoRefillReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iAmmoRegenReward[iPos] = iGetClampedValue(key, "AmmoRegenReward", "Ammo Regen Reward", "Ammo_Regen_Reward", "ammoregen", g_esTeammate[special].g_iAmmoRegenReward[iPos], sSet[iPos], -1, 99999);
				g_esTeammate[special].g_iBlazeHealthReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esTeammate[special].g_iBlazeHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iBloodDonorReward[iPos] = iGetClampedValue(key, "BloodDonorReward", "Blood Donor Reward", "Blood_Donor_Reward", "donor", g_esTeammate[special].g_iBloodDonorReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iBunnyHopReward[iPos] = iGetClampedValue(key, "BunnyHopReward", "Bunny Hop Reward", "Bunny_Hop_Reward", "bhop", g_esTeammate[special].g_iBunnyHopReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iBurstDoorsReward[iPos] = iGetClampedValue(key, "BurstDoorsReward", "Burst Doors Reward", "Burst_Doors_Reward", "burstdoors", g_esTeammate[special].g_iBurstDoorsReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iCleanKillsReward[iPos] = iGetClampedValue(key, "CleanKillsReward", "Clean Kills Reward", "Clean_Kills_Reward", "cleankills", g_esTeammate[special].g_iCleanKillsReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iClusterBombsReward[iPos] = iGetClampedValue(key, "ClusterBombsReward", "Cluster Bombs Reward", "Cluster_Bombs_Reward", "cluster", g_esTeammate[special].g_iClusterBombsReward[iPos], sSet[iPos], -1, 5);
				g_esTeammate[special].g_iEternalFlamesReward[iPos] = iGetClampedValue(key, "EternalFlamesReward", "Eternal Flames Reward", "Eternal_Flames_Reward", "eternal", g_esTeammate[special].g_iEternalFlamesReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iFastRecoveryReward[iPos] = iGetClampedValue(key, "FastRecoveryReward", "Fast Recovery Reward", "Fast_Recovery_Reward", "fastrecovery", g_esTeammate[special].g_iFastRecoveryReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iFriendlyFireReward[iPos] = iGetClampedValue(key, "FriendlyFireReward", "Friendly Fire Reward", "Friendly_Fire_Reward", "friendlyfire", g_esTeammate[special].g_iFriendlyFireReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iGhostBulletsReward[iPos] = iGetClampedValue(key, "GhostBulletsReward", "Ghost Bullets Reward", "Ghost_Bullets_Reward", "ghost", g_esTeammate[special].g_iGhostBulletsReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iHealthRegenReward[iPos] = iGetClampedValue(key, "HealthRegenReward", "Health Regen Reward", "Health_Regen_Reward", "hpregen", g_esTeammate[special].g_iHealthRegenReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iInfiniteAmmoReward[iPos] = iGetClampedValue(key, "InfiniteAmmoReward", "Infinite Ammo Reward", "Infinite_Ammo_Reward", "infammo", g_esTeammate[special].g_iInfiniteAmmoReward[iPos], sSet[iPos], -1, 31);
				g_esTeammate[special].g_iLadderActionsReward[iPos] = iGetClampedValue(key, "LadderActionsReward", "Ladder Actions Reward", "Ladder_Action_Reward", "ladderacts", g_esTeammate[special].g_iLadderActionsReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iLaserSightReward[iPos] = iGetClampedValue(key, "LaserSightReward", "Laser Sight Reward", "Laser_Sight_Reward", "lasersight", g_esTeammate[special].g_iLaserSightReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iLifeLeechReward[iPos] = iGetClampedValue(key, "LifeLeechReward", "Life Leech Reward", "Life_Leech_Reward", "lifeleech", g_esTeammate[special].g_iLifeLeechReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iMedicalCutsReward[iPos] = iGetClampedValue(key, "MedicalCutsReward", "Medical Cuts Reward", "Medical_Cuts_Reward", "medcuts", g_esTeammate[special].g_iMedicalCutsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iMeleeRangeReward[iPos] = iGetClampedValue(key, "MeleeRangeReward", "Melee Range Reward", "Melee_Range_Reward", "meleerange", g_esTeammate[special].g_iMeleeRangeReward[iPos], sSet[iPos], -1, 99999);
				g_esTeammate[special].g_iMidairDashesReward[iPos] = iGetClampedValue(key, "MidairDashesReward", "Midair Dashes Reward", "Midair_Dashes_Reward", "middash", g_esTeammate[special].g_iMidairDashesReward[iPos], sSet[iPos], -1, 99999);
				g_esTeammate[special].g_iOverhealthReward[iPos] = iGetClampedValue(key, "OverhealthReward", "Overhealth Reward", "Overhealth_Reward", "overhealth", g_esTeammate[special].g_iOverhealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iParticleEffectVisual[iPos] = iGetClampedValue(key, "ParticleEffectVisual", "Particle Effect Visual", "Particle_Effect_Visual", "particle", g_esTeammate[special].g_iParticleEffectVisual[iPos], sSet[iPos], -1, 15);
				g_esTeammate[special].g_iPrefsNotify[iPos] = iGetClampedValue(key, "PrefsNotify", "Prefs Notify", "Prefs_Notify", "pnotify", g_esTeammate[special].g_iPrefsNotify[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iRecoilDampenerReward[iPos] = iGetClampedValue(key, "RecoilDampenerReward", "Recoil Dampener Reward", "Recoil_Dampener_Reward", "recoil", g_esTeammate[special].g_iRecoilDampenerReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iRegenBurstsReward[iPos] = iGetClampedValue(key, "RegenBurstsReward", "Regen Bursts Reward", "Regen_Bursts_Reward", "regbursts", g_esTeammate[special].g_iRegenBurstsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iRespawnLoadoutReward[iPos] = iGetClampedValue(key, "RespawnLoadoutReward", "Respawn Loadout Reward", "Respawn_Loadout_Reward", "resloadout", g_esTeammate[special].g_iRespawnLoadoutReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iReviveHealthReward[iPos] = iGetClampedValue(key, "ReviveHealthReward", "Revive Health Reward", "Revive_Health_Reward", "revivehp", g_esTeammate[special].g_iReviveHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iRiotGearReward[iPos] = iGetClampedValue(key, "RiotGearReward", "Riot Gear Reward", "Riot_Gear_Reward", "riotgear", g_esTeammate[special].g_iRiotGearReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iSafetyBubbleReward[iPos] = iGetClampedValue(key, "SafetyBubbleReward", "Safety Bubble Reward", "Safety_Bubble_Reward", "safetybubble", g_esTeammate[special].g_iSafetyBubbleReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iShareRewards[iPos] = iGetClampedValue(key, "ShareRewards", "Share Rewards", "Share_Rewards", "share", g_esTeammate[special].g_iShareRewards[iPos], sSet[iPos], -1, 3);
				g_esTeammate[special].g_iShovePenaltyReward[iPos] = iGetClampedValue(key, "ShovePenaltyReward", "Shove Penalty Reward", "Shove_Penalty_Reward", "shovepenalty", g_esTeammate[special].g_iShovePenaltyReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iSpecialAmmoReward[iPos] = iGetClampedValue(key, "SpecialAmmoReward", "Special Ammo Reward", "Special_Ammo_Reward", "specammo", g_esTeammate[special].g_iSpecialAmmoReward[iPos], sSet[iPos], -1, 3);
				g_esTeammate[special].g_iStackRewards[iPos] = iGetClampedValue(key, "StackRewards", "Stack Rewards", "Stack_Rewards", "rstack", g_esTeammate[special].g_iStackRewards[iPos], sSet[iPos], -1, 2147483647);
				g_esTeammate[special].g_iStickyGrenadesReward[iPos] = iGetClampedValue(key, "StickyGrenadesReward", "Sticky Grenades Reward", "Sticky_Grenades_Reward", "cluster", g_esTeammate[special].g_iStickyGrenadesReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iSyringeDartsReward[iPos] = iGetClampedValue(key, "SyringeDartsReward", "Syringe Darts Reward", "Syringe_Darts_Reward", "syringe", g_esTeammate[special].g_iSyringeDartsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
				g_esTeammate[special].g_iThornsReward[iPos] = iGetClampedValue(key, "ThornsReward", "Thorns Reward", "Thorns_Reward", "thorns", g_esTeammate[special].g_iThornsReward[iPos], sSet[iPos], -1, 1);
				g_esTeammate[special].g_iUsefulRewards[iPos] = iGetClampedValue(key, "UsefulRewards", "Useful Rewards", "Useful_Rewards", "useful", g_esTeammate[special].g_iUsefulRewards[iPos], sSet[iPos], -1, 15);
				g_esTeammate[special].g_iVoicePitchVisual[iPos] = iGetClampedValue(key, "VoicePitchVisual", "Voice Pitch Visual", "Voice_Pitch_Visual", "voicepitch", g_esTeammate[special].g_iVoicePitchVisual[iPos], sSet[iPos], -1, 255);

				vGetConfigColors(sValue, sizeof sValue, sSet[iPos], ';');
				vGetStringValue(key, "BodyColorVisual", "Body Color Visual", "Body_Color_Visual", "bodycolor", iPos, g_esTeammate[special].g_sBodyColorVisual, sizeof esTeammate::g_sBodyColorVisual, g_esTeammate[special].g_sBodyColorVisual2, sizeof esTeammate::g_sBodyColorVisual2, g_esTeammate[special].g_sBodyColorVisual3, sizeof esTeammate::g_sBodyColorVisual3, g_esTeammate[special].g_sBodyColorVisual4, sizeof esTeammate::g_sBodyColorVisual4, sValue);
				vGetStringValue(key, "FallVoicelineReward", "Fall Voiceline Reward", "Fall_Voiceline_Reward", "fallvoice", iPos, g_esTeammate[special].g_sFallVoicelineReward, sizeof esTeammate::g_sFallVoicelineReward, g_esTeammate[special].g_sFallVoicelineReward2, sizeof esTeammate::g_sFallVoicelineReward2, g_esTeammate[special].g_sFallVoicelineReward3, sizeof esTeammate::g_sFallVoicelineReward3, g_esTeammate[special].g_sFallVoicelineReward4, sizeof esTeammate::g_sFallVoicelineReward4, sSet[iPos]);
				vGetStringValue(key, "GlowColorVisual", "Glow Color Visual", "Glow_Color_Visual", "glowcolor", iPos, g_esTeammate[special].g_sOutlineColorVisual, sizeof esTeammate::g_sOutlineColorVisual, g_esTeammate[special].g_sOutlineColorVisual2, sizeof esTeammate::g_sOutlineColorVisual2, g_esTeammate[special].g_sOutlineColorVisual3, sizeof esTeammate::g_sOutlineColorVisual3, g_esTeammate[special].g_sOutlineColorVisual4, sizeof esTeammate::g_sOutlineColorVisual4, sValue);
				vGetStringValue(key, "ItemReward", "Item Reward", "Item_Reward", "item", iPos, g_esTeammate[special].g_sItemReward, sizeof esTeammate::g_sItemReward, g_esTeammate[special].g_sItemReward2, sizeof esTeammate::g_sItemReward2, g_esTeammate[special].g_sItemReward3, sizeof esTeammate::g_sItemReward3, g_esTeammate[special].g_sItemReward4, sizeof esTeammate::g_sItemReward4, sSet[iPos]);
				vGetStringValue(key, "LightColorVisual", "Light Color Visual", "Light_Color_Visual", "lightcolor", iPos, g_esTeammate[special].g_sLightColorVisual, sizeof esTeammate::g_sLightColorVisual, g_esTeammate[special].g_sLightColorVisual2, sizeof esTeammate::g_sLightColorVisual2, g_esTeammate[special].g_sLightColorVisual3, sizeof esTeammate::g_sLightColorVisual3, g_esTeammate[special].g_sLightColorVisual4, sizeof esTeammate::g_sLightColorVisual4, sValue);
				vGetStringValue(key, "LoopingVoicelineVisual", "Looping Voiceline Visual", "Looping_Voiceline_Visual", "loopvoice", iPos, g_esTeammate[special].g_sLoopingVoicelineVisual, sizeof esTeammate::g_sLoopingVoicelineVisual, g_esTeammate[special].g_sLoopingVoicelineVisual2, sizeof esTeammate::g_sLoopingVoicelineVisual2, g_esTeammate[special].g_sLoopingVoicelineVisual3, sizeof esTeammate::g_sLoopingVoicelineVisual3, g_esTeammate[special].g_sLoopingVoicelineVisual4, sizeof esTeammate::g_sLoopingVoicelineVisual4, sSet[iPos]);
				vGetStringValue(key, "ScreenColorVisual", "Screen Color Visual", "Screen_Color_Visual", "screencolor", iPos, g_esTeammate[special].g_sScreenColorVisual, sizeof esTeammate::g_sScreenColorVisual, g_esTeammate[special].g_sScreenColorVisual2, sizeof esTeammate::g_sScreenColorVisual2, g_esTeammate[special].g_sScreenColorVisual3, sizeof esTeammate::g_sScreenColorVisual3, g_esTeammate[special].g_sScreenColorVisual4, sizeof esTeammate::g_sScreenColorVisual4, sValue);
			}

			g_esTeammate[special].g_iStackLimits[iPos] = iGetClampedValue(key, "StackLimits", "Stack Limits", "Stack_Limits", "limits", g_esTeammate[special].g_iStackLimits[iPos], sSet[iPos], -1, 99999);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_GLOW, false))
	{
		if (StrEqual(key, "GlowColor", false) || StrEqual(key, "Glow Color", false) || StrEqual(key, "Glow_Color", false))
		{
			char sValue[64], sSet[3][4];
			vGetConfigColors(sValue, sizeof sValue, value);
			strcopy(g_esTeammate[special].g_sGlowColor, sizeof esTeammate::g_sGlowColor, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_iGlowColor); iPos++)
			{
				g_esTeammate[special].g_iGlowColor[iPos] = (sSet[iPos][0] != '\0' && StringToInt(sSet[iPos]) >= 0) ? iClamp(StringToInt(sSet[iPos]), 0, 255) : -1;
			}
		}
		else if (StrEqual(key, "GlowRange", false) || StrEqual(key, "Glow Range", false) || StrEqual(key, "Glow_Range", false))
		{
			char sValue[14], sRange[2][7];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

			g_esTeammate[special].g_iGlowMinRange = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, 99999) : g_esTeammate[special].g_iGlowMinRange;
			g_esTeammate[special].g_iGlowMaxRange = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, 99999) : g_esTeammate[special].g_iGlowMaxRange;
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_HEALTH, false))
	{
		char sSettings[4][128];
		for (int iPos = 0; iPos < (sizeof g_sSpecialNames); iPos++)
		{
			vGetSpecialSettingNames(sSettings, sizeof sSettings[], "BaseHealth", "Base Health", "Base_Health", "basehp", iPos);
			g_esTeammate[special].g_iBaseHealth[iPos] = iGetClampedValue(key, sSettings[0], sSettings[1], sSettings[2], sSettings[3], g_esTeammate[special].g_iBaseHealth[iPos], value, -1, MT_MAXHEALTH);
			vGetSpecialSettingNames(sSettings, sizeof sSettings[], "ExtraHealth", "Extra Health", "Extra_Health", "extrahp", iPos);
			g_esTeammate[special].g_iExtraHealth[iPos] = iGetClampedValue(key, sSettings[0], sSettings[1], sSettings[2], sSettings[3], g_esTeammate[special].g_iExtraHealth[iPos], value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_BOSS, false))
	{
		char sValue[44], sSet[4][11];
		strcopy(sValue, sizeof sValue, value);
		ReplaceString(sValue, sizeof sValue, " ", "");
		ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
		for (int iPos = 0; iPos < (sizeof esTeammate::g_iBossHealth); iPos++)
		{
			g_esTeammate[special].g_iBossHealth[iPos] = iGetClampedValue(key, "BossHealthStages", "Boss Health Stages", "Boss_Health_Stages", "bosshpstages", g_esTeammate[special].g_iBossHealth[iPos], sSet[iPos], -1, MT_MAXHEALTH);
			g_esTeammate[special].g_iBossType[iPos] = iGetClampedValue(key, "BossTypes", "Boss Types", "Boss_Types", "bosstypes", g_esTeammate[special].g_iBossType[iPos], sSet[iPos], -1, MT_MAXTYPES);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_COMBO, false))
	{
		if (StrEqual(key, "ComboTypeChance", false) || StrEqual(key, "Combo Type Chance", false) || StrEqual(key, "Combo_Type_Chance", false) || StrEqual(key, "typechance", false))
		{
			char sValue[42], sSet[7][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_flComboTypeChance); iPos++)
			{
				g_esTeammate[special].g_flComboTypeChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTeammate[special].g_flComboTypeChance[iPos];
			}
		}
		else
		{
			char sValue[140], sSet[10][14];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_flComboChance); iPos++)
			{
				if (StrEqual(key, "ComboRadius", false) || StrEqual(key, "Combo Radius", false) || StrEqual(key, "Combo_Radius", false) || StrEqual(key, "radius", false))
				{
					char sRange[2][7], sSubset[14];
					strcopy(sSubset, sizeof sSubset, sSet[iPos]);
					ReplaceString(sSubset, sizeof sSubset, " ", "");
					ExplodeString(sSubset, ";", sRange, sizeof sRange, sizeof sRange[]);

					g_esTeammate[special].g_flComboMinRadius[iPos] = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -200.0, 1.0) : g_esTeammate[special].g_flComboMinRadius[iPos];
					g_esTeammate[special].g_flComboMaxRadius[iPos] = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 200.0) : g_esTeammate[special].g_flComboMaxRadius[iPos];
				}
				else
				{
					g_esTeammate[special].g_flComboChance[iPos] = flGetClampedValue(key, "ComboChance", "Combo Chance", "Combo_Chance", "chance", g_esTeammate[special].g_flComboChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esTeammate[special].g_iComboCooldown[iPos] = iGetClampedValue(key, "ComboCooldown", "Combo Cooldown", "Combo_Cooldown", "cooldown", g_esTeammate[special].g_iComboCooldown[iPos], sSet[iPos], -1, 99999);
					g_esTeammate[special].g_flComboDamage[iPos] = flGetClampedValue(key, "ComboDamage", "Combo Damage", "Combo_Damage", "damage", g_esTeammate[special].g_flComboDamage[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTeammate[special].g_flComboDeathChance[iPos] = flGetClampedValue(key, "ComboDeathChance", "Combo Death Chance", "Combo_Death_Chance", "deathchance", g_esTeammate[special].g_flComboDeathChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esTeammate[special].g_flComboDeathRange[iPos] = flGetClampedValue(key, "ComboDeathRange", "Combo Death Range", "Combo_Death_Range", "deathrange", g_esTeammate[special].g_flComboDeathRange[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTeammate[special].g_flComboDelay[iPos] = flGetClampedValue(key, "ComboDelay", "Combo Delay", "Combo_Delay", "delay", g_esTeammate[special].g_flComboDelay[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTeammate[special].g_flComboDuration[iPos] = flGetClampedValue(key, "ComboDuration", "Combo Duration", "Combo_Duration", "duration", g_esTeammate[special].g_flComboDuration[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTeammate[special].g_flComboInterval[iPos] = flGetClampedValue(key, "ComboInterval", "Combo Interval", "Combo_Interval", "interval", g_esTeammate[special].g_flComboInterval[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTeammate[special].g_flComboRange[iPos] = flGetClampedValue(key, "ComboRange", "Combo Range", "Combo_Range", "range", g_esTeammate[special].g_flComboRange[iPos], sSet[iPos], -1.0, 99999.0);
					g_esTeammate[special].g_flComboRangeChance[iPos] = flGetClampedValue(key, "ComboRangeChance", "Combo Range Chance", "Combo_Range_Chance", "rangechance", g_esTeammate[special].g_flComboRangeChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esTeammate[special].g_iComboRangeCooldown[iPos] = iGetClampedValue(key, "ComboRangeCooldown", "Combo Range Cooldown", "Combo_Range_Cooldown", "rangecooldown", g_esTeammate[special].g_iComboRangeCooldown[iPos], sSet[iPos], -1, 99999);
					g_esTeammate[special].g_flComboRockChance[iPos] = flGetClampedValue(key, "ComboRockChance", "Combo Rock Chance", "Combo_Rock_Chance", "rockchance", g_esTeammate[special].g_flComboRockChance[iPos], sSet[iPos], -1.0, 100.0);
					g_esTeammate[special].g_iComboRockCooldown[iPos] = iGetClampedValue(key, "ComboRockCooldown", "Combo Rock Cooldown", "Combo_Rock_Cooldown", "rockcooldown", g_esTeammate[special].g_iComboRockCooldown[iPos], sSet[iPos], -1, 99999);
					g_esTeammate[special].g_flComboSpeed[iPos] = flGetClampedValue(key, "ComboSpeed", "Combo Speed", "Combo_Speed", "speed", g_esTeammate[special].g_flComboSpeed[iPos], sSet[iPos], -1.0, 99999.0);
				}
			}
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_TRANSFORM, false))
	{
		if (StrEqual(key, "TransformTypes", false) || StrEqual(key, "Transform Types", false) || StrEqual(key, "Transform_Types", false) || StrEqual(key, "transtypes", false))
		{
			char sValue[50], sSet[10][5];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_iTransformType); iPos++)
			{
				g_esTeammate[special].g_iTransformType[iPos] = (sSet[iPos][0] != '\0') ? iClamp(StringToInt(sSet[iPos]), -1, MT_MAXTYPES) : g_esTeammate[special].g_iTransformType[iPos];
			}
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_PROPS, false))
	{
		char sValue[64], sSet[4][4];
		vGetConfigColors(sValue, sizeof sValue, value);
		vSaveConfigColors(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esTeammate[special].g_sRockColor, sizeof esTeammate::g_sRockColor, value);
		ReplaceString(sValue, sizeof sValue, " ", "");
		ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);

		for (int iPos = 0; iPos < (sizeof esTeammate::g_iRockColor); iPos++)
		{
			g_esTeammate[special].g_iRockColor[iPos] = iGetClampedValue(key, "RockColor", "Rock Color", "Rock_Color", "rock", g_esTeammate[special].g_iRockColor[iPos], sSet[iPos], -1, 255);
		}
	}
	else if (StrEqual(subsection, MT_CONFIG_SECTION_PARTICLES, false))
	{
		if (StrEqual(key, "BodyChance", false) || StrEqual(key, "Body Chance", false) || StrEqual(key, "Body_Chance", false) || StrEqual(key, "bchance", false))
		{
			char sValue[54], sSet[9][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_flBodyChance); iPos++)
			{
				g_esTeammate[special].g_flBodyChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTeammate[special].g_flBodyChance[iPos];
			}
		}
		else if (StrEqual(key, "RockChance", false) || StrEqual(key, "Rock Chance", false) || StrEqual(key, "Rock_Chance", false) || StrEqual(key, "rchance", false))
		{
			char sValue[54], sSet[9][6];
			strcopy(sValue, sizeof sValue, value);
			ReplaceString(sValue, sizeof sValue, " ", "");
			ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof esTeammate::g_flRockChance); iPos++)
			{
				g_esTeammate[special].g_flRockChance[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 100.0) : g_esTeammate[special].g_flRockChance[iPos];
			}
		}
	}

	vConfigsLoadedForward(subsection, key, value, -1, special, mode, true, specsection);
}

void vRecycleType(int specType, int type, bool manual)
{
	if (specType == 8)
	{
		switch (manual)
		{
			case true: g_esTank[type].g_bTypeCycled2 = g_esGeneral.g_bRecycleTypes2 ? false : g_esTank[type].g_bTypeCycled2;
			case false: g_esTank[type].g_bTypeCycled = g_esGeneral.g_bRecycleTypes ? false : g_esTank[type].g_bTypeCycled;
		}
	}
	else
	{
		switch (manual)
		{
			case true: g_esSpecial[type].g_bTypeCycled2[specType] = g_esSpecific.g_bRecycleTypes2[specType] ? false : g_esSpecial[type].g_bTypeCycled2[specType];
			case false: g_esSpecial[type].g_bTypeCycled[specType] = g_esSpecific.g_bRecycleTypes[specType] ? false : g_esSpecial[type].g_bTypeCycled[specType];
		}
	}
}

void vSaveConfigColors(const char[] key, const char[] setting1, const char[] setting2, const char[] setting3, const char[] setting4, char[] buffer, int size, const char[] value)
{
	if (StrEqual(key, setting1, false) || StrEqual(key, setting2, false) || StrEqual(key, setting3, false) || StrEqual(key, setting4, false))
	{
		strcopy(buffer, size, value);
	}
}

void vSetSpecialSettings(int mode, const char[] section, const char[] subsection, const char[] specsection, const char[] key, const char[] value)
{
	if (mode < 3)
	{
		vReadSpecificSettings(mode, section, subsection, specsection, key, value);
	}

	if ((mode == -1 || mode == 3) && (!strncmp(section, "STEAM_", 6, false) || !strncmp("0:", section, 2) || !strncmp("1:", section, 2) || (!strncmp(section, "[U:", 3) && section[strlen(section) - 1] == ']')))
	{
		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			if (bIsValidClient(iPlayer, MT_CHECK_INGAME) && (StrEqual(g_esPlayer[iPlayer].g_sSteamID32, section, false) || StrEqual(g_esPlayer[iPlayer].g_sSteam3ID, section, false)))
			{
				vReadTeammateSettings(iPlayer, mode, subsection, specsection, key, value);

				break;
			}
		}
	}
}

void vSetTankSettings(int mode, const char[] section, const char[] subsection, const char[] key, const char[] value)
{
	if (mode < 3)
	{
		if (StrEqual(section, MT_CONFIG_SECTION_SETTINGS, false) || StrEqual(section, MT_CONFIG_SECTION_SETTINGS2, false) || StrEqual(section, MT_CONFIG_SECTION_SETTINGS3, false) || StrEqual(section, MT_CONFIG_SECTION_SETTINGS4, false))
		{
			g_esGeneral.g_iPluginEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "PluginEnabled", "Plugin Enabled", "Plugin_Enabled", "penabled", g_esGeneral.g_iPluginEnabled, value, -1, 1);
			g_esGeneral.g_iAutoUpdate = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "AutoUpdate", "Auto Update", "Auto_Update", "update", g_esGeneral.g_iAutoUpdate, value, -1, 1);
			g_esGeneral.g_iGraphicsLevel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "GraphicsLevel", "Graphics Level", "Graphics_Level", "graphics", g_esGeneral.g_iGraphicsLevel, value, -1, 3);
			g_esGeneral.g_iBulletFix = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BulletFix", "Bullet Fix", "Bullet_Fix", "bfix", g_esGeneral.g_iBulletFix, value, -1, 1);
			g_esGeneral.g_iKickBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "KickBots", "Kick Bots", "Kick_Bots", "kick", g_esGeneral.g_iKickBots, value, -1, 1);
			g_esGeneral.g_iListenSupport = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "ListenSupport", "Listen Support", "Listen_Support", "listen", g_esGeneral.g_iListenSupport, value, -1, 1);
			g_esGeneral.g_iCheckAbilities = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CheckAbilities", "Check Abilities", "Check_Abilities", "check", g_esGeneral.g_iCheckAbilities, value, -1, 1);
			g_esGeneral.g_iDeathRevert = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "DeathRevert", "Death Revert", "Death_Revert", "revert", g_esGeneral.g_iDeathRevert, value, -1, 1);
			g_esGeneral.g_iFinalesOnly = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "FinalesOnly", "Finales Only", "Finales_Only", "finale", g_esGeneral.g_iFinalesOnly, value, -1, 4);
			g_esGeneral.g_flIdleCheck = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "IdleCheck", "Idle Check", "Idle_Check", "idle", g_esGeneral.g_flIdleCheck, value, -1.0, 99999.0);
			g_esGeneral.g_iIdleCheckMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "IdleCheckMode", "Idle Check Mode", "Idle_Check_Mode", "idlemode", g_esGeneral.g_iIdleCheckMode, value, -1, 2);
			g_esGeneral.g_iLogCommands = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "LogCommands", "Log Commands", "Log_Commands", "logcmds", g_esGeneral.g_iLogCommands, value, -1, 31);
			g_esGeneral.g_iLogMessages = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "LogMessages", "Log Messages", "Log_Messages", "logmsgs", g_esGeneral.g_iLogMessages, value, -1, 31);
			g_esGeneral.g_iRequiresHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "RequiresHumans", "Requires Humans", "Requires_Humans", "hrequire", g_esGeneral.g_iRequiresHumans, value, -1, 32);
			g_esGeneral.g_iTankEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankEnabled", "Tank Enabled", "Tank_Enabled", "tenabled", g_esGeneral.g_iTankEnabled, value, -1, 1);
			g_esGeneral.g_flTankChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankChance", "Tank Chance", "Tank_Chance", "chance", g_esGeneral.g_flTankChance, value, -1.0, 100.0);
			g_esGeneral.g_iTankNote = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankNote", "Tank Note", "Tank_Note", "note", g_esGeneral.g_iTankNote, value, -1, 1);
			g_esGeneral.g_iTankModel = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "TankModel", "Tank Model", "Tank_Model", "model", g_esGeneral.g_iTankModel, value, -1, 7);
			g_esGeneral.g_flBurnDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurnDuration", "Burn Duration", "Burn_Duration", "burndur", g_esGeneral.g_flBurnDuration, value, -1.0, 99999.0);
			g_esGeneral.g_flBurntSkin = flGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "BurntSkin", "Burnt Skin", "Burnt_Skin", "burnt", g_esGeneral.g_flBurntSkin, value, -2.0, 1.0);
			g_esGeneral.g_iCycleTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "CycleTypes", "Cycle Types", "Cycle_Types", "cycle", g_esGeneral.g_iCycleTypes, value, -1, 4);
			g_esGeneral.g_iSpawnEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpawnEnabled", "Spawn Enabled", "Spawn_Enabled", "spawn", g_esGeneral.g_iSpawnEnabled, value, -1, 1);
			g_esGeneral.g_iSpawnLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, MT_CONFIG_SECTION_GENERAL, key, "SpawnLimit", "Spawn Limit", "Spawn_Limit", "limit", g_esGeneral.g_iSpawnLimit, value, -1, 32);
			g_esGeneral.g_iAnnounceArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceArrival", "Announce Arrival", "Announce_Arrival", "arrival", g_esGeneral.g_iAnnounceArrival, value, -1, 31);
			g_esGeneral.g_iAnnounceDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceDeath", "Announce Death", "Announce_Death", "death", g_esGeneral.g_iAnnounceDeath, value, -1, 2);
			g_esGeneral.g_iAnnounceKill = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "AnnounceKill", "Announce Kill", "Announce_Kill", "kill", g_esGeneral.g_iAnnounceKill, value, -1, 1);
			g_esGeneral.g_iArrivalMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalMessage", "Arrival Message", "Arrival_Message", "arrivalmsg", g_esGeneral.g_iArrivalMessage, value, -1, 1023);
			g_esGeneral.g_iArrivalSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "ArrivalSound", "Arrival Sound", "Arrival_Sound", "arrivalsnd", g_esGeneral.g_iArrivalSound, value, -1, 1);
			g_esGeneral.g_iDeathDetails = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathDetails", "Death Details", "Death_Details", "deathdets", g_esGeneral.g_iDeathDetails, value, -1, 5);
			g_esGeneral.g_iDeathMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathMessage", "Death Message", "Death_Message", "deathmsg", g_esGeneral.g_iDeathMessage, value, -1, 1023);
			g_esGeneral.g_iDeathSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "DeathSound", "Death Sound", "Death_Sound", "deathsnd", g_esGeneral.g_iDeathSound, value, -1, 1);
			g_esGeneral.g_iKillMessage = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "KillMessage", "Kill Message", "Kill_Message", "killmsg", g_esGeneral.g_iKillMessage, value, -1, 1023);
			g_esGeneral.g_iVocalizeArrival = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeArrival", "Vocalize Arrival", "Vocalize_Arrival", "arrivalvoc", g_esGeneral.g_iVocalizeArrival, value, -1, 1);
			g_esGeneral.g_iVocalizeDeath = iGetKeyValue(subsection, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE, MT_CONFIG_SECTION_ANNOUNCE2, key, "VocalizeDeath", "Vocalize Death", "Vocalize_Death", "deathvoc", g_esGeneral.g_iVocalizeDeath, value, -1, 1);
			g_esGeneral.g_iFinaleCheck = iGetKeyValue(subsection, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH2, key, "FinaleCheck", "Finale Check", "Finale_Check", "fincheck", g_esGeneral.g_iFinaleCheck, value, -1, 2);
			g_esGeneral.g_iSurvivorTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH2, key, "SurvivorTypes", "Survivor Types", "Survivor_Types", "stypes", g_esGeneral.g_iSurvivorTypes, value, -1, 63);
			g_esGeneral.g_iSurvivorsRequired = iGetKeyValue(subsection, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH2, key, "SurvivorsRequired", "Survivors Required", "Survivors_Required", "survivors", g_esGeneral.g_iSurvivorsRequired, value, -1, 32);
			g_esGeneral.g_iIncapsRequired = iGetKeyValue(subsection, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH, MT_CONFIG_SECTION_PUNISH2, key, "IncapsRequired", "Incaps Required", "Incaps_Required", "incaps", g_esGeneral.g_iIncapsRequired, value, -1, 32);
			g_esGeneral.g_iTeammateLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, MT_CONFIG_SECTION_REWARDS, key, "TeammateLimit", "Teammate Limit", "Teammate_Limit", "teamlimit", g_esGeneral.g_iTeammateLimit, value, -1, 32);
			g_esHuman.g_flCarrierChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierChance", "Carrier Chance", "Carrier_Chance", "cachance", g_esHuman.g_flCarrierChance, value, -1.0, 100.0);
			g_esHuman.g_flCarrierDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierDamageMultiplier", "Carrier Damage Multiplier", "Carrier_Damage_Multiplier", "cadmgmulti", g_esHuman.g_flCarrierDamageMultiplier, value, -1.0, 99999.0);
			g_esHuman.g_flCarrierDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierDelay", "Carrier Delay", "Carrier_Delay", "cadelay", g_esHuman.g_flCarrierDelay, value, -1.0, 99999.0);
			g_esHuman.g_flCarrierHealthMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierHealthMultiplier", "Carrier Health Multiplier", "Carrier_Health_Multiplier", "cahpmulti", g_esHuman.g_flCarrierHealthMultiplier, value, -1.0, 99999.0);
			g_esHuman.g_flCarrierVoiceChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoiceChance", "Carrier Voice Chance", "Carrier_Voice_Chance", "cavoicechance", g_esHuman.g_flCarrierVoiceChance, value, -1.0, 100.0);
			g_esHuman.g_flCarrierVoiceInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoiceInterval", "Carrier Voice Interval", "Carrier_Voice_Interval", "cavoiceint", g_esHuman.g_flCarrierVoiceInterval, value, -1.0, 99999.0);
			g_esHuman.g_iCarrierEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierEnabled", "Carrier Enabled", "Carrier_Enabled", "caenabled", g_esHuman.g_iCarrierEnabled, value, -1, 1);
			g_esHuman.g_iCarrierBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBots", "Carrier Bots", "Carrier_Bots", "cabots", g_esHuman.g_iCarrierBots, value, -1, 1);
			g_esHuman.g_iCarrierBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBody", "Carrier Body", "Carrier_Body", "cabody", g_esHuman.g_iCarrierBody, value, -1, 1);
			g_esHuman.g_iCarrierCleanse = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierCleanse", "Carrier Cleanse", "Carrier_Cleanse", "cacleanse", g_esHuman.g_iCarrierCleanse, value, -1, 1);
			g_esHuman.g_iCarrierFilter = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierFilter", "Carrier Filter", "Carrier_Filter", "cafilter", g_esHuman.g_iCarrierFilter, value, -1, 127);
			g_esHuman.g_iCarrierInfection = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierInfection", "Carrier Infection", "Carrier_Infection", "cainfect", g_esHuman.g_iCarrierInfection, value, -1, 511);
			g_esHuman.g_iCarrierMix = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierMix", "Carrier Mix", "Carrier_Mix", "camix", g_esHuman.g_iCarrierMix, value, -1, 1);
			g_esHuman.g_iCarrierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierMode", "Carrier Mode", "Carrier_Mode", "camode", g_esHuman.g_iCarrierMode, value, -1, 6);
			g_esHuman.g_iCarrierTeleport = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierTeleport", "Carrier Teleport", "Carrier_Teleport", "cateleport", g_esHuman.g_iCarrierTeleport, value, -1, 1);
			g_esHuman.g_iCarrierVoice = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierVoice", "Carrier Voice", "Carrier_Voice", "cavoice", g_esHuman.g_iCarrierVoice, value, -1, 1);
			g_esHuman.g_flActionDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ActionDurationPassive", "Action Duration Passive", "Action_Duration_Passive", "actionduration", g_esHuman.g_flActionDurationPassive, value, -1.0, 99999.0);
			g_esHuman.g_flAdrenalineTimePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AdrenalineTimePassive", "Adrenaline Time Passive", "Adrenaline_Time_Passive", "adrenaline", g_esHuman.g_flAdrenalineTimePassive, value, -1.0, 99999.0);
			g_esHuman.g_flAttackBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AttackBoostPassive", "Attack Boost Passive", "Attack_Boost_Passive", "attackboost", g_esHuman.g_flAttackBoostPassive, value, -1.0, 99999.0);
			g_esHuman.g_flDamageBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageBoostPassive", "Damage Boost Passive", "Damage_Boost_Passive", "dmgboost", g_esHuman.g_flDamageBoostPassive, value, -1.0, 99999.0);
			g_esHuman.g_flDamageResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DamageResistancePassive", "Damage Resistance Passive", "Damage_Resistance_Passive", "dmgres", g_esHuman.g_flDamageResistancePassive, value, -1.0, 99999.0);
			g_esHuman.g_flDopamineRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "DopamineRadiusPassive", "Dopamine Radius Passive", "Dopamine_Radius_Passive", "dopamine", g_esHuman.g_flDopamineRadiusPassive, value, -1.0, 99999.0);
			g_esHuman.g_flFireRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FireRatePassive", "Fire Rate Passive", "Fire_Rate_Passive", "firerate", g_esHuman.g_flFireRatePassive, value, -1.0, 99999.0);
			g_esHuman.g_flGrenadeLauncherPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GrenadeLauncherPassive", "Grenade Launcher Passive", "Grenade_Launcher_Passive", "grenade", g_esHuman.g_flGrenadeLauncherPassive, value, -1.0, 100.0);
			g_esHuman.g_flHealPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealPercentPassive", "Heal Percent Passive", "Heal_Percent_Passive", "healpercent", g_esHuman.g_flHealPercentPassive, value, -1.0, 100.0);
			g_esHuman.g_flHealthcareRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthcareRadiusPassive", "Healthcare Radius Passive", "Healthcare_Radius_Passive", "healthcare", g_esHuman.g_flHealthcareRadiusPassive, value, -1.0, 99999.0);
			g_esHuman.g_flHeartbeatPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HeartbeatPassive", "Heartbeat Passive", "Heartbeat_Passive", "heartbeat", g_esHuman.g_flHeartbeatPassive, value, -1.0, 99999.0);
			g_esHuman.g_flHollowpointAmmoPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HollowpointAmmoPassive", "Hollowpoint Ammo Passive", "Hollowpoint_Ammo_Passive", "hollowpoint", g_esHuman.g_flHollowpointAmmoPassive, value, -1.0, 100.0);
			g_esHuman.g_flJumpHeightPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "JumpHeightPassive", "Jump Height Passive", "Jump_Height_Passive", "jumpheight", g_esHuman.g_flJumpHeightPassive, value, -1.0, 99999.0);
			g_esHuman.g_flLadyKillerPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadyKillerPassive", "Lady Killer Passive", "Lady_Killer_Passive", "ladykiller", g_esHuman.g_flLadyKillerPassive, value, -1.0, 100.0);
			g_esHuman.g_flLuckyBulletPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LuckyBulletPassive", "Lucky Bullet Passive", "Lucky_Bullet_Passive", "luckybullet", g_esHuman.g_flLuckyBulletPassive, value, -1.0, 100.0);
			g_esHuman.g_flMotivationRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MotivationRadiusPassive", "Motivation Radius Passive", "Motivation_Radius_Passive", "motivation", g_esHuman.g_flMotivationRadiusPassive, value, -1.0, 99999.0);
			g_esHuman.g_flOverdoseRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverdoseRadiusPassive", "Overdose Radius Passive", "Overdose_Radius_Passive", "overdose", g_esHuman.g_flOverdoseRadiusPassive, value, -1.0, 99999.0);
			g_esHuman.g_flPipeBombDurationPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PipebombDurationPassive", "Pipebomb Duration Passive", "Pipebomb_Duration_Passive", "pipeduration", g_esHuman.g_flPipeBombDurationPassive, value, -1.0, 99999.0);
			g_esHuman.g_flPunchResistancePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PunchResistancePassive", "Punch Resistance Passive", "Punch_Resistance_Passive", "punchres", g_esHuman.g_flPunchResistancePassive, value, -1.0, 99999.0);
			g_esHuman.g_flRapidPistolPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RapidPistolPassive", "Rapid Pistol Passive", "Rapid_Pistol_Passive", "rapidpistol", g_esHuman.g_flRapidPistolPassive, value, -1.0, 1.0);
			g_esHuman.g_flRefillPercentPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RefillPercentPassive", "Refill Percent Passive", "Refill_Percent_Passive", "refillpercent", g_esHuman.g_flRefillPercentPassive, value, -1.0, 100.0);
			g_esHuman.g_flReloadRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReloadRatePassive", "Reload Rate Passive", "Reload_Rate_Passive", "reloadrate", g_esHuman.g_flReloadRatePassive, value, -1.0, 99999.0);
			g_esHuman.g_flShockwaveRadiusPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShockwaveRadiusPassive", "Shockwave Radius Passive", "Shockwave_Radius_Passive", "shockwave", g_esHuman.g_flShockwaveRadiusPassive, value, -1.0, 99999.0);
			g_esHuman.g_flShoveDamagePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveDamagePassive", "Shove Damage Passive", "Shove_Damage_Passive", "shovedmg", g_esHuman.g_flShoveDamagePassive, value, -1.0, 99999.0);
			g_esHuman.g_flShoveRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShoveRatePassive", "Shove Rate Passive", "Shove_Rate_Passive", "shoverate", g_esHuman.g_flShoveRatePassive, value, -1.0, 99999.0);
			g_esHuman.g_flSledgehammerRoundsPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SledgehammerRoundsPassive", "Sledgehammer Rounds Passive", "Sledgehammer_Rounds_Passive", "sledgehammer", g_esHuman.g_flSledgehammerRoundsPassive, value, -1.0, 100.0);
			g_esHuman.g_flSpeedBoostPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpeedBoostPassive", "Speed Boost Passive", "Speed_Boost_Passive", "speedboost", g_esHuman.g_flSpeedBoostPassive, value, -1.0, 99999.0);
			g_esHuman.g_flSupplierPassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esHuman.g_flSupplierPassive, value, -1.0, 99999.0);
			g_esHuman.g_flSwingRatePassive = flGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SwingRatePassive", "Swing Rate Passive", "Swing_Rate_Passive", "swingrate", g_esHuman.g_flSwingRatePassive, value, -1.0, 99999.0);
			g_esHuman.g_iPassiveEnabled = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveEnabled", "Passive Enabled", "Passive_Enabled", "psenabled", g_esHuman.g_iPassiveEnabled, value, -2, 2147483647);
			g_esHuman.g_iPassiveBots = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveBots", "Passive Bots", "Passive_Bots", "psbots", g_esHuman.g_iPassiveBots, value, -2, 2147483647);
			g_esHuman.g_iPassiveNotify = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "PassiveNotify", "Passive Notify", "Passive_Notify", "psnotify", g_esHuman.g_iPassiveNotify, value, -1, 1);
			g_esHuman.g_iAmmoBoostPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoBoostPassive", "Ammo Boost Passive", "Ammo_Boost_Passive", "ammoboost", g_esHuman.g_iAmmoBoostPassive, value, -1, 1);
			g_esHuman.g_iAmmoRefillPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRefillPassive", "Ammo Refill Passive", "Ammo_Refill_Passive", "ammorefill", g_esHuman.g_iAmmoRefillPassive, value, -1, 1);
			g_esHuman.g_iAmmoRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "AmmoRegenPassive", "Ammo Regen Passive", "Ammo_Regen_Passive", "ammoregen", g_esHuman.g_iAmmoRegenPassive, value, -1, 99999);
			g_esHuman.g_iBlazeHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BlazeHealthPassive", "Blaze Health Passive", "Blaze_Health_Passive", "blaze", g_esHuman.g_iBlazeHealthPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iBloodDonorPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BloodDonorPassive", "Blood Donor Passive", "Blood_Donor_Passive", "donor", g_esHuman.g_iBloodDonorPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iBunnyHopPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BunnyHopPassive", "Bunny Hop Passive", "Bunny_Hop_Passive", "bhop", g_esHuman.g_iBunnyHopPassive, value, -1, 1);
			g_esHuman.g_iBurstDoorsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "BurstDoorsPassive", "Burst Doors Passive", "Burst_Doors_Passive", "burstdoors", g_esHuman.g_iBurstDoorsPassive, value, -1, 1);
			g_esHuman.g_iCleanKillsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CleanKillsPassive", "Clean Kills Passive", "Clean_Kills_Passive", "cleankills", g_esHuman.g_iCleanKillsPassive, value, -1, 1);
			g_esHuman.g_iClusterBombsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ClusterBombsPassive", "Cluster Bombs Passive", "Cluster_Bombs_Passive", "cluster", g_esHuman.g_iClusterBombsPassive, value, -1, 5);
			g_esHuman.g_iEternalFlamesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "EternalFlamesPassive", "Eternal Flames Passive", "Eternal_Flames_Passive", "eternal", g_esHuman.g_iEternalFlamesPassive, value, -1, 1);
			g_esHuman.g_iFastRecoveryPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FastRecoveryPassive", "Fast Recovery Passive", "Fast_Recovery_Passive", "fastrecovery", g_esHuman.g_iFastRecoveryPassive, value, -1, 1);
			g_esHuman.g_iFriendlyFirePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "FriendlyFirePassive", "Friendly Fire Passive", "Friendly_Fire_Passive", "friendlyfire", g_esHuman.g_iFriendlyFirePassive, value, -1, 1);
			g_esHuman.g_iGhostBulletsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "GhostBulletsPassive", "Ghost Bullets Passive", "Ghost_Bullets_Passive", "ghost", g_esHuman.g_iGhostBulletsPassive, value, -1, 1);
			g_esHuman.g_iHealthRegenPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "HealthRegenPassive", "Health Regen Passive", "Health_Regen_Passive", "hpregen", g_esHuman.g_iHealthRegenPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iInfiniteAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "InfiniteAmmoPassive", "Infinite Ammo Passive", "Infinite_Ammo_Passive", "infammo", g_esHuman.g_iInfiniteAmmoPassive, value, -1, 31);
			g_esHuman.g_iLadderActionsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LadderActionsPassive", "Ladder Actions Passive", "Ladder_Action_Passive", "ladderacts", g_esHuman.g_iLadderActionsPassive, value, -1, 1);
			g_esHuman.g_iLaserSightPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LaserSightPassive", "Laser Sight Passive", "Laser_Sight_Passive", "lasersight", g_esHuman.g_iLaserSightPassive, value, -1, 1);
			g_esHuman.g_iLifeLeechPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "LifeLeechPassive", "Life Leech Passive", "Life_Leech_Passive", "lifeleech", g_esHuman.g_iLifeLeechPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iMedicalCutsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MedicalCutsPassive", "Medical Cuts Passive", "Medical_Cuts_Passive", "medcuts", g_esHuman.g_iMedicalCutsPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iMeleeRangePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MeleeRangePassive", "Melee Range Passive", "Melee_Range_Passive", "meleerange", g_esHuman.g_iMeleeRangePassive, value, -1, 99999);
			g_esHuman.g_iMidairDashesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "MidairDashesPassive", "Midair Dashes Passive", "Midair_Dashes_Passive", "middash", g_esHuman.g_iMidairDashesPassive, value, -1, 99999);
			g_esHuman.g_iOverhealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "OverhealthPassive", "Overhealth Passive", "Overhealth_Passive", "overhealth", g_esHuman.g_iOverhealthPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iRecoilDampenerPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RecoilDampenerPassive", "Recoil Dampener Passive", "Recoil_Dampener_Passive", "recoil", g_esHuman.g_iRecoilDampenerPassive, value, -1, 1);
			g_esHuman.g_iRegenBurstsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RegenBurstsPassive", "Regen Bursts Passive", "Regen_Bursts_Passive", "regbursts", g_esHuman.g_iRegenBurstsPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iRespawnLoadoutPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RespawnLoadoutPassive", "Respawn Loadout Passive", "Respawn_Loadout_Passive", "resloadout", g_esHuman.g_iRespawnLoadoutPassive, value, -1, 1);
			g_esHuman.g_iReviveHealthPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ReviveHealthPassive", "Revive Health Passive", "Revive_Health_Passive", "revivehp", g_esHuman.g_iReviveHealthPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iRiotGearPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "RiotGearPassive", "Riot Gear Passive", "Riot_Gear_Passive", "riotgear", g_esHuman.g_iRiotGearPassive, value, -1, 1);
			g_esHuman.g_iSafetyBubblePassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SafetyBubblePassive", "Safety Bubble Passive", "Safety_Bubble_Passive", "safetybubble", g_esHuman.g_iSafetyBubblePassive, value, -1, 1);
			g_esHuman.g_iShovePenaltyPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ShovePenaltyPassive", "Shove Penalty Passive", "Shove_Penalty_Passive", "shovepenalty", g_esHuman.g_iShovePenaltyPassive, value, -1, 1);
			g_esHuman.g_iSpecialAmmoPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SpecialAmmoPassive", "Special Ammo Passive", "Special_Ammo_Passive", "specammo", g_esHuman.g_iSpecialAmmoPassive, value, -1, 3);
			g_esHuman.g_iStickyGrenadesPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "StickyGrenadesPassive", "Sticky Grenades Passive", "Sticky_Grenades_Passive", "sticky", g_esHuman.g_iStickyGrenadesPassive, value, -1, 1);
			g_esHuman.g_iSyringeDartsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "SyringeDartsPassive", "Syringe Darts Passive", "Syringe_Darts_Passive", "syringe", g_esHuman.g_iSyringeDartsPassive, value, -1, MT_MAXHEALTH);
			g_esHuman.g_iThornsPassive = iGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ThornsPassive", "Thorns Passive", "Thorns_Passive", "thorns", g_esHuman.g_iThornsPassive, value, -1, 1);
			g_esGeneral.g_iAutoAggravate = iGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "AutoAggravate", "Auto Aggravate", "Auto_Aggravate", "autoaggro", g_esGeneral.g_iAutoAggravate, value, -1, 1);
			g_esGeneral.g_iCreditIgniters = iGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "CreditIgniters", "Credit Igniters", "Credit_Igniters", "credit", g_esGeneral.g_iCreditIgniters, value, -1, 1);
			g_esGeneral.g_flForceSpawn = flGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "ForceSpawn", "Force Spawn", "Force_Spawn", "force", g_esGeneral.g_flForceSpawn, value, -1.0, 99999.0);
			g_esGeneral.g_iPrioritizeThrows = iGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "PrioritizeThrows", "Prioritize Throws", "Prioritize_Throws", "priothrow", g_esGeneral.g_iPrioritizeThrows, value, -1, 1);
			g_esGeneral.g_iStasisMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "StasisMode", "Stasis Mode", "Stasis_Mode", "stasis", g_esGeneral.g_iStasisMode, value, -1, 1);
			g_esGeneral.g_flSurvivalDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP, MT_CONFIG_SECTION_COMP2, key, "SurvivalDelay", "Survival Delay", "Survival_Delay", "survdelay", g_esGeneral.g_flSurvivalDelay, value, -1.0, 99999.0);
			g_esGeneral.g_iScaleDamage = iGetKeyValue(subsection, MT_CONFIG_SECTION_DIFF, MT_CONFIG_SECTION_DIFF, MT_CONFIG_SECTION_DIFF, MT_CONFIG_SECTION_DIFF2, key, "ScaleDamage", "Scale Damage", "Scale_Damage", "scaledmg", g_esGeneral.g_iScaleDamage, value, -1, 1);
			g_esGeneral.g_flInfectedChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "InfectedChance", "Infected Chance", "Infected_Chance", "infchance", g_esGeneral.g_flInfectedChance, value, -1.0, 100.0);
			g_esGeneral.g_iInfectedDamage = iGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "InfectedDamage", "Infected Damage", "Infected_Damage", "infdmg", g_esGeneral.g_iInfectedDamage, value, -1, 1);
			g_esGeneral.g_iInfectedHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "InfectedHealth", "Infected Health", "Infected_Health", "infhp", g_esGeneral.g_iInfectedHealth, value, -1, 1);
			g_esGeneral.g_flJockeyChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "JockeyChance", "Jockey Chance", "Jockey_Chance", "jockeychance", g_esGeneral.g_flJockeyChance, value, -1.0, 100.0);
			g_esGeneral.g_iJockeyDamage = iGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "JockeyDamage", "Jockey Damage", "Jockey_Damage", "jockeydmg", g_esGeneral.g_iJockeyDamage, value, -1, 1);
			g_esGeneral.g_iJockeyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "JockeyHealth", "Jockey Health", "Jockey_Health", "jockeyhp", g_esGeneral.g_iJockeyHealth, value, -1, 1);
			g_esGeneral.g_flWitchChance = flGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "WitchChance", "Witch Chance", "Witch_Chance", "witchchance", g_esGeneral.g_flWitchChance, value, -1.0, 100.0);
			g_esGeneral.g_iWitchDamage = iGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "WitchDamage", "Witch Damage", "Witch_Damage", "witchdmg", g_esGeneral.g_iWitchDamage, value, -1, 1);
			g_esGeneral.g_iWitchHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, MT_CONFIG_SECTION_SIZE, key, "WitchHealth", "Witch Health", "Witch_Health", "witchhp", g_esGeneral.g_iWitchHealth, value, -1, 1);
			g_esGeneral.g_iBaseHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "BaseHealth", "Base Health", "Base_Health", "basehp", g_esGeneral.g_iBaseHealth, value, -1, MT_MAXHEALTH);
			g_esGeneral.g_flArmorPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorPercentage", "Armor Percentage", "Armor_Percentage", "armorpercent", g_esGeneral.g_flArmorPercentage, value, -1.0, 1.0);
			g_esGeneral.g_flArmorResistance[0] = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esGeneral.g_flArmorResistance[0], value, -1.0, 1.0);
			g_esGeneral.g_flShieldPercentage = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldPercentage", "Shield Percentage", "Shield_Percentage", "shieldpercent", g_esGeneral.g_flShieldPercentage, value, -1.0, 1.0);
			g_esGeneral.g_flShieldRate = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldRate", "Shield Rate", "Shield_Rate", "shieldrate", g_esGeneral.g_flShieldRate, value, -1.0, 1.0);
			g_esGeneral.g_flPassiveDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveDelay", "Passive Delay", "Passive_Delay", "passdelay", g_esGeneral.g_flPassiveDelay, value, -1.0, 99999.0);
			g_esGeneral.g_iPassiveHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveHealth", "Passive Health", "Passive_Health", "passhp", g_esGeneral.g_iPassiveHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
			g_esGeneral.g_flPassiveInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "PassiveInterval", "Passive Interval", "Passive_Interval", "passint", g_esGeneral.g_flPassiveInterval, value, -1.0, 99999.0);
			g_esGeneral.g_iDisplayHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealth", "Display Health", "Display_Health", "displayhp", g_esGeneral.g_iDisplayHealth, value, -1, 11);
			g_esGeneral.g_iDisplayHealthType = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "DisplayHealthType", "Display Health Type", "Display_Health_Type", "displaytype", g_esGeneral.g_iDisplayHealthType, value, -1, 2);
			g_esGeneral.g_iExtraHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ExtraHealth", "Extra Health", "Extra_Health", "extrahp", g_esGeneral.g_iExtraHealth, value, MT_MAX_HEALTH_REDUCTION, MT_MAXHEALTH);
			g_esGeneral.g_flHealPercentMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthPercentageMultiplier", "Health Percentage Multiplier", "Health_Percentage_Multiplier", "hpmulti", g_esGeneral.g_flHealPercentMultiplier, value, -1.0, 99999.0);
			g_esGeneral.g_iHumanMultiplierMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HumanMultiplierMode", "Human Multiplier Mode", "Human_Multiplier_Mode", "humanmultimode", g_esGeneral.g_iHumanMultiplierMode, value, -1, 1);
			g_esGeneral.g_iMinimumHumans = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MinimumHumans", "Minimum Humans", "Minimum_Humans", "minhumans", g_esGeneral.g_iMinimumHumans, value, -1, 32);
			g_esGeneral.g_iMultiplyHealth = iGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "MultiplyHealth", "Multiply Health", "Multiply_Health", "multihp", g_esGeneral.g_iMultiplyHealth, value, -1, 3);
			g_esGeneral.g_iSpawnProtection = iGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "SpawnProtection", "Spawn Protection", "Spawn_Protection", "protect", g_esGeneral.g_iSpawnProtection, value, -1, 3);
			g_esGeneral.g_flArmorDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorDuration", "Armor Duration", "Armor_Duration", "armorduration", g_esGeneral.g_flArmorDuration, value, -1.0, 99999.0);
			g_esGeneral.g_flArmorResistance[1] = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ArmorResistance", "Armor Resistance", "Armor_Resistance", "armorres", g_esGeneral.g_flArmorResistance[1], value, -1.0, 1.0);
			g_esGeneral.g_flShieldDuration = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldDuration", "Shield Duration", "Shield_Duration", "shieldduration", g_esGeneral.g_flShieldDuration, value, -1.0, 99999.0);
			g_esGeneral.g_flShieldResistance = flGetKeyValue(subsection, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT, MT_CONFIG_SECTION_PROTECT2, key, "ShieldResistance", "Shield Resistance", "Shield_Resistance", "shieldres", g_esGeneral.g_flShieldResistance, value, -1.0, 1.0);
			g_esGeneral.g_flAttackInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "AttackInterval", "Attack Interval", "Attack_Interval", "attack", g_esGeneral.g_flAttackInterval, value, -1.0, 99999.0);
			g_esGeneral.g_iAutoHop = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "BunnyHop", "Bunny Hop", "Bunny_Hop", "bhop", g_esGeneral.g_iAutoHop, value, -1, 1);
			g_esGeneral.g_flClawDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ClawDamage", "Claw Damage", "Claw_Damage", "claw", g_esGeneral.g_flClawDamage, value, -2.0, 99999.0);
			g_esGeneral.g_iFootstepShake = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "FootstepShake", "Footstep Shake", "Footstep_Shake", "shake", g_esGeneral.g_iFootstepShake, value, -1, 1);
			g_esGeneral.g_iGroundPound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "GroundPound", "Ground Pound", "Ground_Pound", "pound", g_esGeneral.g_iGroundPound, value, -1, 1);
			g_esGeneral.g_flHittableDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "HittableDamage", "Hittable Damage", "Hittable_Damage", "hittable", g_esGeneral.g_flHittableDamage, value, -2.0, 99999.0);
			g_esGeneral.g_flIncapDamageMultiplier = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IncapDamageMultiplier", "Incap Damage Multiplier", "Incap_Damage_Multiplier", "incapdmgmulti", g_esGeneral.g_flIncapDamageMultiplier, value, -1.0, 99999.0);
			g_esGeneral.g_iIntangibleBody = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "IntangibleBody", "Intangible Body", "Intangible_Body", "intangible", g_esGeneral.g_iIntangibleBody, value, -1, 1);
			g_esGeneral.g_iMeleeHitMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitMode", "Melee Hit Mode", "Melee_Hit_Mode", "meleehit", g_esGeneral.g_iMeleeHitMode, value, -1, 2);
			g_esGeneral.g_flMeleeHitValue = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "MeleeHitValue", "Melee Hit Value", "Melee_Hit_Value", "meleevalue", g_esGeneral.g_flMeleeHitValue, value, -1.0, 99999.0);
			g_esGeneral.g_flPunchForce = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PunchForce", "Punch Force", "Punch_Force", "punchforce", g_esGeneral.g_flPunchForce, value, -2.0, 99999.0);
			g_esGeneral.g_flPunchThrow = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "PunchThrow", "Punch Throw", "Punch_Throw", "punchthrow", g_esGeneral.g_flPunchThrow, value, -1.0, 100.0);
			g_esGeneral.g_flRockDamage = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RockDamage", "Rock Damage", "Rock_Damage", "rockdmg", g_esGeneral.g_flRockDamage, value, -2.0, 99999.0);
			g_esGeneral.g_iRockSound = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RockSound", "Rock Sound", "Rock_Sound", "rocksnd", g_esGeneral.g_iRockSound, value, -1, 1);
			g_esGeneral.g_flRunSpeed = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "RunSpeed", "Run Speed", "Run_Speed", "speed", g_esGeneral.g_flRunSpeed, value, -1.0, 99.0);
			g_esGeneral.g_iSkipIncap = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SkipIncap", "Skip Incap", "Skip_Incap", "incap", g_esGeneral.g_iSkipIncap, value, -1, 1);
			g_esGeneral.g_iSkipTaunt = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SkipTaunt", "Skip Taunt", "Skip_Taunt", "taunt", g_esGeneral.g_iSkipTaunt, value, -1, 1);
			g_esGeneral.g_iSweepFist = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "SweepFist", "Sweep Fist", "Sweep_Fist", "sweep", g_esGeneral.g_iSweepFist, value, -1, 1);
			g_esGeneral.g_flThrowForce = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowForce", "Throw Force", "Throw_Force", "throwforce", g_esGeneral.g_flThrowForce, value, -1.0, 99999.0);
			g_esGeneral.g_flThrowInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowInterval", "Throw Interval", "Throw_Interval", "throwint", g_esGeneral.g_flThrowInterval, value, -1.0, 99999.0);
			g_esGeneral.g_iThrowRock = iGetKeyValue(subsection, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE, MT_CONFIG_SECTION_ENHANCE2, key, "ThrowRock", "Throw Rock", "Throw_Rock", "throwrock", g_esGeneral.g_iThrowRock, value, -1, 1);
			g_esGeneral.g_iBulletImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "BulletImmunity", "Bullet Immunity", "Bullet_Immunity", "bullet", g_esGeneral.g_iBulletImmunity, value, -1, 1);
			g_esGeneral.g_iExplosiveImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "ExplosiveImmunity", "Explosive Immunity", "Explosive_Immunity", "explosive", g_esGeneral.g_iExplosiveImmunity, value, -1, 1);
			g_esGeneral.g_iFireImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "FireImmunity", "Fire Immunity", "Fire_Immunity", "fire", g_esGeneral.g_iFireImmunity, value, -1, 1);
			g_esGeneral.g_iHittableImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "HittableImmunity", "Hittable Immunity", "Hittable_Immunity", "hittable", g_esGeneral.g_iHittableImmunity, value, -1, 1);
			g_esGeneral.g_iMeleeImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "MeleeImmunity", "Melee Immunity", "Melee_Immunity", "melee", g_esGeneral.g_iMeleeImmunity, value, -1, 1);
			g_esGeneral.g_iVomitImmunity = iGetKeyValue(subsection, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE, MT_CONFIG_SECTION_IMMUNE2, key, "VomitImmunity", "Vomit Immunity", "Vomit_Immunity", "vomit", g_esGeneral.g_iVomitImmunity, value, -1, 1);
			g_esGeneral.g_iHumanCooldown = iGetKeyValue(subsection, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, key, "HumanCooldown", "Human Cooldown", "Human_Cooldown", "cooldown", g_esGeneral.g_iHumanCooldown, value, -1, 99999);
			g_esGeneral.g_iMasterControl = iGetKeyValue(subsection, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, key, "MasterControl", "Master Control", "Master_Control", "master", g_esGeneral.g_iMasterControl, value, -1, 1);
			g_esGeneral.g_iSpawnMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_HUMAN, MT_CONFIG_SECTION_HUMAN2, MT_CONFIG_SECTION_HUMAN3, MT_CONFIG_SECTION_HUMAN4, key, "SpawnMode", "Spawn Mode", "Spawn_Mode", "spawnmode", g_esGeneral.g_iSpawnMode, value, -1, 4);
			g_esGeneral.g_iLimitExtras = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "LimitExtras", "Limit Extras", "Limit_Extras", "limitex", g_esGeneral.g_iLimitExtras, value, -1, 1);
			g_esGeneral.g_flExtrasDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "ExtrasDelay", "Extras Delay", "Extras_Delay", "exdelay", g_esGeneral.g_flExtrasDelay, value, -1.0, 99999.0);
			g_esGeneral.g_iRegularAmount = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "RegularAmount", "Regular Amount", "Regular_Amount", "regamount", g_esGeneral.g_iRegularAmount, value, -1, 32);
			g_esGeneral.g_flRegularDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "RegularDelay", "Regular Delay", "Regular_Delay", "regdelay", g_esGeneral.g_flRegularDelay, value, -1.0, 99999.0);
			g_esGeneral.g_flRegularInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "RegularInterval", "Regular Interval", "Regular_Interval", "reginterval", g_esGeneral.g_flRegularInterval, value, -1.0, 99999.0);
			g_esGeneral.g_iRegularLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "RegularLimit", "Regular Limit", "Regular_Limit", "reglimit", g_esGeneral.g_iRegularLimit, value, -1, 99999);
			g_esGeneral.g_iRegularMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "RegularMode", "Regular Mode", "Regular_Mode", "regmode", g_esGeneral.g_iRegularMode, value, -1, 1);
			g_esGeneral.g_iRegularWave = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "RegularWave", "Regular Wave", "Regular_Wave", "regwave", g_esGeneral.g_iRegularWave, value, -1, 1);
			g_esGeneral.g_iFinaleAmount = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "FinaleAmount", "Finale Amount", "Finale_Amount", "finamount", g_esGeneral.g_iFinaleAmount, value, -1, 32);
			g_esGeneral.g_iFinaleMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, MT_CONFIG_SECTION_WAVES, key, "FinaleMode", "Finale Mode", "Finale_Mode", "finmode", g_esGeneral.g_iFinaleMode, value, -1, 1);
			g_esGeneral.g_iRushTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "RushTypes", "Rush Types", "Rush_Types", "rutypes", g_esGeneral.g_iRushTypes, value, -1, 127);
			g_esGeneral.g_iCommonLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "CommonLimit", "Common Limit", "Common_Limit", "climit", g_esGeneral.g_iCommonLimit, value, -1, 100);
			g_esGeneral.g_flCoopDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "CoopDelay", "Coop Delay", "Coop_Delay", "delay", g_esGeneral.g_flCoopDelay, value, -1.0, 99999.0);
			g_esGeneral.g_flFinaleCooldown = flGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "FinaleCooldown", "Finale Cooldown", "Finale_Cooldown", "cooldown", g_esGeneral.g_flFinaleCooldown, value, -1.0, 99999.0);
			g_esGeneral.g_iHardcoreMode = iGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "HardcoreMode", "Hardcore Mode", "Hardcore_Mode", "hardcore", g_esGeneral.g_iHardcoreMode, value, -1, 1);
			g_esGeneral.g_iHealthKills = iGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "HealthKills", "Health Kills", "Health_Kills", "hpkills", g_esGeneral.g_iHealthKills, value, -1, 2);
			g_esGeneral.g_flKillCountdown = flGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "KillCountdown", "Kill Countdown", "Kill_Countdown", "countdown", g_esGeneral.g_flKillCountdown, value, -1.0, 99999.0);
			g_esGeneral.g_iRushLimit = iGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "RushLimit", "Rush Limit", "Rush_Limit", "rlimit", g_esGeneral.g_iRushLimit, value, -1, 32);
			g_esGeneral.g_flSpawnInterval = flGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "SpawnInterval", "Spawn Interval", "Spawn_Interval", "interval", g_esGeneral.g_flSpawnInterval, value, -1.0, 99999.0);
			g_esGeneral.g_iSurvivorIncaps = iGetKeyValue(subsection, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, MT_CONFIG_SECTION_RUSH, key, "SurvivorIncaps", "Survivor Incaps", "Survivor_Incaps", "incaps", g_esGeneral.g_iSurvivorIncaps, value, -1, 10);
			g_esGeneral.g_iAccessFlags = iGetAdminFlagsValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "AccessFlags", "Access Flags", "Access_Flags", "access", value);
			g_esGeneral.g_iImmunityFlags = iGetAdminFlagsValue(subsection, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN, MT_CONFIG_SECTION_ADMIN2, key, "ImmunityFlags", "Immunity Flags", "Immunity_Flags", "immunity", value);

			vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierAttackVoicelines", "Carrier Attack Voicelines", "Carrier_Attack_Voicelines", "caattacklines", g_esHuman.g_sCarrierAttackVoicelines, sizeof esHuman::g_sCarrierAttackVoicelines, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "CarrierBaitVoicelines", "Carrier Bait Voicelines", "Carrier_Bait_Voicelines", "cabaitlines", g_esHuman.g_sCarrierBaitVoicelines, sizeof esHuman::g_sCarrierBaitVoicelines, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, MT_CONFIG_SECTION_SURVIVORS, key, "ItemPassive", "Item Passive", "Item_Passive", "item", g_esHuman.g_sItemPassive, sizeof esHuman::g_sItemPassive, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ArmorCharacters", "Armor Characters", "Armor_Characters", "armorchars", g_esGeneral.g_sArmorCharacters, sizeof esGeneral::g_sArmorCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "HealthCharacters", "Health Characters", "Health_Characters", "hpchars", g_esGeneral.g_sHealthCharacters, sizeof esGeneral::g_sHealthCharacters, value);
			vGetKeyValue(subsection, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, MT_CONFIG_SECTION_HEALTH, key, "ShieldCharacters", "Shield Characters", "Shield_Characters", "shieldchars", g_esGeneral.g_sShieldCharacters, sizeof esGeneral::g_sShieldCharacters, value);

			if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false))
			{
				if (StrEqual(key, "TypeRange", false) || StrEqual(key, "Type Range", false) || StrEqual(key, "Type_Range", false) || StrEqual(key, "types", false))
				{
					char sValue[10], sRange[2][5];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

					g_esGeneral.g_iMinType = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, MT_MAXTYPES) : g_esGeneral.g_iMinType;
					g_esGeneral.g_iMaxType = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, MT_MAXTYPES) : g_esGeneral.g_iMaxType;
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_CLASSES, false))
			{
				if (g_esGeneral.g_alClassKeys[0] != null)
				{
					g_esGeneral.g_alClassKeys[0].PushString(key);
				}

				if (g_esGeneral.g_alClassKeys[1] != null)
				{
					g_esGeneral.g_alClassKeys[1].PushString(value);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_COLORS, false))
			{
				if (g_esGeneral.g_alColorKeys[0] != null)
				{
					g_esGeneral.g_alColorKeys[0].PushString(key);
				}

				if (g_esGeneral.g_alColorKeys[1] != null)
				{
					g_esGeneral.g_alColorKeys[1].PushString(value);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_PUNISH, false) || StrEqual(subsection, MT_CONFIG_SECTION_PUNISH2, false))
			{
				char sValue[16], sSet[2][8];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esGeneral::g_iPunishEnabled); iPos++)
				{
					g_esGeneral.g_flPunisherLifetime[iPos] = flGetClampedValue(key, "PunisherLifetime", "Punisher Lifetime", "Punisher_Lifetime", "lifetime", g_esGeneral.g_flPunisherLifetime[iPos], sSet[iPos], -1.0, 99999.0);
					g_esGeneral.g_flWarningDistance[iPos] = flGetClampedValue(key, "WarningDistance", "Warning Distance", "Warning_Distance", "warndist", g_esGeneral.g_flWarningDistance[iPos], sSet[iPos], -1.0, 99999.0);
					g_esGeneral.g_flPunishDistance[iPos] = flGetClampedValue(key, "PunishDistance", "Punish Distance", "Punish_Distance", "pudist", g_esGeneral.g_flPunishDistance[iPos], sSet[iPos], -1.0, 99999.0);
					g_esGeneral.g_flZedTime[iPos] = flGetClampedValue(key, "ZedTime", "Zed Time", "Zed_Time", "zedtime", g_esGeneral.g_flZedTime[iPos], sSet[iPos], -1.0, 99999.0);
					g_esGeneral.g_iPunishEnabled[iPos] = iGetClampedValue(key, "PunishEnabled", "Punish Enabled", "Punish_Enabled", "puenabled", g_esGeneral.g_iPunishEnabled[iPos], sSet[iPos], -1, MT_MAXTYPES);
					g_esGeneral.g_iPunishBots[iPos] = iGetClampedValue(key, "PunishBots", "Punish Bots", "Punish_Bots", "pubots", g_esGeneral.g_iPunishBots[iPos], sSet[iPos], -1, MT_MAXTYPES);
					g_esGeneral.g_iPunisherTypes[iPos] = iGetClampedValue(key, "PunisherTypes", "Punisher Types", "Punisher_Types", "ptypes", g_esGeneral.g_iPunisherTypes[iPos], sSet[iPos], -1, 127);
					g_esGeneral.g_iWarningLimit[iPos] = iGetClampedValue(key, "WarningLimit", "Warning Limit", "Warning_Limit", "warnlimit", g_esGeneral.g_iWarningLimit[iPos], sSet[iPos], -1, 99999);
					g_esGeneral.g_iWarningInterval[iPos] = iGetClampedValue(key, "WarningInterval", "Warning Interval", "Warning_Interval", "warnint", g_esGeneral.g_iWarningInterval[iPos], sSet[iPos], -1, 99999);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_SURVIVORS, false))
			{
				if (StrEqual(key, "CarrierType", false) || StrEqual(key, "Carrier Type", false) || StrEqual(key, "Carrier_Type", false) || StrEqual(key, "catype", false))
				{
					char sValue[10], sRange[2][5];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

					g_esHuman.g_iCarrierMinType = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, MT_MAXTYPES) : g_esHuman.g_iCarrierMinType;
					g_esHuman.g_iCarrierMaxType = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, MT_MAXTYPES) : g_esHuman.g_iCarrierMaxType;
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_REWARDS, false))
			{
				char sValue[2560], sSet[8][320];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
				for (int iPos = 0; iPos < (sizeof esGeneral::g_iStackLimits); iPos++)
				{
					if (iPos < (sizeof esGeneral::g_iRewardEnabled))
					{
						g_esGeneral.g_flRewardChance[iPos] = flGetClampedValue(key, "RewardChance", "Reward Chance", "Reward_Chance", "chance", g_esGeneral.g_flRewardChance[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flRewardDuration[iPos] = flGetClampedValue(key, "RewardDuration", "Reward Duration", "Reward_Duration", "duration", g_esGeneral.g_flRewardDuration[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flRewardPercentage[iPos] = flGetClampedValue(key, "RewardPercentage", "Reward Percentage", "Reward_Percentage", "percent", g_esGeneral.g_flRewardPercentage[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flActionDurationReward[iPos] = flGetClampedValue(key, "ActionDurationReward", "Action Duration Reward", "Action_Duration_Reward", "actionduration", g_esGeneral.g_flActionDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flAdrenalineTimeReward[iPos] = flGetClampedValue(key, "AdrenalineTimeReward", "Adrenaline Time Reward", "Adrenaline_Time_Reward", "adrenaline", g_esGeneral.g_flAdrenalineTimeReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flAttackBoostReward[iPos] = flGetClampedValue(key, "AttackBoostReward", "Attack Boost Reward", "Attack_Boost_Reward", "attackboost", g_esGeneral.g_flAttackBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flDamageBoostReward[iPos] = flGetClampedValue(key, "DamageBoostReward", "Damage Boost Reward", "Damage_Boost_Reward", "dmgboost", g_esGeneral.g_flDamageBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flDamageResistanceReward[iPos] = flGetClampedValue(key, "DamageResistanceReward", "Damage Resistance Reward", "Damage_Resistance_Reward", "dmgres", g_esGeneral.g_flDamageResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esGeneral.g_flDopamineRadiusReward[iPos] = flGetClampedValue(key, "DopamineRadiusReward", "Dopamine Radius Reward", "Dopamine_Radius_Reward", "dopamine", g_esGeneral.g_flDopamineRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flFireRateReward[iPos] = flGetClampedValue(key, "FireRateReward", "Fire Rate Reward", "Fire_Rate_Reward", "firerate", g_esGeneral.g_flFireRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flGrenadeLauncherReward[iPos] = flGetClampedValue(key, "GrenadeLauncherReward", "Grenade Launcher Reward", "Grenade_Launcher_Reward", "grenade", g_esGeneral.g_flGrenadeLauncherReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flHealPercentReward[iPos] = flGetClampedValue(key, "HealPercentReward", "Heal Percent Reward", "Heal_Percent_Reward", "healpercent", g_esGeneral.g_flHealPercentReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flHealthcareRadiusReward[iPos] = flGetClampedValue(key, "HealthcareRadiusReward", "Healthcare Radius Reward", "Healthcare_Radius_Reward", "healthcare", g_esGeneral.g_flHealthcareRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flHeartbeatReward[iPos] = flGetClampedValue(key, "HeartbeatReward", "Heartbeat Reward", "Heartbeat_Reward", "heartbeat", g_esGeneral.g_flHeartbeatReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flHollowpointAmmoReward[iPos] = flGetClampedValue(key, "HollowpointAmmoReward", "Hollowpoint Ammo Reward", "Hollowpoint_Ammo_Reward", "hollowpoint", g_esGeneral.g_flHollowpointAmmoReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flJumpHeightReward[iPos] = flGetClampedValue(key, "JumpHeightReward", "Jump Height Reward", "Jump_Height_Reward", "jumpheight", g_esGeneral.g_flJumpHeightReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flLadyKillerReward[iPos] = flGetClampedValue(key, "LadyKillerReward", "Lady Killer Reward", "Lady_Killer_Reward", "ladykiller", g_esGeneral.g_flLadyKillerReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flLoopingVoicelineInterval[iPos] = flGetClampedValue(key, "LoopingVoicelineInterval", "Looping Voiceline Interval", "Looping_Voiceline_Interval", "loopinterval", g_esGeneral.g_flLoopingVoicelineInterval[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flLuckyBulletReward[iPos] = flGetClampedValue(key, "LuckyBulletReward", "Lucky Bullet Reward", "Lucky_Bullet_Reward", "luckybullet", g_esGeneral.g_flLuckyBulletReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flMotivationRadiusReward[iPos] = flGetClampedValue(key, "MotivationRadiusReward", "Motivation Radius Reward", "Motivation_Radius_Reward", "motivation", g_esGeneral.g_flMotivationRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flOverdoseRadiusReward[iPos] = flGetClampedValue(key, "OverdoseRadiusReward", "Overdose Radius Reward", "Overdose_Radius_Reward", "overdose", g_esGeneral.g_flOverdoseRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flPipeBombDurationReward[iPos] = flGetClampedValue(key, "PipebombDurationReward", "Pipebomb Duration Reward", "Pipebomb_Duration_Reward", "pipeduration", g_esGeneral.g_flPipeBombDurationReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flPunchResistanceReward[iPos] = flGetClampedValue(key, "PunchResistanceReward", "Punch Resistance Reward", "Punch_Resistance_Reward", "punchres", g_esGeneral.g_flPunchResistanceReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esGeneral.g_flRapidPistolReward[iPos] = flGetClampedValue(key, "RapidPistolReward", "Rapid Pistol Reward", "Rapid_Pistol_Reward", "rapidpistol", g_esGeneral.g_flRapidPistolReward[iPos], sSet[iPos], -1.0, 1.0);
						g_esGeneral.g_flRefillPercentReward[iPos] = flGetClampedValue(key, "RefillPercentReward", "Refill Percent Reward", "Refill_Percent_Reward", "refillpercent", g_esGeneral.g_flRefillPercentReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flReloadRateReward[iPos] = flGetClampedValue(key, "ReloadRateReward", "Reload Rate Reward", "Reload_Rate_Reward", "reloadrate", g_esGeneral.g_flReloadRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flShockwaveRadiusReward[iPos] = flGetClampedValue(key, "ShockwaveRadiusReward", "Shockwave Radius Reward", "Shockwave_Radius_Reward", "shockwave", g_esGeneral.g_flShockwaveRadiusReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flShoveDamageReward[iPos] = flGetClampedValue(key, "ShoveDamageReward", "Shove Damage Reward", "Shove_Damage_Reward", "shovedmg", g_esGeneral.g_flShoveDamageReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flShoveRateReward[iPos] = flGetClampedValue(key, "ShoveRateReward", "Shove Rate Reward", "Shove_Rate_Reward", "shoverate", g_esGeneral.g_flShoveRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flSledgehammerRoundsReward[iPos] = flGetClampedValue(key, "SledgehammerRoundsReward", "Sledgehammer Rounds Reward", "Sledgehammer_Rounds_Reward", "sledgehammer", g_esGeneral.g_flSledgehammerRoundsReward[iPos], sSet[iPos], -1.0, 100.0);
						g_esGeneral.g_flSpeedBoostReward[iPos] = flGetClampedValue(key, "SpeedBoostReward", "Speed Boost Reward", "Speed_Boost_Reward", "speedboost", g_esGeneral.g_flSpeedBoostReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flSupplierReward[iPos] = flGetClampedValue(key, "SupplierPassive", "Supplier Passive", "Supplier_Passive", "supplier", g_esGeneral.g_flSupplierReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_flSwingRateReward[iPos] = flGetClampedValue(key, "SwingRateReward", "Swing Rate Reward", "Swing_Rate_Reward", "swingrate", g_esGeneral.g_flSwingRateReward[iPos], sSet[iPos], -1.0, 99999.0);
						g_esGeneral.g_iRewardEnabled[iPos] = iGetClampedValue(key, "RewardEnabled", "Reward Enabled", "Reward_Enabled", "renabled", g_esGeneral.g_iRewardEnabled[iPos], sSet[iPos], -2, 2147483647);
						g_esGeneral.g_iRewardBots[iPos] = iGetClampedValue(key, "RewardBots", "Reward Bots", "Reward_Bots", "rbots", g_esGeneral.g_iRewardBots[iPos], sSet[iPos], -2, 2147483647);
						g_esGeneral.g_iRewardEffect[iPos] = iGetClampedValue(key, "RewardEffect", "Reward Effect", "Reward_Effect", "effect", g_esGeneral.g_iRewardEffect[iPos], sSet[iPos], -1, 15);
						g_esGeneral.g_iRewardNotify[iPos] = iGetClampedValue(key, "RewardNotify", "Reward Notify", "Reward_Notify", "rnotify", g_esGeneral.g_iRewardNotify[iPos], sSet[iPos], -1, 3);
						g_esGeneral.g_iRewardVisual[iPos] = iGetClampedValue(key, "RewardVisual", "Reward Visual", "Reward_Visual", "visual", g_esGeneral.g_iRewardVisual[iPos], sSet[iPos], -1, 127);
						g_esGeneral.g_iAmmoBoostReward[iPos] = iGetClampedValue(key, "AmmoBoostReward", "Ammo Boost Reward", "Ammo_Boost_Reward", "ammoboost", g_esGeneral.g_iAmmoBoostReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iAmmoRefillReward[iPos] = iGetClampedValue(key, "AmmoRefillReward", "Ammo Refill Reward", "Ammo_Refill_Reward", "ammorefill", g_esGeneral.g_iAmmoRefillReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iAmmoRegenReward[iPos] = iGetClampedValue(key, "AmmoRegenReward", "Ammo Regen Reward", "Ammo_Regen_Reward", "ammoregen", g_esGeneral.g_iAmmoRegenReward[iPos], sSet[iPos], -1, 99999);
						g_esGeneral.g_iBlazeHealthReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esGeneral.g_iBlazeHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iBloodDonorReward[iPos] = iGetClampedValue(key, "BlazeHealthReward", "Blaze Health Reward", "Blaze_Health_Reward", "blaze", g_esGeneral.g_iBloodDonorReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iBunnyHopReward[iPos] = iGetClampedValue(key, "BunnyHopReward", "Bunny Hop Reward", "Bunny_Hop_Reward", "bhop", g_esGeneral.g_iBunnyHopReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iBurstDoorsReward[iPos] = iGetClampedValue(key, "BurstDoorsReward", "Burst Doors Reward", "Burst_Doors_Reward", "burstdoors", g_esGeneral.g_iBurstDoorsReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iCleanKillsReward[iPos] = iGetClampedValue(key, "CleanKillsReward", "Clean Kills Reward", "Clean_Kills_Reward", "cleankills", g_esGeneral.g_iCleanKillsReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iClusterBombsReward[iPos] = iGetClampedValue(key, "ClusterBombsReward", "Cluster Bombs Reward", "Cluster_Bombs_Reward", "cluster", g_esGeneral.g_iClusterBombsReward[iPos], sSet[iPos], -1, 5);
						g_esGeneral.g_iEternalFlamesReward[iPos] = iGetClampedValue(key, "EternalFlamesReward", "Eternal Flames Reward", "Eternal_Flames_Reward", "eternal", g_esGeneral.g_iEternalFlamesReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iFastRecoveryReward[iPos] = iGetClampedValue(key, "FastRecoveryReward", "Fast Recovery Reward", "Fast_Recovery_Reward", "fastrecovery", g_esGeneral.g_iFastRecoveryReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iFriendlyFireReward[iPos] = iGetClampedValue(key, "FriendlyFireReward", "Friendly Fire Reward", "Friendly_Fire_Reward", "friendlyfire", g_esGeneral.g_iFriendlyFireReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iGhostBulletsReward[iPos] = iGetClampedValue(key, "GhostBulletsReward", "Ghost Bullets Reward", "Ghost_Bullets_Reward", "ghost", g_esGeneral.g_iGhostBulletsReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iHealthRegenReward[iPos] = iGetClampedValue(key, "HealthRegenReward", "Health Regen Reward", "Health_Regen_Reward", "hpregen", g_esGeneral.g_iHealthRegenReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iInfiniteAmmoReward[iPos] = iGetClampedValue(key, "InfiniteAmmoReward", "Infinite Ammo Reward", "Infinite_Ammo_Reward", "infammo", g_esGeneral.g_iInfiniteAmmoReward[iPos], sSet[iPos], -1, 31);
						g_esGeneral.g_iLadderActionsReward[iPos] = iGetClampedValue(key, "LadderActionsReward", "Ladder Actions Reward", "Ladder_Action_Reward", "ladderacts", g_esGeneral.g_iLadderActionsReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iLaserSightReward[iPos] = iGetClampedValue(key, "LaserSightReward", "Laser Sight Reward", "Laser_Sight_Reward", "lasersight", g_esGeneral.g_iLaserSightReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iLifeLeechReward[iPos] = iGetClampedValue(key, "LifeLeechReward", "Life Leech Reward", "Life_Leech_Reward", "lifeleech", g_esGeneral.g_iLifeLeechReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iMedicalCutsReward[iPos] = iGetClampedValue(key, "MedicalCutsReward", "Medical Cuts Reward", "Medical_Cuts_Reward", "medcuts", g_esGeneral.g_iMedicalCutsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iMeleeRangeReward[iPos] = iGetClampedValue(key, "MeleeRangeReward", "Melee Range Reward", "Melee_Range_Reward", "meleerange", g_esGeneral.g_iMeleeRangeReward[iPos], sSet[iPos], -1, 99999);
						g_esGeneral.g_iMidairDashesReward[iPos] = iGetClampedValue(key, "MidairDashesReward", "Midair Dashes Reward", "Midair_Dashes_Reward", "middash", g_esGeneral.g_iMidairDashesReward[iPos], sSet[iPos], -1, 99999);
						g_esGeneral.g_iOverhealthReward[iPos] = iGetClampedValue(key, "OverhealthReward", "Overhealth Reward", "Overhealth_Reward", "overhealth", g_esGeneral.g_iOverhealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iParticleEffectVisual[iPos] = iGetClampedValue(key, "ParticleEffectVisual", "Particle Effect Visual", "Particle_Effect_Visual", "particle", g_esGeneral.g_iParticleEffectVisual[iPos], sSet[iPos], -1, 15);
						g_esGeneral.g_iPrefsNotify[iPos] = iGetClampedValue(key, "PrefsNotify", "Prefs Notify", "Prefs_Notify", "pnotify", g_esGeneral.g_iPrefsNotify[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iRecoilDampenerReward[iPos] = iGetClampedValue(key, "RecoilDampenerReward", "Recoil Dampener Reward", "Recoil_Dampener_Reward", "recoil", g_esGeneral.g_iRecoilDampenerReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iRegenBurstsReward[iPos] = iGetClampedValue(key, "RegenBurstsReward", "Regen Bursts Reward", "Regen_Bursts_Reward", "regbursts", g_esGeneral.g_iRegenBurstsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iRespawnLoadoutReward[iPos] = iGetClampedValue(key, "RespawnLoadoutReward", "Respawn Loadout Reward", "Respawn_Loadout_Reward", "resloadout", g_esGeneral.g_iRespawnLoadoutReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iReviveHealthReward[iPos] = iGetClampedValue(key, "ReviveHealthReward", "Revive Health Reward", "Revive_Health_Reward", "revivehp", g_esGeneral.g_iReviveHealthReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iRiotGearReward[iPos] = iGetClampedValue(key, "RiotGearReward", "Riot Gear Reward", "Riot_Gear_Reward", "riotgear", g_esGeneral.g_iRiotGearReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iSafetyBubbleReward[iPos] = iGetClampedValue(key, "SafetyBubbleReward", "Safety Bubble Reward", "Safety_Bubble_Reward", "safetybubble", g_esGeneral.g_iSafetyBubbleReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iShareRewards[iPos] = iGetClampedValue(key, "ShareRewards", "Share Rewards", "Share_Rewards", "share", g_esGeneral.g_iShareRewards[iPos], sSet[iPos], -1, 3);
						g_esGeneral.g_iShovePenaltyReward[iPos] = iGetClampedValue(key, "ShovePenaltyReward", "Shove Penalty Reward", "Shove_Penalty_Reward", "shovepenalty", g_esGeneral.g_iShovePenaltyReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iSpecialAmmoReward[iPos] = iGetClampedValue(key, "SpecialAmmoReward", "Special Ammo Reward", "Special_Ammo_Reward", "specammo", g_esGeneral.g_iSpecialAmmoReward[iPos], sSet[iPos], -1, 3);
						g_esGeneral.g_iStackRewards[iPos] = iGetClampedValue(key, "StackRewards", "Stack Rewards", "Stack_Rewards", "rstack", g_esGeneral.g_iStackRewards[iPos], sSet[iPos], -1, 2147483647);
						g_esGeneral.g_iStickyGrenadesReward[iPos] = iGetClampedValue(key, "StickyGrenadesReward", "Sticky Grenades Reward", "Sticky_Grenades_Reward", "sticky", g_esGeneral.g_iStickyGrenadesReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iSyringeDartsReward[iPos] = iGetClampedValue(key, "SyringeDartsReward", "Syringe Darts Reward", "Syringe_Darts_Reward", "syringe", g_esGeneral.g_iSyringeDartsReward[iPos], sSet[iPos], -1, MT_MAXHEALTH);
						g_esGeneral.g_iThornsReward[iPos] = iGetClampedValue(key, "ThornsReward", "Thorns Reward", "Thorns_Reward", "thorns", g_esGeneral.g_iThornsReward[iPos], sSet[iPos], -1, 1);
						g_esGeneral.g_iUsefulRewards[iPos] = iGetClampedValue(key, "UsefulRewards", "Useful Rewards", "Useful_Rewards", "useful", g_esGeneral.g_iUsefulRewards[iPos], sSet[iPos], -1, 15);
						g_esGeneral.g_iVoicePitchVisual[iPos] = iGetClampedValue(key, "VoicePitchVisual", "Voice Pitch Visual", "Voice_Pitch_Visual", "voicepitch", g_esGeneral.g_iVoicePitchVisual[iPos], sSet[iPos], -1, 255);

						vGetConfigColors(sValue, sizeof sValue, sSet[iPos], ';');
						vGetStringValue(key, "BodyColorVisual", "Body Color Visual", "Body_Color_Visual", "bodycolor", iPos, g_esGeneral.g_sBodyColorVisual, sizeof esGeneral::g_sBodyColorVisual, g_esGeneral.g_sBodyColorVisual2, sizeof esGeneral::g_sBodyColorVisual2, g_esGeneral.g_sBodyColorVisual3, sizeof esGeneral::g_sBodyColorVisual3, g_esGeneral.g_sBodyColorVisual4, sizeof esGeneral::g_sBodyColorVisual4, sValue);
						vGetStringValue(key, "FallVoicelineReward", "Fall Voiceline Reward", "Fall_Voiceline_Reward", "fallvoice", iPos, g_esGeneral.g_sFallVoicelineReward, sizeof esGeneral::g_sFallVoicelineReward, g_esGeneral.g_sFallVoicelineReward2, sizeof esGeneral::g_sFallVoicelineReward2, g_esGeneral.g_sFallVoicelineReward3, sizeof esGeneral::g_sFallVoicelineReward3, g_esGeneral.g_sFallVoicelineReward4, sizeof esGeneral::g_sFallVoicelineReward4, sSet[iPos]);
						vGetStringValue(key, "GlowColorVisual", "Glow Color Visual", "Glow_Color_Visual", "glowcolor", iPos, g_esGeneral.g_sOutlineColorVisual, sizeof esGeneral::g_sOutlineColorVisual, g_esGeneral.g_sOutlineColorVisual2, sizeof esGeneral::g_sOutlineColorVisual2, g_esGeneral.g_sOutlineColorVisual3, sizeof esGeneral::g_sOutlineColorVisual3, g_esGeneral.g_sOutlineColorVisual4, sizeof esGeneral::g_sOutlineColorVisual4, sValue);
						vGetStringValue(key, "ItemReward", "Item Reward", "Item_Reward", "item", iPos, g_esGeneral.g_sItemReward, sizeof esGeneral::g_sItemReward, g_esGeneral.g_sItemReward2, sizeof esGeneral::g_sItemReward2, g_esGeneral.g_sItemReward3, sizeof esGeneral::g_sItemReward3, g_esGeneral.g_sItemReward4, sizeof esGeneral::g_sItemReward4, sSet[iPos]);
						vGetStringValue(key, "LightColorVisual", "Light Color Visual", "Light_Color_Visual", "lightcolor", iPos, g_esGeneral.g_sLightColorVisual, sizeof esGeneral::g_sLightColorVisual, g_esGeneral.g_sLightColorVisual2, sizeof esGeneral::g_sLightColorVisual2, g_esGeneral.g_sLightColorVisual3, sizeof esGeneral::g_sLightColorVisual3, g_esGeneral.g_sLightColorVisual4, sizeof esGeneral::g_sLightColorVisual4, sValue);
						vGetStringValue(key, "LoopingVoicelineVisual", "Looping Voiceline Visual", "Looping_Voiceline_Visual", "loopvoice", iPos, g_esGeneral.g_sLoopingVoicelineVisual, sizeof esGeneral::g_sLoopingVoicelineVisual, g_esGeneral.g_sLoopingVoicelineVisual2, sizeof esGeneral::g_sLoopingVoicelineVisual2, g_esGeneral.g_sLoopingVoicelineVisual3, sizeof esGeneral::g_sLoopingVoicelineVisual3, g_esGeneral.g_sLoopingVoicelineVisual4, sizeof esGeneral::g_sLoopingVoicelineVisual4, sSet[iPos]);
						vGetStringValue(key, "ScreenColorVisual", "Screen Color Visual", "Screen_Color_Visual", "screencolor", iPos, g_esGeneral.g_sScreenColorVisual, sizeof esGeneral::g_sScreenColorVisual, g_esGeneral.g_sScreenColorVisual2, sizeof esGeneral::g_sScreenColorVisual2, g_esGeneral.g_sScreenColorVisual3, sizeof esGeneral::g_sScreenColorVisual3, g_esGeneral.g_sScreenColorVisual4, sizeof esGeneral::g_sScreenColorVisual4, sValue);
					}

					g_esGeneral.g_iStackLimits[iPos] = iGetClampedValue(key, "StackLimits", "Stack Limits", "Stack_Limits", "limits", g_esGeneral.g_iStackLimits[iPos], sSet[iPos], -1, 99999);
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_DIFF, false) || StrEqual(subsection, MT_CONFIG_SECTION_DIFF2, false))
			{
				if (StrEqual(key, "DifficultyDamage", false) || StrEqual(key, "Difficulty Damage", false) || StrEqual(key, "Difficulty_Damage", false) || StrEqual(key, "diffdmg", false))
				{
					char sValue[36], sSet[4][9];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esGeneral::g_flDifficultyDamage); iPos++)
					{
						g_esGeneral.g_flDifficultyDamage[iPos] = (sSet[iPos][0] != '\0') ? flClamp(StringToFloat(sSet[iPos]), -1.0, 99999.0) : g_esGeneral.g_flDifficultyDamage[iPos];
					}
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_SIZE, false))
			{
				char sValue[10], sRange[2][5];
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");
				ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);
				if (StrEqual(key, "InfectedScale", false) || StrEqual(key, "Infected Scale", false) || StrEqual(key, "Infected_Scale", false) || StrEqual(key, "infected", false))
				{
					g_esGeneral.g_flInfectedScaleMin = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -1.0, 10.0) : g_esGeneral.g_flInfectedScaleMin;
					g_esGeneral.g_flInfectedScaleMax = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 10.0) : g_esGeneral.g_flInfectedScaleMax;
				}
				else if (StrEqual(key, "JockeyScale", false) || StrEqual(key, "Jockey Scale", false) || StrEqual(key, "Jockey_Scale", false) || StrEqual(key, "jockey", false))
				{
					g_esGeneral.g_flJockeyScaleMin = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -1.0, 10.0) : g_esGeneral.g_flJockeyScaleMin;
					g_esGeneral.g_flJockeyScaleMax = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 10.0) : g_esGeneral.g_flJockeyScaleMax;
				}
				else if (StrEqual(key, "WitchScale", false) || StrEqual(key, "Witch Scale", false) || StrEqual(key, "Witch_Scale", false) || StrEqual(key, "witch", false))
				{
					g_esGeneral.g_flWitchScaleMin = (sRange[0][0] != '\0') ? flClamp(StringToFloat(sRange[0]), -1.0, 10.0) : g_esGeneral.g_flWitchScaleMin;
					g_esGeneral.g_flWitchScaleMax = (sRange[1][0] != '\0') ? flClamp(StringToFloat(sRange[1]), -1.0, 10.0) : g_esGeneral.g_flWitchScaleMax;
				}
			}
			else if (StrEqual(subsection, MT_CONFIG_SECTION_WAVES, false))
			{
				if (StrEqual(key, "RegularType", false) || StrEqual(key, "Regular Type", false) || StrEqual(key, "Regular_Type", false) || StrEqual(key, "regtype", false))
				{
					char sValue[10], sRange[2][5];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, "-", sRange, sizeof sRange, sizeof sRange[]);

					g_esGeneral.g_iRegularMinType = (sRange[0][0] != '\0') ? iClamp(StringToInt(sRange[0]), -1, MT_MAXTYPES) : g_esGeneral.g_iRegularMinType;
					g_esGeneral.g_iRegularMaxType = (sRange[1][0] != '\0') ? iClamp(StringToInt(sRange[1]), -1, MT_MAXTYPES) : g_esGeneral.g_iRegularMaxType;
				}
				else if (StrEqual(key, "FinaleTypes", false) || StrEqual(key, "Finale Types", false) || StrEqual(key, "Finale_Types", false) || StrEqual(key, "fintypes", false))
				{
					char sValue[110], sRange[11][10], sSet[2][5];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sRange, sizeof sRange, sizeof sRange[]);
					for (int iPos = 0; iPos < (sizeof sRange); iPos++)
					{
						if (sRange[iPos][0] == '\0')
						{
							continue;
						}

						ExplodeString(sRange[iPos], "-", sSet, sizeof sSet, sizeof sSet[]);
						g_esGeneral.g_iFinaleMinTypes[iPos] = (sSet[0][0] != '\0') ? iClamp(StringToInt(sSet[0]), -1, MT_MAXTYPES) : g_esGeneral.g_iFinaleMinTypes[iPos];
						g_esGeneral.g_iFinaleMaxTypes[iPos] = (sSet[1][0] != '\0') ? iClamp(StringToInt(sSet[1]), -1, MT_MAXTYPES) : g_esGeneral.g_iFinaleMaxTypes[iPos];
					}
				}
				else if (StrEqual(key, "FinaleWaves", false) || StrEqual(key, "Finale Waves", false) || StrEqual(key, "Finale_Waves", false) || StrEqual(key, "finwaves", false))
				{
					char sValue[33], sSet[11][3];
					strcopy(sValue, sizeof sValue, value);
					ReplaceString(sValue, sizeof sValue, " ", "");
					ExplodeString(sValue, ",", sSet, sizeof sSet, sizeof sSet[]);
					for (int iPos = 0; iPos < (sizeof esGeneral::g_iFinaleWave); iPos++)
					{
						g_esGeneral.g_iFinaleWave[iPos] = (sSet[iPos][0] != '\0') ? iClamp(StringToInt(sSet[iPos]), -1, 32) : g_esGeneral.g_iFinaleWave[iPos];
					}
				}
			}
			else if ((StrEqual(subsection, MT_CONFIG_SECTION_CONVARS, false) || StrEqual(subsection, MT_CONFIG_SECTION_CONVARS2, false)) && key[0] != '\0')
			{
				char sKey[128], sValue[PLATFORM_MAX_PATH];
				strcopy(sKey, sizeof sKey, key);
				ReplaceString(sKey, sizeof sKey, " ", "");
				strcopy(sValue, sizeof sValue, value);
				ReplaceString(sValue, sizeof sValue, " ", "");

				g_esGeneral.g_cvMTTempSetting = FindConVar(sKey);
				if (g_esGeneral.g_cvMTTempSetting != null)
				{
					if (g_esGeneral.g_cvMTTempSetting.Plugin != g_hPluginHandle)
					{
						int iFlags = g_esGeneral.g_cvMTTempSetting.Flags;
						g_esGeneral.g_cvMTTempSetting.Flags &= ~FCVAR_NOTIFY;
						g_esGeneral.g_cvMTTempSetting.SetString(sValue);
						g_esGeneral.g_cvMTTempSetting.Flags = iFlags;
						g_esGeneral.g_cvMTTempSetting = null;

						vLogMessage(MT_LOG_SERVER, _, "%s Changed cvar \"%s\" to \"%s\".", MT_TAG, sKey, sValue);
					}
					else
					{
						vLogMessage(MT_LOG_SERVER, _, "%s Unable to change cvar: %s", MT_TAG, sKey);
					}
				}
				else
				{
					vLogMessage(MT_LOG_SERVER, _, "%s Unable to find cvar: %s", MT_TAG, sKey);
				}
			}

			if (mode == -1 || mode == 1)
			{
				g_esGeneral.g_iGameModeTypes = iGetKeyValue(subsection, MT_CONFIG_SECTION_GAMEMODES, MT_CONFIG_SECTION_GAMEMODES2, MT_CONFIG_SECTION_GAMEMODES3, MT_CONFIG_SECTION_GAMEMODES4, key, "GameModeTypes", "Game Mode Types", "Game_Mode_Types", "gmtypes", g_esGeneral.g_iGameModeTypes, value, -1, 15);
				g_esGeneral.g_iConfigEnable = iGetKeyValue(subsection, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, key, "EnableCustomConfigs", "Enable Custom Configs", "Enable_Custom_Configs", "cenabled", g_esGeneral.g_iConfigEnable, value, -1, 1);
				g_esGeneral.g_iConfigCreate = iGetKeyValue(subsection, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, key, "CreateConfigTypes", "Create Config Types", "Create_Config_Types", "create", g_esGeneral.g_iConfigCreate, value, -1, 255);
				g_esGeneral.g_flConfigDelay = flGetKeyValue(subsection, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, key, "ExecuteConfigDelay", "Execute Config Delay", "Execute_Config_Delay", "delay", g_esGeneral.g_flConfigDelay, value, -1.0, 99999.0);
				g_esGeneral.g_iConfigExecute = iGetKeyValue(subsection, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, MT_CONFIG_SECTION_CUSTOM, key, "ExecuteConfigTypes", "Execute Config Types", "Execute_Config_Types", "execute", g_esGeneral.g_iConfigExecute, value, -1, 255);

				vGetKeyValue(subsection, MT_CONFIG_SECTION_GAMEMODES, MT_CONFIG_SECTION_GAMEMODES2, MT_CONFIG_SECTION_GAMEMODES3, MT_CONFIG_SECTION_GAMEMODES4, key, "EnabledGameModes", "Enabled Game Modes", "Enabled_Game_Modes", "gmenabled", g_esGeneral.g_sEnabledGameModes, sizeof esGeneral::g_sEnabledGameModes, value);
				vGetKeyValue(subsection, MT_CONFIG_SECTION_GAMEMODES, MT_CONFIG_SECTION_GAMEMODES2, MT_CONFIG_SECTION_GAMEMODES3, MT_CONFIG_SECTION_GAMEMODES4, key, "DisabledGameModes", "Disabled Game Modes", "Disabled_Game_Modes", "gmdisabled", g_esGeneral.g_sDisabledGameModes, sizeof esGeneral::g_sDisabledGameModes, value);
			}

			vConfigsLoadedForward(subsection, key, value, -1, -1, mode, false);
		}
		else if (!strncmp(section, "Tank", 4, false) || section[0] == '#' || IsCharNumeric(section[0]) || StrEqual(section, "all", false) || FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
		{
			int iStartPos = 0, iIndex = 0, iRealType = 0;
			if (!strncmp(section, "Tank", 4, false) || section[0] == '#')
			{
				iStartPos = iGetConfigSectionNumber(section, strlen(section)), iIndex = StringToInt(section[iStartPos]);
				vReadTankSettings(iIndex, mode, subsection, key, value);
			}
			else if (IsCharNumeric(section[0]) || StrEqual(section, "all", false) || FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
			{
				if (IsCharNumeric(section[0]) && FindCharInString(section, ',') == -1 && FindCharInString(section, '-') == -1)
				{
					iIndex = StringToInt(section);
					vReadTankSettings(iIndex, mode, subsection, key, value);
				}
				else if (StrEqual(section, "all", false) || FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
				{
					for (iIndex = g_esGeneral.g_iMinType; iIndex <= g_esGeneral.g_iMaxType; iIndex++)
					{
						if (iIndex <= 0)
						{
							continue;
						}

						iRealType = iFindSectionType(section, iIndex);
						if (iIndex == iRealType || StrEqual(section, "all", false))
						{
							vReadTankSettings(iIndex, mode, subsection, key, value);
						}
					}
				}
			}
		}
	}

	if ((mode == -1 || mode == 3) && (!strncmp(section, "STEAM_", 6, false) || !strncmp("0:", section, 2) || !strncmp("1:", section, 2) || (!strncmp(section, "[U:", 3) && section[strlen(section) - 1] == ']')))
	{
		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			if (bIsValidClient(iPlayer, MT_CHECK_INGAME) && (StrEqual(g_esPlayer[iPlayer].g_sSteamID32, section, false) || StrEqual(g_esPlayer[iPlayer].g_sSteam3ID, section, false)))
			{
				vReadPlayerSettings(iPlayer, subsection, key, value);
				vConfigsLoadedForward(subsection, key, value, -1, iPlayer, mode, false);

				break;
			}
		}
	}

	if (mode == -1)
	{
		if (StrEqual(subsection, MT_CONFIG_SECTION_CUSTOM, false))
		{
			vSetupConfigs();
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_GENERAL, false) || StrEqual(subsection, MT_CONFIG_SECTION_GAMEMODES, false) || StrEqual(subsection, MT_CONFIG_SECTION_GAMEMODES2, false) || StrEqual(subsection, MT_CONFIG_SECTION_GAMEMODES3, false) || StrEqual(subsection, MT_CONFIG_SECTION_GAMEMODES4, false))
		{
			vPluginStatus();
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_WAVES, false))
		{
			vResetTimers();
		}
		else if (StrEqual(subsection, MT_CONFIG_SECTION_RUSH, false))
		{
			vToggleTankRushConVars();
		}
	}
}

void vSetupConfigs()
{
	if (g_esGeneral.g_iConfigEnable == 1)
	{
		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_DIFFICULTY)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_DIFFICULTY);
			CreateDirectory(sSMPath, 511);

			char sDifficulty[11];
			for (int iDifficulty = 0; iDifficulty <= 3; iDifficulty++)
			{
				switch (iDifficulty)
				{
					case 0: sDifficulty = "Easy";
					case 1: sDifficulty = "Normal";
					case 2: sDifficulty = "Hard";
					case 3: sDifficulty = "Impossible";
				}

				vCreateConfigFile(MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_DIFFICULTY, sDifficulty);
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_MAP)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, (g_bSecondGame ? MT_CONFIG_PATH_MAP2 : MT_CONFIG_PATH_MAP));
			CreateDirectory(sSMPath, 511);

			char sMapName[128];
			ArrayList alMaps = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
			if (alMaps != null)
			{
				int iSerial = -1;
				ReadMapList(alMaps, iSerial, "default", MAPLIST_FLAG_MAPSFOLDER);
				ReadMapList(alMaps, iSerial, "allexistingmaps__", MAPLIST_FLAG_MAPSFOLDER|MAPLIST_FLAG_NO_DEFAULT);

				int iListSize = alMaps.Length, iMapCount = (iListSize > 0) ? iListSize : 0;
				if (iMapCount > 0)
				{
					for (int iPos = 0; iPos < iMapCount; iPos++)
					{
						alMaps.GetString(iPos, sMapName, sizeof sMapName);
						vCreateConfigFile((g_bSecondGame ? (MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_MAP2) : (MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_MAP)), sMapName);
					}
				}

				delete alMaps;
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_GAMEMODE)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, (g_bSecondGame ? MT_CONFIG_PATH_GAMEMODE2 : MT_CONFIG_PATH_GAMEMODE));
			CreateDirectory(sSMPath, 511);

			char sGameType[2049], sTypes[64][32];
			g_esGeneral.g_cvMTGameTypes.GetString(sGameType, sizeof sGameType);
			ReplaceString(sGameType, sizeof sGameType, " ", "");
			ExplodeString(sGameType, ",", sTypes, sizeof sTypes, sizeof sTypes[]);
			for (int iMode = 0; iMode < (sizeof sTypes); iMode++)
			{
				if (StrContains(sGameType, sTypes[iMode]) != -1 && sTypes[iMode][0] != '\0')
				{
					vCreateConfigFile((g_bSecondGame ? (MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_GAMEMODE2) : (MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_GAMEMODE)), sTypes[iMode]);
				}
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_DAY)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_DAY);
			CreateDirectory(sSMPath, 511);

			char sWeekday[32];
			for (int iDay = 0; iDay < 7; iDay++)
			{
				vGetDayName(iDay, sWeekday, sizeof sWeekday);
				vCreateConfigFile(MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_DAY, sWeekday);
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_PLAYERCOUNT)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_PLAYERCOUNT);
			CreateDirectory(sSMPath, 511);

			char sPlayerCount[32];
			for (int iCount = 0; iCount <= (MAXPLAYERS + 1); iCount++)
			{
				IntToString(iCount, sPlayerCount, sizeof sPlayerCount);
				vCreateConfigFile(MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_PLAYERCOUNT, sPlayerCount);
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_SURVIVORCOUNT)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_SURVIVORCOUNT);
			CreateDirectory(sSMPath, 511);

			char sPlayerCount[32];
			for (int iCount = 0; iCount <= (MAXPLAYERS + 1); iCount++)
			{
				IntToString(iCount, sPlayerCount, sizeof sPlayerCount);
				vCreateConfigFile(MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_SURVIVORCOUNT, sPlayerCount);
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_INFECTEDCOUNT)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_INFECTEDCOUNT);
			CreateDirectory(sSMPath, 511);

			char sPlayerCount[32];
			for (int iCount = 0; iCount <= (MAXPLAYERS + 1); iCount++)
			{
				IntToString(iCount, sPlayerCount, sizeof sPlayerCount);
				vCreateConfigFile(MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_INFECTEDCOUNT, sPlayerCount);
			}
		}

		if (g_esGeneral.g_iConfigCreate & MT_CONFIG_FINALE)
		{
			char sSMPath[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sSMPath, sizeof sSMPath, "%s%s", MT_CONFIG_FILEPATH, (g_bSecondGame ? MT_CONFIG_PATH_FINALE2 : MT_CONFIG_PATH_FINALE));
			CreateDirectory(sSMPath, 511);

			char sEvent[32];
			int iLimit = (g_bSecondGame ? 11 : 8);
			for (int iType = 0; iType < iLimit; iType++)
			{
				switch (iType)
				{
					case 0: sEvent = "finale_start";
					case 1: sEvent = "finale_escape_start";
					case 2: sEvent = "finale_vehicle_ready";
					case 3: sEvent = "finale_vehicle_leaving";
					case 4: sEvent = "finale_rush";
					case 5: sEvent = "finale_radio_start";
					case 6: sEvent = "finale_radio_damaged";
					case 7: sEvent = "finale_win";
					case 8: sEvent = "finale_vehicle_incoming";
					case 9: sEvent = "finale_bridge_lowering";
					case 10: sEvent = "gauntlet_finale_start";
				}

				vCreateConfigFile((g_bSecondGame ? (MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_FINALE2) : (MT_CONFIG_FILEPATH ... MT_CONFIG_PATH_FINALE)), sEvent);
			}
		}

		if ((g_esGeneral.g_iConfigExecute & MT_CONFIG_DIFFICULTY) && g_esGeneral.g_cvMTDifficulty != null)
		{
			char sDifficultyConfig[PLATFORM_MAX_PATH];
			if (bIsDifficultyConfigFound(sDifficultyConfig, sizeof sDifficultyConfig))
			{
				vCustomConfig(sDifficultyConfig);
				g_esGeneral.g_iFileTimeOld[1] = GetFileTime(sDifficultyConfig, FileTime_LastChange);
			}
		}

		if ((g_esGeneral.g_iConfigExecute & MT_CONFIG_MAP))
		{
			char sMapConfig[PLATFORM_MAX_PATH];
			if (bIsMapConfigFound(sMapConfig, sizeof sMapConfig))
			{
				vCustomConfig(sMapConfig);
				g_esGeneral.g_iFileTimeOld[2] = GetFileTime(sMapConfig, FileTime_LastChange);
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_GAMEMODE)
		{
			char sModeConfig[PLATFORM_MAX_PATH];
			if (bIsGameModeConfigFound(sModeConfig, sizeof sModeConfig))
			{
				vCustomConfig(sModeConfig);
				g_esGeneral.g_iFileTimeOld[3] = GetFileTime(sModeConfig, FileTime_LastChange);
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_DAY)
		{
			char sDayConfig[PLATFORM_MAX_PATH];
			if (bIsDayConfigFound(sDayConfig, sizeof sDayConfig))
			{
				vCustomConfig(sDayConfig);
				g_esGeneral.g_iFileTimeOld[4] = GetFileTime(sDayConfig, FileTime_LastChange);
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_PLAYERCOUNT)
		{
			char sCountConfig[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sCountConfig, sizeof sCountConfig, "%s%s%i.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_PLAYERCOUNT, iGetPlayerCount());
			if (FileExists(sCountConfig, true))
			{
				vCustomConfig(sCountConfig);
				g_esGeneral.g_iFileTimeOld[5] = GetFileTime(sCountConfig, FileTime_LastChange);
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_SURVIVORCOUNT)
		{
			char sCountConfig[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sCountConfig, sizeof sCountConfig, "%s%s%i.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_SURVIVORCOUNT, iGetHumanCount());
			if (FileExists(sCountConfig, true))
			{
				vCustomConfig(sCountConfig);
				g_esGeneral.g_iFileTimeOld[6] = GetFileTime(sCountConfig, FileTime_LastChange);
			}
		}

		if (g_esGeneral.g_iConfigExecute & MT_CONFIG_INFECTEDCOUNT)
		{
			char sCountConfig[PLATFORM_MAX_PATH];
			BuildPath(Path_SM, sCountConfig, sizeof sCountConfig, "%s%s%i.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_INFECTEDCOUNT, iGetHumanCount(true));
			if (FileExists(sCountConfig, true))
			{
				vCustomConfig(sCountConfig);
				g_esGeneral.g_iFileTimeOld[7] = GetFileTime(sCountConfig, FileTime_LastChange);
			}
		}
	}
}

/**
 * Parser functions & callbacks
 **/

SMCParser smcSetupParser(const char[] savepath, SMC_ParseStart startFunc, SMC_NewSection newSectionFunc, SMC_KeyValue kvFunc, SMC_EndSection leaveSectionFunc, SMC_RawLine rawLineFunc, SMC_ParseEnd endFunc)
{
	SMCParser smcParser = new SMCParser();
	if (smcParser != null)
	{
		smcParser.OnStart = startFunc;
		smcParser.OnEnterSection = newSectionFunc;
		smcParser.OnKeyValue = kvFunc;
		smcParser.OnLeaveSection = leaveSectionFunc;
		smcParser.OnRawLine = rawLineFunc;
		smcParser.OnEnd = endFunc;
		SMCError smcError = smcParser.ParseFile(savepath);

		if (smcError != SMCError_Okay)
		{
			char sError[64], sSMCError[64];
			smcParser.GetErrorString(smcError, sError, sizeof sError);
			FormatEx(sSMCError, sizeof sSMCError, "(Line %i) %s", g_esGeneral.g_iCurrentLine, sError);
			LogError("%s %T", MT_TAG, "ErrorParsing", LANG_SERVER, savepath, sSMCError);

			delete smcParser;
		}
	}
	else
	{
		LogError("%s %T", MT_TAG, "FailedParsing", LANG_SERVER, savepath);
	}

	return smcParser;
}

void SMCParseStart_Signatures(SMCParser smc)
{
	g_esGeneral.g_dsState3 = DataState_None;
	g_esGeneral.g_iCurrentLine = 0;
	g_esGeneral.g_iIgnoreLevel5 = 0;
	g_esGeneral.g_sCurrentSection4[0] = '\0';
	g_esGeneral.g_iSignatureCount = 0;

	for (int iPos = 0; iPos < MT_SIGNATURE_LIMIT; iPos++)
	{
		g_esSignature[iPos].g_adString = Address_Null;
		g_esSignature[iPos].g_bLog = false;
		g_esSignature[iPos].g_sAfter[0] = '\0';
		g_esSignature[iPos].g_sBefore[0] = '\0';
		g_esSignature[iPos].g_sLibrary[0] = '\0';
		g_esSignature[iPos].g_sName[0] = '\0';
		g_esSignature[iPos].g_sOffset[0] = '\0';
		g_esSignature[iPos].g_sSignature[0] = '\0';
		g_esSignature[iPos].g_sStart[0] = '\0';
		g_esSignature[iPos].g_sdkLibrary = SDKLibrary_Server;
	}
}

SMCResult SMCNewSection_Signatures(SMCParser smc, const char[] name, bool opt_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel5)
	{
		g_esGeneral.g_iIgnoreLevel5++;

		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState3 == DataState_None)
	{
		switch (StrEqual(name, MT_SIGNATURES_SECTION_MAIN, false) || StrEqual(name, MT_SIGNATURES_SECTION_MAIN2, false) || StrEqual(name, MT_SIGNATURES_SECTION_MAIN3, false) || StrEqual(name, MT_SIGNATURES_SECTION_MAIN4, false) || StrEqual(name, MT_SIGNATURES_SECTION_MAIN5, false))
		{
			case true: g_esGeneral.g_dsState3 = DataState_Start;
			case false: g_esGeneral.g_iIgnoreLevel5++;
		}
	}
	else if (g_esGeneral.g_dsState3 == DataState_Start)
	{
		if ((!g_bSecondGame && (StrEqual(name, MT_DATA_SECTION_GAME, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE, false) || StrEqual(name, MT_DATA_SECTION_GAME2, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE2, false) || StrEqual(name, MT_DATA_SECTION_GAME3, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE3, false)
			|| StrEqual(name, MT_DATA_SECTION_GAME4, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE4, false))) || (g_bSecondGame && (StrEqual(name, MT_DATA_SECTION_GAME_TWO, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO2, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO3, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO4, false)))
			|| StrEqual(name, MT_DATA_SECTION_GAME_BOTH, false))
		{
			g_esGeneral.g_dsState3 = DataState_Game;

			strcopy(g_esGeneral.g_sCurrentSection4, sizeof esGeneral::g_sCurrentSection4, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel5++;
		}
	}
	else if (g_esGeneral.g_dsState3 == DataState_Game)
	{
		if (!strncmp(name, MT_SIGNATURES_SECTION_PREFIX, 12, false))
		{
			g_esGeneral.g_dsState3 = DataState_Name;

			strcopy(g_esGeneral.g_sCurrentSection4, sizeof esGeneral::g_sCurrentSection4, name);
			strcopy(g_esSignature[g_esGeneral.g_iSignatureCount].g_sName, sizeof esSignature::g_sName, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel5++;
		}
	}
	else
	{
		g_esGeneral.g_iIgnoreLevel5++;
	}

	return SMCParse_Continue;
}

SMCResult SMCKeyValues_Signatures(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel5)
	{
		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState3 == DataState_Name && !strncmp(g_esGeneral.g_sCurrentSection4, MT_SIGNATURES_SECTION_PREFIX, 12, false))
	{
		vReadSignatureSettings(key, value);
	}

	return SMCParse_Continue;
}

SMCResult SMCEndSection_Signatures(SMCParser smc)
{
	if (g_esGeneral.g_iIgnoreLevel5)
	{
		g_esGeneral.g_iIgnoreLevel5--;

		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState3 == DataState_Name)
	{
		g_esGeneral.g_dsState3 = DataState_Game;

		vRegisterSignature(g_esSignature[g_esGeneral.g_iSignatureCount].g_sName);
	}
	else if (g_esGeneral.g_dsState3 == DataState_Game)
	{
		g_esGeneral.g_dsState3 = DataState_Start;
	}
	else if (g_esGeneral.g_dsState3 == DataState_Start)
	{
		g_esGeneral.g_dsState3 = DataState_None;
	}

	return SMCParse_Continue;
}

SMCResult SMCRawLine_Signatures(SMCParser smc, const char[] line, int lineno)
{
	g_esGeneral.g_iCurrentLine = lineno;

	return SMCParse_Continue;
}

void SMCParseEnd_Signatures(SMCParser smc, bool halted, bool failed)
{
	g_esGeneral.g_dsState3 = DataState_None;
	g_esGeneral.g_iIgnoreLevel5 = 0;
	g_esGeneral.g_sCurrentSection4[0] = '\0';

	vLogMessage(-1, _, "%s Registered %i signatures.", MT_TAG, g_esGeneral.g_iSignatureCount);
}

void SMCParseStart_Patches(SMCParser smc)
{
	g_esGeneral.g_bOverridePatch = true;
	g_esGeneral.g_dsState2 = DataState_None;
	g_esGeneral.g_iCurrentLine = 0;
	g_esGeneral.g_iIgnoreLevel4 = 0;
	g_esGeneral.g_sCurrentSection3[0] = '\0';
	g_esGeneral.g_sCurrentSubSection3[0] = '\0';
	g_esGeneral.g_iPatchCount = 0;

	for (int iPos = 0; iPos < MT_PATCH_LIMIT; iPos++)
	{
		g_esPatch[iPos].g_adPatch = Address_Null;
		g_esPatch[iPos].g_bInstalled = false;
		g_esPatch[iPos].g_bLog = false;
		g_esPatch[iPos].g_bUpdateMemAccess = true;
		g_esPatch[iPos].g_iLength = 0;
		g_esPatch[iPos].g_iOffset = 0;
		g_esPatch[iPos].g_iType = 0;
		g_esPatch[iPos].g_sBypass[0] = '\0';
		g_esPatch[iPos].g_sCvars[0] = '\0';
		g_esPatch[iPos].g_sName[0] = '\0';
		g_esPatch[iPos].g_sOffset[0] = '\0';
		g_esPatch[iPos].g_sPatch[0] = '\0';
		g_esPatch[iPos].g_sSignature[0] = '\0';
		g_esPatch[iPos].g_sVerify[0] = '\0';

		for (int iIndex = 0; iIndex < MT_PATCH_MAXLEN; iIndex++)
		{
			g_esPatch[iPos].g_iOriginalBytes[iIndex] = 0;
			g_esPatch[iPos].g_iPatchBytes[iIndex] = 0;
		}
	}
}

SMCResult SMCNewSection_Patches(SMCParser smc, const char[] name, bool opt_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel4)
	{
		g_esGeneral.g_iIgnoreLevel4++;

		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState2 == DataState_None)
	{
		switch (StrEqual(name, MT_PATCHES_SECTION_MAIN, false) || StrEqual(name, MT_PATCHES_SECTION_MAIN2, false) || StrEqual(name, MT_PATCHES_SECTION_MAIN3, false) || StrEqual(name, MT_PATCHES_SECTION_MAIN4, false) || StrEqual(name, MT_PATCHES_SECTION_MAIN5, false))
		{
			case true: g_esGeneral.g_dsState2 = DataState_Start;
			case false: g_esGeneral.g_iIgnoreLevel4++;
		}
	}
	else if (g_esGeneral.g_dsState2 == DataState_Start)
	{
		if ((!g_bSecondGame && (StrEqual(name, MT_DATA_SECTION_GAME, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE, false) || StrEqual(name, MT_DATA_SECTION_GAME2, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE2, false) || StrEqual(name, MT_DATA_SECTION_GAME3, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE3, false)
			|| StrEqual(name, MT_DATA_SECTION_GAME4, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE4, false))) || (g_bSecondGame && (StrEqual(name, MT_DATA_SECTION_GAME_TWO, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO2, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO3, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO4, false)))
			|| StrEqual(name, MT_DATA_SECTION_GAME_BOTH, false))
		{
			g_esGeneral.g_dsState2 = DataState_Game;

			strcopy(g_esGeneral.g_sCurrentSection3, sizeof esGeneral::g_sCurrentSection3, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel4++;
		}
	}
	else if (g_esGeneral.g_dsState2 == DataState_Game)
	{
		if (!strncmp(name, MT_PATCHES_SECTION_PREFIX, 8, false))
		{
			g_esGeneral.g_dsState2 = DataState_Name;

			strcopy(g_esGeneral.g_sCurrentSection3, sizeof esGeneral::g_sCurrentSection3, name);
			strcopy(g_esPatch[g_esGeneral.g_iPatchCount].g_sName, sizeof esPatch::g_sName, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel4++;
		}
	}
	else if (g_esGeneral.g_dsState2 == DataState_Name)
	{
		if ((g_esGeneral.g_iPlatformType == 2 && (StrEqual(name, MT_DATA_SECTION_OS, false) || StrEqual(name, MT_DATA_SECTION_OS2, false)))
			|| (g_esGeneral.g_iPlatformType == 1 && (StrEqual(name, MT_DATA_SECTION_OS3, false) || StrEqual(name, MT_DATA_SECTION_OS4, false)))
			|| (g_esGeneral.g_iPlatformType == 0 && (StrEqual(name, MT_DATA_SECTION_OS5, false) || StrEqual(name, MT_DATA_SECTION_OS6, false))))
		{
			g_esGeneral.g_dsState2 = DataState_OS;

			strcopy(g_esGeneral.g_sCurrentSubSection3, sizeof esGeneral::g_sCurrentSubSection3, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel4++;
		}
	}
	else
	{
		g_esGeneral.g_iIgnoreLevel4++;
	}

	return SMCParse_Continue;
}

SMCResult SMCKeyValues_Patches(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel4)
	{
		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState2 == DataState_Name && !strncmp(g_esGeneral.g_sCurrentSection3, MT_PATCHES_SECTION_PREFIX, 8, false))
	{
		vReadPatchSettings(key, value);
	}
	else if (g_esGeneral.g_dsState2 == DataState_OS
		&& ((g_esGeneral.g_iPlatformType == 2 && (StrEqual(g_esGeneral.g_sCurrentSubSection3, MT_DATA_SECTION_OS, false) || StrEqual(g_esGeneral.g_sCurrentSubSection3, MT_DATA_SECTION_OS2, false)))
			|| (g_esGeneral.g_iPlatformType == 1 && (StrEqual(g_esGeneral.g_sCurrentSubSection3, MT_DATA_SECTION_OS3, false) || StrEqual(g_esGeneral.g_sCurrentSubSection3, MT_DATA_SECTION_OS4, false)))
			|| (g_esGeneral.g_iPlatformType == 0 && (StrEqual(g_esGeneral.g_sCurrentSubSection3, MT_DATA_SECTION_OS5, false) || StrEqual(g_esGeneral.g_sCurrentSubSection3, MT_DATA_SECTION_OS6, false)))))
	{
		vReadPatchSettings(key, value);
	}

	return SMCParse_Continue;
}

SMCResult SMCEndSection_Patches(SMCParser smc)
{
	if (g_esGeneral.g_iIgnoreLevel4)
	{
		g_esGeneral.g_iIgnoreLevel4--;

		return SMCParse_Continue;
	}

	int iIndex = g_esGeneral.g_iPatchCount;
	if (g_esGeneral.g_dsState2 == DataState_OS)
	{
		g_esGeneral.g_dsState2 = DataState_Name;
		g_esGeneral.g_bOverridePatch = false;

		vRegisterPatch(g_esPatch[iIndex].g_sName, true);
	}
	else if (g_esGeneral.g_dsState2 == DataState_Name)
	{
		g_esGeneral.g_dsState2 = DataState_Game;
		iIndex = g_esGeneral.g_bOverridePatch ? iIndex : (iIndex - 1);

		vRegisterPatch(g_esPatch[iIndex].g_sName, g_esGeneral.g_bOverridePatch);
	}
	else if (g_esGeneral.g_dsState2 == DataState_Game)
	{
		g_esGeneral.g_dsState2 = DataState_Start;
	}
	else if (g_esGeneral.g_dsState2 == DataState_Start)
	{
		g_esGeneral.g_dsState2 = DataState_None;
	}

	return SMCParse_Continue;
}

SMCResult SMCRawLine_Patches(SMCParser smc, const char[] line, int lineno)
{
	g_esGeneral.g_iCurrentLine = lineno;

	return SMCParse_Continue;
}

void SMCParseEnd_Patches(SMCParser smc, bool halted, bool failed)
{
	g_esGeneral.g_dsState2 = DataState_None;
	g_esGeneral.g_iIgnoreLevel4 = 0;
	g_esGeneral.g_sCurrentSection3[0] = '\0';
	g_esGeneral.g_sCurrentSubSection3[0] = '\0';

	vLogMessage(-1, _, "%s Registered %i patches.", MT_TAG, g_esGeneral.g_iPatchCount);
}

void SMCParseStart_Detours(SMCParser smc)
{
	g_esGeneral.g_bOverrideDetour = true;
	g_esGeneral.g_dsState = DataState_None;
	g_esGeneral.g_iCurrentLine = 0;
	g_esGeneral.g_iIgnoreLevel3 = 0;
	g_esGeneral.g_sCurrentSection2[0] = '\0';
	g_esGeneral.g_sCurrentSubSection2[0] = '\0';
	g_esGeneral.g_iDetourCount = 0;

	for (int iPos = 0; iPos < MT_DETOUR_LIMIT; iPos++)
	{
		g_esDetour[iPos].g_bBypassNeeded = false;
		g_esDetour[iPos].g_bInstalled = false;
		g_esDetour[iPos].g_bLog = false;
		g_esDetour[iPos].g_iPostHook = 0;
		g_esDetour[iPos].g_iPreHook = 0;
		g_esDetour[iPos].g_iType = 0;
		g_esDetour[iPos].g_sCvars[0] = '\0';
		g_esDetour[iPos].g_sName[0] = '\0';
	}
}

SMCResult SMCNewSection_Detours(SMCParser smc, const char[] name, bool opt_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel3)
	{
		g_esGeneral.g_iIgnoreLevel3++;

		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState == DataState_None)
	{
		switch (StrEqual(name, MT_DETOURS_SECTION_MAIN, false) || StrEqual(name, MT_DETOURS_SECTION_MAIN2, false) || StrEqual(name, MT_DETOURS_SECTION_MAIN3, false) || StrEqual(name, MT_DETOURS_SECTION_MAIN4, false) || StrEqual(name, MT_DETOURS_SECTION_MAIN5, false))
		{
			case true: g_esGeneral.g_dsState = DataState_Start;
			case false: g_esGeneral.g_iIgnoreLevel3++;
		}
	}
	else if (g_esGeneral.g_dsState == DataState_Start)
	{
		if ((!g_bSecondGame && (StrEqual(name, MT_DATA_SECTION_GAME, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE, false) || StrEqual(name, MT_DATA_SECTION_GAME2, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE2, false) || StrEqual(name, MT_DATA_SECTION_GAME3, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE3, false)
			|| StrEqual(name, MT_DATA_SECTION_GAME4, false) || StrEqual(name, MT_DATA_SECTION_GAME_ONE4, false))) || (g_bSecondGame && (StrEqual(name, MT_DATA_SECTION_GAME_TWO, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO2, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO3, false) || StrEqual(name, MT_DATA_SECTION_GAME_TWO4, false)))
			|| StrEqual(name, MT_DATA_SECTION_GAME_BOTH, false))
		{
			g_esGeneral.g_dsState = DataState_Game;

			strcopy(g_esGeneral.g_sCurrentSection2, sizeof esGeneral::g_sCurrentSection2, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel3++;
		}
	}
	else if (g_esGeneral.g_dsState == DataState_Game)
	{
		if (!strncmp(name, MT_DETOURS_SECTION_PREFIX, 9, false))
		{
			g_esGeneral.g_dsState = DataState_Name;

			strcopy(g_esGeneral.g_sCurrentSection2, sizeof esGeneral::g_sCurrentSection2, name);
			strcopy(g_esDetour[g_esGeneral.g_iDetourCount].g_sName, sizeof esDetour::g_sName, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel3++;
		}
	}
	else if (g_esGeneral.g_dsState == DataState_Name)
	{
		if ((g_esGeneral.g_iPlatformType == 2 && (StrEqual(name, MT_DATA_SECTION_OS, false) || StrEqual(name, MT_DATA_SECTION_OS2, false)))
			|| (g_esGeneral.g_iPlatformType == 1 && (StrEqual(name, MT_DATA_SECTION_OS3, false) || StrEqual(name, MT_DATA_SECTION_OS4, false)))
			|| (g_esGeneral.g_iPlatformType == 0 && (StrEqual(name, MT_DATA_SECTION_OS5, false) || StrEqual(name, MT_DATA_SECTION_OS6, false))))
		{
			g_esGeneral.g_dsState = DataState_OS;

			strcopy(g_esGeneral.g_sCurrentSubSection2, sizeof esGeneral::g_sCurrentSubSection2, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel3++;
		}
	}
	else
	{
		g_esGeneral.g_iIgnoreLevel3++;
	}

	return SMCParse_Continue;
}

SMCResult SMCKeyValues_Detours(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel3)
	{
		return SMCParse_Continue;
	}

	if (g_esGeneral.g_dsState == DataState_Name && !strncmp(g_esGeneral.g_sCurrentSection2, MT_DETOURS_SECTION_PREFIX, 9, false))
	{
		vReadDetourSettings(key, value);
	}
	else if (g_esGeneral.g_dsState == DataState_OS
		&& ((g_esGeneral.g_iPlatformType == 2 && (StrEqual(g_esGeneral.g_sCurrentSubSection2, MT_DATA_SECTION_OS, false) || StrEqual(g_esGeneral.g_sCurrentSubSection2, MT_DATA_SECTION_OS2, false)))
			|| (g_esGeneral.g_iPlatformType == 1 && (StrEqual(g_esGeneral.g_sCurrentSubSection2, MT_DATA_SECTION_OS3, false) || StrEqual(g_esGeneral.g_sCurrentSubSection2, MT_DATA_SECTION_OS4, false)))
			|| (g_esGeneral.g_iPlatformType == 0 && (StrEqual(g_esGeneral.g_sCurrentSubSection2, MT_DATA_SECTION_OS5, false) || StrEqual(g_esGeneral.g_sCurrentSubSection2, MT_DATA_SECTION_OS6, false)))))
	{
		vReadDetourSettings(key, value);
	}

	return SMCParse_Continue;
}

SMCResult SMCEndSection_Detours(SMCParser smc)
{
	if (g_esGeneral.g_iIgnoreLevel3)
	{
		g_esGeneral.g_iIgnoreLevel3--;

		return SMCParse_Continue;
	}

	int iIndex = g_esGeneral.g_iDetourCount;
	if (g_esGeneral.g_dsState == DataState_OS)
	{
		g_esGeneral.g_dsState = DataState_Name;
		g_esGeneral.g_bOverrideDetour = false;

		vRegisterDetour(g_esDetour[iIndex].g_sName, true);
	}
	else if (g_esGeneral.g_dsState == DataState_Name)
	{
		g_esGeneral.g_dsState = DataState_Game;
		iIndex = g_esGeneral.g_bOverrideDetour ? iIndex : (iIndex - 1);

		vRegisterDetour(g_esDetour[iIndex].g_sName, g_esGeneral.g_bOverrideDetour);
	}
	else if (g_esGeneral.g_dsState == DataState_Game)
	{
		g_esGeneral.g_dsState = DataState_Start;
	}
	else if (g_esGeneral.g_dsState == DataState_Start)
	{
		g_esGeneral.g_dsState = DataState_None;
	}

	return SMCParse_Continue;
}

SMCResult SMCRawLine_Detours(SMCParser smc, const char[] line, int lineno)
{
	g_esGeneral.g_iCurrentLine = lineno;

	return SMCParse_Continue;
}

void SMCParseEnd_Detours(SMCParser smc, bool halted, bool failed)
{
	g_esGeneral.g_dsState = DataState_None;
	g_esGeneral.g_iIgnoreLevel3 = 0;
	g_esGeneral.g_sCurrentSection2[0] = '\0';
	g_esGeneral.g_sCurrentSubSection2[0] = '\0';

	vLogMessage(-1, _, "%s Registered %i detours.", MT_TAG, g_esGeneral.g_iDetourCount);
}

void SMCParseStart_Config(SMCParser smc)
{
	g_esGeneral.g_iCurrentLine = 0;
}

SMCResult SMCNewSection_Config(SMCParser smc, const char[] name, bool opt_quotes)
{
	if (StrEqual(name, MT_CONFIG_SECTION_MAIN, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN2, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN3, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN4, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN5, false) || StrContains(name, MT_CONFIG_SECTION_NICK, false) != -1
		|| StrContains(name, MT_CONFIG_SECTION_ROCHELLE, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ELLIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_COACH, false) != -1 || StrContains(name, MT_CONFIG_SECTION_BILL, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ZOEY, false) != -1
		|| StrContains(name, MT_CONFIG_SECTION_FRANCIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_LOUIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_WEAPON, false) != -1 || StrContains(name, MT_CONFIG_SECTION_SMOKER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_BOOMER, false) != -1
		|| StrContains(name, MT_CONFIG_SECTION_HUNTER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_SPITTER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_JOCKEY, false) != -1 || StrContains(name, MT_CONFIG_SECTION_CHARGER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_WITCH, false) != -1
		|| StrContains(name, MT_CONFIG_SECTION_COMMON, false) != -1 || StrEqual(name, MT_CONFIG_SECTION_SPECIAL, false) || StrContains(name, MT_CONFIG_SECTION_SPECIAL2, false) != -1 || StrEqual(name, MT_CONFIG_SECTION_MOB, false) || StrEqual(name, MT_CONFIG_SECTION_INFECTED, false) || StrContains(name, MT_CONFIG_SECTION_INFECTED2, false) != -1)
	{
		return SMCParse_Continue;
	}

	if (StrEqual(name, MT_CONFIG_SECTION_SETTINGS, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS2, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS3, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS4, false)
		|| !strncmp(name, "STEAM_", 6, false) || !strncmp("0:", name, 2) || !strncmp("1:", name, 2) || (!strncmp(name, "[U:", 3) && name[strlen(name) - 1] == ']')
		|| StrEqual(name, "all", false) || FindCharInString(name, ',') != -1 || FindCharInString(name, '-') != -1 || !strncmp(name, "Tank", 4, false) || name[0] == '#' || IsCharNumeric(name[0]))
	{
		g_esGeneral.g_alSections.PushString(name);
	}

	return SMCParse_Continue;
}

SMCResult SMCKeyValues_Config(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)
{
	return SMCParse_Continue;
}

SMCResult SMCEndSection_Config(SMCParser smc)
{
	return SMCParse_Continue;
}

SMCResult SMCRawLine_Config(SMCParser smc, const char[] line, int lineno)
{
	g_esGeneral.g_iCurrentLine = lineno;

	return SMCParse_Continue;
}

void SMCParseEnd_Config(SMCParser smc, bool halted, bool failed)
{
	return;
}

void vParseConfig(int client)
{
	g_esGeneral.g_bUsedParser = true;
	g_esGeneral.g_iParserViewer = client;

	SMCParser smcParser = smcSetupParser(g_esGeneral.g_sChosenPath, SMCParseStart_Parser, SMCNewSection_Parser, SMCKeyValues_Parser, SMCEndSection_Parser, SMCRawLine_Parser, SMCParseEnd_Parser);
	if (smcParser != null)
	{
		delete smcParser;
	}
}

void SMCParseStart_Parser(SMCParser smc)
{
	g_esGeneral.g_csState2 = ConfigState_None;
	g_esGeneral.g_iCurrentLine = 0;
	g_esGeneral.g_iIgnoreLevel2 = 0;

	switch (bIsValidClient(g_esGeneral.g_iParserViewer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		case true: MT_PrintToChat(g_esGeneral.g_iParserViewer, "%s %t", MT_TAG2, "StartParsing");
		case false: vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "StartParsing", LANG_SERVER);
	}
}

SMCResult SMCNewSection_Parser(SMCParser smc, const char[] name, bool opt_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel2)
	{
		g_esGeneral.g_iIgnoreLevel2++;

		return SMCParse_Continue;
	}

	bool bHuman = bIsValidClient(g_esGeneral.g_iParserViewer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT);
	if (g_esGeneral.g_csState2 == ConfigState_None)
	{
		if (StrEqual(name, MT_CONFIG_SECTION_MAIN, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN2, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN3, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN4, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN5, false))
		{
			g_esGeneral.g_csState2 = ConfigState_Start;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("\"%s\"\n{") : ("%s\n{"), name);
				case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("\"%s\"\n{") : ("%s\n{"), name);
			}
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel2++;
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Start)
	{
		if ((StrEqual(name, MT_CONFIG_SECTION_SETTINGS, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS2, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS3, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS4, false)) && StrContains(name, g_esGeneral.g_sSection, false) != -1)
		{
			g_esGeneral.g_csState2 = ConfigState_Settings;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
				case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
			}
		}
		else if (g_esGeneral.g_iSection > 0 && (!strncmp(name, "Tank", 4, false) || name[0] == '#' || IsCharNumeric(name[0]) || StrEqual(name, "all", false) || FindCharInString(name, ',') != -1 || FindCharInString(name, '-') != -1))
		{
			char sSection[33], sIndex[5], sType[5];
			strcopy(sSection, sizeof sSection, name);

			int iIndex = iFindSectionType(name, g_esGeneral.g_iSection), iStartPos = iGetConfigSectionNumber(sSection, sizeof sSection);
			IntToString(iIndex, sIndex, sizeof sIndex);
			IntToString(g_esGeneral.g_iSection, sType, sizeof sType);
			if (StrContains(name, sType) != -1 && (StrEqual(sType, sSection[iStartPos]) || StrEqual(sType, sIndex) || StrEqual(name, "all", false)))
			{
				g_esGeneral.g_csState2 = ConfigState_Type;

				switch (bHuman)
				{
					case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
					case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
				}
			}
			else
			{
				g_esGeneral.g_iIgnoreLevel2++;
			}
		}
		else if (StrEqual(name, g_esGeneral.g_sSection, false) && (StrEqual(name, "all", false) || FindCharInString(name, ',') != -1 || FindCharInString(name, '-') != -1))
		{
			g_esGeneral.g_csState2 = ConfigState_Type;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
				case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
			}
		}
		else if ((!strncmp(name, "STEAM_", 6, false) || !strncmp("0:", name, 2) || !strncmp("1:", name, 2) || (!strncmp(name, "[U:", 3) && name[strlen(name) - 1] == ']')) && StrContains(name, g_esGeneral.g_sSection, false) != -1)
		{
			g_esGeneral.g_csState2 = ConfigState_Admin;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
				case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("%7s \"%s\"\n%7s {") : ("%7s %s\n%7s {"), "", name, "");
			}
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel2++;
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Settings || g_esGeneral.g_csState2 == ConfigState_Type || g_esGeneral.g_csState2 == ConfigState_Admin)
	{
		g_esGeneral.g_csState2 = ConfigState_Specific;

		switch (bHuman)
		{
			case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("%15s \"%s\"\n%15s {") : ("%15s %s\n%15s {"), "", name, "");
			case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("%15s \"%s\"\n%15s {") : ("%15s %s\n%15s {"), "", name, "");
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Specific)
	{
		if (StrContains(name, MT_CONFIG_SECTION_NICK, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ROCHELLE, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ELLIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_COACH, false) != -1 || StrContains(name, MT_CONFIG_SECTION_BILL, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ZOEY, false) != -1 || StrContains(name, MT_CONFIG_SECTION_FRANCIS, false) != -1
			|| StrContains(name, MT_CONFIG_SECTION_LOUIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_WEAPON, false) != -1 || StrContains(name, MT_CONFIG_SECTION_SMOKER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_BOOMER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_HUNTER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_SPITTER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_JOCKEY, false) != -1
			|| StrContains(name, MT_CONFIG_SECTION_CHARGER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_WITCH, false) != -1 || StrContains(name, MT_CONFIG_SECTION_COMMON, false) != -1 || StrEqual(name, MT_CONFIG_SECTION_SPECIAL, false) || StrContains(name, MT_CONFIG_SECTION_SPECIAL2, false) != -1 || StrEqual(name, MT_CONFIG_SECTION_MOB, false) || StrEqual(name, MT_CONFIG_SECTION_INFECTED, false) || StrContains(name, MT_CONFIG_SECTION_INFECTED2, false) != -1)
		{
			g_esGeneral.g_csState2 = ConfigState_Special;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, (opt_quotes) ? ("%23s \"%s\"\n%23s {") : ("%23s %s\n%23s {"), "", name, "");
				case false: vLogMessage(MT_LOG_SERVER, false, (opt_quotes) ? ("%23s \"%s\"\n%23s {") : ("%23s %s\n%23s {"), "", name, "");
			}
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel2++;
		}
	}
	else
	{
		g_esGeneral.g_iIgnoreLevel2++;
	}

	return SMCParse_Continue;
}

SMCResult SMCKeyValues_Parser(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel2)
	{
		return SMCParse_Continue;
	}

	if (g_esGeneral.g_csState2 == ConfigState_Specific)
	{
		char sKey[64], sValue[384];
		FormatEx(sKey, sizeof sKey, (key_quotes ? "\"%s\"" : "%s"), key);
		FormatEx(sValue, sizeof sValue, (value_quotes ? "\"%s\"" : "%s"), value);

		switch (bIsValidClient(g_esGeneral.g_iParserViewer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
		{
			case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%23s %39s %s", "", sKey, (value[0] == '\0') ? "\"\"" : sValue);
			case false: vLogMessage(MT_LOG_SERVER, false, "%23s %39s %s", "", sKey, (value[0] == '\0') ? "\"\"" : sValue);
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Special)
	{
		char sKey[64], sValue[384];
		FormatEx(sKey, sizeof sKey, (key_quotes ? "\"%s\"" : "%s"), key);
		FormatEx(sValue, sizeof sValue, (value_quotes ? "\"%s\"" : "%s"), value);

		switch (bIsValidClient(g_esGeneral.g_iParserViewer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
		{
			case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%31s %47s %s", "", sKey, (value[0] == '\0') ? "\"\"" : sValue);
			case false: vLogMessage(MT_LOG_SERVER, false, "%31s %47s %s", "", sKey, (value[0] == '\0') ? "\"\"" : sValue);
		}
	}

	return SMCParse_Continue;
}

SMCResult SMCEndSection_Parser(SMCParser smc)
{
	if (g_esGeneral.g_iIgnoreLevel2)
	{
		g_esGeneral.g_iIgnoreLevel2--;

		return SMCParse_Continue;
	}

	bool bHuman = bIsValidClient(g_esGeneral.g_iParserViewer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT);
	if (g_esGeneral.g_csState2 == ConfigState_Special)
	{
		g_esGeneral.g_csState2 = ConfigState_Specific;

		switch (bHuman)
		{
			case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%23s }", "");
			case false: vLogMessage(MT_LOG_SERVER, false, "%23s }", "");
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Specific)
	{
		if (StrContains(MT_CONFIG_SECTION_SETTINGS, g_esGeneral.g_sSection, false) != -1 || StrContains(MT_CONFIG_SECTION_SETTINGS2, g_esGeneral.g_sSection, false) != -1 || StrContains(MT_CONFIG_SECTION_SETTINGS3, g_esGeneral.g_sSection, false) != -1 || StrContains(MT_CONFIG_SECTION_SETTINGS4, g_esGeneral.g_sSection, false) != -1)
		{
			g_esGeneral.g_csState2 = ConfigState_Settings;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%15s }", "");
				case false: vLogMessage(MT_LOG_SERVER, false, "%15s }", "");
			}
		}
		else if (g_esGeneral.g_iSection > 0 && (!strncmp(g_esGeneral.g_sSection, "Tank", 4, false) || g_esGeneral.g_sSection[0] == '#' || IsCharNumeric(g_esGeneral.g_sSection[0]) || StrEqual(g_esGeneral.g_sSection, "all", false) || FindCharInString(g_esGeneral.g_sSection, ',') != -1 || FindCharInString(g_esGeneral.g_sSection, '-') != -1))
		{
			g_esGeneral.g_csState2 = ConfigState_Type;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%15s }", "");
				case false: vLogMessage(MT_LOG_SERVER, false, "%15s }", "");
			}
		}
		else if (StrEqual(g_esGeneral.g_sSection, "all", false) || FindCharInString(g_esGeneral.g_sSection, ',') != -1 || FindCharInString(g_esGeneral.g_sSection, '-') != -1)
		{
			g_esGeneral.g_csState2 = ConfigState_Type;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%15s }", "");
				case false: vLogMessage(MT_LOG_SERVER, false, "%15s }", "");
			}
		}
		else if (!strncmp(g_esGeneral.g_sSection, "STEAM_", 6, false) || !strncmp("0:", g_esGeneral.g_sSection, 2) || !strncmp("1:", g_esGeneral.g_sSection, 2) || (!strncmp(g_esGeneral.g_sSection, "[U:", 3) && g_esGeneral.g_sSection[strlen(g_esGeneral.g_sSection) - 1] == ']'))
		{
			g_esGeneral.g_csState2 = ConfigState_Admin;

			switch (bHuman)
			{
				case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%15s }", "");
				case false: vLogMessage(MT_LOG_SERVER, false, "%15s }", "");
			}
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Settings || g_esGeneral.g_csState2 == ConfigState_Type || g_esGeneral.g_csState2 == ConfigState_Admin)
	{
		g_esGeneral.g_csState2 = ConfigState_Start;

		switch (bHuman)
		{
			case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "%7s }", "");
			case false: vLogMessage(MT_LOG_SERVER, false, "%7s }", "");
		}
	}
	else if (g_esGeneral.g_csState2 == ConfigState_Start)
	{
		g_esGeneral.g_csState2 = ConfigState_None;

		switch (bHuman)
		{
			case true: MT_PrintToConsole(g_esGeneral.g_iParserViewer, "}");
			case false: vLogMessage(MT_LOG_SERVER, false, "}");
		}
	}

	return SMCParse_Continue;
}

SMCResult SMCRawLine_Parser(SMCParser smc, const char[] line, int lineno)
{
	g_esGeneral.g_iCurrentLine = lineno;

	return SMCParse_Continue;
}

void SMCParseEnd_Parser(SMCParser smc, bool halted, bool failed)
{
	switch (bIsValidClient(g_esGeneral.g_iParserViewer, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		case true: MT_PrintToChat(g_esGeneral.g_iParserViewer, "%s %t\n%s %t", MT_TAG2, "CompletedParsing", MT_TAG2, "CheckConsole");
		case false: vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "CompletedParsing", LANG_SERVER);
	}

	g_esGeneral.g_bUsedParser = false;
	g_esGeneral.g_csState2 = ConfigState_None;
	g_esGeneral.g_iIgnoreLevel2 = 0;
	g_esGeneral.g_iParserViewer = 0;
	g_esGeneral.g_iSection = 0;
	g_esGeneral.g_sSection[0] = '\0';
}

void vConfigsLoadedForward(const char[] subsection, const char[] key, const char[] value, int type, int admin, int mode, bool special, const char[] specsection = "")
{
	Call_StartForward(g_esGeneral.g_gfConfigsLoadedForward);
	Call_PushString(subsection);
	Call_PushString(key);
	Call_PushString(value);
	Call_PushCell(type);
	Call_PushCell(admin);
	Call_PushCell(mode);
	Call_PushCell(special);
	Call_PushString(specsection);
	Call_Finish();
}

void vLoadConfigs(const char[] savepath, int mode)
{
	if (mode < 2)
	{
		vClearClassKeysList();
		vClearColorKeysList();

		g_esGeneral.g_alClassKeys[0] = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
		g_esGeneral.g_alClassKeys[1] = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
		g_esGeneral.g_alColorKeys[0] = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
		g_esGeneral.g_alColorKeys[1] = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
	}

	vClearAbilityList();
	vClearPluginList();

	g_esGeneral.g_alPlugins = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));
	if (g_esGeneral.g_alPlugins != null)
	{
		Call_StartForward(g_esGeneral.g_gfPluginCheckForward);
		Call_PushCell(g_esGeneral.g_alPlugins);
		Call_Finish();
	}

	bool bFinish = true;
	Call_StartForward(g_esGeneral.g_gfAbilityCheckForward);

	for (int iPos = 0; iPos < (sizeof esGeneral::g_alAbilitySections); iPos++)
	{
		g_esGeneral.g_alAbilitySections[iPos] = new ArrayList(ByteCountToCells(PLATFORM_MAX_PATH));

		switch (g_esGeneral.g_alAbilitySections[iPos] != null)
		{
			case true: Call_PushCell(g_esGeneral.g_alAbilitySections[iPos]);
			case false:
			{
				bFinish = false;

				Call_Cancel();

				break;
			}
		}
	}

	if (bFinish)
	{
		Call_Finish();
	}

	for (int iPos = 0; iPos < MT_MAXABILITIES; iPos++)
	{
		g_esGeneral.g_bAbilityPlugin[iPos] = false;
	}

	if (g_esGeneral.g_alPlugins != null)
	{
		int iLength = g_esGeneral.g_alPlugins.Length, iListSize = (iLength > 0) ? iLength : 0;
		if (iListSize > 0)
		{
			for (int iPos = 0; iPos < iListSize; iPos++)
			{
				g_esGeneral.g_bAbilityPlugin[iPos] = true;
			}
		}
	}

	g_esGeneral.g_iConfigMode = mode;

	if (g_esGeneral.g_alFilePaths != null)
	{
		int iLength = g_esGeneral.g_alFilePaths.Length, iListSize = (iLength > 0) ? iLength : 0;
		if (iListSize > 0)
		{
			bool bAdd = true;
			char sFilePath[PLATFORM_MAX_PATH];
			for (int iPos = 0; iPos < iListSize; iPos++)
			{
				g_esGeneral.g_alFilePaths.GetString(iPos, sFilePath, sizeof sFilePath);
				if (StrEqual(savepath, sFilePath, false))
				{
					bAdd = false;

					break;
				}
			}

			if (bAdd)
			{
				g_esGeneral.g_alFilePaths.PushString(savepath);
			}
		}
		else
		{
			g_esGeneral.g_alFilePaths.PushString(savepath);
		}
	}

	SMCParser smcMain = smcSetupParser(savepath, SMCParseStart_Main, SMCNewSection_Main, SMCKeyValues_Main, SMCEndSection_Main, SMCRawLine_Main, SMCParseEnd_Main);
	if (smcMain != null)
	{
		delete smcMain;
	}
}

void SMCParseStart_Main(SMCParser smc)
{
	g_esGeneral.g_csState = ConfigState_None;
	g_esGeneral.g_iCurrentLine = 0;
	g_esGeneral.g_iIgnoreLevel = 0;
	g_esGeneral.g_sCurrentSection[0] = '\0';
	g_esGeneral.g_sCurrentSpecSection[0] = '\0';
	g_esGeneral.g_sCurrentSubSection[0] = '\0';

	if (g_esGeneral.g_iConfigMode == 1)
	{
		g_esGeneral.g_bRecycleTypes = false;
		g_esGeneral.g_bRecycleTypes2 = false;
		g_esGeneral.g_iTotalTypes[0] = 0;
		g_esGeneral.g_iTotalTypes[1] = 0;
		g_esGeneral.g_iTypeCounter[0] = 0;
		g_esGeneral.g_iTypeCounter[1] = 0;
		g_esGeneral.g_iPluginEnabled = 0;
		g_esGeneral.g_iAutoUpdate = 0;
		g_esGeneral.g_iGraphicsLevel = 3;
		g_esGeneral.g_iBulletFix = 1;
		g_esGeneral.g_iKickBots = 0;
		g_esGeneral.g_iListenSupport = g_bDedicated ? 0 : 1;
		g_esGeneral.g_iCheckAbilities = 1;
		g_esGeneral.g_iDeathRevert = 1;
		g_esGeneral.g_iFinalesOnly = 0;
		g_esGeneral.g_flIdleCheck = 10.0;
		g_esGeneral.g_iIdleCheckMode = 2;
		g_esGeneral.g_iLogCommands = 31;
		g_esGeneral.g_iLogMessages = 0;
		g_esGeneral.g_iTankEnabled = -1;
		g_esGeneral.g_flTankChance = 100.0;
		g_esGeneral.g_iTankNote = 0;
		g_esGeneral.g_iTankModel = 0;
		g_esGeneral.g_flBurnDuration = 0.0;
		g_esGeneral.g_flBurntSkin = -1.0;
		g_esGeneral.g_iCycleTypes = 0;
		g_esGeneral.g_iSpawnEnabled = -1;
		g_esGeneral.g_iSpawnLimit = 0;
		g_esGeneral.g_iMaxType = MT_MAXTYPES;
		g_esGeneral.g_iMaxWeapons = 0;
		g_esGeneral.g_iMinType = 1;
		g_esGeneral.g_iRequiresHumans = 0;
		g_esGeneral.g_iAnnounceArrival = 31;
		g_esGeneral.g_iAnnounceDeath = 1;
		g_esGeneral.g_iAnnounceKill = 1;
		g_esGeneral.g_iArrivalMessage = 0;
		g_esGeneral.g_iArrivalSound = 1;
		g_esGeneral.g_iDeathDetails = 5;
		g_esGeneral.g_iDeathMessage = 0;
		g_esGeneral.g_iDeathSound = 1;
		g_esGeneral.g_iKillMessage = 0;
		g_esGeneral.g_iVocalizeArrival = 1;
		g_esGeneral.g_iVocalizeDeath = 1;
		g_esGeneral.g_iFinaleCheck = 0;
		g_esGeneral.g_iSurvivorTypes = 1;
		g_esGeneral.g_iSurvivorsRequired = 3;
		g_esGeneral.g_iIncapsRequired = 2;
		g_esGeneral.g_sBodyColorVisual = "-1;-1;-1;-1";
		g_esGeneral.g_sBodyColorVisual2 = "-1;-1;-1;-1";
		g_esGeneral.g_sBodyColorVisual3 = "-1;-1;-1;-1";
		g_esGeneral.g_sBodyColorVisual4 = "-1;-1;-1;-1";
		g_esGeneral.g_sFallVoicelineReward = "PlayerLaugh";
		g_esGeneral.g_sFallVoicelineReward2 = "PlayerLaugh";
		g_esGeneral.g_sFallVoicelineReward3 = "PlayerLaugh";
		g_esGeneral.g_sFallVoicelineReward4 = "PlayerLaugh";
		g_esGeneral.g_sItemReward = "first_aid_kit";
		g_esGeneral.g_sItemReward2 = "first_aid_kit";
		g_esGeneral.g_sItemReward3 = "first_aid_kit";
		g_esGeneral.g_sItemReward4 = "first_aid_kit";
		g_esGeneral.g_sLightColorVisual = "-1;-1;-1;-1";
		g_esGeneral.g_sLightColorVisual2 = "-1;-1;-1;-1";
		g_esGeneral.g_sLightColorVisual3 = "-1;-1;-1;-1";
		g_esGeneral.g_sLightColorVisual4 = "-1;-1;-1;-1";
		g_esGeneral.g_sLoopingVoicelineVisual = "PlayerDeath";
		g_esGeneral.g_sLoopingVoicelineVisual2 = "PlayerDeath";
		g_esGeneral.g_sLoopingVoicelineVisual3 = "PlayerDeath";
		g_esGeneral.g_sLoopingVoicelineVisual4 = "PlayerDeath";
		g_esGeneral.g_sOutlineColorVisual = "-1;-1;-1";
		g_esGeneral.g_sOutlineColorVisual2 = "-1;-1;-1";
		g_esGeneral.g_sOutlineColorVisual3 = "-1;-1;-1";
		g_esGeneral.g_sOutlineColorVisual4 = "-1;-1;-1";
		g_esGeneral.g_sScreenColorVisual = "-1;-1;-1;-1";
		g_esGeneral.g_sScreenColorVisual2 = "-1;-1;-1;-1";
		g_esGeneral.g_sScreenColorVisual3 = "-1;-1;-1;-1";
		g_esGeneral.g_sScreenColorVisual4 = "-1;-1;-1;-1";
		g_esGeneral.g_iTeammateLimit = 0;
		g_esHuman.g_iCarrierEnabled = 0;
		g_esHuman.g_iCarrierBots = 0;
		g_esHuman.g_iCarrierBody = 0;
		g_esHuman.g_flCarrierChance = 0.0;
		g_esHuman.g_iCarrierCleanse = 0;
		g_esHuman.g_flCarrierDamageMultiplier = 0.0;
		g_esHuman.g_flCarrierDelay = 0.0;
		g_esHuman.g_iCarrierFilter = 0;
		g_esHuman.g_flCarrierHealthMultiplier = 0.0;
		g_esHuman.g_iCarrierInfection = 0;
		g_esHuman.g_iCarrierMaxType = MT_MAXTYPES;
		g_esHuman.g_iCarrierMinType = 1;
		g_esHuman.g_iCarrierMix = 0;
		g_esHuman.g_iCarrierMode = 0;
		g_esHuman.g_iCarrierTeleport = 0;
		g_esHuman.g_iCarrierVoice = 0;
		g_esHuman.g_flCarrierVoiceChance = 0.0;
		g_esHuman.g_flCarrierVoiceInterval = 0.0;
		g_esHuman.g_sCarrierAttackVoicelines[0] = '\0';
		g_esHuman.g_sCarrierBaitVoicelines[0] = '\0';
		g_esHuman.g_iPassiveEnabled = -1;
		g_esHuman.g_iPassiveBots = -1;
		g_esHuman.g_iPassiveNotify = 0;
		g_esHuman.g_flActionDurationPassive = 0.0;
		g_esHuman.g_flAdrenalineTimePassive = 0.0;
		g_esHuman.g_iAmmoBoostPassive = 0;
		g_esHuman.g_iAmmoRefillPassive = 0;
		g_esHuman.g_iAmmoRegenPassive = 0;
		g_esHuman.g_flAttackBoostPassive = 0.0;
		g_esHuman.g_iBlazeHealthPassive = 0;
		g_esHuman.g_iBloodDonorPassive = 0;
		g_esHuman.g_iBunnyHopPassive = 0;
		g_esHuman.g_iBurstDoorsPassive = 0;
		g_esHuman.g_iCleanKillsPassive = 0;
		g_esHuman.g_iClusterBombsPassive = 0;
		g_esHuman.g_flDamageBoostPassive = 0.0;
		g_esHuman.g_flDamageResistancePassive = 0.0;
		g_esHuman.g_flDopamineRadiusPassive = 0.0;
		g_esHuman.g_iEternalFlamesPassive = 0;
		g_esHuman.g_iFastRecoveryPassive = 0;
		g_esHuman.g_flFireRatePassive = 0.0;
		g_esHuman.g_iFriendlyFirePassive = 0;
		g_esHuman.g_iGhostBulletsPassive = 0;
		g_esHuman.g_flGrenadeLauncherPassive = 0.0;
		g_esHuman.g_flHealPercentPassive = 0.0;
		g_esHuman.g_flHealthcareRadiusPassive = 0.0;
		g_esHuman.g_iHealthRegenPassive = 0;
		g_esHuman.g_flHeartbeatPassive = 0.0;
		g_esHuman.g_flHollowpointAmmoPassive = 0.0;
		g_esHuman.g_iInfiniteAmmoPassive = 0;
		g_esHuman.g_sItemPassive[0] = '\0';
		g_esHuman.g_flJumpHeightPassive = 0.0;
		g_esHuman.g_iLadderActionsPassive = 0;
		g_esHuman.g_flLadyKillerPassive = 0.0;
		g_esHuman.g_iLaserSightPassive = 0;
		g_esHuman.g_iLifeLeechPassive = 0;
		g_esHuman.g_flLuckyBulletPassive = 0.0;
		g_esHuman.g_iMedicalCutsPassive = 0;
		g_esHuman.g_iMeleeRangePassive = 0;
		g_esHuman.g_iMidairDashesPassive = 0;
		g_esHuman.g_flMotivationRadiusPassive = 0.0;
		g_esHuman.g_flOverdoseRadiusPassive = 0.0;
		g_esHuman.g_iOverhealthPassive = 0;
		g_esHuman.g_flPipeBombDurationPassive = 0.0;
		g_esHuman.g_flPunchResistancePassive = 0.0;
		g_esHuman.g_flRapidPistolPassive = 0.0;
		g_esHuman.g_iRecoilDampenerPassive = 0;
		g_esHuman.g_flRefillPercentPassive = 0.0;
		g_esHuman.g_iRegenBurstsPassive = 0;
		g_esHuman.g_flReloadRatePassive = 0.0;
		g_esHuman.g_iRespawnLoadoutPassive = 0;
		g_esHuman.g_iReviveHealthPassive = 0;
		g_esHuman.g_iRiotGearPassive = 0;
		g_esHuman.g_iSafetyBubblePassive = 0;
		g_esHuman.g_flShockwaveRadiusPassive = 0.0;
		g_esHuman.g_flShoveDamagePassive = 0.0;
		g_esHuman.g_iShovePenaltyPassive = 0;
		g_esHuman.g_flShoveRatePassive = 0.0;
		g_esHuman.g_flSledgehammerRoundsPassive = 0.0;
		g_esHuman.g_iSpecialAmmoPassive = 0;
		g_esHuman.g_flSpeedBoostPassive = 0.0;
		g_esHuman.g_iStickyGrenadesPassive = 0;
		g_esHuman.g_flSupplierPassive = 0.0;
		g_esHuman.g_flSwingRatePassive = 0.0;
		g_esHuman.g_iSyringeDartsPassive = 0;
		g_esHuman.g_iThornsPassive = 0;
		g_esGeneral.g_iAutoAggravate = 1;
		g_esGeneral.g_iCreditIgniters = 1;
		g_esGeneral.g_flForceSpawn = 0.0;
		g_esGeneral.g_iPrioritizeThrows = 0;
		g_esGeneral.g_iStasisMode = 0;
		g_esGeneral.g_flSurvivalDelay = 0.1;
		g_esGeneral.g_iScaleDamage = 0;
		g_esGeneral.g_flInfectedChance = 0.0;
		g_esGeneral.g_iInfectedDamage = 1;
		g_esGeneral.g_iInfectedHealth = 1;
		g_esGeneral.g_flInfectedScaleMin = 0.1;
		g_esGeneral.g_flInfectedScaleMax = 10.0;
		g_esGeneral.g_flJockeyChance = 0.0;
		g_esGeneral.g_iJockeyDamage = 1;
		g_esGeneral.g_iJockeyHealth = 1;
		g_esGeneral.g_flJockeyScaleMin = 0.1;
		g_esGeneral.g_flJockeyScaleMax = 10.0;
		g_esGeneral.g_flWitchChance = 0.0;
		g_esGeneral.g_iWitchDamage = 1;
		g_esGeneral.g_iWitchHealth = 1;
		g_esGeneral.g_flWitchScaleMin = 0.1;
		g_esGeneral.g_flWitchScaleMax = 10.0;
		g_esGeneral.g_iBaseHealth = 0;
		g_esGeneral.g_iDisplayHealth = 11;
		g_esGeneral.g_iDisplayHealthType = 1;
		g_esGeneral.g_iExtraHealth = 0;
		g_esGeneral.g_sArmorCharacters = "],=";
		g_esGeneral.g_flArmorPercentage = 0.0;
		g_esGeneral.g_flArmorResistance[0] = 0.75;
		g_esGeneral.g_sShieldCharacters = ">,-";
		g_esGeneral.g_flShieldPercentage = 0.0;
		g_esGeneral.g_flShieldRate = 0.5;
		g_esGeneral.g_flPassiveDelay = 5.0;
		g_esGeneral.g_iPassiveHealth = 0;
		g_esGeneral.g_flPassiveInterval = 1.0;
		g_esGeneral.g_sHealthCharacters = "|,-";
		g_esGeneral.g_flHealPercentMultiplier = 1.0;
		g_esGeneral.g_iHumanMultiplierMode = 0;
		g_esGeneral.g_iMinimumHumans = 2;
		g_esGeneral.g_iMultiplyHealth = 0;
		g_esGeneral.g_iSpawnProtection = 0;
		g_esGeneral.g_flArmorDuration = 3.0;
		g_esGeneral.g_flArmorResistance[1] = 0.75;
		g_esGeneral.g_flShieldDuration = 1.0;
		g_esGeneral.g_flShieldResistance = 0.0;
		g_esGeneral.g_flAttackInterval = 0.0;
		g_esGeneral.g_iAutoHop = 0;
		g_esGeneral.g_flClawDamage = -1.0;
		g_esGeneral.g_iFootstepShake = 0;
		g_esGeneral.g_iGroundPound = 0;
		g_esGeneral.g_flHittableDamage = -1.0;
		g_esGeneral.g_flIncapDamageMultiplier = 1.0;
		g_esGeneral.g_iIntangibleBody = 0;
		g_esGeneral.g_iMeleeHitMode = 0;
		g_esGeneral.g_flMeleeHitValue = 0.0;
		g_esGeneral.g_flPunchForce = -1.0;
		g_esGeneral.g_flPunchThrow = 0.0;
		g_esGeneral.g_flRockDamage = -1.0;
		g_esGeneral.g_iRockSound = 0;
		g_esGeneral.g_flRunSpeed = 0.0;
		g_esGeneral.g_iSkipIncap = 0;
		g_esGeneral.g_iSkipTaunt = 0;
		g_esGeneral.g_iSweepFist = 0;
		g_esGeneral.g_flThrowForce = 0.0;
		g_esGeneral.g_flThrowInterval = 0.0;
		g_esGeneral.g_iThrowRock = 0;
		g_esGeneral.g_iBulletImmunity = 0;
		g_esGeneral.g_iExplosiveImmunity = 0;
		g_esGeneral.g_iFireImmunity = 0;
		g_esGeneral.g_iHittableImmunity = 0;
		g_esGeneral.g_iMeleeImmunity = 0;
		g_esGeneral.g_iVomitImmunity = 0;
		g_esGeneral.g_iAccessFlags = 0;
		g_esGeneral.g_iImmunityFlags = 0;
		g_esGeneral.g_iHumanCooldown = 600;
		g_esGeneral.g_iMasterControl = 0;
		g_esGeneral.g_iSpawnMode = 2;
		g_esGeneral.g_iLimitExtras = 1;
		g_esGeneral.g_flExtrasDelay = 0.1;
		g_esGeneral.g_iRegularAmount = 0;
		g_esGeneral.g_flRegularDelay = 10.0;
		g_esGeneral.g_flRegularInterval = 300.0;
		g_esGeneral.g_iRegularLimit = 99999;
		g_esGeneral.g_iRegularMinType = 1;
		g_esGeneral.g_iRegularMaxType = MT_MAXTYPES;
		g_esGeneral.g_iRegularMode = 0;
		g_esGeneral.g_iRegularWave = 0;
		g_esGeneral.g_iFinaleAmount = 0;
		g_esGeneral.g_iFinaleMode = 0;
		g_esGeneral.g_iRushTypes = 0;
		g_esGeneral.g_iCommonLimit = 0;
		g_esGeneral.g_flCoopDelay = 60.0;
		g_esGeneral.g_flFinaleCooldown = 30.0;
		g_esGeneral.g_iHardcoreMode = 0;
		g_esGeneral.g_iHealthKills = 2;
		g_esGeneral.g_flKillCountdown = 240.0;
		g_esGeneral.g_iRushLimit = 10;
		g_esGeneral.g_flSpawnInterval = 6.0;
		g_esGeneral.g_iSurvivorIncaps = 4;
		g_esGeneral.g_iGameModeTypes = 0;
		g_esGeneral.g_sEnabledGameModes[0] = '\0';
		g_esGeneral.g_sDisabledGameModes[0] = '\0';
		g_esGeneral.g_iConfigEnable = 0;
		g_esGeneral.g_iConfigCreate = 0;
		g_esGeneral.g_flConfigDelay = 5.0;
		g_esGeneral.g_iConfigExecute = 0;

		for (int iPos = 0; iPos < (sizeof esGeneral::g_iFinaleWave); iPos++)
		{
			g_esGeneral.g_iFinaleMaxTypes[iPos] = MT_MAXTYPES;
			g_esGeneral.g_iFinaleMinTypes[iPos] = 1;
			g_esGeneral.g_iFinaleWave[iPos] = 0;

			if (iPos < (sizeof esGeneral::g_iPunishEnabled))
			{
				g_esGeneral.g_iPunishEnabled[iPos] = -1;
				g_esGeneral.g_iPunishBots[iPos] = -1;
				g_esGeneral.g_iPunisherTypes[iPos] = (g_bSecondGame ? 127 : 15);
				g_esGeneral.g_flPunisherLifetime[iPos] = 5.0;
				g_esGeneral.g_flWarningDistance[iPos] = 500.0;
				g_esGeneral.g_flPunishDistance[iPos] = 1000.0;
				g_esGeneral.g_iWarningLimit[iPos] = 3;
				g_esGeneral.g_iWarningInterval[iPos] = 5;
				g_esGeneral.g_flZedTime[iPos] = 1.0;
			}

			if (iPos < (sizeof esGeneral::g_iRewardEnabled))
			{
				g_esGeneral.g_iRewardEnabled[iPos] = -1;
				g_esGeneral.g_iRewardBots[iPos] = -1;
				g_esGeneral.g_flRewardChance[iPos] = 33.3;
				g_esGeneral.g_flRewardDuration[iPos] = 10.0;
				g_esGeneral.g_iRewardEffect[iPos] = 15;
				g_esGeneral.g_iRewardNotify[iPos] = 3;
				g_esGeneral.g_flRewardPercentage[iPos] = 10.0;
				g_esGeneral.g_iRewardVisual[iPos] = (g_bSecondGame ? 127 : 63);
				g_esGeneral.g_flActionDurationReward[iPos] = 2.0;
				g_esGeneral.g_flAdrenalineTimeReward[iPos] = 30.0;
				g_esGeneral.g_iAmmoBoostReward[iPos] = 1;
				g_esGeneral.g_iAmmoRefillReward[iPos] = 1;
				g_esGeneral.g_iAmmoRegenReward[iPos] = 1;
				g_esGeneral.g_flAttackBoostReward[iPos] = 1.25;
				g_esGeneral.g_iBlazeHealthReward[iPos] = 1;
				g_esGeneral.g_iBloodDonorReward[iPos] = 0;
				g_esGeneral.g_iBunnyHopReward[iPos] = 1;
				g_esGeneral.g_iBurstDoorsReward[iPos] = 1;
				g_esGeneral.g_iCleanKillsReward[iPos] = 1;
				g_esGeneral.g_iClusterBombsReward[iPos] = 3;
				g_esGeneral.g_flDamageBoostReward[iPos] = 1.25;
				g_esGeneral.g_flDamageResistanceReward[iPos] = 0.5;
				g_esGeneral.g_flDopamineRadiusReward[iPos] = 150.0;
				g_esGeneral.g_iEternalFlamesReward[iPos] = 1;
				g_esGeneral.g_iFastRecoveryReward[iPos] = 1;
				g_esGeneral.g_flFireRateReward[iPos] = 1.25;
				g_esGeneral.g_iFriendlyFireReward[iPos] = 1;
				g_esGeneral.g_iGhostBulletsReward[iPos] = 1;
				g_esGeneral.g_flGrenadeLauncherReward[iPos] = 10.0;
				g_esGeneral.g_flHealPercentReward[iPos] = 100.0;
				g_esGeneral.g_flHealthcareRadiusReward[iPos] = 150.0;
				g_esGeneral.g_iHealthRegenReward[iPos] = 1;
				g_esGeneral.g_flHeartbeatReward[iPos] = 3.0;
				g_esGeneral.g_flHollowpointAmmoReward[iPos] = 100.0;
				g_esGeneral.g_iInfiniteAmmoReward[iPos] = 31;
				g_esGeneral.g_flJumpHeightReward[iPos] = 75.0;
				g_esGeneral.g_iLadderActionsReward[iPos] = 1;
				g_esGeneral.g_flLadyKillerReward[iPos] = 25.0;
				g_esGeneral.g_iLaserSightReward[iPos] = 1;
				g_esGeneral.g_iLifeLeechReward[iPos] = 1;
				g_esGeneral.g_flLoopingVoicelineInterval[iPos] = 10.0;
				g_esGeneral.g_flLuckyBulletReward[iPos] = 25.0;
				g_esGeneral.g_iMedicalCutsReward[iPos] = 1;
				g_esGeneral.g_iMeleeRangeReward[iPos] = 150;
				g_esGeneral.g_iMidairDashesReward[iPos] = 2;
				g_esGeneral.g_flMotivationRadiusReward[iPos] = 150.0;
				g_esGeneral.g_flOverdoseRadiusReward[iPos] = 150.0;
				g_esGeneral.g_iOverhealthReward[iPos] = 200;
				g_esGeneral.g_iParticleEffectVisual[iPos] = 15;
				g_esGeneral.g_flPipeBombDurationReward[iPos] = 10.0;
				g_esGeneral.g_iPrefsNotify[iPos] = 1;
				g_esGeneral.g_flPunchResistanceReward[iPos] = 0.25;
				g_esGeneral.g_flRapidPistolReward[iPos] = 0.130;
				g_esGeneral.g_iRecoilDampenerReward[iPos] = 1;
				g_esGeneral.g_flRefillPercentReward[iPos] = 100.0;
				g_esGeneral.g_iRegenBurstsReward[iPos] = 1;
				g_esGeneral.g_flReloadRateReward[iPos] = 1.25;
				g_esGeneral.g_iRespawnLoadoutReward[iPos] = 1;
				g_esGeneral.g_iReviveHealthReward[iPos] = 100;
				g_esGeneral.g_iRiotGearReward[iPos] = 1;
				g_esGeneral.g_iSafetyBubbleReward[iPos] = 1;
				g_esGeneral.g_iShareRewards[iPos] = 0;
				g_esGeneral.g_flShockwaveRadiusReward[iPos] = 150.0;
				g_esGeneral.g_flShoveDamageReward[iPos] = 0.025;
				g_esGeneral.g_iShovePenaltyReward[iPos] = 1;
				g_esGeneral.g_flShoveRateReward[iPos] = 0.7;
				g_esGeneral.g_flSledgehammerRoundsReward[iPos] = 100.0;
				g_esGeneral.g_iSpecialAmmoReward[iPos] = 3;
				g_esGeneral.g_flSpeedBoostReward[iPos] = 1.25;
				g_esGeneral.g_iStackRewards[iPos] = 0;
				g_esGeneral.g_iStickyGrenadesReward[iPos] = 1;
				g_esGeneral.g_flSupplierReward[iPos] = 3.0;
				g_esGeneral.g_flSwingRateReward[iPos] = 1.25;
				g_esGeneral.g_iSyringeDartsReward[iPos] = 1;
				g_esGeneral.g_iThornsReward[iPos] = 1;
				g_esGeneral.g_iUsefulRewards[iPos] = 15;
				g_esGeneral.g_iVoicePitchVisual[iPos] = 100;
			}

			if (iPos < (sizeof esGeneral::g_iStackLimits))
			{
				g_esGeneral.g_iStackLimits[iPos] = 0;
			}

			if (iPos < (sizeof esGeneral::g_flDifficultyDamage))
			{
				g_esGeneral.g_flDifficultyDamage[iPos] = 0.0;
			}
		}

		g_esSpecific.g_iDeathRevert = -1;
		g_esSpecific.g_iFinalesOnly = -1;
		g_esSpecific.g_iSpecialTypes = -1;
		g_esSpecific.g_flSpecialChance = -1.0;
		g_esSpecific.g_iSpecialNote = -1;
		g_esSpecific.g_iSpecialModel = -1;
		g_esSpecific.g_flBurnDuration = -1.0;
		g_esSpecific.g_flBurntSkin = -2.0;
		g_esSpecific.g_iCycleTypes = -1;
		g_esSpecific.g_iSpawnEnabled = -1;
		g_esSpecific.g_iMaxType = -1;
		g_esSpecific.g_iMinType = -1;
		g_esSpecific.g_iRequiresHumans = -1;
		g_esSpecific.g_iAnnounceArrival = -1;
		g_esSpecific.g_iAnnounceDeath = -1;
		g_esSpecific.g_iAnnounceKill = -1;
		g_esSpecific.g_iArrivalMessage = -1;
		g_esSpecific.g_iArrivalSound = -1;
		g_esSpecific.g_iDeathDetails = -1;
		g_esSpecific.g_iDeathMessage = -1;
		g_esSpecific.g_iDeathSound = -1;
		g_esSpecific.g_iKillMessage = -1;
		g_esSpecific.g_iVocalizeArrival = -1;
		g_esSpecific.g_iVocalizeDeath = -1;
		g_esSpecific.g_iDisplayHealth = -1;
		g_esSpecific.g_iDisplayHealthType = -1;
		g_esSpecific.g_sArmorCharacters[0] = '\0';
		g_esSpecific.g_flArmorPercentage = -1.0;
		g_esSpecific.g_flArmorResistance[0] = -1.0;
		g_esSpecific.g_sShieldCharacters[0] = '\0';
		g_esSpecific.g_flShieldPercentage = -1.0;
		g_esSpecific.g_flShieldRate = -1.0;
		g_esSpecific.g_flPassiveDelay = -1.0;
		g_esSpecific.g_iPassiveHealth = -1;
		g_esSpecific.g_flPassiveInterval = -1.0;
		g_esSpecific.g_sHealthCharacters[0] = '\0';
		g_esSpecific.g_flHealPercentMultiplier = -1.0;
		g_esSpecific.g_iHumanMultiplierMode = -1;
		g_esSpecific.g_iMinimumHumans = -1;
		g_esSpecific.g_iMultiplyHealth = -1;
		g_esSpecific.g_iSpawnProtection = -1;
		g_esSpecific.g_flArmorDuration = -1.0;
		g_esSpecific.g_flArmorResistance[1] = -1.0;
		g_esSpecific.g_flShieldDuration = -1.0;
		g_esSpecific.g_flShieldResistance = -1.0;
		g_esSpecific.g_flAttackInterval = -1.0;
		g_esSpecific.g_iAutoHop = -1;
		g_esSpecific.g_flClawDamage = -2.0;
		g_esSpecific.g_flHittableDamage = -2.0;
		g_esSpecific.g_flIncapDamageMultiplier = -1.0;
		g_esSpecific.g_iIntangibleBody = -1;
		g_esSpecific.g_iMeleeHitMode = -1;
		g_esSpecific.g_flMeleeHitValue = -1.0;
		g_esSpecific.g_flPinDamage = -2.0;
		g_esSpecific.g_flRunSpeed = -1.0;
		g_esSpecific.g_flSpecialInterval = -1.0;
		g_esSpecific.g_iThrowRock = -1;
		g_esSpecific.g_iBulletImmunity = -1;
		g_esSpecific.g_iExplosiveImmunity = -1;
		g_esSpecific.g_iFireImmunity = -1;
		g_esSpecific.g_iHittableImmunity = -1;
		g_esSpecific.g_iMeleeImmunity = -1;
		g_esSpecific.g_iVomitImmunity = -1;
		g_esSpecific.g_iSpawnMode = -1;
		g_esMob.g_iMobVariants = -1;
		g_esMob.g_flCommonBioChance = 50.0;
		g_esMob.g_flCommonChance = 100.0;
		g_esMob.g_flCommonCheck = 300.0;
		g_esMob.g_flCommonDamagePoints = 50.0;
		g_esMob.g_flCommonDeathPoints = 100.0;
		g_esMob.g_iCommonFilter = 0;
		g_esMob.g_flCommonGoal = 5000.0;
		g_esMob.g_iCommonVariant = 0;
		g_esMob.g_flWitchChance = 100.0;
		g_esMob.g_iWitchFilter = 0;
		g_esMob.g_iWitchMode = 0;
		g_esMob.g_flWitchMutateChance = 100.0;
		g_esMob.g_flWitchRange = 500.0;
		g_esMob.g_iWitchTypes = 0;
		g_esMob.g_iDisplayHealth = -1;
		g_esMob.g_iDisplayHealthType = -1;
		g_esMob.g_sHealthCharacters[0] = '\0';

		for (int iPos = 0; iPos < (sizeof esSpecific::g_iStackLimits); iPos++)
		{
			if (iPos < (sizeof esSpecific::g_iBaseHealth))
			{
				g_esSpecific.g_bRecycleTypes[iPos] = false;
				g_esSpecific.g_bRecycleTypes2[iPos] = false;
				g_esSpecific.g_iBaseHealth[iPos] = -1;
				g_esSpecific.g_iExtraHealth[iPos] = -1;
			}

			if (iPos < (sizeof esSpecific::g_iRewardEnabled))
			{
				g_esSpecific.g_iRewardEnabled[iPos] = -2;
				g_esSpecific.g_iRewardBots[iPos] = -2;
				g_esSpecific.g_flRewardChance[iPos] = -1.0;
				g_esSpecific.g_flRewardDuration[iPos] = -1.0;
				g_esSpecific.g_iRewardEffect[iPos] = -1;
				g_esSpecific.g_iRewardNotify[iPos] = -1;
				g_esSpecific.g_flRewardPercentage[iPos] = -1.0;
				g_esSpecific.g_iRewardVisual[iPos] = -1;
				g_esSpecific.g_flActionDurationReward[iPos] = -1.0;
				g_esSpecific.g_flAdrenalineTimeReward[iPos] = -1.0;
				g_esSpecific.g_iAmmoBoostReward[iPos] = -1;
				g_esSpecific.g_iAmmoRefillReward[iPos] = -1;
				g_esSpecific.g_iAmmoRegenReward[iPos] = -1;
				g_esSpecific.g_flAttackBoostReward[iPos] = -1.0;
				g_esSpecific.g_iBlazeHealthReward[iPos] = -1;
				g_esSpecific.g_iBloodDonorReward[iPos] = -1;
				g_esSpecific.g_iBunnyHopReward[iPos] = -1;
				g_esSpecific.g_iBurstDoorsReward[iPos] = -1;
				g_esSpecific.g_iCleanKillsReward[iPos] = -1;
				g_esSpecific.g_iClusterBombsReward[iPos] = -1;
				g_esSpecific.g_flDamageBoostReward[iPos] = -1.0;
				g_esSpecific.g_flDamageResistanceReward[iPos] = -1.0;
				g_esSpecific.g_flDopamineRadiusReward[iPos] = -1.0;
				g_esSpecific.g_iEternalFlamesReward[iPos] = -1;
				g_esSpecific.g_iFastRecoveryReward[iPos] = -1;
				g_esSpecific.g_flFireRateReward[iPos] = -1.0;
				g_esSpecific.g_iFriendlyFireReward[iPos] = -1;
				g_esSpecific.g_iGhostBulletsReward[iPos] = -1;
				g_esSpecific.g_flGrenadeLauncherReward[iPos] = -1.0;
				g_esSpecific.g_flHealPercentReward[iPos] = -1.0;
				g_esSpecific.g_flHealthcareRadiusReward[iPos] = -1.0;
				g_esSpecific.g_iHealthRegenReward[iPos] = -1;
				g_esSpecific.g_flHeartbeatReward[iPos] = -1.0;
				g_esSpecific.g_flHollowpointAmmoReward[iPos] = -1.0;
				g_esSpecific.g_iInfiniteAmmoReward[iPos] = -1;
				g_esSpecific.g_flJumpHeightReward[iPos] = -1.0;
				g_esSpecific.g_iLadderActionsReward[iPos] = -1;
				g_esSpecific.g_flLadyKillerReward[iPos] = -1.0;
				g_esSpecific.g_iLaserSightReward[iPos] = -1;
				g_esSpecific.g_iLifeLeechReward[iPos] = -1;
				g_esSpecific.g_flLoopingVoicelineInterval[iPos] = -1.0;
				g_esSpecific.g_flLuckyBulletReward[iPos] = -1.0;
				g_esSpecific.g_iMedicalCutsReward[iPos] = -1;
				g_esSpecific.g_iMeleeRangeReward[iPos] = -1;
				g_esSpecific.g_iMidairDashesReward[iPos] = -1;
				g_esSpecific.g_flMotivationRadiusReward[iPos] = -1.0;
				g_esSpecific.g_flOverdoseRadiusReward[iPos] = -1.0;
				g_esSpecific.g_iOverhealthReward[iPos] = -1;
				g_esSpecific.g_iParticleEffectVisual[iPos] = -1;
				g_esSpecific.g_flPipeBombDurationReward[iPos] = -1.0;
				g_esSpecific.g_iPrefsNotify[iPos] = -1;
				g_esSpecific.g_flPunchResistanceReward[iPos] = -1.0;
				g_esSpecific.g_flRapidPistolReward[iPos] = -1.0;
				g_esSpecific.g_iRecoilDampenerReward[iPos] = -1;
				g_esSpecific.g_flRefillPercentReward[iPos] = -1.0;
				g_esSpecific.g_iRegenBurstsReward[iPos] = -1;
				g_esSpecific.g_flReloadRateReward[iPos] = -1.0;
				g_esSpecific.g_iRespawnLoadoutReward[iPos] = -1;
				g_esSpecific.g_iReviveHealthReward[iPos] = -1;
				g_esSpecific.g_iRiotGearReward[iPos] = -1;
				g_esSpecific.g_iSafetyBubbleReward[iPos] = -1;
				g_esSpecific.g_iShareRewards[iPos] = -1;
				g_esSpecific.g_flShockwaveRadiusReward[iPos] = -1.0;
				g_esSpecific.g_flShoveDamageReward[iPos] = -1.0;
				g_esSpecific.g_iShovePenaltyReward[iPos] = -1;
				g_esSpecific.g_flShoveRateReward[iPos] = -1.0;
				g_esSpecific.g_flSledgehammerRoundsReward[iPos] = -1.0;
				g_esSpecific.g_iSpecialAmmoReward[iPos] = -1;
				g_esSpecific.g_flSpeedBoostReward[iPos] = -1.0;
				g_esSpecific.g_iStackRewards[iPos] = -1;
				g_esSpecific.g_iStickyGrenadesReward[iPos] = -1;
				g_esSpecific.g_flSupplierReward[iPos] = -1.0;
				g_esSpecific.g_flSwingRateReward[iPos] = -1.0;
				g_esSpecific.g_iSyringeDartsReward[iPos] = -1;
				g_esSpecific.g_iThornsReward[iPos] = -1;
				g_esSpecific.g_iUsefulRewards[iPos] = -1;
				g_esSpecific.g_iVoicePitchVisual[iPos] = -1;
			}

			if (iPos < (sizeof esSpecific::g_iStackLimits))
			{
				g_esSpecific.g_iStackLimits[iPos] = 0;
				g_esSurvivor[iPos].g_iCarrierEnabled = -1;
				g_esSurvivor[iPos].g_iCarrierBots = -1;
				g_esSurvivor[iPos].g_iCarrierBody = -1;
				g_esSurvivor[iPos].g_flCarrierChance = -1.0;
				g_esSurvivor[iPos].g_iCarrierCleanse = -1;
				g_esSurvivor[iPos].g_flCarrierDamageMultiplier = -1.0;
				g_esSurvivor[iPos].g_flCarrierDelay = -1.0;
				g_esSurvivor[iPos].g_iCarrierFilter = -1;
				g_esSurvivor[iPos].g_flCarrierHealthMultiplier = -1.0;
				g_esSurvivor[iPos].g_iCarrierInfection = -1;
				g_esSurvivor[iPos].g_iCarrierMaxType = -1;
				g_esSurvivor[iPos].g_iCarrierMinType = -1;
				g_esSurvivor[iPos].g_iCarrierMix = -1;
				g_esSurvivor[iPos].g_iCarrierMode = -1;
				g_esSurvivor[iPos].g_iCarrierTeleport = -1;
				g_esSurvivor[iPos].g_iCarrierVoice = -1;
				g_esSurvivor[iPos].g_flCarrierVoiceChance = -1.0;
				g_esSurvivor[iPos].g_flCarrierVoiceInterval = -1.0;
				g_esSurvivor[iPos].g_sCarrierAttackVoicelines[0] = '\0';
				g_esSurvivor[iPos].g_sCarrierBaitVoicelines[0] = '\0';
				g_esSurvivor[iPos].g_iPassiveEnabled = -2;
				g_esSurvivor[iPos].g_iPassiveBots = -2;
				g_esSurvivor[iPos].g_iPassiveNotify = -1;
				g_esSurvivor[iPos].g_flActionDurationPassive = -1.0;
				g_esSurvivor[iPos].g_flAdrenalineTimePassive = -1.0;
				g_esSurvivor[iPos].g_iAmmoBoostPassive = -1;
				g_esSurvivor[iPos].g_iAmmoRefillPassive = -1;
				g_esSurvivor[iPos].g_iAmmoRegenPassive = -1;
				g_esSurvivor[iPos].g_flAttackBoostPassive = -1.0;
				g_esSurvivor[iPos].g_iBlazeHealthPassive = -1;
				g_esSurvivor[iPos].g_iBloodDonorPassive = -1;
				g_esSurvivor[iPos].g_iBunnyHopPassive = -1;
				g_esSurvivor[iPos].g_iBurstDoorsPassive = -1;
				g_esSurvivor[iPos].g_iCleanKillsPassive = -1;
				g_esSurvivor[iPos].g_iClusterBombsPassive = -1;
				g_esSurvivor[iPos].g_flDamageBoostPassive = -1.0;
				g_esSurvivor[iPos].g_flDamageResistancePassive = -1.0;
				g_esSurvivor[iPos].g_flDopamineRadiusPassive = -1.0;
				g_esSurvivor[iPos].g_iEternalFlamesPassive = -1;
				g_esSurvivor[iPos].g_iFastRecoveryPassive = -1;
				g_esSurvivor[iPos].g_flFireRatePassive = -1.0;
				g_esSurvivor[iPos].g_iFriendlyFirePassive = -1;
				g_esSurvivor[iPos].g_iGhostBulletsPassive = -1;
				g_esSurvivor[iPos].g_flGrenadeLauncherPassive = -1.0;
				g_esSurvivor[iPos].g_flHealPercentPassive = -1.0;
				g_esSurvivor[iPos].g_flHealthcareRadiusPassive = -1.0;
				g_esSurvivor[iPos].g_iHealthRegenPassive = -1;
				g_esSurvivor[iPos].g_flHeartbeatPassive = -1.0;
				g_esSurvivor[iPos].g_flHollowpointAmmoPassive = -1.0;
				g_esSurvivor[iPos].g_iInfiniteAmmoPassive = -1;
				g_esSurvivor[iPos].g_sItemPassive[0] = '\0';
				g_esSurvivor[iPos].g_flJumpHeightPassive = -1.0;
				g_esSurvivor[iPos].g_iLadderActionsPassive = -1;
				g_esSurvivor[iPos].g_flLadyKillerPassive = -1.0;
				g_esSurvivor[iPos].g_iLaserSightPassive = -1;
				g_esSurvivor[iPos].g_iLifeLeechPassive = -1;
				g_esSurvivor[iPos].g_flLuckyBulletPassive = -1.0;
				g_esSurvivor[iPos].g_iMedicalCutsPassive = -1;
				g_esSurvivor[iPos].g_iMeleeRangePassive = -1;
				g_esSurvivor[iPos].g_iMidairDashesPassive = -1;
				g_esSurvivor[iPos].g_flMotivationRadiusPassive = -1.0;
				g_esSurvivor[iPos].g_flOverdoseRadiusPassive = -1.0;
				g_esSurvivor[iPos].g_iOverhealthPassive = -1;
				g_esSurvivor[iPos].g_flPipeBombDurationPassive = -1.0;
				g_esSurvivor[iPos].g_flPunchResistancePassive = -1.0;
				g_esSurvivor[iPos].g_flRapidPistolPassive = -1.0;
				g_esSurvivor[iPos].g_iRecoilDampenerPassive = -1;
				g_esSurvivor[iPos].g_flRefillPercentPassive = -1.0;
				g_esSurvivor[iPos].g_iRegenBurstsPassive = -1;
				g_esSurvivor[iPos].g_flReloadRatePassive = -1.0;
				g_esSurvivor[iPos].g_iRespawnLoadoutPassive = -1;
				g_esSurvivor[iPos].g_iReviveHealthPassive = -1;
				g_esSurvivor[iPos].g_iRiotGearPassive = -1;
				g_esSurvivor[iPos].g_iSafetyBubblePassive = -1;
				g_esSurvivor[iPos].g_flShockwaveRadiusPassive = -1.0;
				g_esSurvivor[iPos].g_flShoveDamagePassive = -1.0;
				g_esSurvivor[iPos].g_iShovePenaltyPassive = -1;
				g_esSurvivor[iPos].g_flShoveRatePassive = -1.0;
				g_esSurvivor[iPos].g_flSledgehammerRoundsPassive = -1.0;
				g_esSurvivor[iPos].g_iSpecialAmmoPassive = -1;
				g_esSurvivor[iPos].g_flSpeedBoostPassive = -1.0;
				g_esSurvivor[iPos].g_flSupplierPassive = -1.0;
				g_esSurvivor[iPos].g_iStickyGrenadesPassive = -1;
				g_esSurvivor[iPos].g_flSwingRatePassive = -1.0;
				g_esSurvivor[iPos].g_iSyringeDartsPassive = -1;
				g_esSurvivor[iPos].g_iThornsPassive = -1;
			}
		}

		for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
		{
#if defined _WeaponHandling_included
			g_esWeapon[iIndex].g_iPassiveEnabled = -2;
			g_esWeapon[iIndex].g_iPassiveBots = -2;
			g_esWeapon[iIndex].g_iPassiveNotify = -1;
			g_esWeapon[iIndex].g_flActionDurationPassive = -1.0;
			g_esWeapon[iIndex].g_flAdrenalineTimePassive = -1.0;
			g_esWeapon[iIndex].g_iAmmoBoostPassive = -1;
			g_esWeapon[iIndex].g_iAmmoRefillPassive = -1;
			g_esWeapon[iIndex].g_iAmmoRegenPassive = -1;
			g_esWeapon[iIndex].g_flAttackBoostPassive = -1.0;
			g_esWeapon[iIndex].g_iBlazeHealthPassive = -1;
			g_esWeapon[iIndex].g_iBloodDonorPassive = -1;
			g_esWeapon[iIndex].g_iBunnyHopPassive = -1;
			g_esWeapon[iIndex].g_iBurstDoorsPassive = -1;
			g_esWeapon[iIndex].g_iCleanKillsPassive = -1;
			g_esWeapon[iIndex].g_iClusterBombsPassive = -1;
			g_esWeapon[iIndex].g_flDamageBoostPassive = -1.0;
			g_esWeapon[iIndex].g_flDamageResistancePassive = -1.0;
			g_esWeapon[iIndex].g_flDopamineRadiusPassive = -1.0;
			g_esWeapon[iIndex].g_iEternalFlamesPassive = -1;
			g_esWeapon[iIndex].g_iFastRecoveryPassive = -1;
			g_esWeapon[iIndex].g_flFireRatePassive = -1.0;
			g_esWeapon[iIndex].g_iFriendlyFirePassive = -1;
			g_esWeapon[iIndex].g_iGhostBulletsPassive = -1;
			g_esWeapon[iIndex].g_flGrenadeLauncherPassive = -1.0;
			g_esWeapon[iIndex].g_flHealPercentPassive = -1.0;
			g_esWeapon[iIndex].g_flHealthcareRadiusPassive = -1.0;
			g_esWeapon[iIndex].g_iHealthRegenPassive = -1;
			g_esWeapon[iIndex].g_flHeartbeatPassive = -1.0;
			g_esWeapon[iIndex].g_flHollowpointAmmoPassive = -1.0;
			g_esWeapon[iIndex].g_iInfiniteAmmoPassive = -1;
			g_esWeapon[iIndex].g_sItemPassive[0] = '\0';
			g_esWeapon[iIndex].g_flJumpHeightPassive = -1.0;
			g_esWeapon[iIndex].g_iLadderActionsPassive = -1;
			g_esWeapon[iIndex].g_flLadyKillerPassive = -1.0;
			g_esWeapon[iIndex].g_iLaserSightPassive = -1;
			g_esWeapon[iIndex].g_iLifeLeechPassive = -1;
			g_esWeapon[iIndex].g_flLuckyBulletPassive = -1.0;
			g_esWeapon[iIndex].g_iMedicalCutsPassive = -1;
			g_esWeapon[iIndex].g_iMeleeRangePassive = -1;
			g_esWeapon[iIndex].g_iMidairDashesPassive = -1;
			g_esWeapon[iIndex].g_flMotivationRadiusPassive = -1.0;
			g_esWeapon[iIndex].g_flOverdoseRadiusPassive = -1.0;
			g_esWeapon[iIndex].g_iOverhealthPassive = -1;
			g_esWeapon[iIndex].g_flPipeBombDurationPassive = -1.0;
			g_esWeapon[iIndex].g_flPunchResistancePassive = -1.0;
			g_esWeapon[iIndex].g_flRapidPistolPassive = -1.0;
			g_esWeapon[iIndex].g_iRecoilDampenerPassive = -1;
			g_esWeapon[iIndex].g_flRefillPercentPassive = -1.0;
			g_esWeapon[iIndex].g_iRegenBurstsPassive = -1;
			g_esWeapon[iIndex].g_flReloadRatePassive = -1.0;
			g_esWeapon[iIndex].g_iRespawnLoadoutPassive = -1;
			g_esWeapon[iIndex].g_iReviveHealthPassive = -1;
			g_esWeapon[iIndex].g_iRiotGearPassive = -1;
			g_esWeapon[iIndex].g_iSafetyBubblePassive = -1;
			g_esWeapon[iIndex].g_flShockwaveRadiusPassive = -1.0;
			g_esWeapon[iIndex].g_flShoveDamagePassive = -1.0;
			g_esWeapon[iIndex].g_iShovePenaltyPassive = -1;
			g_esWeapon[iIndex].g_flShoveRatePassive = -1.0;
			g_esWeapon[iIndex].g_flSledgehammerRoundsPassive = -1.0;
			g_esWeapon[iIndex].g_iSpecialAmmoPassive = -1;
			g_esWeapon[iIndex].g_flSpeedBoostPassive = -1.0;
			g_esWeapon[iIndex].g_iStackPassives = -2;
			g_esWeapon[iIndex].g_iStickyGrenadesPassive = -1;
			g_esWeapon[iIndex].g_flSupplierPassive = -1.0;
			g_esWeapon[iIndex].g_flSwingRatePassive = -1.0;
			g_esWeapon[iIndex].g_iSyringeDartsPassive = -1;
			g_esWeapon[iIndex].g_iThornsPassive = -1;
			g_esWeapon[iIndex].g_iWeaponCharacter = -1;
			g_esWeapon[iIndex].g_iWeaponIndex = -1;
			g_esWeapon[iIndex].g_sWeaponName[0] = '\0';
#endif
			g_esTank[iIndex].g_bDuplicateType[0] = false;
			g_esTank[iIndex].g_bDuplicateType[1] = false;
			g_esTank[iIndex].g_bRecordedType[0] = false;
			g_esTank[iIndex].g_bRecordedType[1] = false;
			g_esTank[iIndex].g_iRealType[0] = 0;
			g_esTank[iIndex].g_iRealType[1] = 0;
			g_esTank[iIndex].g_iAbilityCount = -1;
			g_esTank[iIndex].g_sGlowColor = "255,255,255";
			g_esTank[iIndex].g_sSkinColor = "255,255,255,255";
			g_esTank[iIndex].g_sFlameColor = "255,255,255,255";
			g_esTank[iIndex].g_sFlashlightColor = "255,255,255,255";
			g_esTank[iIndex].g_sOzTankColor = "255,255,255,255";
			g_esTank[iIndex].g_sPropTankColor = "255,255,255,255";
			g_esTank[iIndex].g_sRockColor = "255,255,255,255";
			g_esTank[iIndex].g_sTireColor = "255,255,255,255";
			g_esTank[iIndex].g_sTankClass[0] = '\0';
			g_esTank[iIndex].g_sTankName = "Tank";
			g_esTank[iIndex].g_iTankEnabled = -1;
			g_esTank[iIndex].g_iGameType = 0;
			g_esTank[iIndex].g_flTankChance = 0.0;
			g_esTank[iIndex].g_iTankNote = 0;
			g_esTank[iIndex].g_iTankModel = 0;
			g_esTank[iIndex].g_flBurnDuration = 0.0;
			g_esTank[iIndex].g_flBurntSkin = -2.0;
			g_esTank[iIndex].g_iSpawnEnabled = 1;
			g_esTank[iIndex].g_iMenuEnabled = 1;
			g_esTank[iIndex].g_iCheckAbilities = -1;
			g_esTank[iIndex].g_iDeathRevert = -1;
			g_esTank[iIndex].g_iAnnounceArrival = -1;
			g_esTank[iIndex].g_iAnnounceDeath = -1;
			g_esTank[iIndex].g_iAnnounceKill = -1;
			g_esTank[iIndex].g_iArrivalMessage = -1;
			g_esTank[iIndex].g_iArrivalSound = -1;
			g_esTank[iIndex].g_iDeathDetails = -1;
			g_esTank[iIndex].g_iDeathMessage = -1;
			g_esTank[iIndex].g_iDeathSound = -1;
			g_esTank[iIndex].g_iKillMessage = -1;
			g_esTank[iIndex].g_iVocalizeArrival = -1;
			g_esTank[iIndex].g_iVocalizeDeath = -1;
			g_esTank[iIndex].g_sBodyColorVisual[0] = '\0';
			g_esTank[iIndex].g_sBodyColorVisual2[0] = '\0';
			g_esTank[iIndex].g_sBodyColorVisual3[0] = '\0';
			g_esTank[iIndex].g_sBodyColorVisual4[0] = '\0';
			g_esTank[iIndex].g_sFallVoicelineReward[0] = '\0';
			g_esTank[iIndex].g_sFallVoicelineReward2[0] = '\0';
			g_esTank[iIndex].g_sFallVoicelineReward3[0] = '\0';
			g_esTank[iIndex].g_sFallVoicelineReward4[0] = '\0';
			g_esTank[iIndex].g_sItemReward[0] = '\0';
			g_esTank[iIndex].g_sItemReward2[0] = '\0';
			g_esTank[iIndex].g_sItemReward3[0] = '\0';
			g_esTank[iIndex].g_sItemReward4[0] = '\0';
			g_esTank[iIndex].g_sLightColorVisual[0] = '\0';
			g_esTank[iIndex].g_sLightColorVisual2[0] = '\0';
			g_esTank[iIndex].g_sLightColorVisual3[0] = '\0';
			g_esTank[iIndex].g_sLightColorVisual4[0] = '\0';
			g_esTank[iIndex].g_sLoopingVoicelineVisual[0] = '\0';
			g_esTank[iIndex].g_sLoopingVoicelineVisual2[0] = '\0';
			g_esTank[iIndex].g_sLoopingVoicelineVisual3[0] = '\0';
			g_esTank[iIndex].g_sLoopingVoicelineVisual4[0] = '\0';
			g_esTank[iIndex].g_sOutlineColorVisual[0] = '\0';
			g_esTank[iIndex].g_sOutlineColorVisual2[0] = '\0';
			g_esTank[iIndex].g_sOutlineColorVisual3[0] = '\0';
			g_esTank[iIndex].g_sOutlineColorVisual4[0] = '\0';
			g_esTank[iIndex].g_sScreenColorVisual[0] = '\0';
			g_esTank[iIndex].g_sScreenColorVisual2[0] = '\0';
			g_esTank[iIndex].g_sScreenColorVisual3[0] = '\0';
			g_esTank[iIndex].g_sScreenColorVisual4[0] = '\0';
			g_esTank[iIndex].g_iTeammateLimit = -1;
			g_esTank[iIndex].g_iAutoAggravate = -1;
			g_esTank[iIndex].g_iPrioritizeThrows = -1;
			g_esTank[iIndex].g_iBaseHealth = -1;
			g_esTank[iIndex].g_iDisplayHealth = -1;
			g_esTank[iIndex].g_iDisplayHealthType = -1;
			g_esTank[iIndex].g_iExtraHealth = -1;
			g_esTank[iIndex].g_sArmorCharacters[0] = '\0';
			g_esTank[iIndex].g_flArmorPercentage = -1.0;
			g_esTank[iIndex].g_flArmorResistance[0] = -1.0;
			g_esTank[iIndex].g_sShieldCharacters[0] = '\0';
			g_esTank[iIndex].g_flShieldPercentage = -1.0;
			g_esTank[iIndex].g_flShieldRate = -1.0;
			g_esTank[iIndex].g_flPassiveDelay = -1.0;
			g_esTank[iIndex].g_iPassiveHealth = -1;
			g_esTank[iIndex].g_flPassiveInterval = -1.0;
			g_esTank[iIndex].g_sHealthCharacters[0] = '\0';
			g_esTank[iIndex].g_flHealPercentMultiplier = -1.0;
			g_esTank[iIndex].g_iHumanMultiplierMode = -1;
			g_esTank[iIndex].g_iMinimumHumans = -1;
			g_esTank[iIndex].g_iMultiplyHealth = -1;
			g_esTank[iIndex].g_iSpawnProtection = -1;
			g_esTank[iIndex].g_flArmorDuration = -1.0;
			g_esTank[iIndex].g_flArmorResistance[1] = -1.0;
			g_esTank[iIndex].g_flShieldDuration = -1.0;
			g_esTank[iIndex].g_flShieldResistance = -1.0;
			g_esTank[iIndex].g_iHumanSupport = 0;
			g_esTank[iIndex].g_iRequiresHumans = -1;
			g_esTank[iIndex].g_iGlowEnabled = 0;
			g_esTank[iIndex].g_iGlowFlashing = 0;
			g_esTank[iIndex].g_iGlowMinRange = 0;
			g_esTank[iIndex].g_iGlowMaxRange = 99999;
			g_esTank[iIndex].g_iGlowType = 0;
			g_esTank[iIndex].g_flCloseAreasOnly = 0.0;
			g_esTank[iIndex].g_flOpenAreasOnly = 0.0;
			g_esTank[iIndex].g_iAccessFlags = -1;
			g_esTank[iIndex].g_iImmunityFlags = -1;
			g_esTank[iIndex].g_iTypeLimit = 0;
			g_esTank[iIndex].g_iFinaleTank = 0;
			g_esTank[iIndex].g_iBossBaseType = 0;
			g_esTank[iIndex].g_iBossEffects = 0;
			g_esTank[iIndex].g_iBossLimit = 32;
			g_esTank[iIndex].g_iBossStages = 4;
			g_esTank[iIndex].g_sComboSet[0] = '\0';
			g_esTank[iIndex].g_iRandomTank = 1;
			g_esTank[iIndex].g_flRandomDuration = 99999.0;
			g_esTank[iIndex].g_flRandomInterval = 5.0;
			g_esTank[iIndex].g_flTransformDelay = 10.0;
			g_esTank[iIndex].g_flTransformDuration = 10.0;
			g_esTank[iIndex].g_iSpawnType = 0;
			g_esTank[iIndex].g_iPropsAttached = (g_bSecondGame ? 510 : 462);
			g_esTank[iIndex].g_iBodyEffects = 0;
			g_esTank[iIndex].g_iRockEffects = 0;
			g_esTank[iIndex].g_iRockModel = 2;
			g_esTank[iIndex].g_flAttackInterval = -1.0;
			g_esTank[iIndex].g_iAutoHop = -1;
			g_esTank[iIndex].g_flClawDamage = -2.0;
			g_esTank[iIndex].g_iFootstepShake = -1;
			g_esTank[iIndex].g_iGroundPound = -1;
			g_esTank[iIndex].g_flHittableDamage = -2.0;
			g_esTank[iIndex].g_flIncapDamageMultiplier = -1.0;
			g_esTank[iIndex].g_iIntangibleBody = -1;
			g_esTank[iIndex].g_iMeleeHitMode = -1;
			g_esTank[iIndex].g_flMeleeHitValue = -1.0;
			g_esTank[iIndex].g_flPunchForce = -2.0;
			g_esTank[iIndex].g_flPunchThrow = -1.0;
			g_esTank[iIndex].g_flRockDamage = -2.0;
			g_esTank[iIndex].g_iRockSound = -1;
			g_esTank[iIndex].g_flRunSpeed = -1.0;
			g_esTank[iIndex].g_iSkipIncap = -1;
			g_esTank[iIndex].g_iSkipTaunt = -1;
			g_esTank[iIndex].g_iSweepFist = -1;
			g_esTank[iIndex].g_flThrowForce = -1.0;
			g_esTank[iIndex].g_flThrowInterval = -1.0;
			g_esTank[iIndex].g_iThrowRock = -1;
			g_esTank[iIndex].g_iBulletImmunity = -1;
			g_esTank[iIndex].g_iExplosiveImmunity = -1;
			g_esTank[iIndex].g_iFireImmunity = -1;
			g_esTank[iIndex].g_iHittableImmunity = -1;
			g_esTank[iIndex].g_iMeleeImmunity = -1;
			g_esTank[iIndex].g_iVomitImmunity = -1;

			for (int iPos = 0; iPos < (sizeof esTank::g_iTransformType); iPos++)
			{
				g_esTank[iIndex].g_iTransformType[iPos] = (iPos + 1);

				if (iPos < (sizeof esTank::g_iRewardEnabled))
				{
					g_esTank[iIndex].g_iRewardEnabled[iPos] = -2;
					g_esTank[iIndex].g_iRewardBots[iPos] = -2;
					g_esTank[iIndex].g_flRewardChance[iPos] = -1.0;
					g_esTank[iIndex].g_flRewardDuration[iPos] = -1.0;
					g_esTank[iIndex].g_iRewardEffect[iPos] = -1;
					g_esTank[iIndex].g_iRewardNotify[iPos] = -1;
					g_esTank[iIndex].g_flRewardPercentage[iPos] = -1.0;
					g_esTank[iIndex].g_iRewardVisual[iPos] = -1;
					g_esTank[iIndex].g_flActionDurationReward[iPos] = -1.0;
					g_esTank[iIndex].g_flAdrenalineTimeReward[iPos] = -1.0;
					g_esTank[iIndex].g_iAmmoBoostReward[iPos] = -1;
					g_esTank[iIndex].g_iAmmoRefillReward[iPos] = -1;
					g_esTank[iIndex].g_iAmmoRegenReward[iPos] = -1;
					g_esTank[iIndex].g_flAttackBoostReward[iPos] = -1.0;
					g_esTank[iIndex].g_iBlazeHealthReward[iPos] = -1;
					g_esTank[iIndex].g_iBloodDonorReward[iPos] = -1;
					g_esTank[iIndex].g_iBunnyHopReward[iPos] = -1;
					g_esTank[iIndex].g_iBurstDoorsReward[iPos] = -1;
					g_esTank[iIndex].g_iCleanKillsReward[iPos] = -1;
					g_esTank[iIndex].g_iClusterBombsReward[iPos] = -1;
					g_esTank[iIndex].g_flDamageBoostReward[iPos] = -1.0;
					g_esTank[iIndex].g_flDamageResistanceReward[iPos] = -1.0;
					g_esTank[iIndex].g_flDopamineRadiusReward[iPos] = -1.0;
					g_esTank[iIndex].g_iEternalFlamesReward[iPos] = -1;
					g_esTank[iIndex].g_iFastRecoveryReward[iPos] = -1;
					g_esTank[iIndex].g_flFireRateReward[iPos] = -1.0;
					g_esTank[iIndex].g_iFriendlyFireReward[iPos] = -1;
					g_esTank[iIndex].g_iGhostBulletsReward[iPos] = -1;
					g_esTank[iIndex].g_flGrenadeLauncherReward[iPos] = -1.0;
					g_esTank[iIndex].g_flHealPercentReward[iPos] = -1.0;
					g_esTank[iIndex].g_flHealthcareRadiusReward[iPos] = -1.0;
					g_esTank[iIndex].g_iHealthRegenReward[iPos] = -1;
					g_esTank[iIndex].g_flHeartbeatReward[iPos] = -1.0;
					g_esTank[iIndex].g_flHollowpointAmmoReward[iPos] = -1.0;
					g_esTank[iIndex].g_iInfiniteAmmoReward[iPos] = -1;
					g_esTank[iIndex].g_flJumpHeightReward[iPos] = -1.0;
					g_esTank[iIndex].g_iLadderActionsReward[iPos] = -1;
					g_esTank[iIndex].g_flLadyKillerReward[iPos] = -1.0;
					g_esTank[iIndex].g_iLaserSightReward[iPos] = -1;
					g_esTank[iIndex].g_iLifeLeechReward[iPos] = -1;
					g_esTank[iIndex].g_flLoopingVoicelineInterval[iPos] = -1.0;
					g_esTank[iIndex].g_flLuckyBulletReward[iPos] = -1.0;
					g_esTank[iIndex].g_iMedicalCutsReward[iPos] = -1;
					g_esTank[iIndex].g_iMeleeRangeReward[iPos] = -1;
					g_esTank[iIndex].g_iMidairDashesReward[iPos] = -1;
					g_esTank[iIndex].g_flMotivationRadiusReward[iPos] = -1.0;
					g_esTank[iIndex].g_flOverdoseRadiusReward[iPos] = -1.0;
					g_esTank[iIndex].g_iOverhealthReward[iPos] = -1;
					g_esTank[iIndex].g_iParticleEffectVisual[iPos] = -1;
					g_esTank[iIndex].g_flPipeBombDurationReward[iPos] = -1.0;
					g_esTank[iIndex].g_iPrefsNotify[iPos] = -1;
					g_esTank[iIndex].g_flPunchResistanceReward[iPos] = -1.0;
					g_esTank[iIndex].g_flRapidPistolReward[iPos] = -1.0;
					g_esTank[iIndex].g_iRecoilDampenerReward[iPos] = -1;
					g_esTank[iIndex].g_flRefillPercentReward[iPos] = -1.0;
					g_esTank[iIndex].g_iRegenBurstsReward[iPos] = -1;
					g_esTank[iIndex].g_flReloadRateReward[iPos] = -1.0;
					g_esTank[iIndex].g_iRespawnLoadoutReward[iPos] = -1;
					g_esTank[iIndex].g_iReviveHealthReward[iPos] = -1;
					g_esTank[iIndex].g_iRiotGearReward[iPos] = -1;
					g_esTank[iIndex].g_iSafetyBubbleReward[iPos] = -1;
					g_esTank[iIndex].g_iShareRewards[iPos] = -1;
					g_esTank[iIndex].g_flShockwaveRadiusReward[iPos] = -1.0;
					g_esTank[iIndex].g_flShoveDamageReward[iPos] = -1.0;
					g_esTank[iIndex].g_iShovePenaltyReward[iPos] = -1;
					g_esTank[iIndex].g_flShoveRateReward[iPos] = -1.0;
					g_esTank[iIndex].g_flSledgehammerRoundsReward[iPos] = -1.0;
					g_esTank[iIndex].g_iSpecialAmmoReward[iPos] = -1;
					g_esTank[iIndex].g_flSpeedBoostReward[iPos] = -1.0;
					g_esTank[iIndex].g_iStackRewards[iPos] = -1;
					g_esTank[iIndex].g_iStickyGrenadesReward[iPos] = -1;
					g_esTank[iIndex].g_flSupplierReward[iPos] = -1.0;
					g_esTank[iIndex].g_flSwingRateReward[iPos] = -1.0;
					g_esTank[iIndex].g_iSyringeDartsReward[iPos] = -1;
					g_esTank[iIndex].g_iThornsReward[iPos] = -1;
					g_esTank[iIndex].g_iUsefulRewards[iPos] = -1;
					g_esTank[iIndex].g_iVoicePitchVisual[iPos] = -1;
				}

				if (iPos < (sizeof esTank::g_iStackLimits))
				{
					g_esTank[iIndex].g_iStackLimits[iPos] = -1;
				}

				if (iPos < (sizeof esTank::g_flComboChance))
				{
					g_esTank[iIndex].g_flComboChance[iPos] = 0.0;
					g_esTank[iIndex].g_iComboCooldown[iPos] = 0;
					g_esTank[iIndex].g_flComboDamage[iPos] = 0.0;
					g_esTank[iIndex].g_flComboDeathChance[iPos] = 0.0;
					g_esTank[iIndex].g_flComboDeathRange[iPos] = 0.0;
					g_esTank[iIndex].g_flComboDelay[iPos] = 0.0;
					g_esTank[iIndex].g_flComboDuration[iPos] = 0.0;
					g_esTank[iIndex].g_flComboInterval[iPos] = 0.0;
					g_esTank[iIndex].g_flComboMaxRadius[iPos] = 0.0;
					g_esTank[iIndex].g_flComboMinRadius[iPos] = 0.0;
					g_esTank[iIndex].g_flComboRange[iPos] = 0.0;
					g_esTank[iIndex].g_flComboRangeChance[iPos] = 0.0;
					g_esTank[iIndex].g_iComboRangeCooldown[iPos] = 0;
					g_esTank[iIndex].g_flComboRockChance[iPos] = 0.0;
					g_esTank[iIndex].g_iComboRockCooldown[iPos] = 0;
					g_esTank[iIndex].g_flComboSpeed[iPos] = 0.0;
				}

				if (iPos < (sizeof esTank::g_flComboTypeChance))
				{
					g_esTank[iIndex].g_flComboTypeChance[iPos] = 0.0;
					g_esTank[iIndex].g_flBodyChance[iPos] = 100.0;
				}

				if (iPos < (sizeof esTank::g_flPropsChance))
				{
					g_esTank[iIndex].g_flPropsChance[iPos] = 33.3;
				}

				if (iPos < (sizeof esTank::g_iSkinColor))
				{
					g_esTank[iIndex].g_flRockChance[iPos] = 100.0;
					g_esTank[iIndex].g_iSkinColor[iPos] = 255;
					g_esTank[iIndex].g_iBossHealth[iPos] = 5000 / (iPos + 1);
					g_esTank[iIndex].g_iBossType[iPos] = (iPos + 2);
					g_esTank[iIndex].g_iLightColor[iPos] = 255;
					g_esTank[iIndex].g_iOzTankColor[iPos] = 255;
					g_esTank[iIndex].g_iFlameColor[iPos] = 255;
					g_esTank[iIndex].g_iRockColor[iPos] = 255;
					g_esTank[iIndex].g_iTireColor[iPos] = 255;
					g_esTank[iIndex].g_iPropTankColor[iPos] = 255;
					g_esTank[iIndex].g_iFlashlightColor[iPos] = 255;
					g_esTank[iIndex].g_iCrownColor[iPos] = 255;
				}

				if (iPos < (sizeof esTank::g_iGlowColor))
				{
					g_esTank[iIndex].g_iGlowColor[iPos] = 255;
				}
			}

			g_esSpecial[iIndex].g_sBoomerClass[0] = '\0';
			g_esSpecial[iIndex].g_sBoomerName = MT_CONFIG_SECTION_BOOMER;
			g_esSpecial[iIndex].g_sChargerClass[0] = '\0';
			g_esSpecial[iIndex].g_sChargerName = MT_CONFIG_SECTION_CHARGER;
			g_esSpecial[iIndex].g_sGlowColor[0] = '\0';
			g_esSpecial[iIndex].g_sHunterClass[0] = '\0';
			g_esSpecial[iIndex].g_sHunterName = MT_CONFIG_SECTION_HUNTER;
			g_esSpecial[iIndex].g_sJockeyClass[0] = '\0';
			g_esSpecial[iIndex].g_sJockeyName = MT_CONFIG_SECTION_JOCKEY;
			g_esSpecial[iIndex].g_sRockColor[0] = '\0';
			g_esSpecial[iIndex].g_sSkinColor[0] = '\0';
			g_esSpecial[iIndex].g_sSmokerClass[0] = '\0';
			g_esSpecial[iIndex].g_sSmokerName = MT_CONFIG_SECTION_SMOKER;
			g_esSpecial[iIndex].g_sSpitterClass[0] = '\0';
			g_esSpecial[iIndex].g_sSpitterName = MT_CONFIG_SECTION_SPITTER;
			g_esSpecial[iIndex].g_iSpecialTypes = -1;
			g_esSpecial[iIndex].g_iGameType = -1;
			g_esSpecial[iIndex].g_flSpecialChance = -1.0;
			g_esSpecial[iIndex].g_iSpecialNote = -1;
			g_esSpecial[iIndex].g_iSpecialModel = -1;
			g_esSpecial[iIndex].g_flBurnDuration = -1.0;
			g_esSpecial[iIndex].g_flBurntSkin = -2.0;
			g_esSpecial[iIndex].g_iSpawnEnabled = -1;
			g_esSpecial[iIndex].g_iMenuEnabled = -1;
			g_esSpecial[iIndex].g_iDeathRevert = -1;
			g_esSpecial[iIndex].g_iAnnounceArrival = -1;
			g_esSpecial[iIndex].g_iAnnounceDeath = -1;
			g_esSpecial[iIndex].g_iAnnounceKill = -1;
			g_esSpecial[iIndex].g_iArrivalMessage = -1;
			g_esSpecial[iIndex].g_iArrivalSound = -1;
			g_esSpecial[iIndex].g_iDeathDetails = -1;
			g_esSpecial[iIndex].g_iDeathMessage = -1;
			g_esSpecial[iIndex].g_iDeathSound = -1;
			g_esSpecial[iIndex].g_iKillMessage = -1;
			g_esSpecial[iIndex].g_iVocalizeArrival = -1;
			g_esSpecial[iIndex].g_iVocalizeDeath = -1;
			g_esSpecial[iIndex].g_iDisplayHealth = -1;
			g_esSpecial[iIndex].g_iDisplayHealthType = -1;
			g_esSpecial[iIndex].g_sArmorCharacters[0] = '\0';
			g_esSpecial[iIndex].g_flArmorPercentage = -1.0;
			g_esSpecial[iIndex].g_flArmorResistance[0] = -1.0;
			g_esSpecial[iIndex].g_sShieldCharacters[0] = '\0';
			g_esSpecial[iIndex].g_flShieldPercentage = -1.0;
			g_esSpecial[iIndex].g_flShieldRate = -1.0;
			g_esSpecial[iIndex].g_flPassiveDelay = -1.0;
			g_esSpecial[iIndex].g_iPassiveHealth = -1;
			g_esSpecial[iIndex].g_flPassiveInterval = -1.0;
			g_esSpecial[iIndex].g_sHealthCharacters[0] = '\0';
			g_esSpecial[iIndex].g_flHealPercentMultiplier = -1.0;
			g_esSpecial[iIndex].g_iHumanMultiplierMode = -1;
			g_esSpecial[iIndex].g_iMinimumHumans = -1;
			g_esSpecial[iIndex].g_iMultiplyHealth = -1;
			g_esSpecial[iIndex].g_iSpawnProtection = -1;
			g_esSpecial[iIndex].g_flArmorDuration = -1.0;
			g_esSpecial[iIndex].g_flArmorResistance[1] = -1.0;
			g_esSpecial[iIndex].g_flShieldDuration = -1.0;
			g_esSpecial[iIndex].g_flShieldResistance = -1.0;
			g_esSpecial[iIndex].g_iHumanSupport = -1;
			g_esSpecial[iIndex].g_iRequiresHumans = -1;
			g_esSpecial[iIndex].g_iGlowEnabled = -1;
			g_esSpecial[iIndex].g_iGlowFlashing = -1;
			g_esSpecial[iIndex].g_iGlowMinRange = -1;
			g_esSpecial[iIndex].g_iGlowMaxRange = -1;
			g_esSpecial[iIndex].g_iGlowType = -1;
			g_esSpecial[iIndex].g_flCloseAreasOnly = -1.0;
			g_esSpecial[iIndex].g_flOpenAreasOnly = -1.0;
			g_esSpecial[iIndex].g_iTypeLimit = -1;
			g_esSpecial[iIndex].g_iFinaleSpecial = -1;
			g_esSpecial[iIndex].g_iBossBaseType = -1;
			g_esSpecial[iIndex].g_iBossEffects = -1;
			g_esSpecial[iIndex].g_iBossLimit = -1;
			g_esSpecial[iIndex].g_iBossStages = -1;
			g_esSpecial[iIndex].g_sComboSet[0] = '\0';
			g_esSpecial[iIndex].g_iRandomSpecial = -1;
			g_esSpecial[iIndex].g_flRandomDuration = -1.0;
			g_esSpecial[iIndex].g_flRandomInterval = -1.0;
			g_esSpecial[iIndex].g_flTransformDelay = -1.0;
			g_esSpecial[iIndex].g_flTransformDuration = -1.0;
			g_esSpecial[iIndex].g_iSpawnType = -1;
			g_esSpecial[iIndex].g_iBodyEffects = -1;
			g_esSpecial[iIndex].g_iRockEffects = -1;
			g_esSpecial[iIndex].g_iRockModel = -1;
			g_esSpecial[iIndex].g_flAttackInterval = -1.0;
			g_esSpecial[iIndex].g_iAutoHop = -1;
			g_esSpecial[iIndex].g_flClawDamage = -2.0;
			g_esSpecial[iIndex].g_flHittableDamage = -2.0;
			g_esSpecial[iIndex].g_flIncapDamageMultiplier = -1.0;
			g_esSpecial[iIndex].g_iIntangibleBody = -1;
			g_esSpecial[iIndex].g_iMeleeHitMode = -1;
			g_esSpecial[iIndex].g_flMeleeHitValue = -1.0;
			g_esSpecial[iIndex].g_flPinDamage = -2.0;
			g_esSpecial[iIndex].g_flRunSpeed = -1.0;
			g_esSpecial[iIndex].g_flSpecialInterval = -1.0;
			g_esSpecial[iIndex].g_iThrowRock = -1;
			g_esSpecial[iIndex].g_iBulletImmunity = -1;
			g_esSpecial[iIndex].g_iExplosiveImmunity = -1;
			g_esSpecial[iIndex].g_iFireImmunity = -1;
			g_esSpecial[iIndex].g_iHittableImmunity = -1;
			g_esSpecial[iIndex].g_iMeleeImmunity = -1;
			g_esSpecial[iIndex].g_iVomitImmunity = -1;
			g_esHorde[iIndex].g_iMobVariants = -1;
			g_esHorde[iIndex].g_flCommonBioChance = -1.0;
			g_esHorde[iIndex].g_flCommonChance = -1.0;
			g_esHorde[iIndex].g_flCommonDamagePoints = -1.0;
			g_esHorde[iIndex].g_flCommonDeathPoints = -1.0;
			g_esHorde[iIndex].g_flCommonGoal = -1.0;
			g_esHorde[iIndex].g_sCommonName = MT_CONFIG_SECTION_COMMON;
			g_esHorde[iIndex].g_iCommonVariant = -1;
			g_esHorde[iIndex].g_flWitchChance = -1.0;
			g_esHorde[iIndex].g_iWitchFilter = -1;
			g_esHorde[iIndex].g_iWitchMode = -1;
			g_esHorde[iIndex].g_flWitchMutateChance = -1.0;
			g_esHorde[iIndex].g_sWitchName = MT_CONFIG_SECTION_WITCH;
			g_esHorde[iIndex].g_flWitchRange = -1.0;
			g_esHorde[iIndex].g_iWitchTypes = -1;
			g_esHorde[iIndex].g_sGlowColor[0] = '\0';
			g_esHorde[iIndex].g_sSkinColor[0] = '\0';
			g_esHorde[iIndex].g_iDisplayHealth = -1;
			g_esHorde[iIndex].g_iDisplayHealthType = -1;
			g_esHorde[iIndex].g_sHealthCharacters[0] = '\0';
			g_esHorde[iIndex].g_iGlowEnabled = -1;
			g_esHorde[iIndex].g_iGlowFlashing = -1;
			g_esHorde[iIndex].g_iGlowMinRange = -1;
			g_esHorde[iIndex].g_iGlowMaxRange = -1;
			g_esHorde[iIndex].g_iGlowType = -1;
			g_esHorde[iIndex].g_iBodyEffects = -1;

			for (int iPos = 0; iPos < (sizeof esSpecial::g_iTransformType); iPos++)
			{
				g_esSpecial[iIndex].g_iTransformType[iPos] = -1;

				if (iPos < (sizeof esSpecial::g_iBaseHealth))
				{
					g_esSpecial[iIndex].g_iBaseHealth[iPos] = -1;
					g_esSpecial[iIndex].g_iExtraHealth[iPos] = -1;
				}

				if (iPos < (sizeof esSpecial::g_iRewardEnabled))
				{
					g_esSpecial[iIndex].g_iRewardEnabled[iPos] = -2;
					g_esSpecial[iIndex].g_iRewardBots[iPos] = -2;
					g_esSpecial[iIndex].g_flRewardChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_flRewardDuration[iPos] = -1.0;
					g_esSpecial[iIndex].g_iRewardEffect[iPos] = -1;
					g_esSpecial[iIndex].g_iRewardNotify[iPos] = -1;
					g_esSpecial[iIndex].g_flRewardPercentage[iPos] = -1.0;
					g_esSpecial[iIndex].g_iRewardVisual[iPos] = -1;
					g_esSpecial[iIndex].g_flActionDurationReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flAdrenalineTimeReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iAmmoBoostReward[iPos] = -1;
					g_esSpecial[iIndex].g_iAmmoRefillReward[iPos] = -1;
					g_esSpecial[iIndex].g_iAmmoRegenReward[iPos] = -1;
					g_esSpecial[iIndex].g_flAttackBoostReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iBlazeHealthReward[iPos] = -1;
					g_esSpecial[iIndex].g_iBloodDonorReward[iPos] = -1;
					g_esSpecial[iIndex].g_iBunnyHopReward[iPos] = -1;
					g_esSpecial[iIndex].g_iBurstDoorsReward[iPos] = -1;
					g_esSpecial[iIndex].g_iCleanKillsReward[iPos] = -1;
					g_esSpecial[iIndex].g_iClusterBombsReward[iPos] = -1;
					g_esSpecial[iIndex].g_flDamageBoostReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flDamageResistanceReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flDopamineRadiusReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iEternalFlamesReward[iPos] = -1;
					g_esSpecial[iIndex].g_iFastRecoveryReward[iPos] = -1;
					g_esSpecial[iIndex].g_flFireRateReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iFriendlyFireReward[iPos] = -1;
					g_esSpecial[iIndex].g_iGhostBulletsReward[iPos] = -1;
					g_esSpecial[iIndex].g_flGrenadeLauncherReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flHealPercentReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flHealthcareRadiusReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iHealthRegenReward[iPos] = -1;
					g_esSpecial[iIndex].g_flHeartbeatReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flHollowpointAmmoReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iInfiniteAmmoReward[iPos] = -1;
					g_esSpecial[iIndex].g_flJumpHeightReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iLadderActionsReward[iPos] = -1;
					g_esSpecial[iIndex].g_flLadyKillerReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iLaserSightReward[iPos] = -1;
					g_esSpecial[iIndex].g_iLifeLeechReward[iPos] = -1;
					g_esSpecial[iIndex].g_flLoopingVoicelineInterval[iPos] = -1.0;
					g_esSpecial[iIndex].g_flLuckyBulletReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iMedicalCutsReward[iPos] = -1;
					g_esSpecial[iIndex].g_iMeleeRangeReward[iPos] = -1;
					g_esSpecial[iIndex].g_iMidairDashesReward[iPos] = -1;
					g_esSpecial[iIndex].g_flMotivationRadiusReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flOverdoseRadiusReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iOverhealthReward[iPos] = -1;
					g_esSpecial[iIndex].g_iParticleEffectVisual[iPos] = -1;
					g_esSpecial[iIndex].g_flPipeBombDurationReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iPrefsNotify[iPos] = -1;
					g_esSpecial[iIndex].g_flPunchResistanceReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flRapidPistolReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iRecoilDampenerReward[iPos] = -1;
					g_esSpecial[iIndex].g_flRefillPercentReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iRegenBurstsReward[iPos] = -1;
					g_esSpecial[iIndex].g_flReloadRateReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iRespawnLoadoutReward[iPos] = -1;
					g_esSpecial[iIndex].g_iReviveHealthReward[iPos] = -1;
					g_esSpecial[iIndex].g_iRiotGearReward[iPos] = -1;
					g_esSpecial[iIndex].g_iSafetyBubbleReward[iPos] = -1;
					g_esSpecial[iIndex].g_iShareRewards[iPos] = -1;
					g_esSpecial[iIndex].g_flShockwaveRadiusReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flShoveDamageReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iShovePenaltyReward[iPos] = -1;
					g_esSpecial[iIndex].g_flShoveRateReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flSledgehammerRoundsReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iSpecialAmmoReward[iPos] = -1;
					g_esSpecial[iIndex].g_flSpeedBoostReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iStackRewards[iPos] = -1;
					g_esSpecial[iIndex].g_iStickyGrenadesReward[iPos] = -1;
					g_esSpecial[iIndex].g_flSupplierReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_flSwingRateReward[iPos] = -1.0;
					g_esSpecial[iIndex].g_iSyringeDartsReward[iPos] = -1;
					g_esSpecial[iIndex].g_iThornsReward[iPos] = -1;
					g_esSpecial[iIndex].g_iUsefulRewards[iPos] = -1;
					g_esSpecial[iIndex].g_iVoicePitchVisual[iPos] = -1;
				}

				if (iPos < (sizeof esSpecial::g_iStackLimits))
				{
					g_esSpecial[iIndex].g_iStackLimits[iPos] = -1;
				}

				if (iPos < (sizeof esSpecial::g_flComboChance))
				{
					g_esSpecial[iIndex].g_flComboChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_iComboCooldown[iPos] = -1;
					g_esSpecial[iIndex].g_flComboDamage[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboDeathChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboDeathRange[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboDelay[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboDuration[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboInterval[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboMaxRadius[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboMinRadius[iPos] = 1.0;
					g_esSpecial[iIndex].g_flComboRange[iPos] = -1.0;
					g_esSpecial[iIndex].g_flComboRangeChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_iComboRangeCooldown[iPos] = -1;
					g_esSpecial[iIndex].g_flComboRockChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_iComboRockCooldown[iPos] = -1;
					g_esSpecial[iIndex].g_flComboSpeed[iPos] = -1.0;
				}

				if (iPos < (sizeof esSpecial::g_flComboTypeChance))
				{
					g_esSpecial[iIndex].g_flComboTypeChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_flBodyChance[iPos] = -1.0;
					g_esHorde[iIndex].g_flBodyChance[iPos] = -1.0;
				}

				if (iPos < (sizeof esSpecial::g_iSkinColor))
				{
					g_esSpecial[iIndex].g_flRockChance[iPos] = -1.0;
					g_esSpecial[iIndex].g_iSkinColor[iPos] = -1;
					g_esSpecial[iIndex].g_iBossHealth[iPos] = -1;
					g_esSpecial[iIndex].g_iBossType[iPos] = -1;
					g_esSpecial[iIndex].g_iRockColor[iPos] = -1;
					g_esHorde[iIndex].g_iSkinColor[iPos] = -1;
				}

				if (iPos < (sizeof esSpecial::g_iGlowColor))
				{
					g_esSpecial[iIndex].g_iGlowColor[iPos] = -1;
					g_esHorde[iIndex].g_iGlowColor[iPos] = -1;
				}
			}
		}
	}
	else if (g_esGeneral.g_iConfigMode >= 3)
	{
		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			g_esPlayer[iPlayer].g_sGlowColor[0] = '\0';
			g_esPlayer[iPlayer].g_sSkinColor[0] = '\0';
			g_esPlayer[iPlayer].g_sFlameColor[0] = '\0';
			g_esPlayer[iPlayer].g_sFlashlightColor[0] = '\0';
			g_esPlayer[iPlayer].g_sOzTankColor[0] = '\0';
			g_esPlayer[iPlayer].g_sPropTankColor[0] = '\0';
			g_esPlayer[iPlayer].g_sRockColor[0] = '\0';
			g_esPlayer[iPlayer].g_sTireColor[0] = '\0';
			g_esPlayer[iPlayer].g_sTankName[0] = '\0';
			g_esPlayer[iPlayer].g_iTankNote = -1;
			g_esPlayer[iPlayer].g_iTankModel = -1;
			g_esPlayer[iPlayer].g_flBurnDuration = -1.0;
			g_esPlayer[iPlayer].g_flBurntSkin = -2.0;
			g_esPlayer[iPlayer].g_iCheckAbilities = -1;
			g_esPlayer[iPlayer].g_iDeathRevert = -1;
			g_esPlayer[iPlayer].g_iAnnounceArrival = -1;
			g_esPlayer[iPlayer].g_iAnnounceDeath = -1;
			g_esPlayer[iPlayer].g_iAnnounceKill = -1;
			g_esPlayer[iPlayer].g_iArrivalMessage = -1;
			g_esPlayer[iPlayer].g_iArrivalSound = -1;
			g_esPlayer[iPlayer].g_iDeathDetails = -1;
			g_esPlayer[iPlayer].g_iDeathMessage = -1;
			g_esPlayer[iPlayer].g_iDeathSound = -1;
			g_esPlayer[iPlayer].g_iKillMessage = -1;
			g_esPlayer[iPlayer].g_iVocalizeArrival = -1;
			g_esPlayer[iPlayer].g_iVocalizeDeath = -1;
			g_esPlayer[iPlayer].g_sBodyColorVisual[0] = '\0';
			g_esPlayer[iPlayer].g_sBodyColorVisual2[0] = '\0';
			g_esPlayer[iPlayer].g_sBodyColorVisual3[0] = '\0';
			g_esPlayer[iPlayer].g_sBodyColorVisual4[0] = '\0';
			g_esPlayer[iPlayer].g_sFallVoicelineReward[0] = '\0';
			g_esPlayer[iPlayer].g_sFallVoicelineReward2[0] = '\0';
			g_esPlayer[iPlayer].g_sFallVoicelineReward3[0] = '\0';
			g_esPlayer[iPlayer].g_sFallVoicelineReward4[0] = '\0';
			g_esPlayer[iPlayer].g_sItemReward[0] = '\0';
			g_esPlayer[iPlayer].g_sItemReward2[0] = '\0';
			g_esPlayer[iPlayer].g_sItemReward3[0] = '\0';
			g_esPlayer[iPlayer].g_sItemReward4[0] = '\0';
			g_esPlayer[iPlayer].g_sLightColorVisual[0] = '\0';
			g_esPlayer[iPlayer].g_sLightColorVisual2[0] = '\0';
			g_esPlayer[iPlayer].g_sLightColorVisual3[0] = '\0';
			g_esPlayer[iPlayer].g_sLightColorVisual4[0] = '\0';
			g_esPlayer[iPlayer].g_sLoopingVoicelineVisual[0] = '\0';
			g_esPlayer[iPlayer].g_sLoopingVoicelineVisual2[0] = '\0';
			g_esPlayer[iPlayer].g_sLoopingVoicelineVisual3[0] = '\0';
			g_esPlayer[iPlayer].g_sLoopingVoicelineVisual4[0] = '\0';
			g_esPlayer[iPlayer].g_sOutlineColorVisual[0] = '\0';
			g_esPlayer[iPlayer].g_sOutlineColorVisual2[0] = '\0';
			g_esPlayer[iPlayer].g_sOutlineColorVisual3[0] = '\0';
			g_esPlayer[iPlayer].g_sOutlineColorVisual4[0] = '\0';
			g_esPlayer[iPlayer].g_sScreenColorVisual[0] = '\0';
			g_esPlayer[iPlayer].g_sScreenColorVisual2[0] = '\0';
			g_esPlayer[iPlayer].g_sScreenColorVisual3[0] = '\0';
			g_esPlayer[iPlayer].g_sScreenColorVisual4[0] = '\0';
			g_esPlayer[iPlayer].g_iTeammateLimit = -1;
			g_esPlayer[iPlayer].g_iBaseHealth = -1;
			g_esPlayer[iPlayer].g_iDisplayHealth = -1;
			g_esPlayer[iPlayer].g_iDisplayHealthType = -1;
			g_esPlayer[iPlayer].g_iExtraHealth = -1;
			g_esPlayer[iPlayer].g_sArmorCharacters[0] = '\0';
			g_esPlayer[iPlayer].g_flArmorPercentage = -1.0;
			g_esPlayer[iPlayer].g_flArmorResistance[0] = -1.0;
			g_esPlayer[iPlayer].g_sShieldCharacters[0] = '\0';
			g_esPlayer[iPlayer].g_flShieldPercentage = -1.0;
			g_esPlayer[iPlayer].g_flShieldRate = -1.0;
			g_esPlayer[iPlayer].g_flPassiveDelay = -1.0;
			g_esPlayer[iPlayer].g_iPassiveHealth = -1;
			g_esPlayer[iPlayer].g_flPassiveInterval = -1.0;
			g_esPlayer[iPlayer].g_sHealthCharacters[0] = '\0';
			g_esPlayer[iPlayer].g_flHealPercentMultiplier = -1.0;
			g_esPlayer[iPlayer].g_iHumanMultiplierMode = -1;
			g_esPlayer[iPlayer].g_iMinimumHumans = -1;
			g_esPlayer[iPlayer].g_iMultiplyHealth = -1;
			g_esPlayer[iPlayer].g_iSpawnProtection = -1;
			g_esPlayer[iPlayer].g_flArmorDuration = -1.0;
			g_esPlayer[iPlayer].g_flArmorResistance[1] = -1.0;
			g_esPlayer[iPlayer].g_flShieldDuration = -1.0;
			g_esPlayer[iPlayer].g_flShieldResistance = -1.0;
			g_esPlayer[iPlayer].g_iGlowEnabled = -1;
			g_esPlayer[iPlayer].g_iGlowFlashing = -1;
			g_esPlayer[iPlayer].g_iGlowMinRange = -1;
			g_esPlayer[iPlayer].g_iGlowMaxRange = -1;
			g_esPlayer[iPlayer].g_iGlowType = -1;
			g_esPlayer[iPlayer].g_iFavoriteType = -1;
			g_esPlayer[iPlayer].g_iAccessFlags = -1;
			g_esPlayer[iPlayer].g_iImmunityFlags = -1;
			g_esPlayer[iPlayer].g_iBossEffects = -1;
			g_esPlayer[iPlayer].g_iBossStages = -1;
			g_esPlayer[iPlayer].g_sComboSet[0] = '\0';
			g_esPlayer[iPlayer].g_iRandomTank = -1;
			g_esPlayer[iPlayer].g_flRandomDuration = -1.0;
			g_esPlayer[iPlayer].g_flRandomInterval = -1.0;
			g_esPlayer[iPlayer].g_flTransformDelay = -1.0;
			g_esPlayer[iPlayer].g_flTransformDuration = -1.0;
			g_esPlayer[iPlayer].g_iSpawnType = -1;
			g_esPlayer[iPlayer].g_iPropsAttached = -1;
			g_esPlayer[iPlayer].g_iBodyEffects = -1;
			g_esPlayer[iPlayer].g_iRockEffects = -1;
			g_esPlayer[iPlayer].g_iRockModel = -1;
			g_esPlayer[iPlayer].g_flAttackInterval = -1.0;
			g_esPlayer[iPlayer].g_iAutoHop = -1;
			g_esPlayer[iPlayer].g_flClawDamage = -2.0;
			g_esPlayer[iPlayer].g_iFootstepShake = -1;
			g_esPlayer[iPlayer].g_iGroundPound = -1;
			g_esPlayer[iPlayer].g_flHittableDamage = -2.0;
			g_esPlayer[iPlayer].g_flIncapDamageMultiplier = -1.0;
			g_esPlayer[iPlayer].g_iIntangibleBody = -1;
			g_esPlayer[iPlayer].g_iMeleeHitMode = -1;
			g_esPlayer[iPlayer].g_flMeleeHitValue = -1.0;
			g_esPlayer[iPlayer].g_flPunchForce = -2.0;
			g_esPlayer[iPlayer].g_flPunchThrow = -1.0;
			g_esPlayer[iPlayer].g_flRockDamage = -2.0;
			g_esPlayer[iPlayer].g_iRockSound = -1;
			g_esPlayer[iPlayer].g_flRunSpeed = -1.0;
			g_esPlayer[iPlayer].g_iSkipIncap = -1;
			g_esPlayer[iPlayer].g_iSkipTaunt = -1;
			g_esPlayer[iPlayer].g_iSweepFist = -1;
			g_esPlayer[iPlayer].g_flThrowForce = -1.0;
			g_esPlayer[iPlayer].g_flThrowInterval = -1.0;
			g_esPlayer[iPlayer].g_iThrowRock = -1;
			g_esPlayer[iPlayer].g_iBulletImmunity = -1;
			g_esPlayer[iPlayer].g_iExplosiveImmunity = -1;
			g_esPlayer[iPlayer].g_iFireImmunity = -1;
			g_esPlayer[iPlayer].g_iHittableImmunity = -1;
			g_esPlayer[iPlayer].g_iMeleeImmunity = -1;
			g_esPlayer[iPlayer].g_iVomitImmunity = -1;

			for (int iPos = 0; iPos < (sizeof esPlayer::g_iTransformType); iPos++)
			{
				g_esPlayer[iPlayer].g_iTransformType[iPos] = -1;

				if (iPos < (sizeof esPlayer::g_iRewardEnabled))
				{
					g_esPlayer[iPlayer].g_iRewardEnabled[iPos] = -2;
					g_esPlayer[iPlayer].g_iRewardBots[iPos] = -2;
					g_esPlayer[iPlayer].g_flRewardChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flRewardDuration[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iRewardEffect[iPos] = -1;
					g_esPlayer[iPlayer].g_iRewardNotify[iPos] = -1;
					g_esPlayer[iPlayer].g_flRewardPercentage[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iRewardVisual[iPos] = -1;
					g_esPlayer[iPlayer].g_flActionDurationReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flAdrenalineTimeReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iAmmoBoostReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iAmmoRefillReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iAmmoRegenReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flAttackBoostReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iBlazeHealthReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iBloodDonorReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iBunnyHopReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iBurstDoorsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iCleanKillsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iClusterBombsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flDamageBoostReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flDamageResistanceReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flDopamineRadiusReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iEternalFlamesReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iFastRecoveryReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flFireRateReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iFriendlyFireReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iGhostBulletsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flGrenadeLauncherReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flHealPercentReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flHealthcareRadiusReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iHealthRegenReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flHeartbeatReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flHollowpointAmmoReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iInfiniteAmmoReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flJumpHeightReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iLadderActionsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flLadyKillerReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iLaserSightReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iLifeLeechReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flLoopingVoicelineInterval[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flLuckyBulletReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iMedicalCutsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iMeleeRangeReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iMidairDashesReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flMotivationRadiusReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flOverdoseRadiusReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iOverhealthReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iParticleEffectVisual[iPos] = -1;
					g_esPlayer[iPlayer].g_flPipeBombDurationReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iPrefsNotify[iPos] = -1;
					g_esPlayer[iPlayer].g_flPunchResistanceReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flRapidPistolReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iRecoilDampenerReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flRefillPercentReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iRegenBurstsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flReloadRateReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iRespawnLoadoutReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iReviveHealthReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iRiotGearReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iSafetyBubbleReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iShareRewards[iPos] = -1;
					g_esPlayer[iPlayer].g_flShockwaveRadiusReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flShoveDamageReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iShovePenaltyReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flShoveRateReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flSledgehammerRoundsReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iSpecialAmmoReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flSpeedBoostReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iStackRewards[iPos] = -1;
					g_esPlayer[iPlayer].g_iStickyGrenadesReward[iPos] = -1;
					g_esPlayer[iPlayer].g_flSupplierReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flSwingRateReward[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iSyringeDartsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iThornsReward[iPos] = -1;
					g_esPlayer[iPlayer].g_iUsefulRewards[iPos] = -1;
					g_esPlayer[iPlayer].g_iVoicePitchVisual[iPos] = -1;
				}

				if (iPos < (sizeof esPlayer::g_iStackLimits))
				{
					g_esPlayer[iPlayer].g_iStackLimits[iPos] = -1;
					g_esShooter[iPlayer].g_iCarrierEnabled = -1;
					g_esShooter[iPlayer].g_iCarrierBots = -1;
					g_esShooter[iPlayer].g_iCarrierBody = -1;
					g_esShooter[iPlayer].g_flCarrierChance = -1.0;
					g_esShooter[iPlayer].g_iCarrierCleanse = -1;
					g_esShooter[iPlayer].g_flCarrierDamageMultiplier = -1.0;
					g_esShooter[iPlayer].g_flCarrierDelay = -1.0;
					g_esShooter[iPlayer].g_iCarrierFilter = -1;
					g_esShooter[iPlayer].g_flCarrierHealthMultiplier = -1.0;
					g_esShooter[iPlayer].g_iCarrierInfection = -1;
					g_esShooter[iPlayer].g_iCarrierMaxType = -1;
					g_esShooter[iPlayer].g_iCarrierMinType = -1;
					g_esShooter[iPlayer].g_iCarrierMix = -1;
					g_esShooter[iPlayer].g_iCarrierMode = -1;
					g_esShooter[iPlayer].g_iCarrierTeleport = -1;
					g_esShooter[iPlayer].g_iCarrierVoice = -1;
					g_esShooter[iPlayer].g_flCarrierVoiceChance = -1.0;
					g_esShooter[iPlayer].g_flCarrierVoiceInterval = -1.0;
					g_esShooter[iPlayer].g_sCarrierAttackVoicelines[0] = '\0';
					g_esShooter[iPlayer].g_sCarrierBaitVoicelines[0] = '\0';
					g_esShooter[iPlayer].g_iPassiveEnabled = -2;
					g_esShooter[iPlayer].g_iPassiveBots = -2;
					g_esShooter[iPlayer].g_iPassiveNotify = -1;
					g_esShooter[iPlayer].g_flActionDurationPassive = -1.0;
					g_esShooter[iPlayer].g_flAdrenalineTimePassive = -1.0;
					g_esShooter[iPlayer].g_iAmmoBoostPassive = -1;
					g_esShooter[iPlayer].g_iAmmoRefillPassive = -1;
					g_esShooter[iPlayer].g_iAmmoRegenPassive = -1;
					g_esShooter[iPlayer].g_flAttackBoostPassive = -1.0;
					g_esShooter[iPlayer].g_iBlazeHealthPassive = -1;
					g_esShooter[iPlayer].g_iBloodDonorPassive = -1;
					g_esShooter[iPlayer].g_iBunnyHopPassive = -1;
					g_esShooter[iPlayer].g_iBurstDoorsPassive = -1;
					g_esShooter[iPlayer].g_iCleanKillsPassive = -1;
					g_esShooter[iPlayer].g_iClusterBombsPassive = -1;
					g_esShooter[iPlayer].g_flDamageBoostPassive = -1.0;
					g_esShooter[iPlayer].g_flDamageResistancePassive = -1.0;
					g_esShooter[iPlayer].g_flDopamineRadiusPassive = -1.0;
					g_esShooter[iPlayer].g_iEternalFlamesPassive = -1;
					g_esShooter[iPlayer].g_iFastRecoveryPassive = -1;
					g_esShooter[iPlayer].g_flFireRatePassive = -1.0;
					g_esShooter[iPlayer].g_iFriendlyFirePassive = -1;
					g_esShooter[iPlayer].g_iGhostBulletsPassive = -1;
					g_esShooter[iPlayer].g_flGrenadeLauncherPassive = -1.0;
					g_esShooter[iPlayer].g_flHealPercentPassive = -1.0;
					g_esShooter[iPlayer].g_flHealthcareRadiusPassive = -1.0;
					g_esShooter[iPlayer].g_iHealthRegenPassive = -1;
					g_esShooter[iPlayer].g_flHeartbeatPassive = -1.0;
					g_esShooter[iPlayer].g_flHollowpointAmmoPassive = -1.0;
					g_esShooter[iPlayer].g_iInfiniteAmmoPassive = -1;
					g_esShooter[iPlayer].g_sItemPassive[0] = '\0';
					g_esShooter[iPlayer].g_flJumpHeightPassive = -1.0;
					g_esShooter[iPlayer].g_iLadderActionsPassive = -1;
					g_esShooter[iPlayer].g_flLadyKillerPassive = -1.0;
					g_esShooter[iPlayer].g_iLaserSightPassive = -1;
					g_esShooter[iPlayer].g_iLifeLeechPassive = -1;
					g_esShooter[iPlayer].g_flLuckyBulletPassive = -1.0;
					g_esShooter[iPlayer].g_iMedicalCutsPassive = -1;
					g_esShooter[iPlayer].g_iMeleeRangePassive = -1;
					g_esShooter[iPlayer].g_iMidairDashesPassive = -1;
					g_esShooter[iPlayer].g_flMotivationRadiusPassive = -1.0;
					g_esShooter[iPlayer].g_flOverdoseRadiusPassive = -1.0;
					g_esShooter[iPlayer].g_iOverhealthPassive = -1;
					g_esShooter[iPlayer].g_flPipeBombDurationPassive = -1.0;
					g_esShooter[iPlayer].g_flPunchResistancePassive = -1.0;
					g_esShooter[iPlayer].g_flRapidPistolPassive = -1.0;
					g_esShooter[iPlayer].g_iRecoilDampenerPassive = -1;
					g_esShooter[iPlayer].g_flRefillPercentPassive = -1.0;
					g_esShooter[iPlayer].g_iRegenBurstsPassive = -1;
					g_esShooter[iPlayer].g_flReloadRatePassive = -1.0;
					g_esShooter[iPlayer].g_iRespawnLoadoutPassive = -1;
					g_esShooter[iPlayer].g_iReviveHealthPassive = -1;
					g_esShooter[iPlayer].g_iRiotGearPassive = -1;
					g_esShooter[iPlayer].g_iSafetyBubblePassive = -1;
					g_esShooter[iPlayer].g_flShockwaveRadiusPassive = -1.0;
					g_esShooter[iPlayer].g_flShoveDamagePassive = -1.0;
					g_esShooter[iPlayer].g_iShovePenaltyPassive = -1;
					g_esShooter[iPlayer].g_flShoveRatePassive = -1.0;
					g_esShooter[iPlayer].g_flSledgehammerRoundsPassive = -1.0;
					g_esShooter[iPlayer].g_iSpecialAmmoPassive = -1;
					g_esShooter[iPlayer].g_flSpeedBoostPassive = -1.0;
					g_esShooter[iPlayer].g_iStickyGrenadesPassive = -1;
					g_esShooter[iPlayer].g_flSupplierPassive = -1.0;
					g_esShooter[iPlayer].g_flSwingRatePassive = -1.0;
					g_esShooter[iPlayer].g_iSyringeDartsPassive = -1;
					g_esShooter[iPlayer].g_iThornsPassive = -1;
				}

				if (iPos < (sizeof esPlayer::g_flComboChance))
				{
					g_esPlayer[iPlayer].g_flComboChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iComboCooldown[iPos] = -1;
					g_esPlayer[iPlayer].g_flComboDamage[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboDeathChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboDeathRange[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboDelay[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboDuration[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboInterval[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboMaxRadius[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboMinRadius[iPos] = 1.0;
					g_esPlayer[iPlayer].g_flComboRange[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flComboRangeChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iComboRangeCooldown[iPos] = -1;
					g_esPlayer[iPlayer].g_flComboRockChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iComboRockCooldown[iPos] = -1;
					g_esPlayer[iPlayer].g_flComboSpeed[iPos] = -1.0;
				}

				if (iPos < (sizeof esPlayer::g_flComboTypeChance))
				{
					g_esPlayer[iPlayer].g_flComboTypeChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_flBodyChance[iPos] = -1.0;
				}

				if (iPos < (sizeof esPlayer::g_flPropsChance))
				{
					g_esPlayer[iPlayer].g_flPropsChance[iPos] = -1.0;
				}

				if (iPos < (sizeof esPlayer::g_iSkinColor))
				{
					g_esPlayer[iPlayer].g_flRockChance[iPos] = -1.0;
					g_esPlayer[iPlayer].g_iSkinColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iBossHealth[iPos] = -1;
					g_esPlayer[iPlayer].g_iBossType[iPos] = -1;
					g_esPlayer[iPlayer].g_iLightColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iOzTankColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iFlameColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iRockColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iTireColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iPropTankColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iFlashlightColor[iPos] = -1;
					g_esPlayer[iPlayer].g_iCrownColor[iPos] = -1;
				}

				if (iPos < (sizeof esPlayer::g_iGlowColor))
				{
					g_esPlayer[iPlayer].g_iGlowColor[iPos] = -1;
				}
			}

			g_esTeammate[iPlayer].g_sBoomerName[0] = '\0';
			g_esTeammate[iPlayer].g_sChargerName[0] = '\0';
			g_esTeammate[iPlayer].g_sGlowColor[0] = '\0';
			g_esTeammate[iPlayer].g_sHunterName[0] = '\0';
			g_esTeammate[iPlayer].g_sJockeyName[0] = '\0';
			g_esTeammate[iPlayer].g_sRockColor[0] = '\0';
			g_esTeammate[iPlayer].g_sSkinColor[0] = '\0';
			g_esTeammate[iPlayer].g_sSmokerName[0] = '\0';
			g_esTeammate[iPlayer].g_sSpitterName[0] = '\0';
			g_esTeammate[iPlayer].g_iSpecialNote = -1;
			g_esTeammate[iPlayer].g_iSpecialModel = -1;
			g_esTeammate[iPlayer].g_flBurnDuration = -1.0;
			g_esTeammate[iPlayer].g_flBurntSkin = -2.0;
			g_esTeammate[iPlayer].g_iDeathRevert = -1;
			g_esTeammate[iPlayer].g_iAnnounceArrival = -1;
			g_esTeammate[iPlayer].g_iAnnounceDeath = -1;
			g_esTeammate[iPlayer].g_iAnnounceKill = -1;
			g_esTeammate[iPlayer].g_iArrivalMessage = -1;
			g_esTeammate[iPlayer].g_iArrivalSound = -1;
			g_esTeammate[iPlayer].g_iDeathDetails = -1;
			g_esTeammate[iPlayer].g_iDeathMessage = -1;
			g_esTeammate[iPlayer].g_iDeathSound = -1;
			g_esTeammate[iPlayer].g_iKillMessage = -1;
			g_esTeammate[iPlayer].g_iVocalizeArrival = -1;
			g_esTeammate[iPlayer].g_iVocalizeDeath = -1;
			g_esTeammate[iPlayer].g_iDisplayHealth = -1;
			g_esTeammate[iPlayer].g_iDisplayHealthType = -1;
			g_esTeammate[iPlayer].g_sArmorCharacters[0] = '\0';
			g_esTeammate[iPlayer].g_flArmorPercentage = -1.0;
			g_esTeammate[iPlayer].g_flArmorResistance[0] = -1.0;
			g_esTeammate[iPlayer].g_sShieldCharacters[0] = '\0';
			g_esTeammate[iPlayer].g_flShieldPercentage = -1.0;
			g_esTeammate[iPlayer].g_flShieldRate = -1.0;
			g_esTeammate[iPlayer].g_flPassiveDelay = -1.0;
			g_esTeammate[iPlayer].g_iPassiveHealth = -1;
			g_esTeammate[iPlayer].g_flPassiveInterval = -1.0;
			g_esTeammate[iPlayer].g_sHealthCharacters[0] = '\0';
			g_esTeammate[iPlayer].g_flHealPercentMultiplier = -1.0;
			g_esTeammate[iPlayer].g_iHumanMultiplierMode = -1;
			g_esTeammate[iPlayer].g_iMinimumHumans = -1;
			g_esTeammate[iPlayer].g_iMultiplyHealth = -1;
			g_esTeammate[iPlayer].g_iSpawnProtection = -1;
			g_esTeammate[iPlayer].g_flArmorDuration = -1.0;
			g_esTeammate[iPlayer].g_flArmorResistance[1] = -1.0;
			g_esTeammate[iPlayer].g_flShieldDuration = -1.0;
			g_esTeammate[iPlayer].g_flShieldResistance = -1.0;
			g_esTeammate[iPlayer].g_iGlowEnabled = -1;
			g_esTeammate[iPlayer].g_iGlowFlashing = -1;
			g_esTeammate[iPlayer].g_iGlowMinRange = -1;
			g_esTeammate[iPlayer].g_iGlowMaxRange = -1;
			g_esTeammate[iPlayer].g_iGlowType = -1;
			g_esTeammate[iPlayer].g_iBossEffects = -1;
			g_esTeammate[iPlayer].g_iBossStages = -1;
			g_esTeammate[iPlayer].g_sComboSet[0] = '\0';
			g_esTeammate[iPlayer].g_iRandomSpecial = -1;
			g_esTeammate[iPlayer].g_flRandomDuration = -1.0;
			g_esTeammate[iPlayer].g_flRandomInterval = -1.0;
			g_esTeammate[iPlayer].g_flTransformDelay = -1.0;
			g_esTeammate[iPlayer].g_flTransformDuration = -1.0;
			g_esTeammate[iPlayer].g_iSpawnType = -1;
			g_esTeammate[iPlayer].g_iBodyEffects = -1;
			g_esTeammate[iPlayer].g_iRockEffects = -1;
			g_esTeammate[iPlayer].g_iRockModel = -1;
			g_esTeammate[iPlayer].g_flAttackInterval = -1.0;
			g_esTeammate[iPlayer].g_iAutoHop = -1;
			g_esTeammate[iPlayer].g_flClawDamage = -2.0;
			g_esTeammate[iPlayer].g_flHittableDamage = -2.0;
			g_esTeammate[iPlayer].g_flIncapDamageMultiplier = -1.0;
			g_esTeammate[iPlayer].g_iIntangibleBody = -1;
			g_esTeammate[iPlayer].g_iMeleeHitMode = -1;
			g_esTeammate[iPlayer].g_flMeleeHitValue = -1.0;
			g_esTeammate[iPlayer].g_flPinDamage = -2.0;
			g_esTeammate[iPlayer].g_flRunSpeed = -1.0;
			g_esTeammate[iPlayer].g_flSpecialInterval = -1.0;
			g_esTeammate[iPlayer].g_iThrowRock = -1;
			g_esTeammate[iPlayer].g_iBulletImmunity = -1;
			g_esTeammate[iPlayer].g_iExplosiveImmunity = -1;
			g_esTeammate[iPlayer].g_iFireImmunity = -1;
			g_esTeammate[iPlayer].g_iHittableImmunity = -1;
			g_esTeammate[iPlayer].g_iMeleeImmunity = -1;
			g_esTeammate[iPlayer].g_iVomitImmunity = -1;

			for (int iPos = 0; iPos < (sizeof esTeammate::g_iTransformType); iPos++)
			{
				g_esTeammate[iPlayer].g_iTransformType[iPos] = -1;

				if (iPos < (sizeof esTeammate::g_iBaseHealth))
				{
					g_esTeammate[iPlayer].g_iBaseHealth[iPos] = -1;
					g_esTeammate[iPlayer].g_iExtraHealth[iPos] = -1;
				}

				if (iPos < (sizeof esTeammate::g_iRewardEnabled))
				{
					g_esTeammate[iPlayer].g_iRewardEnabled[iPos] = -2;
					g_esTeammate[iPlayer].g_iRewardBots[iPos] = -2;
					g_esTeammate[iPlayer].g_flRewardChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flRewardDuration[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iRewardEffect[iPos] = -1;
					g_esTeammate[iPlayer].g_iRewardNotify[iPos] = -1;
					g_esTeammate[iPlayer].g_flRewardPercentage[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iRewardVisual[iPos] = -1;
					g_esTeammate[iPlayer].g_flActionDurationReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flAdrenalineTimeReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iAmmoBoostReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iAmmoRefillReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iAmmoRegenReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flAttackBoostReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iBlazeHealthReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iBloodDonorReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iBunnyHopReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iBurstDoorsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iCleanKillsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iClusterBombsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flDamageBoostReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flDamageResistanceReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flDopamineRadiusReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iEternalFlamesReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iFastRecoveryReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flFireRateReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iFriendlyFireReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iGhostBulletsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flGrenadeLauncherReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flHealPercentReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flHealthcareRadiusReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iHealthRegenReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flHeartbeatReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flHollowpointAmmoReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iInfiniteAmmoReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flJumpHeightReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iLadderActionsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flLadyKillerReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iLaserSightReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iLifeLeechReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flLoopingVoicelineInterval[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flLuckyBulletReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iMedicalCutsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iMeleeRangeReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iMidairDashesReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flMotivationRadiusReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flOverdoseRadiusReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iOverhealthReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iParticleEffectVisual[iPos] = -1;
					g_esTeammate[iPlayer].g_flPipeBombDurationReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iPrefsNotify[iPos] = -1;
					g_esTeammate[iPlayer].g_flPunchResistanceReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flRapidPistolReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iRecoilDampenerReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flRefillPercentReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iRegenBurstsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flReloadRateReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iRespawnLoadoutReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iReviveHealthReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iRiotGearReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iSafetyBubbleReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iShareRewards[iPos] = -1;
					g_esTeammate[iPlayer].g_flShockwaveRadiusReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flShoveDamageReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iShovePenaltyReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flShoveRateReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flSledgehammerRoundsReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iSpecialAmmoReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flSpeedBoostReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iStackRewards[iPos] = -1;
					g_esTeammate[iPlayer].g_iStickyGrenadesReward[iPos] = -1;
					g_esTeammate[iPlayer].g_flSupplierReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flSwingRateReward[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iSyringeDartsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iThornsReward[iPos] = -1;
					g_esTeammate[iPlayer].g_iUsefulRewards[iPos] = -1;
					g_esTeammate[iPlayer].g_iVoicePitchVisual[iPos] = -1;
				}

				if (iPos < (sizeof esTeammate::g_iStackLimits))
				{
					g_esTeammate[iPlayer].g_iStackLimits[iPos] = -1;
				}

				if (iPos < (sizeof esTeammate::g_flComboChance))
				{
					g_esTeammate[iPlayer].g_flComboChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iComboCooldown[iPos] = -1;
					g_esTeammate[iPlayer].g_flComboDamage[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboDeathChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboDeathRange[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboDelay[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboDuration[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboInterval[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboMaxRadius[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboMinRadius[iPos] = 1.0;
					g_esTeammate[iPlayer].g_flComboRange[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flComboRangeChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iComboRangeCooldown[iPos] = -1;
					g_esTeammate[iPlayer].g_flComboRockChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iComboRockCooldown[iPos] = -1;
					g_esTeammate[iPlayer].g_flComboSpeed[iPos] = -1.0;
				}

				if (iPos < (sizeof esTeammate::g_flComboTypeChance))
				{
					g_esTeammate[iPlayer].g_flComboTypeChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_flBodyChance[iPos] = -1.0;
				}

				if (iPos < (sizeof esTeammate::g_iSkinColor))
				{
					g_esTeammate[iPlayer].g_flRockChance[iPos] = -1.0;
					g_esTeammate[iPlayer].g_iSkinColor[iPos] = -1;
					g_esTeammate[iPlayer].g_iBossHealth[iPos] = -1;
					g_esTeammate[iPlayer].g_iBossType[iPos] = -1;
					g_esTeammate[iPlayer].g_iRockColor[iPos] = -1;
				}

				if (iPos < (sizeof esTeammate::g_iGlowColor))
				{
					g_esTeammate[iPlayer].g_iGlowColor[iPos] = -1;
				}
			}

			for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
			{
				g_esAdmin[iIndex].g_iAccessFlags[iPlayer] = 0;
				g_esAdmin[iIndex].g_iImmunityFlags[iPlayer] = 0;
			}
		}
	}

	Call_StartForward(g_esGeneral.g_gfConfigsLoadForward);
	Call_PushCell(g_esGeneral.g_iConfigMode);
	Call_Finish();
}

SMCResult SMCNewSection_Main(SMCParser smc, const char[] name, bool opt_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel)
	{
		g_esGeneral.g_iIgnoreLevel++;

		return SMCParse_Continue;
	}

	if (g_esGeneral.g_csState == ConfigState_None)
	{
		switch (StrEqual(name, MT_CONFIG_SECTION_MAIN, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN2, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN3, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN4, false) || StrEqual(name, MT_CONFIG_SECTION_MAIN5, false))
		{
			case true: g_esGeneral.g_csState = ConfigState_Start;
			case false: g_esGeneral.g_iIgnoreLevel++;
		}
	}
	else if (g_esGeneral.g_csState == ConfigState_Start)
	{
		if (StrEqual(name, MT_CONFIG_SECTION_SETTINGS, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS2, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS3, false) || StrEqual(name, MT_CONFIG_SECTION_SETTINGS4, false))
		{
			g_esGeneral.g_csState = ConfigState_Settings;

			strcopy(g_esGeneral.g_sCurrentSection, sizeof esGeneral::g_sCurrentSection, name);
		}
		else if (!strncmp(name, "Tank", 4, false) || name[0] == '#' || IsCharNumeric(name[0]) || StrEqual(name, "all", false) || FindCharInString(name, ',') != -1 || FindCharInString(name, '-') != -1)
		{
			g_esGeneral.g_csState = ConfigState_Type;

			strcopy(g_esGeneral.g_sCurrentSection, sizeof esGeneral::g_sCurrentSection, name);

			if (g_esGeneral.g_iConfigMode < 3 && (!strncmp(name, "Tank", 4, false) || name[0] == '#'))
			{
				int iStartPos = iGetConfigSectionNumber(g_esGeneral.g_sCurrentSection, sizeof esGeneral::g_sCurrentSection), iIndex = StringToInt(g_esGeneral.g_sCurrentSection[iStartPos]);
				for (int iType = g_esGeneral.g_iTypeCounter[0]; iType <= g_esGeneral.g_iTotalTypes[0]; iType++)
				{
					if (iType <= 0 || g_esTank[iType].g_iRealType[0] != iIndex)
					{
						continue;
					}

					g_esTank[iIndex].g_bDuplicateType[0] = true;

					vLogMessage(MT_LOG_SERVER, _, "%s A duplicate entry was found for \"%s\".", MT_TAG, g_esGeneral.g_sCurrentSection);
				}

				if (iIndex > MT_MAXTYPES || g_esGeneral.g_iTotalTypes[0] > MT_MAXTYPES)
				{
					vLogMessage(MT_LOG_SERVER, _, "%s An entry (%s) was found that exceeds the limit (%i).", MT_TAG, g_esGeneral.g_sCurrentSection, MT_MAXTYPES);
				}

				if (!g_esTank[iIndex].g_bRecordedType[0])
				{
					if (!g_esTank[iIndex].g_bDuplicateType[0])
					{
						g_esTank[iIndex].g_bRecordedType[0] = true;
						g_esGeneral.g_iTypeCounter[0]++;

						if (g_esGeneral.g_iTypeCounter[0] <= MT_MAXTYPES)
						{
							g_esTank[g_esGeneral.g_iTypeCounter[0]].g_iRealType[0] = iIndex;
						}
					}

					if (iIndex <= MT_MAXTYPES)
					{
						g_esTank[iIndex].g_iRecordedType[0] = g_esGeneral.g_iTypeCounter[0];
						g_esGeneral.g_iTotalTypes[0] = g_esGeneral.g_iTypeCounter[0];
					}
				}
			}
		}
		else if (!strncmp(name, "STEAM_", 6, false) || !strncmp("0:", name, 2) || !strncmp("1:", name, 2) || (!strncmp(name, "[U:", 3) && name[strlen(name) - 1] == ']'))
		{
			g_esGeneral.g_csState = ConfigState_Admin;

			strcopy(g_esGeneral.g_sCurrentSection, sizeof esGeneral::g_sCurrentSection, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel++;
		}
	}
	else if (g_esGeneral.g_csState == ConfigState_Settings || g_esGeneral.g_csState == ConfigState_Type || g_esGeneral.g_csState == ConfigState_Admin)
	{
		g_esGeneral.g_csState = ConfigState_Specific;

		strcopy(g_esGeneral.g_sCurrentSubSection, sizeof esGeneral::g_sCurrentSubSection, name);

		if (!strncmp(name, "Tank", 4, false) || name[0] == '#')
		{
			int iStartPos = iGetConfigSectionNumber(g_esGeneral.g_sCurrentSubSection, sizeof esGeneral::g_sCurrentSubSection), iIndex = StringToInt(g_esGeneral.g_sCurrentSubSection[iStartPos]);
			for (int iType = g_esGeneral.g_iTypeCounter[1]; iType <= g_esGeneral.g_iTotalTypes[1]; iType++)
			{
				if (iType <= 0 || g_esTank[iType].g_iRealType[1] != iIndex)
				{
					continue;
				}

				g_esTank[iIndex].g_bDuplicateType[1] = true;

				vLogMessage(MT_LOG_SERVER, _, "%s A duplicate entry was found for \"%s\".", MT_TAG, g_esGeneral.g_sCurrentSubSection);
			}

			if (iIndex > MT_MAXTYPES || g_esGeneral.g_iTotalTypes[1] > MT_MAXTYPES)
			{
				vLogMessage(MT_LOG_SERVER, _, "%s An entry (%s) was found that exceeds the limit (%i).", MT_TAG, g_esGeneral.g_sCurrentSubSection, MT_MAXTYPES);
			}

			if (!g_esTank[iIndex].g_bRecordedType[1])
			{
				if (!g_esTank[iIndex].g_bDuplicateType[1])
				{
					g_esTank[iIndex].g_bRecordedType[1] = true;
					g_esGeneral.g_iTypeCounter[1]++;

					if (g_esGeneral.g_iTypeCounter[1] <= MT_MAXTYPES)
					{
						g_esTank[g_esGeneral.g_iTypeCounter[1]].g_iRealType[1] = iIndex;
					}
				}

				if (iIndex <= MT_MAXTYPES)
				{
					g_esTank[iIndex].g_iRecordedType[1] = g_esGeneral.g_iTypeCounter[1];
					g_esGeneral.g_iTotalTypes[1] = g_esGeneral.g_iTypeCounter[1];
				}
			}
		}
	}
	else if (g_esGeneral.g_csState == ConfigState_Specific)
	{
		if (StrContains(name, MT_CONFIG_SECTION_NICK, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ROCHELLE, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ELLIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_COACH, false) != -1 || StrContains(name, MT_CONFIG_SECTION_BILL, false) != -1 || StrContains(name, MT_CONFIG_SECTION_ZOEY, false) != -1 || StrContains(name, MT_CONFIG_SECTION_FRANCIS, false) != -1
			|| StrContains(name, MT_CONFIG_SECTION_LOUIS, false) != -1 || StrContains(name, MT_CONFIG_SECTION_WEAPON, false) != -1 || StrContains(name, MT_CONFIG_SECTION_SMOKER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_BOOMER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_HUNTER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_SPITTER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_JOCKEY, false) != -1
			|| StrContains(name, MT_CONFIG_SECTION_CHARGER, false) != -1 || StrContains(name, MT_CONFIG_SECTION_WITCH, false) != -1 || StrContains(name, MT_CONFIG_SECTION_COMMON, false) != -1 || StrEqual(name, MT_CONFIG_SECTION_SPECIAL, false) || StrContains(name, MT_CONFIG_SECTION_SPECIAL2, false) != -1 || StrEqual(name, MT_CONFIG_SECTION_MOB, false) || StrEqual(name, MT_CONFIG_SECTION_INFECTED, false) || StrContains(name, MT_CONFIG_SECTION_INFECTED2, false) != -1)
		{
			g_esGeneral.g_csState = ConfigState_Special;

			strcopy(g_esGeneral.g_sCurrentSpecSection, sizeof esGeneral::g_sCurrentSpecSection, name);
		}
		else
		{
			g_esGeneral.g_iIgnoreLevel++;
		}
	}
	else
	{
		g_esGeneral.g_iIgnoreLevel++;
	}

	return SMCParse_Continue;
}

SMCResult SMCKeyValues_Main(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)
{
	if (g_esGeneral.g_iIgnoreLevel)
	{
		return SMCParse_Continue;
	}

	if (value[0] != '\0')
	{
		if (g_esGeneral.g_csState == ConfigState_Specific)
		{
			if ((g_esGeneral.g_iConfigMode < 3) || (g_esGeneral.g_iConfigMode == 3 && (!strncmp(g_esGeneral.g_sCurrentSection, "STEAM_", 6, false) || !strncmp("0:", g_esGeneral.g_sCurrentSection, 2) || !strncmp("1:", g_esGeneral.g_sCurrentSection, 2) || (!strncmp(g_esGeneral.g_sCurrentSection, "[U:", 3) && g_esGeneral.g_sCurrentSection[strlen(g_esGeneral.g_sCurrentSection) - 1] == ']'))))
			{
				vSetTankSettings(g_esGeneral.g_iConfigMode, g_esGeneral.g_sCurrentSection, g_esGeneral.g_sCurrentSubSection, key, value);
			}
		}
		else if (g_esGeneral.g_csState == ConfigState_Special)
		{
			if ((g_esGeneral.g_iConfigMode < 3) || (g_esGeneral.g_iConfigMode == 3 && (!strncmp(g_esGeneral.g_sCurrentSection, "STEAM_", 6, false) || !strncmp("0:", g_esGeneral.g_sCurrentSection, 2) || !strncmp("1:", g_esGeneral.g_sCurrentSection, 2) || (!strncmp(g_esGeneral.g_sCurrentSection, "[U:", 3) && g_esGeneral.g_sCurrentSection[strlen(g_esGeneral.g_sCurrentSection) - 1] == ']'))))
			{
				vSetSpecialSettings(g_esGeneral.g_iConfigMode, g_esGeneral.g_sCurrentSection, g_esGeneral.g_sCurrentSubSection, g_esGeneral.g_sCurrentSpecSection, key, value);
			}
		}
	}

	return SMCParse_Continue;
}

SMCResult SMCEndSection_Main(SMCParser smc)
{
	if (g_esGeneral.g_iIgnoreLevel)
	{
		g_esGeneral.g_iIgnoreLevel--;

		return SMCParse_Continue;
	}

	if (g_esGeneral.g_csState == ConfigState_Special)
	{
		g_esGeneral.g_csState = ConfigState_Specific;
	}
	else if (g_esGeneral.g_csState == ConfigState_Specific)
	{
		if (StrEqual(g_esGeneral.g_sCurrentSection, MT_CONFIG_SECTION_SETTINGS, false) || StrEqual(g_esGeneral.g_sCurrentSection, MT_CONFIG_SECTION_SETTINGS2, false) || StrEqual(g_esGeneral.g_sCurrentSection, MT_CONFIG_SECTION_SETTINGS3, false) || StrEqual(g_esGeneral.g_sCurrentSection, MT_CONFIG_SECTION_SETTINGS4, false))
		{
			g_esGeneral.g_csState = ConfigState_Settings;
		}
		else if (!strncmp(g_esGeneral.g_sCurrentSection, "Tank", 4, false) || g_esGeneral.g_sCurrentSection[0] == '#' || IsCharNumeric(g_esGeneral.g_sCurrentSection[0]) || StrEqual(g_esGeneral.g_sCurrentSection, "all", false) || FindCharInString(g_esGeneral.g_sCurrentSection, ',') != -1 || FindCharInString(g_esGeneral.g_sCurrentSection, '-') != -1)
		{
			g_esGeneral.g_csState = ConfigState_Type;
		}
		else if (!strncmp(g_esGeneral.g_sCurrentSection, "STEAM_", 6, false) || !strncmp("0:", g_esGeneral.g_sCurrentSection, 2) || !strncmp("1:", g_esGeneral.g_sCurrentSection, 2) || (!strncmp(g_esGeneral.g_sCurrentSection, "[U:", 3) && g_esGeneral.g_sCurrentSection[strlen(g_esGeneral.g_sCurrentSection) - 1] == ']'))
		{
			g_esGeneral.g_csState = ConfigState_Admin;
		}
	}
	else if (g_esGeneral.g_csState == ConfigState_Settings || g_esGeneral.g_csState == ConfigState_Type || g_esGeneral.g_csState == ConfigState_Admin)
	{
		g_esGeneral.g_csState = ConfigState_Start;
	}
	else if (g_esGeneral.g_csState == ConfigState_Start)
	{
		g_esGeneral.g_csState = ConfigState_None;
	}

	return SMCParse_Continue;
}

SMCResult SMCRawLine_Main(SMCParser smc, const char[] line, int lineno)
{
	g_esGeneral.g_iCurrentLine = lineno;

	return SMCParse_Continue;
}

void SMCParseEnd_Main(SMCParser smc, bool halted, bool failed)
{
	g_esGeneral.g_csState = ConfigState_None;
	g_esGeneral.g_iIgnoreLevel = 0;
	g_esGeneral.g_sCurrentSection[0] = '\0';
	g_esGeneral.g_sCurrentSpecSection[0] = '\0';
	g_esGeneral.g_sCurrentSubSection[0] = '\0';

	vClearAbilityList();

	for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
	{
		if (bIsValidClient(iPlayer))
		{
			vCacheTankSettings(iPlayer);
			vCacheSurvivorSettings(iPlayer);
		}
	}

	int iCycleType = iGetCycleType(8);
	if (iCycleType > 0 && (iCycleType % 2 != 0 || (iCycleType % 2 == 0 && !g_esGeneral.g_bSameMission)))
	{
		for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
		{
			g_esTank[iIndex].g_bTypeCycled = false;
			g_esTank[iIndex].g_bTypeCycled2 = false;
		}
	}

	iCycleType = iGetCycleType(MT_GetRandomInt(1, 6));
	if (iCycleType > 0 && (iCycleType % 2 != 0 || (iCycleType % 2 == 0 && !g_esGeneral.g_bSameMission)))
	{
		for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
		{
			for (int iSpecType = 0; iSpecType < (sizeof g_sSpecialNames); iSpecType++)
			{
				g_esSpecial[iIndex].g_bTypeCycled[iSpecType] = false;
				g_esSpecial[iIndex].g_bTypeCycled2[iSpecType] = false;
			}
		}
	}
}

/**
 * Logging functions
 **/

void vLogCommand(int admin, int type, const char[] activity, any ...)
{
	if (g_esGeneral.g_iLogCommands & type)
	{
		char sMessage[PLATFORM_MAX_PATH];
		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			if (bIsValidClient(iPlayer, MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) && CheckCommandAccess(iPlayer, "sm_admin", ADMFLAG_ROOT, true) && iPlayer != admin)
			{
				SetGlobalTransTarget(iPlayer);
				VFormat(sMessage, sizeof sMessage, activity, 4);
				MT_PrintToChat(iPlayer, sMessage);
			}
		}
	}
}

void vLogMessage(int type, bool timestamp = true, const char[] message, any ...)
{
	if (type <= -1 || (g_esGeneral.g_iLogMessages & type))
	{
		Action aResult = Plugin_Continue;
		Call_StartForward(g_esGeneral.g_gfLogMessageForward);
		Call_PushCell(type);
		Call_PushString(message);
		Call_Finish(aResult);

		switch (aResult)
		{
			case Plugin_Handled: return;
			case Plugin_Continue:
			{
				char sBuffer[2048], sMessage[2048];
				SetGlobalTransTarget(LANG_SERVER);
				strcopy(sMessage, sizeof sMessage, message);
				VFormat(sBuffer, sizeof sBuffer, sMessage, 4);
				MT_ReplaceChatPlaceholders(sBuffer, sizeof sBuffer, true);

				switch (timestamp)
				{
					case true:
					{
						char sTime[32];
						FormatTime(sTime, sizeof sTime, "%Y-%m-%d - %H:%M:%S", GetTime());
						FormatEx(sMessage, sizeof sMessage, "[%s] %s", sTime, sBuffer);
						vSaveMessage(sMessage);
					}
					case false: vSaveMessage(sBuffer);
				}

				PrintToServer(sBuffer);
			}
		}
	}
}

void vSaveMessage(const char[] message)
{
	File fLog = OpenFile(g_esGeneral.g_sLogFile, "a");
	if (fLog != null)
	{
		fLog.WriteLine(message);

		delete fLog;
	}
}

void vToggleLogging(int type = -1)
{
	char sMessage[PLATFORM_MAX_PATH], sMap[128], sTime[32], sDate[32];
	GetCurrentMap(sMap, sizeof sMap);
	FormatTime(sTime, sizeof sTime, "%m/%d/%Y %H:%M:%S", GetTime());
	FormatTime(sDate, sizeof sDate, "%Y-%m-%d", GetTime());
	BuildPath(Path_SM, g_esGeneral.g_sLogFile, sizeof esGeneral::g_sLogFile, "logs/mutant_tanks_%s.log", sDate);

	bool bLog = false;
	int iType = 0;

	switch (type)
	{
		case -1:
		{
			if (g_esGeneral.g_iLogMessages != iType)
			{
				bLog = true;
				iType = g_esGeneral.g_iLogMessages;

				FormatEx(sMessage, sizeof sMessage, "%T", ((iType != 0) ? "LogStarted" : "LogEnded"), LANG_SERVER, sTime, sMap);
			}
		}
		case 0, 1:
		{
			if (g_esGeneral.g_iLogMessages != 0)
			{
				bLog = true;
				iType = g_esGeneral.g_iLogMessages;

				FormatEx(sMessage, sizeof sMessage, "%T", ((type == 1) ? "LogStarted" : "LogEnded"), LANG_SERVER, sTime, sMap);
			}
		}
	}

	if (bLog)
	{
		int iLength = strlen(sMessage), iSize = (iLength + 1);
		char[] sBorder = new char[iSize];
		StrCat(sBorder, iLength, "--");
		for (int iPos = 0; iPos < (iLength - 4); iPos++)
		{
			StrCat(sBorder, iSize, "=");
		}

		StrCat(sBorder, iSize, "--");
		vSaveMessage(sBorder);
		vSaveMessage(sMessage);
		vSaveMessage(sBorder);
	}
}

/**
 * RequestFrame callbacks
 **/

void vDetonateRockFrame(int ref)
{
	int iRock = EntRefToEntIndex(ref);
	if (bIsValidEntity(iRock) && g_esGeneral.g_hSDKRockDetonate != null)
	{
		SDKCall(g_esGeneral.g_hSDKRockDetonate, iRock);
	}
}

void vInfectedTransmitFrame(int ref)
{
	int iCommon = EntRefToEntIndex(ref);
	if (bIsValidEntity(iCommon))
	{
		SDKHook(iCommon, SDKHook_SetTransmit, OnInfectedSetTransmit);
	}
}

void vPipeBombSpawnFrame(int ref)
{
	int iGrenade = EntRefToEntIndex(ref);
	if (bIsValidEntity(iGrenade))
	{
		int iThrower = GetEntPropEnt(iGrenade, Prop_Data, "m_hThrower");
		if (bIsSurvivor(iThrower) && (bIsDeveloper(iThrower, 5) || bIsDeveloper(iThrower, 7) || (((g_esShooter[iThrower].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[iThrower].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[iThrower].g_iStickyGrenades == 1)))
		{
			g_esGeneral.g_flStickyDelay[iGrenade] = GetGameTime();

			SDKHook(iGrenade, SDKHook_Touch, OnPipeBombTouch);
		}
	}
}

void vPlayerSpawnFrame(DataPack pack)
{
	pack.Reset();
	int iPlayer = GetClientOfUserId(pack.ReadCell()), iType = pack.ReadCell(), iSpecType = pack.ReadCell();
	bool bBlind = pack.ReadCell();
	delete pack;

	if (bIsSurvivor(iPlayer))
	{
		g_esShooter[iPlayer].g_iCharacterType[0] = -1;
		g_esShooter[iPlayer].g_iNotify = 0;
		g_esShooter[iPlayer].g_iPassiveTypes = 0;
		g_esShooter[iPlayer].g_iTotalPassives = 0;

		delete g_esShooter[iPlayer].g_hCharacterTimer;

		g_esShooter[iPlayer].g_hCharacterTimer = CreateTimer(1.0, tTimerCheckCharacter, GetClientUserId(iPlayer), TIMER_REPEAT);

		if (!g_esPlayer[iPlayer].g_bSetup)
		{
			g_esPlayer[iPlayer].g_bSetup = true;

			if (bIsDeveloper(iPlayer))
			{
				vSetupDeveloper(iPlayer, .usual = true);
			}
		}

		if (!bIsDeveloper(iPlayer, 1))
		{
			char sDelimiter[2];
			float flCurrentTime = GetGameTime();
			if (g_esPlayer[iPlayer].g_flVisualTime[4] != -1.0 && g_esPlayer[iPlayer].g_flVisualTime[4] > flCurrentTime)
			{
				sDelimiter = (FindCharInString(g_esPlayer[iPlayer].g_sLightColor, ';') != -1) ? ";" : ",";
				vSetSurvivorLight(iPlayer, g_esPlayer[iPlayer].g_sLightColor, g_esPlayer[iPlayer].g_bApplyVisuals[4], sDelimiter, true);
			}

			if (g_esPlayer[iPlayer].g_flVisualTime[5] != -1.0 && g_esPlayer[iPlayer].g_flVisualTime[5] > flCurrentTime)
			{
				sDelimiter = (FindCharInString(g_esPlayer[iPlayer].g_sBodyColor, ';') != -1) ? ";" : ",";
				vSetSurvivorColor(iPlayer, g_esPlayer[iPlayer].g_sBodyColor, g_esPlayer[iPlayer].g_bApplyVisuals[5], sDelimiter, true);
			}

			if (g_esPlayer[iPlayer].g_flVisualTime[6] != -1.0 && g_esPlayer[iPlayer].g_flVisualTime[6] > flCurrentTime)
			{
				sDelimiter = (FindCharInString(g_esPlayer[iPlayer].g_sOutlineColor, ';') != -1) ? ";" : ",";
				vSetSurvivorOutline(iPlayer, g_esPlayer[iPlayer].g_sOutlineColor, g_esPlayer[iPlayer].g_bApplyVisuals[6], sDelimiter, true);
			}
		}
		else if (g_esDeveloper[iPlayer].g_iDevAccess == 1)
		{
			vSetupPerks(iPlayer);
		}

		vRefillGunAmmo(iPlayer, .reset = true);
		vRefreshLaserSight(iPlayer);
	}
	else if (bIsInfected(iPlayer) && !g_esPlayer[iPlayer].g_bFirstSpawn)
	{
		if (g_bSecondGame && bIsTank(iPlayer))
		{
			g_esPlayer[iPlayer].g_bStasis = bIsTankInStasis(iPlayer) || (g_esGeneral.g_hSDKIsInStasis != null && SDKCall(g_esGeneral.g_hSDKIsInStasis, iPlayer));

			if (g_esGeneral.g_flIdleCheck > 0.0)
			{
				CreateTimer(g_esGeneral.g_flIdleCheck, tTimerKillIdleTank, GetClientUserId(iPlayer), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
			}
		}

		if (g_esPlayer[iPlayer].g_bStasis && g_esGeneral.g_iStasisMode == 1 && g_esGeneral.g_hSDKLeaveStasis != null)
		{
			SDKCall(g_esGeneral.g_hSDKLeaveStasis, iPlayer);
		}

		g_esPlayer[iPlayer].g_bFirstSpawn = true;

		if (g_esPlayer[iPlayer].g_bDied)
		{
			g_esPlayer[iPlayer].g_bDied = false;
			g_esPlayer[iPlayer].g_iOldTankType = 0;
			g_esPlayer[iPlayer].g_iTankType = 0;
		}

		if (g_esGeneral.g_bForceSpawned)
		{
			g_esPlayer[iPlayer].g_bArtificial = true;
		}

		switch (iType)
		{
			case 0:
			{
				switch (bIsInfected(iPlayer, MT_CHECK_FAKECLIENT))
				{
					case true:
					{
						if (g_esGeneral.g_iSpawnMode != 2)
						{
							vMutantMenu(iPlayer, iSpecType);
						}

						if (g_esGeneral.g_iSpawnMode != 0 && g_esGeneral.g_iSpawnMode != 3)
						{
							vMutateTank(iPlayer, iSpecType, iType, bBlind);
						}
					}
					case false: vMutateTank(iPlayer, iSpecType, iType, bBlind);
				}
			}
			default: vMutateTank(iPlayer, iSpecType, iType, bBlind);
		}
	}
}

void vPummelTeleportFrame(DataPack pack)
{
	pack.Reset();
	int iSurvivor = GetClientOfUserId(pack.ReadCell()), iSpecial = GetClientOfUserId(pack.ReadCell());
	delete pack;

	if (bIsValidClient(iSurvivor) && bIsValidClient(iSpecial))
	{
		SetVariantString("!activator");
		AcceptEntityInput(iSurvivor, "SetParent", iSpecial);
		TeleportEntity(iSurvivor, view_as<float>({50.0, 0.0, 0.0}), NULL_VECTOR, NULL_VECTOR);
		AcceptEntityInput(iSurvivor, "ClearParent");
	}
}

void vRespawnFrame(int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (g_esGeneral.g_bPluginEnabled && bIsSurvivor(iSurvivor, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsDeveloper(iSurvivor, 10))
	{
		bRespawnSurvivor(iSurvivor, true);
	}
}

void vRockThrowFrame(int ref)
{
	int iRock = EntRefToEntIndex(ref);
	if (g_esGeneral.g_bPluginEnabled && bIsValidEntity(iRock))
	{
		int iThrower = GetEntPropEnt(iRock, Prop_Data, "m_hThrower");
		if (bIsSpecialSupported(iThrower) && bIsInfectedEnabled(iThrower) && bHasCoreAdminAccess(iThrower) && !bIsInfectedIdle(iThrower))
		{
			vSetRockModel(iThrower, iRock);
			vSetRockEffects(iThrower, iRock);
			vSetRockColor(iThrower, iRock);
			vRockThrowForward(iThrower, iRock);
			vCombineAbilitiesForward(iThrower, MT_COMBO_ROCKTHROW, .weapon = iRock);
		}
	}
}

void vTankSpawnFrame(DataPack pack)
{
	pack.Reset();
	int iTank = GetClientOfUserId(pack.ReadCell()), iMode = pack.ReadCell(), iSpecType = pack.ReadCell();
	delete pack;

	if (bIsSpecialSupported(iTank) && bHasCoreAdminAccess(iTank))
	{
		if ((g_esShooter[iTank].g_bSurvivor && g_esShooter[iTank].g_bMixTypes) || g_esShooter[iTank].g_bProduced)
		{
			int iTypeCount = 0, iTankTypes[MT_MAXTYPES + 1];
			for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
			{
				if (g_esShooter[iTank].g_bInfected[iIndex])
				{
					iTankTypes[iTypeCount + 1] = iIndex;
					iTypeCount++;

					vCacheTankSettings(iTank, iIndex, true);
				}
			}

			if (iTypeCount > 0)
			{
				int iChosenType = iTankTypes[MT_GetRandomInt(1, iTypeCount)];
				vCacheTankSettings(iTank, iChosenType, .visualsOnly = true);

				g_esShooter[iTank].g_bInfected[iChosenType] = false;
			}
		}

		if (!bIsInfectedGhost(iTank) && !g_esPlayer[iTank].g_bStasis)
		{
			g_esPlayer[iTank].g_bKeepCurrentType = false;
			g_esPlayer[iTank].g_flLastAttackTime = GetGameTime();

			char sOldName[33], sNewName[33];
			vGetTankTranslatedName(sOldName, sizeof sOldName, .type = g_esPlayer[iTank].g_iOldTankType, .specType = iSpecType, .survivor = g_esShooter[iTank].g_bSurvivor, .character = g_esShooter[iTank].g_iCharacter);
			vGetTankTranslatedName(sNewName, sizeof sNewName, .type = g_esPlayer[iTank].g_iTankType, .specType = iSpecType, .survivor = g_esShooter[iTank].g_bSurvivor, .character = g_esShooter[iTank].g_iCharacter);
			vSetTankName(iTank, sOldName, sNewName, iMode, iSpecType);

			vSetupTankParticleEffects(iTank);
			vSetTankProps(iTank);
			vCacheTankSettings(iTank);
			vResetTankSpeed(iTank, false);
			vSetTankThrowInterval(iTank);

			SDKHook(iTank, SDKHook_PostThinkPost, OnTankPostThinkPost);

			Call_StartForward(g_esGeneral.g_gfPostTankSpawnForward);
			Call_PushCell(iTank);
			Call_Finish();

			vCombineAbilitiesForward(iTank, MT_COMBO_POSTSPAWN);
		}

		switch (iMode)
		{
			case -1:
			{
				vSetTankRainbowColor(iTank);
				vSpawnMessages(iTank, iSpecType);
			}
			case 0:
			{
				if (!bIsCustomTank(iTank) && !bIsInfectedGhost(iTank))
				{
					vSetTankHealth(iTank);
					vSpawnMessages(iTank, iSpecType);

					if (bIsTank(iTank))
					{
						g_esGeneral.g_iTankCount++;
					}
					else if (bIsSpecialInfected(iTank))
					{
						g_esGeneral.g_iSpecialCount++;
					}
				}

				g_esPlayer[iTank].g_iSpecialMaxHealth = GetEntProp(iTank, Prop_Data, "m_iMaxHealth");
			}
			case 5: vSetTankHealth(iTank, false);
		}
	}
}
#if defined _WeaponHandling_included
void vWeaponPassiveFrame(DataPack pack)
{
	pack.Reset();
	int iSurvivor = GetClientOfUserId(pack.ReadCell()), iWeapon = EntRefToEntIndex(pack.ReadCell()), iType = pack.ReadCell();
	delete pack;

	if (!bIsSurvivor(iSurvivor) || !bIsValidEntity(iWeapon))
	{
		return;
	}

	char sClassname[32], sTest[34], sTests[322];
	GetEntityClassname(iWeapon, sClassname, sizeof sClassname);
	if (!StrEqual(g_esShooter[iSurvivor].g_sLastWeapon, sClassname))
	{
		if (iType != 2)
		{
			if (g_esShooter[iSurvivor].g_sLastWeapon[0] != '\0')
			{
				int iOldIndex = view_as<int>(GetWeaponTypeFromClassname(g_esShooter[iSurvivor].g_sLastWeapon));
				for (int iIndex = 101; iIndex <= g_esGeneral.g_iMaxWeapons; iIndex++)
				{
					FormatEx(sTests, sizeof sTests, ",%s,", g_esWeapon[iIndex].g_sWeaponName);
					FormatEx(sTest, sizeof sTest, ",%s,", g_esShooter[iSurvivor].g_sLastWeapon);
					iOldIndex = ((StrContains(sTests, sTest, false) != -1) ? iIndex : -1);
					if (iOldIndex == -1)
					{
						continue;
					}

					vToggleSurvivorPassive(iSurvivor, g_esWeapon[iOldIndex].g_iPassiveTypes, false, true, iOldIndex);
				}

				vCheckSurvivorPassive(iSurvivor);
			}
		}

		if (iType != 1)
		{
			int iNewIndex = view_as<int>(GetWeaponTypeFromClassname(sClassname));

			switch (StrEqual(sClassname, "weapon_melee"))
			{
				case true: GetEntPropString(iWeapon, Prop_Data, "m_strMapSetScriptName", sClassname, sizeof sClassname);
				case false: strcopy(g_esShooter[iSurvivor].g_sLastWeapon, sizeof esShooter::g_sLastWeapon, sClassname);
			}

			vCheckSurvivorPassive(iSurvivor);

			for (int iIndex = 101; iIndex <= g_esGeneral.g_iMaxWeapons; iIndex++)
			{
				FormatEx(sTests, sizeof sTests, ",%s,", g_esWeapon[iIndex].g_sWeaponName);
				FormatEx(sTest, sizeof sTest, ",%s,", sClassname);
				iNewIndex = ((StrContains(sTests, sTest, false) != -1) ? iIndex : -1);
				if (iNewIndex == -1)
				{
					continue;
				}

				vSetupWeaponPassives(iSurvivor, iNewIndex);

				if (iNewIndex > 0)
				{
					strcopy(g_esShooter[iSurvivor].g_sLastWeapon, sizeof esShooter::g_sLastWeapon, sClassname);
				}
			}
		}
	}
}
#endif
void vWeaponSkinFrame(int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (bIsSurvivor(iSurvivor) && bIsDeveloper(iSurvivor, 2))
	{
		vSetSurvivorWeaponSkin(iSurvivor);
	}
}

/**
 * SDHooks & SDKTools callbacks
 **/

// OnTakeDamage hooks

Action OnCombineTakeDamage(int victim, int &attacker, int &inflictor, float &damage, int &damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && bIsValidClient(victim) && damage > 0.0)
	{
		char sClassname[32];
		GetEntityClassname(inflictor, sClassname, sizeof sClassname);
		if (bIsSpecialSupported(attacker) && bIsSurvivor(victim))
		{
			if (!bHasCoreAdminAccess(attacker) || bIsCoreAdminImmune(victim, attacker))
			{
				return Plugin_Continue;
			}

			bool bCaught = bIsSurvivorCaught(victim);
			if ((bIsSpecialInfected(attacker) && (bCaught || (!bCaught && (damagetype & DMG_CLUB)) || (bIsSpitter(attacker) && StrEqual(sClassname, "insect_swarm")))) || StrEqual(sClassname[7], "tank_claw") || StrEqual(sClassname, "tank_rock"))
			{
				vCombineAbilitiesForward(attacker, MT_COMBO_MELEEHIT, victim, .classname = sClassname);
			}
		}
		else if (bIsSpecialSupported(victim) && bIsSurvivor(attacker))
		{
			if (!bHasCoreAdminAccess(victim) || bIsCoreAdminImmune(attacker, victim))
			{
				return Plugin_Continue;
			}

			if (StrEqual(sClassname[7], "melee"))
			{
				vCombineAbilitiesForward(victim, MT_COMBO_MELEEHIT, attacker, .classname = sClassname);
			}
		}
	}

	return Plugin_Continue;
}

Action OnFriendlyTakeDamage(int victim, int &attacker, int &inflictor, float &damage, int &damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && damage > 0.0)
	{
		if (bIsSurvivor(victim) && bIsSurvivor(attacker))
		{
			if ((bIsDeveloper(victim, 4) || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[victim].g_iFriendlyFire == 1)) || (bIsDeveloper(attacker, 4) || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[attacker].g_iFriendlyFire == 1)))
			{
				return Plugin_Handled;
			}
		}
		else if (bIsValidClient(attacker, MT_CHECK_INDEX) && bIsValidEntity(inflictor) && (g_esGeneral.g_iTeamID2[inflictor] == 2 || (g_esGeneral.g_iTeamID2[inflictor] == 2 && damagetype == 134217792)))
		{
			if ((bIsDeveloper(victim, 4) || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[victim].g_iFriendlyFire == 1)) && GetClientTeam(victim) == 2 && GetClientTeam(attacker) != 2)
			{
				if (damagetype == 134217792)
				{
					char sClassname[5];
					GetEntityClassname(inflictor, sClassname, sizeof sClassname);
					if (StrEqual(sClassname, "pipe"))
					{
						return Plugin_Handled;
					}
				}

				return Plugin_Handled;
			}
		}
		else if (attacker == inflictor && bIsValidEntity(inflictor) && (g_esGeneral.g_iTeamID2[inflictor] == 2 || (g_esGeneral.g_iTeamID2[inflictor] == 2 && damagetype == 134217792)) && GetClientTeam(victim) == 2)
		{
			if (damagetype == 134217792)
			{
				char sClassname[5];
				GetEntityClassname(inflictor, sClassname, sizeof sClassname);
				if (StrEqual(sClassname, "pipe") && (bIsDeveloper(victim, 4) || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[victim].g_iFriendlyFire == 1)))
				{
					return Plugin_Handled;
				}
			}
			else
			{
				attacker = GetEntPropEnt(inflictor, Prop_Data, "m_hOwnerEntity");
				if ((bIsDeveloper(victim, 4) || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[victim].g_iFriendlyFire == 1)) && (attacker == -1 || (bIsValidClient(attacker, MT_CHECK_INDEX) && (!IsClientInGame(attacker) || GetClientUserId(attacker) != g_esPlayer[attacker].g_iUserID2))))
				{
					return Plugin_Handled;
				}
			}
		}
	}

	return Plugin_Continue;
}

Action OnInfectedTakeDamage(int victim, int &attacker, int &inflictor, float &damage, int &damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && (bIsInfected(victim) || bIsCommonInfected(victim) || bIsWitch(victim)) && damage > 0.0)
	{
		if (attacker == inflictor && bIsValidEntity(inflictor) && g_esGeneral.g_iTeamID[inflictor] == 3)
		{
			attacker = GetEntPropEnt(inflictor, Prop_Data, "m_hOwnerEntity");
			if (attacker == -1 || (bIsValidClient(attacker, MT_CHECK_INDEX) && (!IsClientInGame(attacker) || GetClientUserId(attacker) != g_esPlayer[attacker].g_iUserID)))
			{
				vRemovePlayerDamage(victim, damagetype);

				return Plugin_Handled;
			}
		}
		else if (bIsValidClient(attacker, MT_CHECK_INDEX))
		{
			if (g_esGeneral.g_iTeamID[inflictor] == 3 && (!IsClientInGame(attacker) || GetClientUserId(attacker) != g_esPlayer[attacker].g_iUserID || GetClientTeam(attacker) != 3))
			{
				vRemovePlayerDamage(victim, damagetype);

				return Plugin_Handled;
			}
		}
	}

	return Plugin_Continue;
}

Action OnPlayerTakeDamageAlive(int victim, int &attacker, int &inflictor, float &damage, int &damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && damage > 0.0)
	{
		if (bIsSurvivor(victim))
		{
			bool bDeveloper = (bIsDeveloper(victim, 6) || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[victim].g_iFastRecovery == 1));
			if (bDeveloper)
			{
				static int iIndex[2] = {-1, -1};
				int iReviver = GetClientOfUserId(g_esPlayer[victim].g_iReviver);
				bool bDeveloper2 = (bIsDeveloper(iReviver, 6) || (((g_esShooter[iReviver].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iReviver].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iReviver].g_iFastRecovery == 1));
				if (bDeveloper || (bIsSurvivor(iReviver) && bDeveloper2))
				{
					if (iIndex[0] == -1)
					{
						iIndex[0] = iGetPatchIndex("MTPatch_ReviveInterrupt");
					}

					if (iIndex[0] != -1)
					{
						vInstallPatch(iIndex[0]);
					}
				}

				if (iIndex[1] == -1)
				{
					iIndex[1] = iGetPatchIndex("MTPatch_PunchAngle");
				}

				if (iIndex[1] != -1)
				{
					vInstallPatch(iIndex[1]);
				}

				SetEntPropFloat(victim, Prop_Send, "m_flVelocityModifier", 1.0);
				SetEntPropFloat(victim, Prop_Send, "m_jumpSupressedUntil", GetGameTime());
			}
		}
		else if (bIsInfected(victim))
		{
			int iHealth = bIsPlayerIncapacitated(victim) ? 0 : GetEntProp(victim, Prop_Data, "m_iHealth"),
				iMaxHealth = GetEntProp(victim, Prop_Data, "m_iMaxHealth"),
				iTotalHealth = (iHealth > iMaxHealth) ? iHealth : iMaxHealth;

			float flPercentage = (float(iHealth) / float(iTotalHealth)), flResistance = g_esTankCache[victim].g_flArmorResistance[0];
			if (g_esTankCache[victim].g_flArmorPercentage > 0.0 && (1.0 - g_esTankCache[victim].g_flArmorPercentage) <= flPercentage && flResistance >= 0.0)
			{
				flResistance = ((damagetype & DMG_BURN) || (damagetype & DMG_SLASH) || (damagetype & DMG_CLUB)) ? (flResistance * flResistance) : flResistance;
				damage *= flResistance;

				return (flResistance > 0.0) ? Plugin_Changed : Plugin_Handled;
			}

			flResistance = g_esTankCache[victim].g_flShieldResistance;
			if (g_esPlayer[victim].g_bProtected[0] && flResistance >= 0.0)
			{
				damage *= flResistance;

				return (flResistance > 0.0) ? Plugin_Changed : Plugin_Handled;
			}

			flResistance = g_esTankCache[victim].g_flArmorResistance[1];
			if (g_esPlayer[victim].g_bProtected[1] && flResistance >= 0.0)
			{
				damage *= flResistance;

				return (flResistance > 0.0) ? Plugin_Changed : Plugin_Handled;
			}

			if (((damagetype & DMG_SLASH) || (damagetype & DMG_CLUB)) && g_esTankCache[victim].g_iMeleeHitMode > 0 && g_esTankCache[victim].g_flMeleeHitValue > 0.0)
			{
				switch (g_esTankCache[victim].g_iMeleeHitMode)
				{
					case 1: damage = float(iMaxHealth) * g_esTankCache[victim].g_flMeleeHitValue;
					case 2: damage = g_esTankCache[victim].g_flMeleeHitValue;
				}

				return Plugin_Changed;
			}
		}
	}

	return Plugin_Continue;
}

void OnPlayerTakeDamageAlivePost(int victim, int attacker, int inflictor, float damage, int damagetype)
{
	static int iIndex[2] = {-1, -1};
	if (iIndex[0] == -1)
	{
		iIndex[0] = iGetPatchIndex("MTPatch_ReviveInterrupt");
	}

	if (iIndex[0] != -1)
	{
		vRemovePatch(iIndex[0]);
	}

	if (iIndex[1] == -1)
	{
		iIndex[1] = iGetPatchIndex("MTPatch_PunchAngle");
	}

	if (iIndex[1] != -1)
	{
		vRemovePatch(iIndex[1]);
	}
}

Action OnPlayerTakeDamage(int victim, int &attacker, int &inflictor, float &damage, int &damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && damage > 0.0)
	{
		char sClassname[32];
		bool bInflictor = bIsValidEntity(inflictor);
		int iLauncher = 0, iThrower = 0;
		if (bInflictor)
		{
			GetEntityClassname(inflictor, sClassname, sizeof sClassname);
			if (StrEqual(sClassname, "tank_rock"))
			{
				iLauncher = GetEntPropEnt(inflictor, Prop_Data, "m_hOwnerEntity");
				iThrower = GetEntPropEnt(inflictor, Prop_Data, "m_hThrower");
			}
		}

		bool bCommonAttacker = bIsCommonInfected(attacker), bCommonVictim = bIsCommonInfected(victim), bDeveloper = false, bInfectedAttacker = bIsInfected(attacker), bInfectedVictim = bIsInfected(victim), bRewarded = false, bSpecialAttacker = bIsSpecialInfected(attacker), bSpecialVictim = bIsSpecialInfected(victim), bSurvivorAttacker = bIsSurvivor(attacker), bSurvivorVictim = bIsSurvivor(victim), bWitchAttacker = bIsWitch(attacker), bWitchVictim = bIsWitch(victim);
		float flResistance = 0.0;
		if (bSurvivorVictim)
		{
			bDeveloper = bIsDeveloper(victim, 4);
			bRewarded = (bDeveloper || (g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_DAMAGEBOOST));
			static int iIndex = -1;
			if (iIndex == -1)
			{
				iIndex = iGetPatchIndex("MTPatch_DoJumpHeight");
			}

			if (((damagetype & DMG_DROWN) && iGetPlayerWaterLevel(victim) > MT_WATER_NONE) || ((damagetype & DMG_FALL) && !bIsSafeFalling(victim) && g_esPlayer[victim].g_bFatalFalling))
			{
				g_esPlayer[victim].g_bFinalFall = true;

				return Plugin_Continue;
			}

			if (bIsDeveloper(victim, 11) || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[victim].g_iSafetyBubble == 1))
			{
				if (StrEqual(sClassname, "tank_rock"))
				{
					RequestFrame(vDetonateRockFrame, EntIndexToEntRef(inflictor));
				}

				vShakePlayerScreen(victim);
				EmitSoundToAll(SOUND_METAL, victim);

				return Plugin_Handled;
			}

			if ((bIsDeveloper(victim, 8) || bIsDeveloper(victim, 10)) && StrEqual(sClassname, "insect_swarm"))
			{
				return Plugin_Handled;
			}

			if ((g_esPlayer[victim].g_iFallPasses > 0 || (iIndex != -1 && g_esPatch[iIndex].g_iType == 2) || bIsDeveloper(victim, 5) || (g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && (damagetype & DMG_FALL) && (bIsSafeFalling(victim) || RoundToNearest(damage) < GetEntProp(victim, Prop_Data, "m_iHealth") || !g_esPlayer[victim].g_bFatalFalling))
			{
				if (g_esPlayer[victim].g_iFallPasses > 0)
				{
					g_esPlayer[victim].g_iFallPasses--;
				}

				return Plugin_Handled;
			}

			if (bSurvivorAttacker && !bIsSurvivorDisabled(victim))
			{
				bool bDeveloper2 = bIsDeveloper(attacker, 4);
				if ((damagetype & DMG_BURN) && ((bDeveloper || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[victim].g_iBlazeHealth > 0)) || (bDeveloper2 || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[attacker].g_iBlazeHealth > 0))))
				{
					int iBlazeHealth = (g_esPlayer[victim].g_iBlazeHealth > 0) ? g_esPlayer[victim].g_iBlazeHealth : g_esPlayer[attacker].g_iBlazeHealth,
						iExtra = (bDeveloper2 && g_esDeveloper[attacker].g_iDevBlazeHealth > 0) ? g_esDeveloper[attacker].g_iDevBlazeHealth : iBlazeHealth;

					vRegenSurvivorHealth(victim, attacker, iExtra);

					return Plugin_Handled;
				}

				if (((damagetype & DMG_SLASH) || (damagetype & DMG_CLUB)) && ((bDeveloper || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[victim].g_iMedicalCuts > 0)) || (bDeveloper2 || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[attacker].g_iMedicalCuts > 0))))
				{
					int iMedicalCuts = (g_esPlayer[victim].g_iMedicalCuts > 0) ? g_esPlayer[victim].g_iMedicalCuts : g_esPlayer[attacker].g_iMedicalCuts,
						iExtra = (bDeveloper2 && g_esDeveloper[attacker].g_iDevMedicalCuts > 0) ? g_esDeveloper[attacker].g_iDevMedicalCuts : iMedicalCuts;

					vRegenSurvivorHealth(victim, attacker, iExtra);

					return Plugin_Handled;
				}

				if (((damagetype & DMG_BLAST) || (damagetype & DMG_BLAST_SURFACE) || (damagetype & DMG_AIRBOAT) || (damagetype & DMG_PLASMA)) && ((bDeveloper || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[victim].g_iRegenBursts > 0)) || (bDeveloper2 || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[attacker].g_iRegenBursts > 0))))
				{
					int iRegenBursts = (g_esPlayer[victim].g_iRegenBursts > 0) ? g_esPlayer[victim].g_iRegenBursts : g_esPlayer[attacker].g_iRegenBursts,
						iExtra = (bDeveloper2 && g_esDeveloper[attacker].g_iDevRegenBursts > 0) ? g_esDeveloper[attacker].g_iDevRegenBursts : iRegenBursts;

					vRegenSurvivorHealth(victim, attacker, iExtra);

					return Plugin_Handled;
				}

				if (((damagetype & DMG_BULLET) || (damagetype & DMG_BUCKSHOT)) && ((bDeveloper || (((g_esShooter[victim].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[victim].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[victim].g_iSyringeDarts > 0)) || (bDeveloper2 || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_HEALTH)) && g_esPlayer[attacker].g_iSyringeDarts > 0))))
				{
					int iSyringeDarts = (g_esPlayer[victim].g_iSyringeDarts > 0) ? g_esPlayer[victim].g_iSyringeDarts : g_esPlayer[attacker].g_iSyringeDarts,
						iExtra = (bDeveloper2 && g_esDeveloper[attacker].g_iDevSyringeDarts > 0) ? g_esDeveloper[attacker].g_iDevSyringeDarts : iSyringeDarts;

					vRegenSurvivorHealth(victim, attacker, iExtra);

					return Plugin_Handled;
				}
			}

			if (bInfectedAttacker)
			{
				flResistance = (bDeveloper && g_esDeveloper[victim].g_flDevDamageResistance > g_esPlayer[victim].g_flDamageResistance) ? g_esDeveloper[victim].g_flDevDamageResistance : g_esPlayer[victim].g_flDamageResistance;
				if (!bIsCoreAdminImmune(victim, attacker))
				{
					/**
					 * Special Infected Damage Types
					 *
					 * Claw damage/Hunter pinned/Jockey pinned/Charger pinned: DMG_CLUB - (1 << 7) - 128
					 * Smoker pinned: DMG_ACID - (1 << 20) - 1048576
					 * Spitter acid: DMG_RADIATION|DMG_ENERGYBEAM - (1 << 18)|(1 << 10) - 263168
					 **/
					bool bCaught = bIsSurvivorCaught(victim), bJockey = bIsJockey(attacker) && !!g_esGeneral.g_iJockeyDamage;
					float flIncapMultiplier = g_esTankCache[attacker].g_flIncapDamageMultiplier, flDamageMultiplier = g_esShooter[attacker].g_flDamageMultiplier,
						flScale = (g_bSecondGame && bJockey) ? GetEntPropFloat(attacker, Prop_Data, "m_flModelScale") : 0.0;

					if (bSpecialAttacker && (bCaught || (bIsSpitter(attacker) && StrEqual(sClassname, "insect_swarm"))) && g_esTankCache[attacker].g_flPinDamage >= 0.0)
					{
						damage = flGetScaledDamage(g_esTankCache[attacker].g_flPinDamage);
						damage = (bIsPlayerIncapacitated(victim) && flIncapMultiplier > 1.0) ? (damage * flIncapMultiplier) : damage;
						damage = (bRewarded && flResistance > 0.0) ? (damage * flResistance) : damage;
						damage = (flScale > 0.0) ? (damage * flScale) : damage;
						damage = (flDamageMultiplier > 0.0) ? (damage * flDamageMultiplier) : damage;

						return (g_esTankCache[attacker].g_flPinDamage > 0.0) ? Plugin_Changed : Plugin_Handled;
					}
					else if (((bSpecialAttacker && !bCaught && (damagetype & DMG_CLUB)) || StrEqual(sClassname[7], "tank_claw")) && g_esTankCache[attacker].g_flClawDamage >= 0.0)
					{
						damage = flGetScaledDamage(g_esTankCache[attacker].g_flClawDamage);
						damage = (bIsPlayerIncapacitated(victim) && flIncapMultiplier > 1.0) ? (damage * flIncapMultiplier) : damage;
						damage = (bRewarded && flResistance > 0.0) ? (damage * flResistance) : damage;
						damage = (flScale > 0.0) ? (damage * flScale) : damage;
						damage = (flDamageMultiplier > 0.0) ? (damage * flDamageMultiplier) : damage;

						return (g_esTankCache[attacker].g_flClawDamage > 0.0) ? Plugin_Changed : Plugin_Handled;
					}
					else if ((damagetype & DMG_CRUSH) && bInflictor && HasEntProp(inflictor, Prop_Send, "m_isCarryable") && g_esTankCache[attacker].g_flHittableDamage >= 0.0)
					{
						damage = flGetScaledDamage(g_esTankCache[attacker].g_flHittableDamage);
						damage = (bIsPlayerIncapacitated(victim) && flIncapMultiplier > 1.0) ? (damage * flIncapMultiplier) : damage;
						damage = (bRewarded && flResistance > 0.0) ? (damage * flResistance) : damage;
						damage = (flScale > 0.0) ? (damage * flScale) : damage;
						damage = (flDamageMultiplier > 0.0) ? (damage * flDamageMultiplier) : damage;

						return (g_esTankCache[attacker].g_flHittableDamage > 0.0) ? Plugin_Changed : Plugin_Handled;
					}
					else if (StrEqual(sClassname, "tank_rock") && !bIsValidEntity(iLauncher) && g_esTankCache[attacker].g_flRockDamage >= 0.0)
					{
						damage = flGetScaledDamage(g_esTankCache[attacker].g_flRockDamage);
						damage = (bIsPlayerIncapacitated(victim) && flIncapMultiplier > 1.0) ? (damage * flIncapMultiplier) : damage;
						damage = (bRewarded && flResistance > 0.0) ? (damage * flResistance) : damage;
						damage = (flScale > 0.0) ? (damage * flScale) : damage;
						damage = (flDamageMultiplier > 0.0) ? (damage * flDamageMultiplier) : damage;

						return (g_esTankCache[attacker].g_flRockDamage > 0.0) ? Plugin_Changed : Plugin_Handled;
					}
				}
				else if (bRewarded && flResistance > 0.0)
				{
					damage *= flResistance;

					return Plugin_Changed;
				}
			}

			if (bCommonAttacker || bWitchAttacker)
			{
				float flScale = (g_bSecondGame ? GetEntPropFloat(attacker, Prop_Data, "m_flModelScale") : 0.0);
				damage = (flScale > 0.0) ? (damage * flScale) : damage;
				if (flScale > 0.0)
				{
					return Plugin_Changed;
				}
			}

			if (bRewarded)
			{
				if (bDeveloper || g_esPlayer[victim].g_iThorns == 1)
				{
					if (bSpecialAttacker)
					{
						char sDamageType[32];
						IntToString(damagetype, sDamageType, sizeof sDamageType);
						vDamagePlayer(attacker, victim, damage, sDamageType);
					}
					else if (bCommonAttacker)
					{
						SDKHooks_TakeDamage(attacker, victim, victim, damage, damagetype);
					}
				}

				flResistance = (bDeveloper && g_esDeveloper[victim].g_flDevDamageResistance > g_esPlayer[victim].g_flDamageResistance) ? g_esDeveloper[victim].g_flDevDamageResistance : g_esPlayer[victim].g_flDamageResistance;
				if (flResistance > 0.0)
				{
					damage *= flResistance;

					return Plugin_Changed;
				}
			}
		}
		else if (bInfectedVictim || bCommonVictim || bWitchVictim)
		{
			g_esGeneral.g_iCommonHealth[victim] = GetEntProp(victim, Prop_Data, "m_iHealth");

			bool bPlayer = bIsValidClient(attacker);
			float flDamage = 0.0;
			bDeveloper = (bSurvivorAttacker && bIsDeveloper(attacker, 4)), bRewarded = (bSurvivorAttacker && ((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)));
			if (bInfectedVictim)
			{
				if (StrEqual(sClassname, "tank_rock"))
				{
					RequestFrame(vDetonateRockFrame, EntIndexToEntRef(inflictor));

					return Plugin_Handled;
				}

				bool bBlockBullets = (((damagetype & DMG_BULLET) || (damagetype & DMG_BUCKSHOT)) && g_esTankCache[victim].g_iBulletImmunity == 1),
					bBlockExplosives = (((damagetype & DMG_BLAST) || (damagetype & DMG_BLAST_SURFACE) || (damagetype & DMG_AIRBOAT) || (damagetype & DMG_PLASMA)) && g_esTankCache[victim].g_iExplosiveImmunity == 1),
					bBlockFire = ((damagetype & DMG_BURN) && g_esTankCache[victim].g_iFireImmunity == 1),
					bBlockHittables = ((damagetype & DMG_CRUSH) && bInflictor && HasEntProp(inflictor, Prop_Send, "m_isCarryable") && g_esTankCache[victim].g_iHittableImmunity == 1),
					bBlockMelee = (((damagetype & DMG_SLASH) || (damagetype & DMG_CLUB)) && g_esTankCache[victim].g_iMeleeImmunity == 1);

				if (bBlockBullets || bBlockExplosives || bBlockFire || bBlockHittables || bBlockMelee)
				{
					if (bDeveloper || bRewarded)
					{
						if (bBlockBullets || bBlockMelee)
						{
							vKnockbackTank(victim, attacker);
						}

						bool bReturn = true;
#if defined _WeaponHandling_included
						if (!(g_esShooter[attacker].g_iPassiveTypes & MT_PASSIVE_DAMAGEBOOST))
						{
							int iWeapon = iGetSurvivorActiveWeapon(attacker);
							if (iWeapon > MaxClients)
							{
								if (bBlockBullets)
								{
									bReturn = (iWeapon == GetPlayerWeaponSlot(attacker, 0) || (iWeapon == GetPlayerWeaponSlot(attacker, 1) && StrContains(sClassname, "pistol") != -1));
								}

								if (bBlockExplosives)
								{
									bReturn = (bInflictor && g_esGeneral.g_iOwnerID[inflictor] == attacker && (iWeapon == GetPlayerWeaponSlot(attacker, 2) || (iWeapon == GetPlayerWeaponSlot(attacker, 0) && (StrContains(sClassname, "grenade_launcher") != -1 || bHasSpecialAmmo(iWeapon, 0))) || g_esPlayer[attacker].g_flGrenadeLauncher > 0.0 || g_esPlayer[attacker].g_flLadyKiller > 0.0));
								}

								if (bBlockFire)
								{
									bReturn = (bInflictor && g_esGeneral.g_iOwnerID[inflictor] == attacker && (iWeapon == GetPlayerWeaponSlot(attacker, 2) || (iWeapon == GetPlayerWeaponSlot(attacker, 0) && bHasSpecialAmmo(iWeapon, 0))));
								}

								if (bBlockMelee)
								{
									bReturn = (iWeapon == GetPlayerWeaponSlot(attacker, 1) && StrContains(sClassname, "pistol") == -1);
								}
							}
						}
#endif
						flDamage = (bDeveloper && g_esDeveloper[attacker].g_flDevDamageBoost > g_esPlayer[attacker].g_flDamageBoost) ? g_esDeveloper[attacker].g_flDevDamageBoost : g_esPlayer[attacker].g_flDamageBoost;
						if (bReturn && flDamage > 0.0)
						{
							damage *= flDamage;

							return Plugin_Changed;
						}
					}

					if (bBlockBullets && ((!bBlockExplosives && ((damagetype & DMG_BLAST) || (damagetype & DMG_BLAST_SURFACE) || (damagetype & DMG_AIRBOAT) || (damagetype & DMG_PLASMA))) || (!bBlockFire && (damagetype & DMG_BURN))))
					{
						damagetype &= ~DMG_BULLET|DMG_BUCKSHOT;

						return Plugin_Changed;
					}

					if (bBlockExplosives && !bBlockBullets && ((damagetype & DMG_BULLET) || (damagetype & DMG_BUCKSHOT)))
					{
						damagetype &= ~DMG_BLAST|DMG_BLAST_SURFACE|DMG_AIRBOAT|DMG_PLASMA;

						return Plugin_Changed;
					}

					if (bBlockFire)
					{
						ExtinguishEntity(victim);

						if (!bBlockBullets && ((damagetype & DMG_BULLET) || (damagetype & DMG_BUCKSHOT)))
						{
							damagetype &= ~DMG_BURN;

							return Plugin_Changed;
						}
					}

					if (bPlayer && victim != attacker && (bBlockBullets || bBlockExplosives || bBlockHittables || bBlockMelee))
					{
						EmitSoundToAll(SOUND_METAL, victim);

						if (bPlayer && bBlockMelee)
						{
							float flTankPos[3];
							GetClientAbsOrigin(victim, flTankPos);

							switch (bSurvivorAttacker && (bIsDeveloper(attacker, 11) || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[attacker].g_iRiotGear == 1)))
							{
								case true: vPushNearbyEntities(victim, flTankPos, 300.0, 100.0);
								case false: vPushNearbyEntities(victim, flTankPos);
							}
						}
					}

					return Plugin_Handled;
				}

				if ((damagetype & DMG_BURN) && g_esTankCache[victim].g_flBurnDuration > 0.0)
				{
					int iFlame = GetEntPropEnt(victim, Prop_Send, "m_hEffectEntity");
					if (bIsValidEntity(iFlame))
					{
						float flCurrentTime = GetGameTime();
						if (GetEntPropFloat(iFlame, Prop_Data, "m_flLifetime") > (flCurrentTime + g_esTankCache[victim].g_flBurnDuration))
						{
							SetEntPropFloat(iFlame, Prop_Data, "m_flLifetime", (flCurrentTime + g_esTankCache[victim].g_flBurnDuration));
						}
					}
				}

				if (bSurvivorAttacker)
				{
					if ((damagetype & DMG_BULLET) || (damagetype & DMG_BUCKSHOT) || (damagetype & DMG_SLASH) || (damagetype & DMG_CLUB))
					{
						vKnockbackTank(victim, attacker);
					}

					if ((damagetype & DMG_BURN) && g_esGeneral.g_iCreditIgniters <= 0)
					{
						if (bDeveloper || bRewarded)
						{
							flDamage = (bDeveloper && g_esDeveloper[attacker].g_flDevDamageBoost > g_esPlayer[attacker].g_flDamageBoost) ? g_esDeveloper[attacker].g_flDevDamageBoost : g_esPlayer[attacker].g_flDamageBoost;
							if (flDamage > 0.0)
							{
								damage *= flDamage;
							}
						}

						inflictor = 0;
						attacker = 0;

						return Plugin_Changed;
					}

					if (damagetype & DMG_BULLET)
					{
						bool bChanged = false;
						bDeveloper = bIsDeveloper(attacker, 9);
						if (bDeveloper || bRewarded)
						{
							if (bDeveloper || (bRewarded && GetRandomFloat(0.1, 100.0) <= flGetPelletChance(attacker, g_esPlayer[attacker].g_flHollowpointAmmo)))
							{
								if (bCommonVictim || bWitchVictim)
								{
									if (g_bSecondGame)
									{
										if (GetEntProp(victim, Prop_Data, "m_iHealth") <= RoundToNearest(damage))
										{
											float flOrigin[3], flAngles[3];
											GetEntPropVector(victim, Prop_Data, "m_vecOrigin", flOrigin);
											GetEntPropVector(victim, Prop_Data, "m_angRotation", flAngles);
											flOrigin[2] += 48.0;

											RequestFrame(vInfectedTransmitFrame, EntIndexToEntRef(victim));

											if (g_esGeneral.g_iGraphicsLevel > 2 || g_esGeneral.g_cvMTGraphicsLevel.IntValue > 2)
											{
												vAttachParticle2(flOrigin, flAngles, PARTICLE_GORE, 0.2);
											}
										}
									}
									else
									{
										bChanged = true;
										damagetype |= DMG_DISSOLVE;
									}
								}
							}

							if (bDeveloper || (bRewarded && GetRandomFloat(0.1, 100.0) <= flGetPelletChance(attacker, g_esPlayer[attacker].g_flSledgehammerRounds)))
							{
								if (bSpecialVictim)
								{
									vPerformKnockback(victim, attacker);
								}
								else if (bCommonVictim || bWitchVictim)
								{
									if (bDeveloper || bRewarded)
									{
										bDeveloper = (bSurvivorAttacker && bIsDeveloper(attacker, 4));
										flDamage = ((bDeveloper && g_esDeveloper[attacker].g_flDevDamageBoost > g_esPlayer[attacker].g_flDamageBoost) ? g_esDeveloper[attacker].g_flDevDamageBoost : g_esPlayer[attacker].g_flDamageBoost);
										if (flDamage > 0.0)
										{
											bChanged = true;
											damage *= flDamage;
										}
									}

									bChanged = true;
									damagetype |= DMG_BUCKSHOT;
								}
							}

							if (bChanged)
							{
								return Plugin_Changed;
							}
						}
					}
				}
			}

			bDeveloper = (bSurvivorAttacker && bIsDeveloper(attacker, 4));
			if (bDeveloper || bRewarded)
			{
				flDamage = (bDeveloper && g_esDeveloper[attacker].g_flDevDamageBoost > g_esPlayer[attacker].g_flDamageBoost) ? g_esDeveloper[attacker].g_flDevDamageBoost : g_esPlayer[attacker].g_flDamageBoost;
				if (flDamage > 0.0)
				{
					damage *= flDamage;

					return Plugin_Changed;
				}
			}
			else if ((bIsSpecialSupported(attacker) && victim != attacker) || (bIsSpecialSupported(iLauncher) && victim != iLauncher) || (bIsSpecialSupported(iThrower) && victim != iThrower))
			{
				if ((bSpecialAttacker && (damagetype & DMG_CLUB)) || StrEqual(sClassname[7], "tank_claw"))
				{
					return Plugin_Continue;
				}

				if (StrEqual(sClassname, "tank_rock") || (damagetype & DMG_BLAST) || (damagetype & DMG_BLAST_SURFACE) || (damagetype & DMG_AIRBOAT) || (damagetype & DMG_PLASMA) || (damagetype & DMG_BURN))
				{
					vRemovePlayerDamage(victim, damagetype);

					if (StrEqual(sClassname, "tank_rock"))
					{
						RequestFrame(vDetonateRockFrame, EntIndexToEntRef(inflictor));
					}

					return Plugin_Handled;
				}
			}
			else if (victim == attacker)
			{
				return (bWitchVictim && (damagetype & DMG_BURN)) ? Plugin_Continue : Plugin_Handled;
			}
		}
	}

	return Plugin_Continue;
}

Action OnPropTakeDamage(int victim, int &attacker, int &inflictor, float &damage, int &damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && damage > 0.0)
	{
		if (attacker == inflictor && bIsValidEntity(inflictor) && g_esGeneral.g_iTeamID2[inflictor] == 2)
		{
			attacker = GetEntPropEnt(inflictor, Prop_Data, "m_hOwnerEntity");
			if (attacker == -1 || (bIsValidClient(attacker, MT_CHECK_INDEX) && ((bIsValidClient(victim) && GetClientTeam(victim) == GetClientTeam(attacker) && (bIsDeveloper(attacker, 4) || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[attacker].g_iFriendlyFire == 1))) || !IsClientInGame(attacker) || GetClientUserId(attacker) != g_esPlayer[attacker].g_iUserID2)))
			{
				return Plugin_Handled;
			}
		}
		else if (bIsValidClient(attacker, MT_CHECK_INDEX))
		{
			if (g_esGeneral.g_iTeamID2[inflictor] == 2 && ((bIsValidClient(victim) && GetClientTeam(victim) == GetClientTeam(attacker) && (bIsDeveloper(attacker, 4) || (((g_esShooter[attacker].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[attacker].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[attacker].g_iFriendlyFire == 1))) || !IsClientInGame(attacker) || GetClientUserId(attacker) != g_esPlayer[attacker].g_iUserID2 || GetClientTeam(attacker) != 2))
			{
				return Plugin_Handled;
			}
		}
	}

	return Plugin_Continue;
}

void OnPlayerTakeDamagePost(int victim, int attacker, int inflictor, float damage, int damagetype)
{
	if (g_esGeneral.g_bPluginEnabled && damage >= 1.0)
	{
		if (bIsTank(attacker) && bIsSurvivor(victim))
		{
			g_esPlayer[attacker].g_iSurvivorDamage += RoundToNearest(damage);

			char sClassname[32];
			if (bIsValidEntity(inflictor))
			{
				GetEntityClassname(inflictor, sClassname, sizeof sClassname);
			}

			if (StrEqual(sClassname[7], "tank_claw"))
			{
				g_esPlayer[attacker].g_iClawCount++;
				g_esPlayer[attacker].g_iClawDamage += RoundToNearest(damage);
			}
			else if (StrEqual(sClassname, "tank_rock"))
			{
				g_esPlayer[attacker].g_iRockCount++;
				g_esPlayer[attacker].g_iRockDamage += RoundToNearest(damage);
			}
			else if ((damagetype & DMG_CRUSH) && bIsValidEntity(inflictor) && HasEntProp(inflictor, Prop_Send, "m_isCarryable"))
			{
				g_esPlayer[attacker].g_iPropCount++;
				g_esPlayer[attacker].g_iPropDamage += RoundToNearest(damage);
			}
			else
			{
				g_esPlayer[attacker].g_iMiscCount++;
				g_esPlayer[attacker].g_iMiscDamage += RoundToNearest(damage);
			}
		}
		else if (bIsInfected(victim) || bIsCommonInfected(victim) || bIsWitch(victim))
		{
			if (bIsSurvivor(attacker) && g_esGeneral.g_iCommonHealth[victim] > GetEntProp(victim, Prop_Data, "m_iHealth"))
			{
				vLifeLeech(attacker, 5, damagetype, victim);
			}

			if (bIsInfected(victim))
			{
				if ((damagetype & DMG_BURN) && bIsSurvivor(attacker))
				{
					g_esPlayer[victim].g_iLastFireAttacker = attacker;
				}
				else if (!bIsPlayerBurning(victim) || !bIsValidClient(attacker))
				{
					g_esPlayer[victim].g_iLastFireAttacker = 0;
				}

				if (g_esTankCache[victim].g_iPassiveHealth != 0 && g_esTankCache[victim].g_flPassiveDelay > 0.0 && g_esTankCache[victim].g_flPassiveInterval > 0.0 && !g_esPlayer[victim].g_bPassive)
				{
					delete g_esPlayer[victim].g_hPassiveTimer[0];
					delete g_esPlayer[victim].g_hPassiveTimer[1];

					g_esPlayer[victim].g_bPassive = true;
					g_esPlayer[victim].g_hPassiveTimer[0] = CreateTimer(g_esTankCache[victim].g_flPassiveDelay, tTimerDelayPassive, GetClientUserId(victim), TIMER_FLAG_NO_MAPCHANGE);

					CreateTimer(3.0, tTimerResetPassiveDelay, GetClientUserId(victim), TIMER_FLAG_NO_MAPCHANGE);
				}
			}
		}
	}
}

// PreThinkPost hooks

void OnInfectedRainbowPreThinkPost(int infected)
{
	if (!bIsValidEntity(infected) || !g_esInfected[infected].g_bRainbowColor || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		g_esInfected[infected].g_bRainbowColor = false;

		SDKUnhook(infected, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);

		return;
	}

	bool bHook = false;
	float flCurrentTime = GetGameTime();
	int iColor[4] = {0, 0, 0, 0};
	GetEntityRenderColor(infected, iColor[0], iColor[1], iColor[2], iColor[3]);
	iColor[0] = RoundToNearest((Cosine((flCurrentTime * 1.0) + infected) * 127.5) + 127.5);
	iColor[1] = RoundToNearest((Cosine((flCurrentTime * 1.0) + infected + 2) * 127.5) + 127.5);
	iColor[2] = RoundToNearest((Cosine((flCurrentTime * 1.0) + infected + 4) * 127.5) + 127.5);
	if (bIsCommonInfected(infected) || bIsWitch(infected))
	{
		bool bRainbow = StrEqual(g_esInfectedCache[infected].g_sSkinColor, "rainbow", false);
		if (!g_bSecondGame && bRainbow)
		{
			bHook = true;

			SetEntityRenderColor(infected, iColor[0], iColor[1], iColor[2], iColor[3]);
		}

		if (g_bSecondGame && g_esInfectedCache[infected].g_iGlowEnabled == 1)
		{
			bRainbow = StrEqual(g_esInfectedCache[infected].g_sGlowColor, "rainbow", false);
			if (bRainbow)
			{
				bHook = true;
				g_esInfectedCache[infected].g_iGlowColor[0] = iColor[0];
				g_esInfectedCache[infected].g_iGlowColor[1] = iColor[1];
				g_esInfectedCache[infected].g_iGlowColor[2] = iColor[2];
				vSetInfectedGlow(infected);
			}
		}
	}

	if (!bHook)
	{
		g_esInfected[infected].g_bRainbowColor = false;

		SDKUnhook(infected, SDKHook_PreThinkPost, OnInfectedRainbowPreThinkPost);
	}
}

void OnTankRainbowPreThinkPost(int player)
{
	if (!bIsValidClient(player) || !g_esPlayer[player].g_bRainbowColor || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		g_esPlayer[player].g_bRainbowColor = false;

		SDKUnhook(player, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);

		return;
	}

	bool bHook = false, bRainbow = false;
	float flCurrentTime = GetGameTime();
	int iColor[4] = {0, 0, 0, 0};
	GetEntityRenderColor(player, iColor[0], iColor[1], iColor[2], iColor[3]);
	iColor[0] = RoundToNearest((Cosine((flCurrentTime * 1.0) + player) * 127.5) + 127.5);
	iColor[1] = RoundToNearest((Cosine((flCurrentTime * 1.0) + player + 2) * 127.5) + 127.5);
	iColor[2] = RoundToNearest((Cosine((flCurrentTime * 1.0) + player + 4) * 127.5) + 127.5);
	if (bIsSurvivor(player))
	{
		bool bDeveloper = bIsDeveloper(player, 1);
		if (g_esPlayer[player].g_bApplyVisuals[0] && g_esPlayer[player].g_flVisualTime[0] != -1.0 && g_esPlayer[player].g_flVisualTime[0] > flCurrentTime && StrEqual(g_esPlayer[player].g_sScreenColor, "rainbow", false))
		{
			g_esPlayer[player].g_iScreenColorVisual[0] = iColor[0];
			g_esPlayer[player].g_iScreenColorVisual[1] = iColor[1];
			g_esPlayer[player].g_iScreenColorVisual[2] = iColor[2];
			g_esPlayer[player].g_iScreenColorVisual[3] = 50;
		}

		if ((g_esPlayer[player].g_bApplyVisuals[4] && g_esPlayer[player].g_flVisualTime[4] != -1.0 && g_esPlayer[player].g_flVisualTime[4] > flCurrentTime) || bDeveloper)
		{
			switch (bDeveloper)
			{
				case true: bRainbow = StrEqual(g_esDeveloper[player].g_sDevFlashlight, "rainbow", false);
				case false: bRainbow = StrEqual(g_esPlayer[player].g_sLightColor, "rainbow", false);
			}

			if (bRainbow)
			{
				bHook = true;

				vSetSurvivorFlashlight(player, iColor);
			}
		}

		if ((g_esPlayer[player].g_bApplyVisuals[5] && g_esPlayer[player].g_flVisualTime[5] != -1.0 && g_esPlayer[player].g_flVisualTime[5] > flCurrentTime) || bDeveloper)
		{
			switch (bDeveloper)
			{
				case true: bRainbow = StrEqual(g_esDeveloper[player].g_sDevSkinColor, "rainbow", false);
				case false: bRainbow = StrEqual(g_esPlayer[player].g_sBodyColor, "rainbow", false);
			}

			if (bRainbow)
			{
				bHook = true;

				SetEntityRenderColor(player, iColor[0], iColor[1], iColor[2], iColor[3]);
			}
		}

		if (g_bSecondGame && ((g_esPlayer[player].g_bApplyVisuals[6] && g_esPlayer[player].g_flVisualTime[6] != -1.0 && g_esPlayer[player].g_flVisualTime[6] > flCurrentTime) || bDeveloper) && !g_esPlayer[player].g_bVomited)
		{
			switch (bDeveloper)
			{
				case true: bRainbow = StrEqual(g_esDeveloper[player].g_sDevGlowOutline, "rainbow", false);
				case false: bRainbow = StrEqual(g_esPlayer[player].g_sOutlineColor, "rainbow", false);
			}

			if (bRainbow)
			{
				bHook = true;

				vSetSurvivorGlow(player, iColor[0], iColor[1], iColor[2]);
			}
		}
	}
	else if (bIsInfected(player))
	{
		bRainbow = StrEqual(g_esTankCache[player].g_sSkinColor, "rainbow", false);
		if (bRainbow)
		{
			bHook = true;

			SetEntityRenderColor(player, iColor[0], iColor[1], iColor[2], iColor[3]);
		}

		if (g_bSecondGame && g_esTankCache[player].g_iGlowEnabled == 1 && !g_esPlayer[player].g_bVomited)
		{
			bRainbow = StrEqual(g_esTankCache[player].g_sGlowColor, "rainbow", false);
			if (bRainbow)
			{
				bHook = true;
				g_esTankCache[player].g_iGlowColor[0] = iColor[0];
				g_esTankCache[player].g_iGlowColor[1] = iColor[1];
				g_esTankCache[player].g_iGlowColor[2] = iColor[2];
				vSetTankGlow(player);
			}
		}

		bool bRainbow2[4];
		bRainbow2[0] = StrEqual(g_esTankCache[player].g_sOzTankColor, "rainbow", false);
		bRainbow2[1] = StrEqual(g_esTankCache[player].g_sFlameColor, "rainbow", false);
		bRainbow2[2] = StrEqual(g_esTankCache[player].g_sTireColor, "rainbow", false);
		bRainbow2[3] = StrEqual(g_esTankCache[player].g_sRockColor, "rainbow", false);

		int iProp = -1;
		if (bIsTank(player))
		{
			if (bRainbow && bIsValidEntRef(g_esPlayer[player].g_iBlur))
			{
				bHook = true;
				iProp = EntRefToEntIndex(g_esPlayer[player].g_iBlur);
				if (bIsValidEntity(iProp))
				{
					SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
				}
			}

			for (int iPos = 0; iPos < (sizeof esPlayer::g_iRock); iPos++)
			{
				if (iPos < (sizeof esPlayer::g_iOzTank))
				{
					if (bRainbow2[0] && bIsValidEntRef(g_esPlayer[player].g_iOzTank[iPos]))
					{
						bHook = true;
						iProp = EntRefToEntIndex(g_esPlayer[player].g_iOzTank[iPos]);
						if (bIsValidEntity(iProp))
						{
							SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
						}
					}

					if (bRainbow2[1] && bIsValidEntRef(g_esPlayer[player].g_iFlame[iPos]))
					{
						bHook = true;
						iProp = EntRefToEntIndex(g_esPlayer[player].g_iFlame[iPos]);
						if (bIsValidEntity(iProp))
						{
							SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
						}
					}
				}

				if (iPos < (sizeof esPlayer::g_iTire))
				{
					if (bRainbow2[2] && bIsValidEntRef(g_esPlayer[player].g_iTire[iPos]))
					{
						bHook = true;
						iProp = EntRefToEntIndex(g_esPlayer[player].g_iTire[iPos]);
						if (bIsValidEntity(iProp))
						{
							SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
						}
					}
				}

				if (bRainbow2[3] && bIsValidEntRef(g_esPlayer[player].g_iRock[iPos]))
				{
					bHook = true;
					iProp = EntRefToEntIndex(g_esPlayer[player].g_iRock[iPos]);
					if (bIsValidEntity(iProp))
					{
						SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
					}
				}
			}

			bRainbow = StrEqual(g_esTankCache[player].g_sPropTankColor, "rainbow", false);
			if (bRainbow && bIsValidEntRef(g_esPlayer[player].g_iPropaneTank))
			{
				bHook = true;
				iProp = EntRefToEntIndex(g_esPlayer[player].g_iPropaneTank);
				if (bIsValidEntity(iProp))
				{
					SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
				}
			}

			bRainbow = StrEqual(g_esTankCache[player].g_sFlashlightColor, "rainbow", false);
			if (bRainbow && bIsValidEntRef(g_esPlayer[player].g_iFlashlight))
			{
				bHook = true;
				iProp = EntRefToEntIndex(g_esPlayer[player].g_iFlashlight);
				if (bIsValidEntity(iProp))
				{
					char sColor[16];
					FormatEx(sColor, sizeof sColor, "%i %i %i %i", iGetRandomColor(iColor[0]), iGetRandomColor(iColor[1]), iGetRandomColor(iColor[2]), iGetRandomColor(iColor[3]));
					DispatchKeyValue(g_esPlayer[player].g_iFlashlight, "_light", sColor);
				}
			}
		}

		for (int iPos = 0; iPos < (sizeof esPlayer::g_iThrownRock); iPos++)
		{
			if (bRainbow2[3] && bIsValidEntRef(g_esPlayer[player].g_iThrownRock[iPos]))
			{
				bHook = true;
				iProp = EntRefToEntIndex(g_esPlayer[player].g_iThrownRock[iPos]);
				if (bIsValidEntity(iProp))
				{
					SetEntityRenderColor(iProp, iColor[0], iColor[1], iColor[2], iColor[3]);
				}
			}
		}
	}

	if (!bHook)
	{
		g_esPlayer[player].g_bRainbowColor = false;

		SDKUnhook(player, SDKHook_PreThinkPost, OnTankRainbowPreThinkPost);
	}
}

void OnSpeedPreThinkPost(int survivor)
{
	switch (bIsSurvivor(survivor))
	{
		case true:
		{
			if (GetEntPropEnt(survivor, Prop_Send, "m_hGroundEntity") == -1 || GetEntPropFloat(survivor, Prop_Send, "m_staggerTimer", 1) > -1.0)
			{
				float flValue = GetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue");
				if (flValue != 1.0)
				{
					float flVelocity[3];
					GetEntPropVector(survivor, Prop_Data, "m_vecVelocity", flVelocity);
					float flHeight = flVelocity[2];

					ScaleVector(flVelocity, flValue);
					flVelocity[2] = flHeight;

					TeleportEntity(survivor, NULL_VECTOR, NULL_VECTOR, flVelocity);
				}

				SetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(survivor, 1.0, true) : 1.0));

				return;
			}

			bool bDeveloper = bIsDeveloper(survivor, 5);
			if (bDeveloper || (g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_SPEEDBOOST))
			{
				float flSpeed = (bDeveloper && g_esDeveloper[survivor].g_flDevSpeedBoost > g_esPlayer[survivor].g_flSpeedBoost) ? g_esDeveloper[survivor].g_flDevSpeedBoost : g_esPlayer[survivor].g_flSpeedBoost;

				switch (flSpeed > 0.0)
				{
					case true: SetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(survivor, flSpeed) : flSpeed));
					case false: SDKUnhook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
				}
			}
			else
			{
				SDKUnhook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
				SetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(survivor, 1.0, true) : 1.0));
			}
		}
		case false:
		{
			SDKUnhook(survivor, SDKHook_PreThinkPost, OnSpeedPreThinkPost);
			SetEntPropFloat(survivor, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(survivor, 1.0, true) : 1.0));
		}
	}
}

// PostThink hooks

void OnInfectedPostThink(int special)
{
	if (g_esGeneral.g_bPluginEnabled && bIsInfected(special) && g_esGeneral.g_iRushTypes > 0)
	{
		bool bGhost = bIsInfectedGhost(special);
		if (g_esPlayer[special].g_bRushWaiting && bGhost)
		{
			SetEntProp(special, Prop_Send, "m_ghostSpawnState", 1);
		}
		else if (g_esGeneral.g_bRushCooldown && bGhost)
		{
			SetEntProp(special, Prop_Send, "m_ghostSpawnState", 32);
		}
		else if (g_esGeneral.g_bRushEnded && bGhost)
		{
			SetEntProp(special, Prop_Send, "m_ghostSpawnState", 16);
		}
	}
}

// PostThinkPost hooks

void OnSurvivorPostThinkPost(int survivor)
{
	switch (bIsSurvivor(survivor))
	{
		case true:
		{
			if (bIsDeveloper(survivor, 6) || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[survivor].g_iFastRecovery == 1))
			{
				bool bFast = false;
				if (g_bSecondGame)
				{
					char sModel[40];
					int iSequence = GetEntProp(survivor, Prop_Send, "m_nSequence");
					GetEntPropString(survivor, Prop_Data, "m_ModelName", sModel, sizeof sModel);

					switch (sModel[29])
					{
						case 'b': bFast = (iSequence == 620 || (627 <= iSequence <= 630) || iSequence == 667 || iSequence == 671 || iSequence == 672 || iSequence == 680);
						case 'd': bFast = (iSequence == 629 || (635 <= iSequence <= 638) || iSequence == 664 || iSequence == 678 || iSequence == 679 || iSequence == 687);
						case 'c': bFast = (iSequence == 621 || (627 <= iSequence <= 630) || iSequence == 656 || iSequence == 660 || iSequence == 661 || iSequence == 669);
						case 'h': bFast = (iSequence == 625 || (632 <= iSequence <= 635) || iSequence == 671 || iSequence == 675 || iSequence == 676 || iSequence == 684);
						case 'v': bFast = (iSequence == 528 || (535 <= iSequence <= 538) || iSequence == 759 || iSequence == 763 || iSequence == 764 || iSequence == 772);
						case 'n': bFast = (iSequence == 537 || (544 <= iSequence <= 547) || iSequence == 809 || iSequence == 819 || iSequence == 823 || iSequence == 824);
						case 'e': bFast = (iSequence == 531 || (539 <= iSequence <= 541) || iSequence == 762 || iSequence == 766 || iSequence == 767 || iSequence == 775);
						case 'a': bFast = (iSequence == 528 || (535 <= iSequence <= 538) || iSequence == 759 || iSequence == 763 || iSequence == 764 || iSequence == 772);
					}
				}

				switch (bFast)
				{
					case true: SetEntPropFloat(survivor, Prop_Send, "m_flPlaybackRate", 2.0);
					case false:
					{
						float flCurrentTime = GetGameTime();
						if (g_esPlayer[survivor].g_flStaggerTime > flCurrentTime)
						{
							return;
						}

						float flStagger = GetEntPropFloat(survivor, Prop_Send, "m_staggerTimer", 1);
						if (flStagger <= (flCurrentTime + g_esGeneral.g_flTickInterval))
						{
							return;
						}

						flStagger = (((flStagger - flCurrentTime) / 2.0) + flCurrentTime);
						SetEntPropFloat(survivor, Prop_Send, "m_staggerTimer", flStagger, 1);
						g_esPlayer[survivor].g_flStaggerTime = flStagger;
					}
				}
			}
			else
			{
				SDKUnhook(survivor, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);
			}
		}
		case false: SDKUnhook(survivor, SDKHook_PostThinkPost, OnSurvivorPostThinkPost);
	}
}

void OnTankPostThinkPost(int tank)
{
	if (bIsInfected(tank) && g_esTankCache[tank].g_iSkipTaunt == 1)
	{
		bool bFast = false;
		char sModel[40];
		int iSequence = GetEntProp(tank, Prop_Send, "m_nSequence");
		GetEntPropString(tank, Prop_Data, "m_ModelName", sModel, sizeof sModel);

		switch (g_bSecondGame)
		{
			case true:
			{
				switch (g_esPlayer[tank].g_iInfectedType)
				{
					case 1: bFast = iSequence == 34 || iSequence == 35;
					case 2:
					{
						switch (sModel[21])
						{
							case 'r': bFast = iSequence == 35 || iSequence == 36;
							case 't': bFast = iSequence == 34 || iSequence == 35;
						}
					}
					case 3: bFast = iSequence == 77 || iSequence == 78;
					case 4: bFast = iSequence == 14 || iSequence == 15;
					case 5: bFast = iSequence == 12 || iSequence == 13;
					case 6: bFast = iSequence == 37 || iSequence == 38;
					case 8: bFast = 16 <= iSequence <= 27 || 54 <= iSequence <= 60;
				}
			}
			case false:
			{
				switch (g_esPlayer[tank].g_iInfectedType)
				{
					case 1: bFast = iSequence == 34 || iSequence == 35;
					case 2: bFast = iSequence == 32 || iSequence == 33;
					case 3: bFast = iSequence == 77 || iSequence == 78;
					case 8: bFast = 16 <= iSequence <= 25 || 52 <= iSequence <= 58;
				}
			}
		}

		if (bFast)
		{
			SetEntPropFloat(tank, Prop_Send, "m_flPlaybackRate", 10.0);
		}
	}
}

void OnEffectSpawnPost(int effect)
{
	int iAttacker = GetEntPropEnt(effect, Prop_Data, "m_hOwnerEntity");
	if (bIsValidClient(iAttacker, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE))
	{
		g_esGeneral.g_iOwnerID[effect] = iAttacker;
		g_esGeneral.g_iTeamID[effect] = GetClientTeam(iAttacker);

		if (bIsSurvivor(iAttacker) && (bIsDeveloper(iAttacker, 4) || (((g_esShooter[iAttacker].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iAttacker].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[iAttacker].g_iFriendlyFire == 1)))
		{
			g_esGeneral.g_iOwnerID[effect] = g_esGeneral.g_iOwnerID2[effect];
			g_esGeneral.g_iTeamID2[effect] = g_esGeneral.g_iTeamID[effect];
		}
	}
}

void OnInfectedSpawnPost(int infected)
{
	if (bIsValidEntity(infected))
	{
		vMutateInfected(infected);
		SDKHook(infected, SDKHook_OnTakeDamage, OnInfectedTakeDamage);
		SDKHook(infected, SDKHook_OnTakeDamage, OnPlayerTakeDamage);
		SDKHook(infected, SDKHook_OnTakeDamagePost, OnPlayerTakeDamagePost);
		CreateTimer(1.0, tTimerResizeInfected, EntIndexToEntRef(infected), TIMER_FLAG_NO_MAPCHANGE);
	}
}

void OnPipeBombSpawn(int bomb)
{
	RequestFrame(vPipeBombSpawnFrame, EntIndexToEntRef(bomb));
}

void OnPropSpawnPost(int prop)
{
	char sModel[64];
	GetEntPropString(prop, Prop_Data, "m_ModelName", sModel, sizeof sModel);
	if (StrEqual(sModel, MODEL_OXYGENTANK) || StrEqual(sModel, MODEL_PROPANETANK) || StrEqual(sModel, MODEL_GASCAN) || (g_bSecondGame && StrEqual(sModel, MODEL_FIREWORKCRATE)))
	{
		SDKHook(prop, SDKHook_OnTakeDamage, OnPropTakeDamage);
	}
}

// SetTransmit hooks

Action OnDeathModelSetTransmit(int entity, int client)
{
	if (g_esGeneral.g_bPluginEnabled && bIsValidClient(client) && bIsValidEntity(entity) && bIsValidEntRef(g_esShooter[client].g_iDeathModel))
	{
		int iDeathModel = EntRefToEntIndex(g_esShooter[client].g_iDeathModel);
		if (bIsValidEntity(iDeathModel) && iDeathModel == entity)
		{
			return Plugin_Continue;
		}
	}

	return Plugin_Handled;
}

Action OnInfectedSetTransmit(int entity, int client)
{
	return Plugin_Handled;
}

Action OnPropSetTransmit(int entity, int client)
{
#if defined _ThirdPersonShoulder_Detect_included
	bool bCheck = (g_esPlayer[client].g_bThirdPerson || g_esPlayer[client].g_bThirdPerson2);
#else
	bool bCheck = g_esPlayer[client].g_bThirdPerson;
#endif
	int iOwner = GetEntPropEnt(entity, Prop_Data, "m_hOwnerEntity");
	if (g_esGeneral.g_bPluginEnabled && bIsValidClient(iOwner) && bIsValidClient(client) && iOwner == client && !bCheck && !bIsPlayerInThirdPerson(client))
	{
		return Plugin_Handled;
	}

	return Plugin_Continue;
}

// Touch hooks

void OnPipeBombTouch(int grenade, int other)
{
	if ((GetGameTime() - g_esGeneral.g_flStickyDelay[grenade]) < 0.1)
	{
		return;
	}
	else if (bIsInfected(other))
	{
		g_esPlayer[other].g_bStickied = true;

		SetEntPropFloat(other, Prop_Send, "m_flLaggedMovementValue", (g_esGeneral.g_bLaggedMovementInstalled ? L4D_LaggedMovement(other, (g_esTankCache[other].g_flRunSpeed * 0.5)) : (g_esTankCache[other].g_flRunSpeed * 0.5)));
		vSetEntityParent(grenade, other);
	}
	else if (bIsCommonInfected(other) || bIsWitch(other) || other > MaxClients)
	{
		vSetEntityParent(grenade, other);
	}
	else
	{
		SetEntityMoveType(grenade, MOVETYPE_NONE);
	}
}

// TouchPost hooks

void OnDoorTouchPost(int client, int door)
{
	float flCurrentTime = GetGameTime();
	if (g_esGeneral.g_bPluginEnabled && bIsSurvivor(client) && (bIsDeveloper(client, 5) || bIsDeveloper(client, 11) || (((g_esShooter[client].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[client].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[client].g_iBurstDoors == 1)) && door > MaxClients && g_esPlayer[client].g_flLastPushTime < flCurrentTime)
	{
		char sClassname[32];
		GetEntityClassname(door, sClassname, sizeof sClassname);
		if (!strncmp(sClassname, "prop_door_rotating", 18) && GetEntProp(door, Prop_Data, "m_eDoorState") == 0)
		{
			g_esPlayer[client].g_flLastPushTime = (flCurrentTime + 0.5);

			float flSpeed = GetEntPropFloat(door, Prop_Data, "m_flSpeed"), flTempSpeed = GetEntPropFloat(client, Prop_Send, "m_flLaggedMovementValue") * 200.0;
			SetEntPropFloat(door, Prop_Data, "m_flSpeed", flTempSpeed);
			AcceptEntityInput(door, "PlayerOpen", client);
			SetEntPropFloat(door, Prop_Data, "m_flSpeed", flSpeed);
		}
	}
}

// Weapon hooks

Action OnWeaponCanSwitchTo(int client)
{
	SDKUnhook(client, SDKHook_WeaponCanSwitchTo, OnWeaponCanSwitchTo);

	return Plugin_Handled;
}

void OnWeaponEquipPost(int client, int weapon)
{
	if (g_esGeneral.g_bPluginEnabled && bIsSurvivor(client) && weapon > MaxClients)
	{
		vCheckGunClipSizes(client);
		vRefreshLaserSight(client);
		GetEntityClassname(weapon, g_esPlayer[client].g_sWeaponCurrent, sizeof esPlayer::g_sWeaponCurrent);

		if (GetPlayerWeaponSlot(client, 2) == weapon)
		{
			strcopy(g_esPlayer[client].g_sStoredThrowable, sizeof esPlayer::g_sStoredThrowable, g_esPlayer[client].g_sWeaponCurrent);
		}
		else if (GetPlayerWeaponSlot(client, 3) == weapon)
		{
			strcopy(g_esPlayer[client].g_sStoredMedkit, sizeof esPlayer::g_sStoredMedkit, g_esPlayer[client].g_sWeaponCurrent);
		}
		else if (GetPlayerWeaponSlot(client, 4) == weapon)
		{
			strcopy(g_esPlayer[client].g_sStoredPills, sizeof esPlayer::g_sStoredPills, g_esPlayer[client].g_sWeaponCurrent);
		}
#if defined _WeaponHandling_included
		vToggleWeaponPassive(client, weapon);
#endif
	}
}

void OnWeaponSwitchPost(int client, int weapon)
{
	if (g_esGeneral.g_bPluginEnabled && bIsSurvivor(client) && weapon > MaxClients)
	{
		if (g_bSecondGame && bIsDeveloper(client, 2))
		{
			vRefreshLaserSight(client);
			RequestFrame(vWeaponSkinFrame, GetClientUserId(client));
		}
#if defined _WeaponHandling_included
		vToggleWeaponPassive(client, weapon);
#endif
	}
}

// Sound hooks

Action BlockSoundHook(int clients[MAXPLAYERS], int &numClients, char sample[PLATFORM_MAX_PATH], int &entity, int &channel, float &volume, int &level, int &pitch, int &flags, char soundEntry[PLATFORM_MAX_PATH], int &seed)
{
	if (g_esGeneral.g_bPluginEnabled && bIsSurvivor(entity))
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_DoJumpHeight");
		}

		if (g_esPlayer[entity].g_iFallPasses > 0 || (iIndex != -1 && g_esPatch[iIndex].g_iType == 2) || bIsDeveloper(entity, 5) || bIsDeveloper(entity, 11) || (g_esShooter[entity].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[entity].g_iRewardTypes & MT_REWARD_SPEEDBOOST) || (((g_esShooter[entity].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[entity].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[entity].g_iRiotGear == 1))
		{
			float flOrigin[3];
			GetEntPropVector(entity, Prop_Data, "m_vecOrigin", flOrigin);
			if ((g_esPlayer[entity].g_bFallDamage && !g_esPlayer[entity].g_bFatalFalling) || (0.0 < (g_esPlayer[entity].g_flPreFallZ - flOrigin[2]) < 900.0 && !g_esPlayer[entity].g_bFalling))
			{
				if (StrEqual(sample, SOUND_NULL, false))
				{
					return Plugin_Stop;
				}
				else if (0 <= StrContains(sample, SOUND_DAMAGE, false) <= 1 || 0 <= StrContains(sample, SOUND_DAMAGE2, false) <= 1)
				{
					g_esPlayer[entity].g_bFallDamage = false;

					return Plugin_Stop;
				}
			}
		}

		if (channel == SNDCHAN_VOICE)
		{
			bool bDeveloper = bIsDeveloper(entity, 2) || bIsDeveloper(entity, 11);
			if (bDeveloper || (g_esPlayer[entity].g_iRewardVisuals & MT_VISUAL_VOICEPITCH))
			{
				int iPitch = (bDeveloper && g_esDeveloper[entity].g_iDevVoicePitch > 0) ? g_esDeveloper[entity].g_iDevVoicePitch : g_esPlayer[entity].g_iVoicePitch;
				if (iPitch > 0 && iPitch != pitch)
				{
					pitch = iPitch;
					flags |= SND_CHANGEPITCH;

					return Plugin_Changed;
				}
			}
		}
	}
	else if (StrEqual(sample, SOUND_THROWN, false))
	{
		numClients = 0;

		return Plugin_Changed;
	}

	return Plugin_Continue;
}

/**
 * UserMessage hooks
 **/

void vHookUserMessages(bool toggle)
{
	if (g_esGeneral.g_umSayText != INVALID_MESSAGE_ID)
	{
		switch (toggle)
		{
			case true: HookUserMessage(g_esGeneral.g_umSayText, umUpgradeDescription, true);
			case false: UnhookUserMessage(g_esGeneral.g_umSayText, umUpgradeDescription, true);
		}
	}

	if (g_esGeneral.g_umSayText2 != INVALID_MESSAGE_ID)
	{
		switch (toggle)
		{
			case true: HookUserMessage(g_esGeneral.g_umSayText2, umNameChange, true);
			case false: UnhookUserMessage(g_esGeneral.g_umSayText2, umNameChange, true);
		}
	}
}

Action umNameChange(UserMsg msg_id, BfRead msg, const int[] players, int playersNum, bool reliable, bool init)
{
	if (!g_esGeneral.g_bHideNameChange)
	{
		return Plugin_Continue;
	}

	msg.ReadByte();
	msg.ReadByte();

	char sMessage[255];
	msg.ReadString(sMessage, sizeof sMessage, true);
	if (StrEqual(sMessage, "#Cstrike_Name_Change"))
	{
		g_esGeneral.g_bHideNameChange = false;

		return Plugin_Handled;
	}

	return Plugin_Continue;
}

Action umUpgradeDescription(UserMsg msg_id, BfRead msg, const int[] players, int playersNum, bool reliable, bool init)
{
	msg.ReadByte();
	msg.ReadByte();

	char sMessage[255];
	msg.ReadString(sMessage, sizeof sMessage, true);
	if (StrContains(sMessage, "laser_sight_expire") != -1 || StrContains(sMessage, "_expire") != -1 || (StrContains(sMessage, "#L4D_Upgrade_") != -1 && StrContains(sMessage, "description") != -1))
	{
		return Plugin_Handled;
	}

	return Plugin_Continue;
}

/**
 * DHooks Detour setup
 **/

void vReadDetourSettings(const char[] key, const char[] value)
{
	int iIndex = g_esGeneral.g_iDetourCount;
	g_esDetour[iIndex].g_bLog = !!iGetKeyValueEx(key, "Log", "Log", "Log", "Log", g_esDetour[iIndex].g_bLog, value, 0, 1);
	g_esDetour[iIndex].g_iType = iGetKeyValueEx(key, "Type", "Type", "Type", "Type", g_esDetour[iIndex].g_iType, value, 0, 4);
	g_esDetour[iIndex].g_iPreHook = iGetKeyValueEx(key, "PreHook", "Pre-Hook", "Pre_Hook", "pre", g_esDetour[iIndex].g_iPreHook, value, 0, 2);
	g_esDetour[iIndex].g_iPostHook = iGetKeyValueEx(key, "PostHook", "Post-Hook", "Post_Hook", "post", g_esDetour[iIndex].g_iPostHook, value, 0, 2);

	vGetKeyValueEx(key, "CvarCheck", "Cvar Check", "Cvar_Check", "cvars", g_esDetour[iIndex].g_sCvars, sizeof esDetour::g_sCvars, value);
}

void vRegisterDetour(const char[] name, bool reg)
{
	if (!reg)
	{
		g_esGeneral.g_bOverrideDetour = true;

		return;
	}

	int iIndex = g_esGeneral.g_iDetourCount;
	if (g_esDetour[iIndex].g_iType == 0)
	{
		return;
	}
	else if (g_esDetour[iIndex].g_iType == 1 || g_esDetour[iIndex].g_iType == 3)
	{
		if (bIsConVarConflictFound(name, g_esDetour[iIndex].g_sCvars, "disabling", g_esDetour[iIndex].g_bLog))
		{
			g_esDetour[iIndex].g_bBypassNeeded = true;
		}
	}

	g_esGeneral.g_iDetourCount++;

	if (g_esDetour[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s Registered the \"%s\" detour.", MT_TAG, name);
	}
}

void vRegisterDetours()
{
	char sFilePath[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, sFilePath, sizeof sFilePath, "%s%s.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_FILE_DETOURS);
	if (!MT_FileExists(MT_CONFIG_FILEPATH, (MT_CONFIG_FILE_DETOURS ... ".cfg"), sFilePath, sFilePath, sizeof sFilePath))
	{
		LogError("%s Unable to load the \"%s\" config file.", MT_TAG, sFilePath);

		return;
	}

	SMCParser smcDetours = smcSetupParser(sFilePath, SMCParseStart_Detours, SMCNewSection_Detours, SMCKeyValues_Detours, SMCEndSection_Detours, SMCRawLine_Detours, SMCParseEnd_Detours);
	if (smcDetours != null)
	{
		delete smcDetours;
	}
}

void vSetupDetour(DynamicDetour &detourHandle, const char[] name)
{
	int iIndex = iGetDetourIndex(name);
	if (iIndex == -1 || g_esDetour[iIndex].g_iType == 0 || ((g_esDetour[iIndex].g_iType == 1 || g_esDetour[iIndex].g_iType == 3) && g_esDetour[iIndex].g_bBypassNeeded))
	{
		return;
	}

	detourHandle = DynamicDetour.FromConf(g_esGeneral.g_gdMutantTanks, name);
	if (detourHandle == null)
	{
		LogError("%s Failed to detour: %s", MT_TAG, name);

		return;
	}

	if (g_esDetour[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s Setup the \"%s\" detour.", MT_TAG, name);
	}
}

void vSetupDetours()
{
	vSetupDetour(g_esGeneral.g_ddActionCompleteDetour, "MTDetour_CFirstAidKit::OnActionComplete");
	vSetupDetour(g_esGeneral.g_ddActivateAbilityDetour, "MTDetour_CBaseAbility::ActivateAbility");
	vSetupDetour(g_esGeneral.g_ddBaseEntityCreateDetour, "MTDetour_CBaseEntity::Create");
	vSetupDetour(g_esGeneral.g_ddBaseEntityGetGroundEntityDetour, "MTDetour_CBaseEntity::GetGroundEntity");
	vSetupDetour(g_esGeneral.g_ddBeginChangeLevelDetour, "MTDetour_CTerrorPlayer::OnBeginChangeLevel");
	vSetupDetour(g_esGeneral.g_ddCanDeployForDetour, "MTDetour_CTerrorWeapon::CanDeployFor");
	vSetupDetour(g_esGeneral.g_ddCheckJumpButtonDetour, "MTDetour_CTerrorGameMovement::CheckJumpButton");
	vSetupDetour(g_esGeneral.g_ddDeathFallCameraEnableDetour, "MTDetour_CDeathFallCamera::Enable");
	vSetupDetour(g_esGeneral.g_ddDoAnimationEventDetour, "MTDetour_CTerrorPlayer::DoAnimationEvent");
	vSetupDetour(g_esGeneral.g_ddDoJumpDetour, "MTDetour_CTerrorGameMovement::DoJump");
	vSetupDetour(g_esGeneral.g_ddEnterGhostStateDetour, "MTDetour_CTerrorPlayer::OnEnterGhostState");
	vSetupDetour(g_esGeneral.g_ddEnterStasisDetour, "MTDetour_Tank::EnterStasis");
	vSetupDetour(g_esGeneral.g_ddEventKilledDetour, "MTDetour_CTerrorPlayer::Event_Killed");
	vSetupDetour(g_esGeneral.g_ddExtinguishDetour, "MTDetour_CTerrorPlayer::Extinguish");
	vSetupDetour(g_esGeneral.g_ddFallingDetour, "MTDetour_CTerrorPlayer::OnFalling");
	vSetupDetour(g_esGeneral.g_ddFootstepDetour, "MTDetour_CTerrorPlayer::OnFootstep");
	vSetupDetour(g_esGeneral.g_ddFinishHealingDetour, "MTDetour_CFirstAidKit::FinishHealing");
	vSetupDetour(g_esGeneral.g_ddFireBulletDetour, "MTDetour_CTerrorGun::FireBullet");
	vSetupDetour(g_esGeneral.g_ddFirstSurvivorLeftSafeAreaDetour, "MTDetour_CDirector::OnFirstSurvivorLeftSafeArea");
	vSetupDetour(g_esGeneral.g_ddFlingDetour, "MTDetour_CTerrorPlayer::Fling");
	vSetupDetour(g_esGeneral.g_ddGetMaxClip1Detour, "MTDetour_CBaseCombatWeapon::GetMaxClip1");
	vSetupDetour(g_esGeneral.g_ddGetRateOfFireDetour, "MTDetour_CTerrorGun::GetRateOfFire");
	vSetupDetour(g_esGeneral.g_ddGrabVictimWithTongueDetour, "MTDetour_CTerrorPlayer::GrabVictimWithTongue");
	vSetupDetour(g_esGeneral.g_ddHitByVomitJarDetour, "MTDetour_CTerrorPlayer::OnHitByVomitJar");
	vSetupDetour(g_esGeneral.g_ddIncapacitatedAsTankDetour, "MTDetour_CTerrorPlayer::OnIncapacitatedAsTank");
	vSetupDetour(g_esGeneral.g_ddInitialContainedActionDetour, "MTDetour_TankBehavior::InitialContainedAction");
	vSetupDetour(g_esGeneral.g_ddITExpiredDetour, "MTDetour_CTerrorPlayer::OnITExpired");
	vSetupDetour(g_esGeneral.g_ddLadderDismountDetour, "MTDetour_CTerrorPlayer::OnLadderDismount");
	vSetupDetour(g_esGeneral.g_ddLadderMountDetour, "MTDetour_CTerrorPlayer::OnLadderMount");
	vSetupDetour(g_esGeneral.g_ddLauncherDirectionDetour, "MTDetour_CEnvRockLauncher::LaunchCurrentDir");
	vSetupDetour(g_esGeneral.g_ddLeaveStasisDetour, "MTDetour_Tank::LeaveStasis");
	vSetupDetour(g_esGeneral.g_ddLeptOnSurvivorDetour, "MTDetour_CTerrorPlayer::OnLeptOnSurvivor");
	vSetupDetour(g_esGeneral.g_ddMaxCarryDetour, "MTDetour_CAmmoDef::MaxCarry");
	vSetupDetour(g_esGeneral.g_ddPipeBombProjectileCreateDetour, "MTDetour_CPipeBombProjectile::Create");
	vSetupDetour(g_esGeneral.g_ddPipeBombProjectileDetonateDetour, "MTDetour_CPipeBombProjectile::Detonate");
	vSetupDetour(g_esGeneral.g_ddPistolGetRateOfFireDetour, "MTDetour_CPistol::GetRateOfFire");
	vSetupDetour(g_esGeneral.g_ddPouncedOnSurvivorDetour, "MTDetour_CTerrorPlayer::OnPouncedOnSurvivor");
	vSetupDetour(g_esGeneral.g_ddPreThinkDetour, "MTDetour_CTerrorPlayer::PreThink");
	vSetupDetour(g_esGeneral.g_ddQueuePummelVictimDetour, "MTDetour_CTerrorPlayer::QueuePummelVictim");
	vSetupDetour(g_esGeneral.g_ddReplaceTankDetour, "MTDetour_ZombieManager::ReplaceTank");
	vSetupDetour(g_esGeneral.g_ddRevivedDetour, "MTDetour_CTerrorPlayer::OnRevived");
	vSetupDetour(g_esGeneral.g_ddSecondaryAttackDetour, "MTDetour_CTerrorWeapon::SecondaryAttack");
	vSetupDetour(g_esGeneral.g_ddSecondaryAttackDetour2, "MTDetour_CTerrorMeleeWeapon::SecondaryAttack");
	vSetupDetour(g_esGeneral.g_ddSelectWeightedSequenceDetour, "MTDetour_CBaseAnimating::SelectWeightedSequence");
	vSetupDetour(g_esGeneral.g_ddShovedByPounceLandingDetour, "MTDetour_CTerrorPlayer::OnShovedByPounceLanding");
	vSetupDetour(g_esGeneral.g_ddShovedBySurvivorDetour, "MTDetour_CTerrorPlayer::OnShovedBySurvivor");
	vSetupDetour(g_esGeneral.g_ddSpawnBoomerDetour, "MTDetour_ZombieManager::SpawnBoomer");
	vSetupDetour(g_esGeneral.g_ddSpawnHunterDetour, "MTDetour_ZombieManager::SpawnHunter");
	vSetupDetour(g_esGeneral.g_ddSpawnSmokerDetour, "MTDetour_ZombieManager::SpawnSmoker");
	vSetupDetour(g_esGeneral.g_ddSpawnSpecialDetour, "MTDetour_ZombieManager::SpawnSpecial");
	vSetupDetour(g_esGeneral.g_ddSpawnTankDetour, "MTDetour_ZombieManager::SpawnTank");
	vSetupDetour(g_esGeneral.g_ddSpecialClawSwingEndDetour, "MTDetour_CClaw::OnSwingEnd");
	vSetupDetour(g_esGeneral.g_ddStaggeredDetour, "MTDetour_CTerrorPlayer::OnStaggered");
	vSetupDetour(g_esGeneral.g_ddStartActionDetour, "MTDetour_CBaseBackpackItem::StartAction");
	vSetupDetour(g_esGeneral.g_ddStartCarryingVictimDetour, "MTDetour_CTerrorPlayer::OnStartCarryingVictim");
	vSetupDetour(g_esGeneral.g_ddStartHealingDetour, "MTDetour_CFirstAidKit::StartHealing");
	vSetupDetour(g_esGeneral.g_ddStartRevivingDetour, "MTDetour_CTerrorPlayer::StartReviving");
	vSetupDetour(g_esGeneral.g_ddTankClawDoSwingDetour, "MTDetour_CTankClaw::DoSwing");
	vSetupDetour(g_esGeneral.g_ddTankClawGroundPoundDetour, "MTDetour_CTankClaw::GroundPound");
	vSetupDetour(g_esGeneral.g_ddTankClawPlayerHitDetour, "MTDetour_CTankClaw::OnPlayerHit");
	vSetupDetour(g_esGeneral.g_ddTankClawPrimaryAttackDetour, "MTDetour_CTankClaw::PrimaryAttack");
	vSetupDetour(g_esGeneral.g_ddTankClawTrySwingDetour, "MTDetour_CTankClaw::TrySwing");
	vSetupDetour(g_esGeneral.g_ddTankRockCreateDetour, "MTDetour_CTankRock::Create");
	vSetupDetour(g_esGeneral.g_ddTankRockDetonateDetour, "MTDetour_CTankRock::Detonate");
	vSetupDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease");
	vSetupDetour(g_esGeneral.g_ddTestMeleeSwingCollisionDetour, "MTDetour_CTerrorMeleeWeapon::TestMeleeSwingCollision");
	vSetupDetour(g_esGeneral.g_ddThrowUpdateAbilityDetour, "MTDetour_CThrow::UpdateAbility");
	vSetupDetour(g_esGeneral.g_ddTrySwingDetour, "MTDetour_CTerrorWeapon::TrySwing");
	vSetupDetour(g_esGeneral.g_ddTryToThrowRockDetour, "MTDetour_TankAttack::TryToThrowRock");
	vSetupDetour(g_esGeneral.g_ddUTILSetModelDetour, "MTDetour_UTIL_SetModel");
	vSetupDetour(g_esGeneral.g_ddUseDetour, "MTDetour_CTerrorGun::Use");
	vSetupDetour(g_esGeneral.g_ddUseDetour2, "MTDetour_CWeaponSpawn::Use");
	vSetupDetour(g_esGeneral.g_ddVomitedUponDetour, "MTDetour_CTerrorPlayer::OnVomitedUpon");
}

void vToggleDetour(DynamicDetour &detourHandle, const char[] name, HookMode mode, DHookCallback callback, bool toggle, int game = 0, bool override = false)
{
	int iIndex = iGetDetourIndex(name);
	if (detourHandle == null || (game == 1 && g_bSecondGame) || (game == 2 && !g_bSecondGame) || iIndex == -1 || (!toggle && !g_esDetour[iIndex].g_bInstalled))
	{
		return;
	}

	if (g_esDetour[iIndex].g_iType <= 3)
	{
		if (g_esDetour[iIndex].g_iType == 0 || (!override && g_esDetour[iIndex].g_iType < 3))
		{
			return;
		}
		else if (!override && g_esDetour[iIndex].g_iType == 3 && g_esDetour[iIndex].g_bBypassNeeded)
		{
			return;
		}
		else if (mode == Hook_Pre && (g_esDetour[iIndex].g_iPreHook == 0 || (!override && g_esDetour[iIndex].g_iPreHook == 1 && g_esDetour[iIndex].g_bBypassNeeded)))
		{
			return;
		}
		else if (mode == Hook_Post && (g_esDetour[iIndex].g_iPostHook == 0 || (!override && g_esDetour[iIndex].g_iPostHook == 1 && g_esDetour[iIndex].g_bBypassNeeded)))
		{
			return;
		}
	}

	bool bToggle = toggle ? detourHandle.Enable(mode, callback) : detourHandle.Disable(mode, callback);
	if (!bToggle)
	{
		LogError("%s Failed to %s the %s-hook detour for the \"%s\" function.", MT_TAG, (toggle ? "enable" : "disable"), ((mode == Hook_Pre) ? "pre" : "post"), name);

		return;
	}

	g_esDetour[iIndex].g_bInstalled = toggle;

	if (g_esDetour[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s %sabled the \"%s\" %s-hook detour.", MT_TAG, (toggle ? "En" : "Dis"), name, ((mode == Hook_Pre) ? "pre" : "post"));
	}
}

void vToggleDetours(bool toggle)
{
	vToggleDetour(g_esGeneral.g_ddBaseEntityCreateDetour, "MTDetour_CBaseEntity::Create", Hook_Post, mreBaseEntityCreatePost, toggle, 1);
	vToggleDetour(g_esGeneral.g_ddFinishHealingDetour, "MTDetour_CFirstAidKit::FinishHealing", Hook_Pre, mreFinishHealingPre, toggle, 1);
	vToggleDetour(g_esGeneral.g_ddFinishHealingDetour, "MTDetour_CFirstAidKit::FinishHealing", Hook_Post, mreFinishHealingPost, toggle, 1);
	vToggleDetour(g_esGeneral.g_ddSpawnBoomerDetour, "MTDetour_ZombieManager::SpawnBoomer", Hook_Pre, mreSpawnBoomerPre, toggle, 1);
	vToggleDetour(g_esGeneral.g_ddSpawnHunterDetour, "MTDetour_ZombieManager::SpawnHunter", Hook_Pre, mreSpawnHunterPre, toggle, 1);
	vToggleDetour(g_esGeneral.g_ddSpawnSmokerDetour, "MTDetour_ZombieManager::SpawnSmoker", Hook_Pre, mreSpawnSmokerPre, toggle, 1);

	vToggleDetour(g_esGeneral.g_ddActionCompleteDetour, "MTDetour_CFirstAidKit::OnActionComplete", Hook_Pre, mreActionCompletePre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddActionCompleteDetour, "MTDetour_CFirstAidKit::OnActionComplete", Hook_Post, mreActionCompletePost, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddDoAnimationEventDetour, "MTDetour_CTerrorPlayer::DoAnimationEvent", Hook_Pre, mreDoAnimationEventPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddFlingDetour, "MTDetour_CTerrorPlayer::Fling", Hook_Pre, mreFlingPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddGetRateOfFireDetour, "MTDetour_CTerrorGun::GetRateOfFire", Hook_Pre, mreGetRateOfFire, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddHitByVomitJarDetour, "MTDetour_CTerrorPlayer::OnHitByVomitJar", Hook_Pre, mreHitByVomitJarPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddLeptOnSurvivorDetour, "MTDetour_CTerrorPlayer::OnLeptOnSurvivor", Hook_Pre, mreLeptOnSurvivorPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddQueuePummelVictimDetour, "MTDetour_CTerrorPlayer::QueuePummelVictim", Hook_Pre, mreQueuePummelVictimPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddSecondaryAttackDetour2, "MTDetour_CTerrorMeleeWeapon::SecondaryAttack", Hook_Pre, mreSecondaryAttackPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddSecondaryAttackDetour2, "MTDetour_CTerrorMeleeWeapon::SecondaryAttack", Hook_Post, mreSecondaryAttackPost, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddSpawnSpecialDetour, "MTDetour_ZombieManager::SpawnSpecial", Hook_Pre, mreSpawnSpecialPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddStartActionDetour, "MTDetour_CBaseBackpackItem::StartAction", Hook_Pre, mreStartActionPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddStartActionDetour, "MTDetour_CBaseBackpackItem::StartAction", Hook_Post, mreStartActionPost, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddStartCarryingVictimDetour, "MTDetour_CTerrorPlayer::OnStartCarryingVictim", Hook_Pre, mreStartCarryingVictimPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddTankRockCreateDetour, "MTDetour_CTankRock::Create", Hook_Post, mreTankRockCreatePost, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddTestMeleeSwingCollisionDetour, "MTDetour_CTerrorMeleeWeapon::TestMeleeSwingCollision", Hook_Pre, mreTestMeleeSwingCollisionPre, toggle, 2);
	vToggleDetour(g_esGeneral.g_ddTestMeleeSwingCollisionDetour, "MTDetour_CTerrorMeleeWeapon::TestMeleeSwingCollision", Hook_Post, mreTestMeleeSwingCollisionPost, toggle, 2);

	vToggleDetour(g_esGeneral.g_ddActivateAbilityDetour, "MTDetour_CBaseAbility::ActivateAbility", Hook_Pre, mreActivateAbilityPre, toggle);
	vToggleDetour(g_esGeneral.g_ddBeginChangeLevelDetour, "MTDetour_CTerrorPlayer::OnBeginChangeLevel", Hook_Pre, mreBeginChangeLevelPre, toggle);
	vToggleDetour(g_esGeneral.g_ddCanDeployForDetour, "MTDetour_CTerrorWeapon::CanDeployFor", Hook_Pre, mreCanDeployForPre, toggle);
	vToggleDetour(g_esGeneral.g_ddCanDeployForDetour, "MTDetour_CTerrorWeapon::CanDeployFor", Hook_Post, mreCanDeployForPost, toggle);
	vToggleDetour(g_esGeneral.g_ddCheckJumpButtonDetour, "MTDetour_CTerrorGameMovement::CheckJumpButton", Hook_Pre, mreCheckJumpButtonPre, toggle);
	vToggleDetour(g_esGeneral.g_ddCheckJumpButtonDetour, "MTDetour_CTerrorGameMovement::CheckJumpButton", Hook_Post, mreCheckJumpButtonPost, toggle);
	vToggleDetour(g_esGeneral.g_ddDeathFallCameraEnableDetour, "MTDetour_CDeathFallCamera::Enable", Hook_Pre, mreDeathFallCameraEnablePre, toggle);
	vToggleDetour(g_esGeneral.g_ddDoJumpDetour, "MTDetour_CTerrorGameMovement::DoJump", Hook_Pre, mreDoJumpPre, toggle);
	vToggleDetour(g_esGeneral.g_ddDoJumpDetour, "MTDetour_CTerrorGameMovement::DoJump", Hook_Post, mreDoJumpPost, toggle);
	vToggleDetour(g_esGeneral.g_ddEnterGhostStateDetour, "MTDetour_CTerrorPlayer::OnEnterGhostState", Hook_Post, mreEnterGhostStatePost, toggle);
	vToggleDetour(g_esGeneral.g_ddEnterStasisDetour, "MTDetour_Tank::EnterStasis", Hook_Post, mreEnterStasisPost, toggle);
	vToggleDetour(g_esGeneral.g_ddEventKilledDetour, "MTDetour_CTerrorPlayer::Event_Killed", Hook_Pre, mreEventKilledPre, toggle);
	vToggleDetour(g_esGeneral.g_ddEventKilledDetour, "MTDetour_CTerrorPlayer::Event_Killed", Hook_Post, mreEventKilledPost, toggle);
	vToggleDetour(g_esGeneral.g_ddExtinguishDetour, "MTDetour_CTerrorPlayer::Extinguish", Hook_Pre, mreExtinguishPre, toggle);
	vToggleDetour(g_esGeneral.g_ddFallingDetour, "MTDetour_CTerrorPlayer::OnFalling", Hook_Pre, mreFallingPre, toggle);
	vToggleDetour(g_esGeneral.g_ddFallingDetour, "MTDetour_CTerrorPlayer::OnFalling", Hook_Post, mreFallingPost, toggle);
	vToggleDetour(g_esGeneral.g_ddFootstepDetour, "MTDetour_CTerrorPlayer::OnFootstep", Hook_Pre, mreFootstepPre, toggle);
	vToggleDetour(g_esGeneral.g_ddFootstepDetour, "MTDetour_CTerrorPlayer::OnFootstep", Hook_Post, mreFootstepPost, toggle);
	vToggleDetour(g_esGeneral.g_ddFireBulletDetour, "MTDetour_CTerrorGun::FireBullet", Hook_Pre, mreFireBulletPre, toggle);
	vToggleDetour(g_esGeneral.g_ddFireBulletDetour, "MTDetour_CTerrorGun::FireBullet", Hook_Post, mreFireBulletPost, toggle);
	vToggleDetour(g_esGeneral.g_ddFirstSurvivorLeftSafeAreaDetour, "MTDetour_CDirector::OnFirstSurvivorLeftSafeArea", Hook_Post, mreFirstSurvivorLeftSafeAreaPost, toggle);
	vToggleDetour(g_esGeneral.g_ddGetMaxClip1Detour, "MTDetour_CBaseCombatWeapon::GetMaxClip1", Hook_Pre, mreGetMaxClip1Pre, toggle);
	vToggleDetour(g_esGeneral.g_ddGrabVictimWithTongueDetour, "MTDetour_CTerrorPlayer::GrabVictimWithTongue", Hook_Pre, mreGrabVictimWithTonguePre, toggle);
	vToggleDetour(g_esGeneral.g_ddIncapacitatedAsTankDetour, "MTDetour_CTerrorPlayer::OnIncapacitatedAsTank", Hook_Pre, mreIncapacitatedAsTankPre, toggle);
	vToggleDetour(g_esGeneral.g_ddIncapacitatedAsTankDetour, "MTDetour_CTerrorPlayer::OnIncapacitatedAsTank", Hook_Post, mreIncapacitatedAsTankPost, toggle);
	vToggleDetour(g_esGeneral.g_ddInitialContainedActionDetour, "MTDetour_TankBehavior::InitialContainedAction", Hook_Pre, mreInitialContainedActionPre, toggle);
	vToggleDetour(g_esGeneral.g_ddInitialContainedActionDetour, "MTDetour_TankBehavior::InitialContainedAction", Hook_Post, mreInitialContainedActionPost, toggle);
	vToggleDetour(g_esGeneral.g_ddITExpiredDetour, "MTDetour_CTerrorPlayer::OnITExpired", Hook_Post, mreITExpiredPost, toggle);
	vToggleDetour(g_esGeneral.g_ddLadderDismountDetour, "MTDetour_CTerrorPlayer::OnLadderDismount", Hook_Pre, mreLadderDismountPre, toggle);
	vToggleDetour(g_esGeneral.g_ddLadderDismountDetour, "MTDetour_CTerrorPlayer::OnLadderDismount", Hook_Post, mreLadderDismountPost, toggle);
	vToggleDetour(g_esGeneral.g_ddLadderMountDetour, "MTDetour_CTerrorPlayer::OnLadderMount", Hook_Pre, mreLadderMountPre, toggle);
	vToggleDetour(g_esGeneral.g_ddLadderMountDetour, "MTDetour_CTerrorPlayer::OnLadderMount", Hook_Post, mreLadderMountPost, toggle);
	vToggleDetour(g_esGeneral.g_ddLauncherDirectionDetour, "MTDetour_CEnvRockLauncher::LaunchCurrentDir", Hook_Pre, mreLaunchDirectionPre, toggle);
	vToggleDetour(g_esGeneral.g_ddLeaveStasisDetour, "MTDetour_Tank::LeaveStasis", Hook_Post, mreLeaveStasisPost, toggle);
	vToggleDetour(g_esGeneral.g_ddMaxCarryDetour, "MTDetour_CAmmoDef::MaxCarry", Hook_Pre, mreMaxCarryPre, toggle);
	vToggleDetour(g_esGeneral.g_ddPipeBombProjectileCreateDetour, "MTDetour_CPipeBombProjectile::Create", Hook_Pre, mrePipeBombProjectileCreatePre, toggle);
	vToggleDetour(g_esGeneral.g_ddPipeBombProjectileCreateDetour, "MTDetour_CPipeBombProjectile::Create", Hook_Post, mrePipeBombProjectileCreatePost, toggle);
	vToggleDetour(g_esGeneral.g_ddPipeBombProjectileDetonateDetour, "MTDetour_CPipeBombProjectile::Detonate", Hook_Post, mrePipeBombProjectileDetonatePost, toggle);
	vToggleDetour(g_esGeneral.g_ddPistolGetRateOfFireDetour, "MTDetour_CPistol::GetRateOfFire", Hook_Pre, mreGetRateOfFire, toggle);
	vToggleDetour(g_esGeneral.g_ddPouncedOnSurvivorDetour, "MTDetour_CTerrorPlayer::OnPouncedOnSurvivor", Hook_Pre, mrePouncedOnSurvivorPre, toggle);
	vToggleDetour(g_esGeneral.g_ddPreThinkDetour, "MTDetour_CTerrorPlayer::PreThink", Hook_Pre, mrePreThinkPre, toggle);
	vToggleDetour(g_esGeneral.g_ddPreThinkDetour, "MTDetour_CTerrorPlayer::PreThink", Hook_Post, mrePreThinkPost, toggle);
	vToggleDetour(g_esGeneral.g_ddReplaceTankDetour, "MTDetour_ZombieManager::ReplaceTank", Hook_Post, mreReplaceTankPost, toggle);
	vToggleDetour(g_esGeneral.g_ddRevivedDetour, "MTDetour_CTerrorPlayer::OnRevived", Hook_Pre, mreRevivedPre, toggle);
	vToggleDetour(g_esGeneral.g_ddRevivedDetour, "MTDetour_CTerrorPlayer::OnRevived", Hook_Post, mreRevivedPost, toggle);
	vToggleDetour(g_esGeneral.g_ddSecondaryAttackDetour, "MTDetour_CTerrorWeapon::SecondaryAttack", Hook_Pre, mreSecondaryAttackPre, toggle);
	vToggleDetour(g_esGeneral.g_ddSecondaryAttackDetour, "MTDetour_CTerrorWeapon::SecondaryAttack", Hook_Post, mreSecondaryAttackPost, toggle);
	vToggleDetour(g_esGeneral.g_ddSelectWeightedSequenceDetour, "MTDetour_CBaseAnimating::SelectWeightedSequence", Hook_Pre, mreSelectWeightedSequencePre, toggle);
	vToggleDetour(g_esGeneral.g_ddShovedByPounceLandingDetour, "MTDetour_CTerrorPlayer::OnShovedByPounceLanding", Hook_Pre, mreShovedByPounceLandingPre, toggle);
	vToggleDetour(g_esGeneral.g_ddShovedBySurvivorDetour, "MTDetour_CTerrorPlayer::OnShovedBySurvivor", Hook_Pre, mreShovedBySurvivorPre, toggle);
	vToggleDetour(g_esGeneral.g_ddSpawnTankDetour, "MTDetour_ZombieManager::SpawnTank", Hook_Pre, mreSpawnTankPre, toggle);
	vToggleDetour(g_esGeneral.g_ddSpecialClawSwingEndDetour, "MTDetour_CClaw::OnSwingEnd", Hook_Post, mreSpecialClawSwingEndPost, toggle);
	vToggleDetour(g_esGeneral.g_ddStaggeredDetour, "MTDetour_CTerrorPlayer::OnStaggered", Hook_Pre, mreStaggeredPre, toggle);
	vToggleDetour(g_esGeneral.g_ddStartRevivingDetour, "MTDetour_CTerrorPlayer::StartReviving", Hook_Pre, mreStartRevivingPre, toggle);
	vToggleDetour(g_esGeneral.g_ddStartRevivingDetour, "MTDetour_CTerrorPlayer::StartReviving", Hook_Post, mreStartRevivingPost, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawDoSwingDetour, "MTDetour_CTankClaw::DoSwing", Hook_Pre, mreTankClawDoSwingPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawDoSwingDetour, "MTDetour_CTankClaw::DoSwing", Hook_Post, mreTankClawDoSwingPost, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawGroundPoundDetour, "MTDetour_CTankClaw::GroundPound", Hook_Pre, mreTankClawGroundPoundPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawGroundPoundDetour, "MTDetour_CTankClaw::GroundPound", Hook_Post, mreTankClawGroundPoundPost, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawPlayerHitDetour, "MTDetour_CTankClaw::OnPlayerHit", Hook_Pre, mreTankClawPlayerHitPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawPlayerHitDetour, "MTDetour_CTankClaw::OnPlayerHit", Hook_Post, mreTankClawPlayerHitPost, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawPrimaryAttackDetour, "MTDetour_CTankClaw::PrimaryAttack", Hook_Pre, mreTankClawPrimaryAttackPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTankClawTrySwingDetour, "MTDetour_CTankClaw::TrySwing", Hook_Pre, mreTrySwingPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTankRockDetonateDetour, "MTDetour_CTankRock::Detonate", Hook_Pre, mreTankRockDetonatePre, toggle);
	vToggleDetour(g_esGeneral.g_ddThrowUpdateAbilityDetour, "MTDetour_CThrow::UpdateAbility", Hook_Pre, mreThrowUpdateAbilityPre, toggle);
	vToggleDetour(g_esGeneral.g_ddThrowUpdateAbilityDetour, "MTDetour_CThrow::UpdateAbility", Hook_Post, mreThrowUpdateAbilityPost, toggle);
	vToggleDetour(g_esGeneral.g_ddTrySwingDetour, "MTDetour_CTerrorWeapon::TrySwing", Hook_Pre, mreTrySwingPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTryToThrowRockDetour, "MTDetour_TankAttack::TryToThrowRock", Hook_Pre, mreTryToThrowRockPre, toggle);
	vToggleDetour(g_esGeneral.g_ddTryToThrowRockDetour, "MTDetour_TankAttack::TryToThrowRock", Hook_Post, mreTryToThrowRockPost, toggle);
	vToggleDetour(g_esGeneral.g_ddUTILSetModelDetour, "MTDetour_UTIL_SetModel", Hook_Pre, mreUTILSetModelPre, toggle);
	vToggleDetour(g_esGeneral.g_ddUseDetour, "MTDetour_CTerrorGun::Use", Hook_Pre, mreUsePre, toggle);
	vToggleDetour(g_esGeneral.g_ddUseDetour, "MTDetour_CTerrorGun::Use", Hook_Post, mreUsePost, toggle);
	vToggleDetour(g_esGeneral.g_ddUseDetour2, "MTDetour_CWeaponSpawn::Use", Hook_Pre, mreUsePre, toggle);
	vToggleDetour(g_esGeneral.g_ddUseDetour2, "MTDetour_CWeaponSpawn::Use", Hook_Post, mreUsePost, toggle);
	vToggleDetour(g_esGeneral.g_ddVomitedUponDetour, "MTDetour_CTerrorPlayer::OnVomitedUpon", Hook_Pre, mreVomitedUponPre, toggle);
	vToggleDetour(g_esGeneral.g_ddVomitedUponDetour, "MTDetour_CTerrorPlayer::OnVomitedUpon", Hook_Post, mreVomitedUponPost, toggle);

	switch (g_esGeneral.g_iPlatformType == 2)
	{
		case true:
		{
			vToggleDetour(g_esGeneral.g_ddStartHealingDetour, "MTDetour_CFirstAidKit::StartHealing", Hook_Pre, mreStartHealingLinuxPre, toggle, 1);
			vToggleDetour(g_esGeneral.g_ddStartHealingDetour, "MTDetour_CFirstAidKit::StartHealing", Hook_Post, mreStartHealingLinuxPost, toggle, 1);

			if (!g_bSecondGame)
			{
				vToggleDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease", Hook_Pre, mreTankRockReleaseLinuxPre, toggle);
				vToggleDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease", Hook_Post, mreTankRockReleaseLinuxPost, toggle);
			}
			else
			{
				vToggleDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease", Hook_Pre, mreTankRockReleaseWindowsPre, toggle);
				vToggleDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease", Hook_Post, mreTankRockReleaseWindowsPost, toggle);
			}
		}
		case false:
		{
			vToggleDetour(g_esGeneral.g_ddStartHealingDetour, "MTDetour_CFirstAidKit::StartHealing", Hook_Pre, mreStartHealingWindowsPre, toggle, 1);
			vToggleDetour(g_esGeneral.g_ddStartHealingDetour, "MTDetour_CFirstAidKit::StartHealing", Hook_Post, mreStartHealingWindowsPost, toggle, 1);
			vToggleDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease", Hook_Pre, mreTankRockReleaseWindowsPre, toggle);
			vToggleDetour(g_esGeneral.g_ddTankRockReleaseDetour, "MTDetour_CTankRock::OnRelease", Hook_Post, mreTankRockReleaseWindowsPost, toggle);
		}
	}
}

int iGetDetourIndex(const char[] name)
{
	for (int iPos = 0; iPos < g_esGeneral.g_iDetourCount; iPos++)
	{
		if (StrEqual(name, g_esDetour[iPos].g_sName))
		{
			return iPos;
		}
	}

	return -1;
}

/**
 * DHooks Detour callbacks
 **/

MRESReturn mreActionCompletePre(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_cvMTFirstAidHealPercent != null)
	{
		int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1), iTeammate = hParams.IsNull(2) ? 0 : hParams.Get(2);
		if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 6) || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH)))
		{
			vSetHealPercentCvar(false, iSurvivor);
		}
		else if (bIsSurvivor(iTeammate) && (bIsDeveloper(iTeammate, 6) || (g_esShooter[iTeammate].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iTeammate].g_iRewardTypes & MT_REWARD_HEALTH)))
		{
			vSetHealPercentCvar(false, iTeammate);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreActionCompletePost(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_flDefaultFirstAidHealPercent != -1.0)
	{
		vSetHealPercentCvar(true);
	}

	return MRES_Ignored;
}

MRESReturn mreActivateAbilityPre(int pThis)
{
	int iSpecial = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_owner");
	if (bIsInfected(iSpecial) && g_esTankCache[iSpecial].g_iThrowRock == 1)
	{
		char sDamage[11];
		float flDamage = bIsTank(iSpecial) ? g_esTankCache[iSpecial].g_flRockDamage : g_esTankCache[iSpecial].g_flPinDamage;
		IntToString(RoundToNearest(MT_GetScaledDamage(flDamage)), sDamage, sizeof sDamage);

		float flPos[3], flAngles[3];
		GetClientEyePosition(iSpecial, flPos);
		GetClientEyeAngles(iSpecial, flAngles);
		flPos[2] += 80.0;

		int iLauncher = CreateEntityByName("env_rock_launcher");
		if (bIsValidEntity(iLauncher))
		{
			SetEntPropEnt(iLauncher, Prop_Data, "m_hOwnerEntity", iSpecial);
			TeleportEntity(iLauncher, flPos, flAngles);
			DispatchSpawn(iLauncher);
			DispatchKeyValue(iLauncher, "rockdamageoverride", sDamage);
			AcceptEntityInput(iLauncher, "LaunchRock");
			iLauncher = EntIndexToEntRef(iLauncher);
			vDeleteEntity(iLauncher, 0.1);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreBaseEntityCreatePost(DHookReturn hReturn, DHookParam hParams)
{
	char sClassname[32];
	hParams.GetString(1, sClassname, sizeof sClassname);
	if (StrEqual(sClassname, "tank_rock") && hParams.IsNull(4))
	{
		vSetTankRock(hReturn.Value);
	}

	return MRES_Ignored;
}

MRESReturn mreBaseEntityGetGroundEntityPre(int pThis, DHookReturn hReturn)
{
	if (bIsSurvivor(pThis) && !bIsSurvivorDisabled(pThis) && !bIsSurvivorCaught(pThis) && iGetPlayerWaterLevel(pThis) < MT_WATER_WAIST)
	{
		float flCurrentTime = GetGameTime();
		if ((g_esPlayer[pThis].g_flLastJumpTime + MT_JUMP_DASHCOOLDOWN) > flCurrentTime)
		{
			g_esPlayer[pThis].g_bReleasedJump = false;

			return MRES_Ignored;
		}

		int iLimit = (bIsDeveloper(pThis, 5) && g_esDeveloper[pThis].g_iDevMidairDashes > g_esPlayer[pThis].g_iMidairDashesLimit) ? g_esDeveloper[pThis].g_iDevMidairDashes : g_esPlayer[pThis].g_iMidairDashesLimit;
		if (g_esPlayer[pThis].g_iMidairDashesCount < (iLimit + 1))
		{
			g_esPlayer[pThis].g_flLastJumpTime = flCurrentTime;
			g_esPlayer[pThis].g_iMidairDashesCount++;

			hReturn.Value = pThis;

			return MRES_Override;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreBeginChangeLevelPre(int pThis, DHookParam hParams)
{
	if (bIsSurvivor(pThis))
	{
		if (g_esShooter[pThis].g_iTotalPassives > 0 && g_esPlayer[pThis].g_iRewardTypes <= 0)
		{
			vEndPassives(pThis, true);
		}
		else if (g_esPlayer[pThis].g_iRewardTypes > 0 && g_esShooter[pThis].g_iTotalPassives <= 0)
		{
			vEndRewards(pThis, true);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreCanDeployForPre(int pThis, DHookReturn hReturn, DHookParam hParams)
{
	int iSurvivor = 0;

	switch (g_bSecondGame && !hParams.IsNull(1))
	{
		case true: iSurvivor = hParams.Get(1);
		case false: iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	}

	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 6) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_iLadderActions == 1)))
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_LadderMount2");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreCanDeployForPost(int pThis, DHookReturn hReturn, DHookParam hParams)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_LadderMount2");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreCheckJumpButtonPre(Address pThis, DHookReturn hReturn)
{
	vToggleDetour(g_esGeneral.g_ddBaseEntityGetGroundEntityDetour, "MTDetour_CBaseEntity::GetGroundEntity", Hook_Pre, mreBaseEntityGetGroundEntityPre, true);

	return MRES_Ignored;
}

MRESReturn mreCheckJumpButtonPost(Address pThis, DHookReturn hReturn)
{
	vToggleDetour(g_esGeneral.g_ddBaseEntityGetGroundEntityDetour, "MTDetour_CBaseEntity::GetGroundEntity", Hook_Pre, mreBaseEntityGetGroundEntityPre, false);

	return MRES_Ignored;
}

MRESReturn mreDeathFallCameraEnablePre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 5) || bIsDeveloper(iSurvivor, 11) || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_SPEEDBOOST) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iRiotGear == 1)) && g_esPlayer[iSurvivor].g_bFalling)
	{
		g_esPlayer[iSurvivor].g_bFatalFalling = true;

		return MRES_Supercede;
	}

	g_esPlayer[iSurvivor].g_bFatalFalling = true;

	Action aResult = Plugin_Continue;
	Call_StartForward(g_esGeneral.g_gfFatalFallingForward);
	Call_PushCell(iSurvivor);
	Call_Finish(aResult);

	return (aResult == Plugin_Handled) ? MRES_Supercede : MRES_Ignored;
}

MRESReturn mreDoAnimationEventPre(int pThis, DHookParam hParams)
{
	if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 6) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[pThis].g_iFastRecovery == 1)))
	{
		int iAnim = hParams.Get(1);
		if (iAnim == MT_ANIM_TANKPUNCHED || iAnim == MT_ANIM_LANDING)
		{
			hParams.Set(1, MT_ANIM_ACTIVESTATE);

			return MRES_ChangedHandled;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreDoJumpPre(Address pThis, DHookParam hParams)
{
	Address adSurvivor = LoadFromAddress((pThis + view_as<Address>(4)), NumberType_Int32);
	int iSurvivor = iGetEntityIndex(iGetRefEHandle(adSurvivor));
	if (bIsSurvivor(iSurvivor))
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 5);
		if ((bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_SPEEDBOOST)) && g_esPlayer[iSurvivor].g_flJumpHeight > 0.0)) && !g_esGeneral.g_bPatchJumpHeight)
		{
			float flHeight = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevJumpHeight > g_esPlayer[iSurvivor].g_flJumpHeight) ? g_esDeveloper[iSurvivor].g_flDevJumpHeight : g_esPlayer[iSurvivor].g_flJumpHeight;
			if (flHeight > 0.0)
			{
				g_esGeneral.g_bPatchJumpHeight = true;

				switch (!g_bSecondGame && g_esGeneral.g_iPlatformType == 2)
				{
					case true:
					{
						g_esGeneral.g_adOriginalJumpHeight[0] = LoadFromAddress(g_esGeneral.g_adDoJumpValue, NumberType_Int32);
						StoreToAddress(g_esGeneral.g_adDoJumpValue, view_as<int>(flHeight), NumberType_Int32, g_esGeneral.g_bUpdateDoJumpMemAccess);
						g_esGeneral.g_bUpdateDoJumpMemAccess = false;
					}
					case false:
					{
						g_esGeneral.g_adOriginalJumpHeight[1] = LoadFromAddress(g_esGeneral.g_adDoJumpValue, NumberType_Int32);
						g_esGeneral.g_adOriginalJumpHeight[0] = LoadFromAddress((g_esGeneral.g_adDoJumpValue + view_as<Address>(4)), NumberType_Int32);

						int iDouble[2];
						vGetDoubleFromFloat(flHeight, iDouble);
						StoreToAddress(g_esGeneral.g_adDoJumpValue, iDouble[1], NumberType_Int32, g_esGeneral.g_bUpdateDoJumpMemAccess);
						StoreToAddress((g_esGeneral.g_adDoJumpValue + view_as<Address>(4)), iDouble[0], NumberType_Int32, g_esGeneral.g_bUpdateDoJumpMemAccess);

						g_esGeneral.g_bUpdateDoJumpMemAccess = false;
					}
				}
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreDoJumpPost(Address pThis, DHookParam hParams)
{
	if (g_esGeneral.g_bPatchJumpHeight)
	{
		g_esGeneral.g_bPatchJumpHeight = false;

		switch (!g_bSecondGame && g_esGeneral.g_iPlatformType > 0)
		{
			case true: StoreToAddress(g_esGeneral.g_adDoJumpValue, g_esGeneral.g_adOriginalJumpHeight[0], NumberType_Int32, g_esGeneral.g_bUpdateDoJumpMemAccess);
			case false:
			{
				StoreToAddress(g_esGeneral.g_adDoJumpValue, g_esGeneral.g_adOriginalJumpHeight[1], NumberType_Int32, g_esGeneral.g_bUpdateDoJumpMemAccess);
				StoreToAddress((g_esGeneral.g_adDoJumpValue + view_as<Address>(4)), g_esGeneral.g_adOriginalJumpHeight[0], NumberType_Int32, g_esGeneral.g_bUpdateDoJumpMemAccess);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreEnterGhostStatePost(int pThis)
{
	if (bIsInfected(pThis))
	{
		g_esPlayer[pThis].g_bKeepCurrentType = true;

		if (bIsCoopMode() && g_esGeneral.g_flForceSpawn > 0.0)
		{
			CreateTimer(g_esGeneral.g_flForceSpawn, tTimerForceSpawnInfected, GetClientUserId(pThis), TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreEnterStasisPost(int pThis)
{
	if (bIsTank(pThis))
	{
		g_esPlayer[pThis].g_bStasis = true;
	}

	return MRES_Ignored;
}

MRESReturn mreEventKilledPre(int pThis, DHookParam hParams)
{
	int iAttacker = hParams.GetObjectVar(1, g_esGeneral.g_iAttackerOffset, ObjectValueType_Ehandle);
	if (bIsSurvivor(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		g_esPlayer[pThis].g_bLastLife[0] = false;
		g_esPlayer[pThis].g_bLastLife[1] = false;
		g_esPlayer[pThis].g_iReviveCount = 0;

		GetClientAbsOrigin(pThis, g_esPlayer[pThis].g_flLastPosition);

		if (!g_esPlayer[pThis].g_bFinalFall && g_esShooter[pThis].g_iFirstType > 0)
		{
			bool bHuman = bIsValidClient(pThis, MT_CHECK_FAKECLIENT);
			int iEnabled = (bHuman ? g_esSurvivorCache[pThis].g_iCarrierEnabled : g_esSurvivorCache[pThis].g_iCarrierBots);
			if (iEnabled > 0 && GetRandomFloat(0.1, 100.0) <= g_esSurvivorCache[pThis].g_flCarrierChance)
			{
				float flDelay = flClamp(g_esSurvivorCache[pThis].g_flCarrierDelay, 0.1);
				int iUserID = GetClientUserId(pThis);
				g_esShooter[pThis].g_bSurvivor = true;
				g_esShooter[pThis].g_bDeathModel = !!g_esSurvivorCache[pThis].g_iCarrierBody;
				g_esShooter[pThis].g_bMixTypes = !!g_esSurvivorCache[pThis].g_iCarrierMix;
				g_esShooter[pThis].g_flDamageMultiplier = g_esSurvivorCache[pThis].g_flCarrierDamageMultiplier;
				g_esShooter[pThis].g_flDeathModelDelay = flDelay;
				g_esShooter[pThis].g_flHealthMultiplier = g_esSurvivorCache[pThis].g_flCarrierHealthMultiplier;
				g_esShooter[pThis].g_iCharacter = g_esShooter[pThis].g_iCharacterType[1];

				switch (bHuman)
				{
					case true:
					{
						char sName[33];
						GetClientName(pThis, sName, sizeof sName);
						strcopy(g_esShooter[pThis].g_sSurvivorName, sizeof esShooter::g_sSurvivorName, sName);
					}
					case false:
					{
						int iCharacter = (g_bSecondGame ? g_esShooter[pThis].g_iCharacter : (g_esShooter[pThis].g_iCharacter + 4));
						strcopy(g_esShooter[pThis].g_sSurvivorName, sizeof esShooter::g_sSurvivorName, g_sSurvivorNames[iCharacter]);
					}
				}

				if (bIsInfected(iAttacker, MT_CHECK_INDEX|MT_CHECK_INGAME))
				{
					g_esShooter[pThis].g_iKillerSpecial = g_esPlayer[iAttacker].g_iInfectedType;
					g_esShooter[pThis].g_iKillerType = g_esPlayer[iAttacker].g_iTankType;
				}

				float flPos[3], flAngles[3];
				GetClientEyePosition(pThis, flPos);
				GetClientEyeAngles(pThis, flAngles);

				DataPack dpInfection;
				CreateDataTimer(flDelay, tTimerInfectSurvivor, dpInfection, TIMER_FLAG_NO_MAPCHANGE);
				dpInfection.WriteCell(iUserID);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierFilter);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierMix);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierMode);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierTeleport);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierMinType);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierMaxType);
				dpInfection.WriteCell(g_esSurvivorCache[pThis].g_iCarrierVoice);
				dpInfection.WriteFloat(g_esSurvivorCache[pThis].g_flCarrierVoiceChance);
				dpInfection.WriteFloat(g_esSurvivorCache[pThis].g_flCarrierVoiceInterval);
				dpInfection.WriteString(g_esSurvivorCache[pThis].g_sCarrierAttackVoicelines);
				dpInfection.WriteString(g_esSurvivorCache[pThis].g_sCarrierBaitVoicelines);
				dpInfection.WriteFloatArray(flPos, sizeof flPos);
				dpInfection.WriteFloatArray(flAngles, sizeof flAngles);
			}
		}

		vResetSurvivorStats(pThis, true);
		vSaveSurvivorWeapons(pThis);
		SetEntPropFloat(pThis, Prop_Send, "m_flLaggedMovementValue", 1.0);
		SetEntityGravity(pThis, 1.0);
		SetEntityMoveType(pThis, MOVETYPE_WALK);
		SetEntPropFloat(pThis, Prop_Send, "m_flStepSize", 18.0);
		SetEntProp(pThis, Prop_Send, "m_iFOV", 90);
		SetEntProp(pThis, Prop_Send, "m_iDefaultFOV", 90);
		TeleportEntity(pThis, .velocity = view_as<float>({0.0, 0.0, 0.0}));
	}
	else if (bIsInfected(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME))
	{
		if (bIsTank(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME) && !bIsCustomTank(pThis))
		{
			g_esGeneral.g_iTankCount--;

			if (!g_esPlayer[pThis].g_bArtificial)
			{
				delete g_esGeneral.g_hTankWaveTimer;

				g_esGeneral.g_hTankWaveTimer = CreateTimer(5.0, tTimerTankWave);
			}
		}
		else if (bIsSpecialInfected(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME))
		{
			if (!bIsCustomTank(pThis))
			{
				g_esGeneral.g_iSpecialCount--;
			}

			if (bIsSurvivor(iAttacker) && (bIsDeveloper(iAttacker, 10) || (((g_esShooter[iAttacker].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iAttacker].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iAttacker].g_iCleanKills == 1)))
			{
				bool bBoomer = bIsBoomer(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME), bSmoker = bIsSmoker(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME);
				char sName[32];
				static int iIndex[11] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
				int iLimit = (g_bSecondGame ? 6 : 3);
				for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
				{
					if (bBoomer && iPos < iLimit)
					{
						FormatEx(sName, sizeof sName, "MTPatch_Boomer%iCleanKill", (iPos + 1));
						if (iIndex[iPos] == -1)
						{
							iIndex[iPos] = iGetPatchIndex(sName);
						}

						if (iIndex[iPos] != -1)
						{
							vInstallPatch(iIndex[iPos]);
						}
					}
					else if (bSmoker && iLimit <= iPos <= (iLimit + 3))
					{
						FormatEx(sName, sizeof sName, "MTPatch_Smoker%iCleanKill", (iPos - (iLimit - 1)));
						if (iIndex[iPos] == -1)
						{
							iIndex[iPos] = iGetPatchIndex(sName);
						}

						if (iIndex[iPos] != -1)
						{
							vInstallPatch(iIndex[iPos]);
						}
					}
				}

				if (bIsSpitter(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME))
				{
					if (iIndex[10] == -1)
					{
						iIndex[10] = iGetPatchIndex("MTPatch_SpitterCleanKill");
					}

					if (iIndex[10] != -1)
					{
						vInstallPatch(iIndex[10]);
					}
				}
			}
		}

		if (bIsSpecialSupported(pThis) && bIsCustomTankSupported(pThis))
		{
			vCombineAbilitiesForward(pThis, MT_COMBO_UPONDEATH);
		}

		if (g_esShooter[pThis].g_bDeathModel && g_esShooter[pThis].g_iDeathModel != INVALID_ENT_REFERENCE)
		{
			int iDeathModel = EntRefToEntIndex(g_esShooter[pThis].g_iDeathModel);
			if (bIsValidEntity(iDeathModel))
			{
				float flPos[3];
				GetClientAbsOrigin(pThis, flPos);
				TeleportEntity(iDeathModel, flPos);
				SDKUnhook(iDeathModel, SDKHook_SetTransmit, OnDeathModelSetTransmit);
			}
		}

		vRemoveInfection(pThis);
	}

	Call_StartForward(g_esGeneral.g_gfPlayerEventKilledForward);
	Call_PushCell(pThis);
	Call_PushCell(iAttacker);
	Call_Finish();

	return MRES_Ignored;
}

MRESReturn mreEventKilledPost(int pThis, DHookParam hParams)
{
	char sName[32];
	static int iIndex[11] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
	int iLimit = (g_bSecondGame ? 6 : 3);
	for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
	{
		if (iPos < iLimit)
		{
			FormatEx(sName, sizeof sName, "MTPatch_Boomer%iCleanKill", (iPos + 1));
			if (iIndex[iPos] == -1)
			{
				iIndex[iPos] = iGetPatchIndex(sName);
			}

			if (iIndex[iPos] != -1)
			{
				vRemovePatch(iIndex[iPos]);
			}
		}
		else if (iLimit <= iPos <= (iLimit + 3))
		{
			FormatEx(sName, sizeof sName, "MTPatch_Smoker%iCleanKill", (iPos - (iLimit - 1)));
			if (iIndex[iPos] == -1)
			{
				iIndex[iPos] = iGetPatchIndex(sName);
			}

			if (iIndex[iPos] != -1)
			{
				vRemovePatch(iIndex[iPos]);
			}
		}
	}

	if (iIndex[10] == -1)
	{
		iIndex[10] = iGetPatchIndex("MTPatch_SpitterCleanKill");
	}

	if (iIndex[10] != -1)
	{
		vRemovePatch(iIndex[10]);
	}

	return MRES_Ignored;
}

MRESReturn mreExtinguishPre(int pThis)
{
	if (bIsInfected(pThis))
	{
		int iSurvivor = g_esPlayer[pThis].g_iLastFireAttacker;
		if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 7) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[iSurvivor].g_iEternalFlames == 1)))
		{
			return MRES_Supercede;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFallingPre(int pThis)
{
	if (bIsSurvivor(pThis) && !g_esPlayer[pThis].g_bFalling)
	{
		g_esPlayer[pThis].g_bFallDamage = true;
		g_esPlayer[pThis].g_bFalling = true;

		static int iIndex[2] = {-1, -1};
		if (iIndex[0] == -1)
		{
			iIndex[0] = iGetPatchIndex("MTPatch_DoJumpHeight");
		}

		if (((iIndex[0] != -1 && g_esPatch[iIndex[0]].g_iType == 2) || bIsDeveloper(pThis, 5) || bIsDeveloper(pThis, 11) || (g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_SPEEDBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_SPEEDBOOST) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[pThis].g_iRiotGear == 1)) && !g_esGeneral.g_bPatchFallingSound)
		{
			g_esGeneral.g_bPatchFallingSound = true;

			if (iIndex[1] == -1)
			{
				iIndex[1] = iGetPatchIndex("MTPatch_FallScreamMute");
			}

			if (iIndex[1] != -1)
			{
				vInstallPatch(iIndex[1]);
			}

			char sVoiceLine[64];
			sVoiceLine = (bIsDeveloper(pThis) && g_esDeveloper[pThis].g_sDevFallVoiceline[0] != '\0') ? g_esDeveloper[pThis].g_sDevFallVoiceline : g_esPlayer[pThis].g_sFallVoiceline;
			if (sVoiceLine[0] != '\0')
			{
				vForceVocalize(pThis, sVoiceLine);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFallingPost(int pThis)
{
	if (g_esGeneral.g_bPatchFallingSound)
	{
		g_esGeneral.g_bPatchFallingSound = false;

		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_FallScreamMute");
		}

		if (iIndex != -1)
		{
			vRemovePatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFootstepPre(int pThis, DHookParam hParams)
{
	if (bIsTank(pThis) && g_esTankCache[pThis].g_iFootstepShake <= 0)
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_FootstepShake");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFootstepPost(int pThis, DHookParam hParams)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_FootstepShake");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreFirstSurvivorLeftSafeAreaPost(DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor))
	{
		vResetRegularWavesTimer(true);

		if (bIsCoopMode() && g_esGeneral.g_iRushTypes > 0)
		{
			g_esGeneral.g_bRushSpawning = true;

			vAnnounceRushSpawnWarning();
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFinishHealingPre(int pThis)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_cvMTFirstAidHealPercent != null)
	{
		if (bIsDeveloper(iSurvivor, 6) || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_HEALTH))
		{
			vSetHealPercentCvar(false, iSurvivor);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFinishHealingPost(int pThis)
{
	if (g_esGeneral.g_flDefaultFirstAidHealPercent != -1.0)
	{
		vSetHealPercentCvar(true);
	}

	return MRES_Ignored;
}

MRESReturn mreFireBulletPre(int pThis)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor))
	{
		if (bIsDeveloper(iSurvivor, 4) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[iSurvivor].g_iRecoilDampener == 1) && !g_esGeneral.g_bPatchVerticalPunch)
		{
			g_esGeneral.g_bPatchVerticalPunch = true;

			int iWeapon = iGetWeaponInfoID(pThis);
			if (iWeapon != -1)
			{
				Address adWeapon = view_as<Address>(iWeapon + g_esGeneral.g_iVerticalPunchOffset);
				g_esGeneral.g_adOriginalVerticalPunch = LoadFromAddress(adWeapon, NumberType_Int32);
				StoreToAddress(adWeapon, 0.0, NumberType_Int32, g_esGeneral.g_bUpdateWeaponInfoMemAccess);
				g_esGeneral.g_bUpdateWeaponInfoMemAccess = false;
			}
		}

		if (bIsDeveloper(iSurvivor, 0) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[iSurvivor].g_iGhostBullets == 1))
		{
			char sName[32];
			static int iIndex[4] = {-1, -1, -1, -1};
			int iLimit = (g_bSecondGame ? 4 : 2);
			for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
			{
				if (iPos < iLimit)
				{
					if (iIndex[iPos] == -1)
					{
						FormatEx(sName, sizeof sName, "MTPatch_TraceBullet%i", (iPos + 1));
						iIndex[iPos] = iGetPatchIndex(sName);
					}

					if (iIndex[iPos] != -1)
					{
						vInstallPatch(iIndex[iPos]);
					}
				}
			}
		}

		if (g_bSecondGame && (bIsDeveloper(iSurvivor, 9) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST)) && g_esPlayer[iSurvivor].g_flSledgehammerRounds > 0.0)) && g_esGeneral.g_cvMTPhysicsPushScale != null)
		{
			g_esGeneral.g_flDefaultPhysicsPushScale = g_esGeneral.g_cvMTPhysicsPushScale.FloatValue;
			g_esGeneral.g_cvMTPhysicsPushScale.FloatValue = 5.0;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFireBulletPost(int pThis)
{
	bool bValid = bIsValidEntity(pThis);
	int iSurvivor = !bValid ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && bValid)
	{
		if (bIsDeveloper(iSurvivor, 0) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_AMMO)) && GetRandomFloat(0.1, 100.0) <= g_esPlayer[iSurvivor].g_flLuckyBullet))
		{
			int iClip = GetEntProp(pThis, Prop_Send, "m_iClip1");
			SetEntProp(pThis, Prop_Send, "m_iClip1", (iClip + 1));

			if (g_bSecondGame && bHasSpecialAmmo(pThis, 0))
			{
				SetEntProp(pThis, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded", (iClip + 1));
			}
		}
	}

	if (g_esGeneral.g_bPatchVerticalPunch)
	{
		g_esGeneral.g_bPatchVerticalPunch = false;

		int iWeapon = iGetWeaponInfoID(pThis);
		if (iWeapon != -1)
		{
			StoreToAddress(view_as<Address>(iWeapon + g_esGeneral.g_iVerticalPunchOffset), g_esGeneral.g_adOriginalVerticalPunch, NumberType_Int32, g_esGeneral.g_bUpdateWeaponInfoMemAccess);
		}
	}

	if (g_esGeneral.g_flDefaultPhysicsPushScale != -1.0)
	{
		g_esGeneral.g_cvMTPhysicsPushScale.FloatValue = g_esGeneral.g_flDefaultPhysicsPushScale;
		g_esGeneral.g_flDefaultPhysicsPushScale = -1.0;
	}

	char sName[32];
	static int iIndex[4] = {-1, -1, -1, -1};
	int iLimit = (g_bSecondGame ? 4 : 2);
	for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
	{
		if (iPos < iLimit)
		{
			if (iIndex[iPos] == -1)
			{
				FormatEx(sName, sizeof sName, "MTPatch_TraceBullet%i", (iPos + 1));
				iIndex[iPos] = iGetPatchIndex(sName);
			}

			if (iIndex[iPos] != -1)
			{
				vRemovePatch(iIndex[iPos]);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreFlingPre(int pThis, DHookParam hParams)
{
	if (bIsSurvivor(pThis))
	{
		if (bIsDeveloper(pThis, 6) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[pThis].g_iFastRecovery == 1))
		{
			hParams.Set(4, 1.5);

			return MRES_ChangedHandled;
		}
		else if (bIsDeveloper(pThis, 8) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[pThis].g_iRiotGear == 1))
		{
			return MRES_Supercede;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreGetMaxClip1Pre(int pThis, DHookReturn hReturn)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner"), iClip = iGetMaxAmmo(iSurvivor, 0, pThis, false);
	if (bIsSurvivor(iSurvivor) && iClip > 0)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 4) || bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_AMMO)) && g_esPlayer[iSurvivor].g_iAmmoBoost == 1))
		{
			hReturn.Value = iClip;

			return MRES_Override;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreGetRateOfFire(int pThis, DHookReturn hReturn)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor))
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flRapidPistol > 0.0))
		{
			int iAmmoType = GetEntProp(pThis, Prop_Send, "m_iPrimaryAmmoType");
			bool bPistol = (g_bSecondGame ? ((iAmmoType == MT_L4D2_AMMOTYPE_PISTOL) || (iAmmoType == MT_L4D2_AMMOTYPE_PISTOL_MAGNUM)) : (iAmmoType == MT_L4D1_AMMOTYPE_PISTOL));
			if (bPistol)
			{
				if (GetEntProp(pThis, Prop_Send, "m_isHoldingFireButton") != 0)
				{
					SetEntProp(pThis, Prop_Send, "m_isHoldingFireButton", 0);
				}

				if (GetEntProp(pThis, Prop_Send, "m_releasedFireButton") != 1)
				{
					SetEntProp(pThis, Prop_Send, "m_releasedFireButton", 1);
				}
			}

			float flRate = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevRapidPistol > 0.0) ? g_esDeveloper[iSurvivor].g_flDevRapidPistol : g_esPlayer[iSurvivor].g_flRapidPistol;
			hReturn.Value = flClamp(flRate, 0.01, 99999.0);

			return MRES_Override;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreGrabVictimWithTonguePre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreHitByVomitJarPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsInfected(pThis) && g_esTankCache[pThis].g_iVomitImmunity == 1 && bIsSurvivor(iSurvivor, MT_CHECK_INDEX|MT_CHECK_INGAME) && !(g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) && !(g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))
	{
		return MRES_Supercede;
	}

	Action aResult = Plugin_Continue;
	Call_StartForward(g_esGeneral.g_gfPlayerHitByVomitJarForward);
	Call_PushCell(pThis);
	Call_PushCell(iSurvivor);
	Call_Finish(aResult);

	return (aResult == Plugin_Handled) ? MRES_Supercede : MRES_Ignored;
}

MRESReturn mreIncapacitatedAsTankPre(int pThis, DHookParam hParams)
{
	if (bIsTank(pThis) && g_esTankCache[pThis].g_iSkipIncap == 1 && g_esGeneral.g_cvMTTankIncapHealth != null)
	{
		g_esGeneral.g_iDefaultTankIncapHealth = g_esGeneral.g_cvMTTankIncapHealth.IntValue;
		g_esGeneral.g_cvMTTankIncapHealth.IntValue = 0;
	}

	return MRES_Ignored;
}

MRESReturn mreIncapacitatedAsTankPost(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_iDefaultTankIncapHealth != -1)
	{
		g_esGeneral.g_cvMTTankIncapHealth.IntValue = g_esGeneral.g_iDefaultTankIncapHealth;
		g_esGeneral.g_iDefaultTankIncapHealth = -1;
	}

	return MRES_Ignored;
}

MRESReturn mreInitialContainedActionPre(Address pThis, DHookParam hParams)
{
	int iTank = hParams.Get(1);
	if (bIsTank(iTank) && bIsCoopMode() && g_esTankCache[iTank].g_iAutoAggravate == 1)
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_TankFinaleBehavior");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreInitialContainedActionPost(Address pThis, DHookParam hParams)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_TankFinaleBehavior");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreITExpiredPost(int pThis)
{
	if (bIsValidClient(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && g_esPlayer[pThis].g_bVomited)
	{
		g_esPlayer[pThis].g_bVomited = false;

		vRestorePlayerGlow(pThis);
	}

	return MRES_Ignored;
}

MRESReturn mreLadderDismountPre(int pThis)
{
	if (bIsSurvivor(pThis))
	{
#if defined _WeaponHandling_included
		int iActiveWeapon = iGetSurvivorActiveWeapon(pThis);
		if (bIsValidEntity(iActiveWeapon))
		{
			vToggleWeaponPassive(pThis, iActiveWeapon, 2);
		}
#endif
		if (bIsDeveloper(pThis, 6) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[pThis].g_iLadderActions == 1))
		{
			static int iIndex = -1;
			if (iIndex == -1)
			{
				iIndex = iGetPatchIndex("MTPatch_LadderDismount1");
			}

			if (iIndex != -1)
			{
				vInstallPatch(iIndex);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreLadderDismountPost(int pThis)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_LadderDismount1");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreLadderMountPre(int pThis)
{
	if (bIsSurvivor(pThis))
	{
#if defined _WeaponHandling_included
		int iActiveWeapon = iGetSurvivorActiveWeapon(pThis);
		if (bIsValidEntity(iActiveWeapon))
		{
			vToggleWeaponPassive(pThis, iActiveWeapon, 1);
		}
#endif
		if (bIsDeveloper(pThis, 6) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[pThis].g_iLadderActions == 1))
		{
			static int iIndex = -1;
			if (iIndex == -1)
			{
				iIndex = iGetPatchIndex("MTPatch_LadderMount1");
			}

			if (iIndex != -1)
			{
				vInstallPatch(iIndex);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreLadderMountPost(int pThis)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_LadderMount1");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreLaunchDirectionPre(int pThis)
{
	if (bIsValidEntity(pThis))
	{
		g_esGeneral.g_iLauncher = EntIndexToEntRef(pThis);
	}

	return MRES_Ignored;
}

MRESReturn mreLeaveStasisPost(int pThis)
{
	if (bIsTank(pThis))
	{
		g_esPlayer[pThis].g_bStasis = false;
	}

	return MRES_Ignored;
}

MRESReturn mreLeptOnSurvivorPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreMaxCarryPre(Address pThis, DHookReturn hReturn, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(2) ? 0 : hParams.Get(2), iAmmo = iGetMaxAmmo(iSurvivor, hParams.Get(1), 0, true);
	if (bIsSurvivor(iSurvivor) && iAmmo > 0)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 4) || bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_AMMO)) && g_esPlayer[iSurvivor].g_iAmmoBoost == 1))
		{
			hReturn.Value = iAmmo;

			return MRES_Override;
		}
	}

	return MRES_Ignored;
}

MRESReturn mrePipeBombProjectileCreatePre(DHookReturn hReturn, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(5) ? 0 : hParams.Get(5);
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_cvMTPipeBombDuration != null)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 4);
		if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))
		{
			float flDuration = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevPipeBombDuration > g_esPlayer[iSurvivor].g_flPipeBombDuration) ? g_esDeveloper[iSurvivor].g_flDevPipeBombDuration : g_esPlayer[iSurvivor].g_flPipeBombDuration;
			if (flDuration > 0.0)
			{
				g_esGeneral.g_flDefaultPipeBombDuration = g_esGeneral.g_cvMTPipeBombDuration.FloatValue;
				g_esGeneral.g_cvMTPipeBombDuration.FloatValue = flDuration;
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mrePipeBombProjectileCreatePost(DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_flDefaultPipeBombDuration != -1.0)
	{
		g_esGeneral.g_cvMTPipeBombDuration.FloatValue = g_esGeneral.g_flDefaultPipeBombDuration;
		g_esGeneral.g_flDefaultPipeBombDuration = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mrePipeBombProjectileDetonatePost(int pThis)
{
	if (bIsValidEntity(pThis))
	{
		int iThrower = GetEntPropEnt(pThis, Prop_Data, "m_hThrower");
		if (bIsSurvivor(iThrower))
		{
			if (g_esPlayer[iThrower].g_iGrenadeCount > 0)
			{
				g_esPlayer[iThrower].g_iGrenadeCount--;
			}

			int iSpecial = GetEntPropEnt(pThis, Prop_Data, "m_hMoveParent");
			if (bIsInfected(iSpecial) && g_esPlayer[iSpecial].g_bStickied)
			{
				g_esPlayer[iSpecial].g_bStickied = false;

				vResetTankSpeed(iSpecial, false);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mrePouncedOnSurvivorPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mrePreThinkPre(int pThis)
{
	if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 6) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[pThis].g_iLadderActions == 1)))
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_LadderDismount2");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mrePreThinkPost(int pThis)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_LadderDismount2");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreQueuePummelVictimPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1)))
	{
		DataPack dpPummel = new DataPack();
		dpPummel.WriteCell(GetClientUserId(iSurvivor));
		dpPummel.WriteCell(GetClientUserId(pThis));
		RequestFrame(vPummelTeleportFrame, dpPummel);

		SetEntityMoveType(iSurvivor, MOVETYPE_WALK);

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreReplaceTankPost(DHookParam hParams)
{
	int iOldTank = hParams.IsNull(1) ? 0 : hParams.Get(1), iNewTank = hParams.IsNull(2) ? 0 : hParams.Get(2),
		iType = (g_esPlayer[iNewTank].g_iPersonalType > 0) ? g_esPlayer[iNewTank].g_iPersonalType : g_esPlayer[iOldTank].g_iTankType;

	g_esPlayer[iNewTank].g_bReplaceSelf = true;

	vSetTankColor(iNewTank, iType);
	vCopyTankStats(iOldTank, iNewTank);
	vTankSpawn(iNewTank, -1, 8);
	vResetTank(iOldTank, false);
	vResetTank2(iOldTank);
	vCacheTankSettings(iOldTank);

	return MRES_Ignored;
}

MRESReturn mreRevivedPre(int pThis)
{
	if (bIsSurvivor(pThis) && g_esGeneral.g_cvMTSurvivorReviveHealth != null)
	{
		bool bDeveloper = bIsDeveloper(pThis, 6);
		if (bDeveloper || (g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_HEALTH) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_HEALTH))
		{
			int iHealth = (bDeveloper && g_esDeveloper[pThis].g_iDevReviveHealth > g_esPlayer[pThis].g_iReviveHealth) ? g_esDeveloper[pThis].g_iDevReviveHealth : g_esPlayer[pThis].g_iReviveHealth;
			if (iHealth > 0)
			{
				g_esGeneral.g_iDefaultSurvivorReviveHealth = g_esGeneral.g_cvMTSurvivorReviveHealth.IntValue;
				g_esGeneral.g_cvMTSurvivorReviveHealth.IntValue = iHealth;
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreRevivedPost(int pThis)
{
	if (g_esGeneral.g_iDefaultSurvivorReviveHealth != -1)
	{
		g_esGeneral.g_cvMTSurvivorReviveHealth.IntValue = g_esGeneral.g_iDefaultSurvivorReviveHealth;
		g_esGeneral.g_iDefaultSurvivorReviveHealth = -1;
	}

	return MRES_Ignored;
}

MRESReturn mreSecondaryAttackPre(int pThis)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_cvMTGunSwingInterval != null)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flShoveRate > 0.0))
		{
			float flMultiplier = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevShoveRate > g_esPlayer[iSurvivor].g_flShoveRate) ? g_esDeveloper[iSurvivor].g_flDevShoveRate : g_esPlayer[iSurvivor].g_flShoveRate;
			if (flMultiplier > 0.0)
			{
				g_esGeneral.g_flDefaultGunSwingInterval = g_esGeneral.g_cvMTGunSwingInterval.FloatValue;
				g_esGeneral.g_cvMTGunSwingInterval.FloatValue *= flMultiplier;
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreSecondaryAttackPost(int pThis)
{
	if (g_esGeneral.g_flDefaultGunSwingInterval != -1.0)
	{
		g_esGeneral.g_cvMTGunSwingInterval.FloatValue = g_esGeneral.g_flDefaultGunSwingInterval;
		g_esGeneral.g_flDefaultGunSwingInterval = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mreSelectWeightedSequencePre(int pThis, DHookReturn hReturn, DHookParam hParams)
{
	bool bFast = false;
	int iActivity = hParams.Get(1);
	if (bIsTank(pThis) && g_esTankCache[pThis].g_iSkipTaunt == 1)
	{
		switch (g_bSecondGame)
		{
			case true: bFast = (MT_L4D2_ACT_TERROR_HULK_VICTORY <= iActivity <= MT_L4D2_ACT_TERROR_RAGE_AT_KNOCKDOWN);
			case false: bFast = (MT_L4D1_ACT_TERROR_HULK_VICTORY <= iActivity <= MT_L4D1_ACT_TERROR_RAGE_AT_KNOCKDOWN);
		}

		if (bFast)
		{
			hReturn.Value = 0;

			SetEntPropFloat(pThis, Prop_Send, "m_flCycle", 1000.0);

			return MRES_ChangedOverride;
		}
	}
	else if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 6) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[pThis].g_iFastRecovery == 1)))
	{
		switch (g_bSecondGame)
		{
			case true: bFast = (iActivity == MT_L4D2_ACT_TERROR_HIT_BY_TANKPUNCH || iActivity == MT_L4D2_ACT_TERROR_IDLE_FALL_FROM_TANKPUNCH || iActivity == MT_L4D2_ACT_TERROR_POUNCED_TO_STAND || iActivity == MT_L4D2_ACT_TERROR_TANKROCK_TO_STAND);
			case false: bFast = (iActivity == MT_L4D1_ACT_TERROR_HIT_BY_TANKPUNCH || iActivity == MT_L4D1_ACT_TERROR_IDLE_FALL_FROM_TANKPUNCH || iActivity == MT_L4D1_ACT_TERROR_POUNCED_TO_STAND || iActivity == MT_L4D1_ACT_TERROR_TANKROCK_TO_STAND);
		}

		if (bFast)
		{
			hParams.Set(1, (g_bSecondGame ? MT_L4D2_ACT_TERROR_TANKPUNCH_LAND : MT_L4D1_ACT_TERROR_TANKPUNCH_LAND));

			return MRES_ChangedHandled;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreShovedByPounceLandingPre(int pThis, DHookParam hParams)
{
	if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 8) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[pThis].g_iRiotGear == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreShovedBySurvivorPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	float flDirection[3];
	hParams.GetVector(2, flDirection);

	Action aResult = Plugin_Continue;
	Call_StartForward(g_esGeneral.g_gfPlayerShovedBySurvivorForward);
	Call_PushCell(pThis);
	Call_PushCell(iSurvivor);
	Call_PushArray(flDirection, sizeof flDirection);
	Call_Finish(aResult);

	return (aResult == Plugin_Handled) ? MRES_Supercede : MRES_Ignored;
}

MRESReturn mreSpawnBoomerPre(DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_iRushTypes <= 0 || g_esGeneral.g_bForceSpawned)
	{
		return MRES_Ignored;
	}

	if (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_BOOMER) || (g_esGeneral.g_iRushLimit > 0 && iGetSpecialCount(true) >= g_esGeneral.g_iRushLimit))
	{
		hReturn.Value = 0;

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreSpawnHunterPre(DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_iRushTypes <= 0 || g_esGeneral.g_bForceSpawned)
	{
		return MRES_Ignored;
	}

	if (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_HUNTER) || (g_esGeneral.g_iRushLimit > 0 && iGetSpecialCount(true) >= g_esGeneral.g_iRushLimit))
	{
		hReturn.Value = 0;

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreSpawnSmokerPre(DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_iRushTypes <= 0 || g_esGeneral.g_bForceSpawned)
	{
		return MRES_Ignored;
	}

	if (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_SMOKER) || (g_esGeneral.g_iRushLimit > 0 && iGetSpecialCount(true) >= g_esGeneral.g_iRushLimit))
	{
		hReturn.Value = 0;

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreSpawnSpecialPre(DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_iRushTypes <= 0 || g_esGeneral.g_bForceSpawned)
	{
		return MRES_Ignored;
	}

	bool bAllow = false;
	int iSpecType = hParams.Get(1);

	switch (iSpecType)
	{
		case 1: bAllow = !!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_SMOKER);
		case 2: bAllow = !!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_BOOMER);
		case 3: bAllow = !!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_HUNTER);
		case 4: bAllow = !!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_SPITTER);
		case 5: bAllow = !!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_JOCKEY);
		case 6: bAllow = !!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_CHARGER);
	}

	bAllow = (g_esGeneral.g_iRushTypes > 1) ? (g_esGeneral.g_iRushLimit > 0 && iGetSpecialCount(true) < g_esGeneral.g_iRushLimit) : bAllow;
	if (!bAllow)
	{
		hReturn.Value = 0;

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreSpawnTankPre(DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_iLimitExtras <= 0 || g_esGeneral.g_bForceSpawned)
	{
		return MRES_Ignored;
	}

	bool bBlock = false;
	int iCount = iGetTankCount(true), iCount2 = iGetTankCount(false);
	if (g_esGeneral.g_iRushTypes > 0)
	{
		bBlock = !(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_TANK) || (g_esGeneral.g_iRushLimit > 0 && (iCount >= g_esGeneral.g_iRushLimit || iCount2 >= g_esGeneral.g_iRushLimit));
	}
	else
	{
		switch (g_esGeneral.g_bFinalMap)
		{
			case true:
			{
				switch (g_esGeneral.g_iFinaleAmount)
				{
					case -1, 0: bBlock = (0 < g_esGeneral.g_iFinaleWave[g_esGeneral.g_iTankWave] <= iCount) || (0 < g_esGeneral.g_iFinaleWave[g_esGeneral.g_iTankWave] <= iCount2);
					default: bBlock = (0 < g_esGeneral.g_iFinaleAmount <= iCount) || (0 < g_esGeneral.g_iFinaleAmount <= iCount2);
				}
			}
			case false: bBlock = (0 < g_esGeneral.g_iRegularAmount <= iCount) || (0 < g_esGeneral.g_iRegularAmount <= iCount2);
		}
	}

	if (bBlock)
	{
		hReturn.Value = 0;

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreSpecialClawSwingEndPost(int pThis, DHookParam hParams)
{
	int iSpecial = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsInfected(iSpecial) && g_esTankCache[iSpecial].g_flAttackInterval > 0.0 && g_esGeneral.g_hSDKStartAttackTimer != null)
	{
		SDKCall(g_esGeneral.g_hSDKStartAttackTimer, pThis, g_esTankCache[iSpecial].g_flAttackInterval);
	}

	return MRES_Ignored;
}

MRESReturn mreStaggeredPre(int pThis, DHookParam hParams)
{
	if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 8) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[pThis].g_iRiotGear == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreStartActionPre(int pThis, DHookReturn hReturn, DHookParam hParams)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_hSDKGetUseAction != null)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flActionDuration > 0.0))
		{
			float flDuration = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevActionDuration > g_esPlayer[iSurvivor].g_flActionDuration) ? g_esDeveloper[iSurvivor].g_flDevActionDuration : g_esPlayer[iSurvivor].g_flActionDuration;
			if (flDuration > 0.0)
			{
				vSetDurationCvars(pThis, false, flDuration);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreStartActionPost(int pThis, DHookReturn hReturn, DHookParam hParams)
{
	if (g_esGeneral.g_hSDKGetUseAction != null)
	{
		vSetDurationCvars(pThis, true);
	}

	return MRES_Ignored;
}

MRESReturn mreStartCarryingVictimPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreStartHealingLinuxPre(DHookParam hParams)
{
	int pThis = hParams.Get(1), iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_cvMTFirstAidKitUseDuration != null)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flActionDuration > 0.0))
		{
			float flDuration = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevActionDuration > g_esPlayer[iSurvivor].g_flActionDuration) ? g_esDeveloper[iSurvivor].g_flDevActionDuration : g_esPlayer[iSurvivor].g_flActionDuration;
			if (flDuration > 0.0)
			{
				g_esGeneral.g_flDefaultFirstAidKitUseDuration = g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue;
				g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue = flDuration;
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreStartHealingLinuxPost(DHookParam hParams)
{
	if (g_esGeneral.g_flDefaultFirstAidKitUseDuration != -1.0)
	{
		g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue = g_esGeneral.g_flDefaultFirstAidKitUseDuration;
		g_esGeneral.g_flDefaultFirstAidKitUseDuration = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mreStartHealingWindowsPre(int pThis, DHookParam hParams)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_cvMTFirstAidKitUseDuration != null)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[iSurvivor].g_flActionDuration > 0.0))
		{
			float flDuration = (bDeveloper && g_esDeveloper[iSurvivor].g_flDevActionDuration > g_esPlayer[iSurvivor].g_flActionDuration) ? g_esDeveloper[iSurvivor].g_flDevActionDuration : g_esPlayer[iSurvivor].g_flActionDuration;
			if (flDuration > 0.0)
			{
				g_esGeneral.g_flDefaultFirstAidKitUseDuration = g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue;
				g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue = flDuration;
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreStartHealingWindowsPost(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_flDefaultFirstAidKitUseDuration != -1.0)
	{
		g_esGeneral.g_cvMTFirstAidKitUseDuration.FloatValue = g_esGeneral.g_flDefaultFirstAidKitUseDuration;
		g_esGeneral.g_flDefaultFirstAidKitUseDuration = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mreStartRevivingPre(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_cvMTSurvivorReviveDuration != null)
	{
		int iTarget = hParams.IsNull(1) ? 0 : hParams.Get(1);
		if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 6) || (g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_ATTACKBOOST)))
		{
			vSetReviveDurationCvar(pThis);
		}
		else if (bIsSurvivor(iTarget) && (bIsDeveloper(iTarget, 6) || (g_esShooter[iTarget].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iTarget].g_iRewardTypes & MT_REWARD_ATTACKBOOST)))
		{
			vSetReviveDurationCvar(iTarget);
		}

		g_esPlayer[iTarget].g_iReviver = GetClientUserId(pThis);
	}

	return MRES_Ignored;
}

MRESReturn mreStartRevivingPost(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_flDefaultSurvivorReviveDuration != -1.0)
	{
		g_esGeneral.g_cvMTSurvivorReviveDuration.FloatValue = g_esGeneral.g_flDefaultSurvivorReviveDuration;
		g_esGeneral.g_flDefaultSurvivorReviveDuration = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawDoSwingPre(int pThis)
{
	int iTank = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsTank(iTank) && g_esTankCache[iTank].g_iSweepFist == 1)
	{
		char sName[32];
		static int iIndex[2] = {-1, -1};
		for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
		{
			if (iIndex[iPos] == -1)
			{
				FormatEx(sName, sizeof sName, "MTPatch_TankSweepFist%i", (iPos + 1));
				iIndex[iPos] = iGetPatchIndex(sName);
			}

			if (iIndex[iPos] != -1)
			{
				vInstallPatch(iIndex[iPos]);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawDoSwingPost(int pThis)
{
	char sName[32];
	static int iIndex[2] = {-1, -1};
	for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
	{
		if (iIndex[iPos] == -1)
		{
			FormatEx(sName, sizeof sName, "MTPatch_TankSweepFist%i", (iPos + 1));
			iIndex[iPos] = iGetPatchIndex(sName);
		}

		if (iIndex[iPos] != -1)
		{
			vRemovePatch(iIndex[iPos]);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawGroundPoundPre(int pThis)
{
	int iTank = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsTank(iTank) && g_esTankCache[iTank].g_iGroundPound == 1)
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_TankGroundPound");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawGroundPoundPost(int pThis)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_TankGroundPound");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawPlayerHitPre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && bIsDeveloper(iSurvivor, 8))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawPlayerHitPost(int pThis, DHookParam hParams)
{
	int iTank = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner"), iSurvivor = hParams.IsNull(1) ? 0 : hParams.Get(1);
	if (bIsTank(iTank) && bIsSurvivor(iSurvivor))
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 4);
		if (g_esTankCache[iTank].g_flPunchForce >= 0.0 || bDeveloper || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iRiotGear == 1))
		{
			float flVelocity[3], flForce = flGetPunchForce(iSurvivor, g_esTankCache[iTank].g_flPunchForce);
			if (flForce >= 0.0)
			{
				GetEntPropVector(iSurvivor, Prop_Data, "m_vecVelocity", flVelocity);
				ScaleVector(flVelocity, flForce);
				TeleportEntity(iSurvivor, .velocity = flVelocity);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankClawPrimaryAttackPre(int pThis)
{
	int iTank = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsTank(iTank) && g_esTankCache[iTank].g_flAttackInterval > 0.0)
	{
		float flCurrentTime = GetGameTime();
		if ((g_esPlayer[iTank].g_flLastAttackTime + g_esTankCache[iTank].g_flAttackInterval) > flCurrentTime)
		{
			return MRES_Supercede;
		}

		g_esPlayer[iTank].g_flLastAttackTime = flCurrentTime;
	}

	return MRES_Ignored;
}

MRESReturn mreTankRockCreatePost(DHookReturn hReturn, DHookParam hParams)
{
	if (hParams.IsNull(4))
	{
		vSetTankRock(hReturn.Value);
	}

	return MRES_Ignored;
}

MRESReturn mreTankRockDetonatePre(int pThis)
{
	if (bIsValidEntity(pThis))
	{
		int iThrower = GetEntPropEnt(pThis, Prop_Data, "m_hThrower");
		if (bIsTank(iThrower))
		{
			Call_StartForward(g_esGeneral.g_gfRockBreakForward);
			Call_PushCell(iThrower);
			Call_PushCell(pThis);
			Call_Finish();

			vCombineAbilitiesForward(iThrower, MT_COMBO_ROCKBREAK, .weapon = pThis);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankRockReleaseLinuxPre(DHookParam hParams)
{
	int pThis = hParams.Get(1), iThrower = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Data, "m_hThrower");
	if (bIsTank(iThrower) && g_esTankCache[iThrower].g_iRockSound <= 0)
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_TankRockRelease");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankRockReleaseLinuxPost(DHookParam hParams)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_TankRockRelease");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreTankRockReleaseWindowsPre(int pThis, DHookParam hParams)
{
	int iThrower = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Data, "m_hThrower");
	if (bIsTank(iThrower) && g_esTankCache[iThrower].g_iRockSound <= 0)
	{
		static int iIndex = -1;
		if (iIndex == -1)
		{
			iIndex = iGetPatchIndex("MTPatch_TankRockRelease");
		}

		if (iIndex != -1)
		{
			vInstallPatch(iIndex);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTankRockReleaseWindowsPost(int pThis, DHookParam hParams)
{
	static int iIndex = -1;
	if (iIndex == -1)
	{
		iIndex = iGetPatchIndex("MTPatch_TankRockRelease");
	}

	if (iIndex != -1)
	{
		vRemovePatch(iIndex);
	}

	return MRES_Ignored;
}

MRESReturn mreTestMeleeSwingCollisionPre(int pThis, DHookParam hParams)
{
	int iSurvivor = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsSurvivor(iSurvivor) && g_esGeneral.g_cvMTMeleeRange != null)
	{
		bool bDeveloper = bIsDeveloper(iSurvivor, 6);
		if (bDeveloper || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_DAMAGEBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_DAMAGEBOOST))
		{
			int iRange = (bDeveloper && g_esDeveloper[iSurvivor].g_iDevMeleeRange > g_esPlayer[iSurvivor].g_iMeleeRange) ? g_esDeveloper[iSurvivor].g_iDevMeleeRange : g_esPlayer[iSurvivor].g_iMeleeRange;
			if (iRange > 0)
			{
				g_esGeneral.g_iDefaultMeleeRange = g_esGeneral.g_cvMTMeleeRange.IntValue;
				g_esGeneral.g_cvMTMeleeRange.IntValue = iRange;
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTestMeleeSwingCollisionPost(int pThis, DHookParam hParams)
{
	if (g_esGeneral.g_iDefaultMeleeRange != -1)
	{
		g_esGeneral.g_cvMTMeleeRange.IntValue = g_esGeneral.g_iDefaultMeleeRange;
		g_esGeneral.g_iDefaultMeleeRange = -1;
	}

	return MRES_Ignored;
}

MRESReturn mreThrowUpdateAbilityPre(int pThis)
{
	int iTank = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_owner");
	if (bIsTank(iTank) && g_esTankCache[iTank].g_flThrowForce > 0.0 && g_esGeneral.g_cvMTTankThrowForce != null)
	{
		g_esGeneral.g_flDefaultTankThrowForce = g_esGeneral.g_cvMTTankThrowForce.FloatValue;
		g_esGeneral.g_cvMTTankThrowForce.FloatValue = g_esTankCache[iTank].g_flThrowForce;
	}

	return MRES_Ignored;
}

MRESReturn mreThrowUpdateAbilityPost(int pThis)
{
	if (g_esGeneral.g_flDefaultTankThrowForce != -1.0)
	{
		g_esGeneral.g_cvMTTankThrowForce.FloatValue = g_esGeneral.g_flDefaultTankThrowForce;
		g_esGeneral.g_flDefaultTankThrowForce = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mreTrySwingPre(int pThis, DHookParam hParams)
{
	int iSpecial = !bIsValidEntity(pThis) ? 0 : GetEntPropEnt(pThis, Prop_Send, "m_hOwner");
	if (bIsInfected(iSpecial) && g_esTankCache[iSpecial].g_flAttackInterval > 0.0)
	{
		hParams.Set(1, g_esTankCache[iSpecial].g_flAttackInterval);

		return MRES_ChangedHandled;
	}

	return MRES_Ignored;
}

MRESReturn mreTryToThrowRockPre(Address pThis, DHookParam hParams)
{
	int iTank = hParams.Get(1);
	if (bIsTank(iTank))
	{
		if (bIsCoopMode() && g_esTankCache[iTank].g_iPrioritizeThrows == 1)
		{
			char sName[32];
			static int iIndex[2] = {-1, -1};
			for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
			{
				if (iIndex[iPos] == -1)
				{
					FormatEx(sName, sizeof sName, "MTPatch_TankAttackDifficulty%i", (iPos + 1));
					iIndex[iPos] = iGetPatchIndex(sName);
				}

				if (iIndex[iPos] != -1)
				{
					vInstallPatch(iIndex[iPos]);
				}
			}
		}

		if (g_esTankCache[iTank].g_flThrowForce > 0.0 && g_esGeneral.g_cvMTTankThrowForce != null)
		{
			g_esGeneral.g_flDefaultTankThrowForce = g_esGeneral.g_cvMTTankThrowForce.FloatValue;
			g_esGeneral.g_cvMTTankThrowForce.FloatValue = g_esTankCache[iTank].g_flThrowForce;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreTryToThrowRockPost(Address pThis, DHookParam hParams)
{
	char sName[32];
	static int iIndex[2] = {-1, -1};
	for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
	{
		if (iIndex[iPos] == -1)
		{
			FormatEx(sName, sizeof sName, "MTPatch_TankAttackDifficulty%i", (iPos + 1));
			iIndex[iPos] = iGetPatchIndex(sName);
		}

		if (iIndex[iPos] != -1)
		{
			vRemovePatch(iIndex[iPos]);
		}
	}

	if (g_esGeneral.g_flDefaultTankThrowForce != -1.0)
	{
		g_esGeneral.g_cvMTTankThrowForce.FloatValue = g_esGeneral.g_flDefaultTankThrowForce;
		g_esGeneral.g_flDefaultTankThrowForce = -1.0;
	}

	return MRES_Ignored;
}

MRESReturn mreUTILSetModelPre(DHookParam hParams)
{
	char sModel[PLATFORM_MAX_PATH];
	hParams.GetString(2, sModel, sizeof sModel);
	if (!IsModelPrecached(sModel))
	{
		vLogMessage(MT_LOG_SERVER, _, "%s UTIL_SetModel: Model %s is not precached.", MT_TAG, sModel);
		PrecacheModel(sModel, true);

		if (!IsModelPrecached(sModel))
		{
			vLogMessage(MT_LOG_SERVER, _, "%s UTIL_SetModel: Model %s failed to late-precache.", MT_TAG, sModel);

			return MRES_Supercede;
		}
	}

	return MRES_Ignored;
}

MRESReturn mreUsePre(int pThis, DHookParam hParams)
{
	int iSurvivor = hParams.Get(1);
	if (bIsSurvivor(iSurvivor) && (bIsDeveloper(iSurvivor, 6) || (g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)))
	{
		char sName[32];
		static int iIndex[3] = {-1, -1, -1};
		for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
		{
			if (iIndex[iPos] == -1)
			{
				FormatEx(sName, sizeof sName, "MTPatch_EquipSecondWeapon%i", (iPos + 1));
				iIndex[iPos] = iGetPatchIndex(sName);
			}

			if (iIndex[iPos] != -1)
			{
				vInstallPatch(iIndex[iPos]);
			}
		}
	}

	return MRES_Ignored;
}

MRESReturn mreUsePost(int pThis, DHookParam hParams)
{
	char sName[32];
	static int iIndex[3] = {-1, -1, -1};
	for (int iPos = 0; iPos < (sizeof iIndex); iPos++)
	{
		if (iIndex[iPos] == -1)
		{
			FormatEx(sName, sizeof sName, "MTPatch_EquipSecondWeapon%i", (iPos + 1));
			iIndex[iPos] = iGetPatchIndex(sName);
		}

		if (iIndex[iPos] != -1)
		{
			vRemovePatch(iIndex[iPos]);
		}
	}

	return MRES_Ignored;
}

MRESReturn mreVomitedUponPre(int pThis, DHookParam hParams)
{
	if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 8) || bIsDeveloper(pThis, 10) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[pThis].g_iSafetyBubble == 1)))
	{
		return MRES_Supercede;
	}

	return MRES_Ignored;
}

MRESReturn mreVomitedUponPost(int pThis, DHookParam hParams)
{
	if (bIsValidClient(pThis, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && !g_esPlayer[pThis].g_bVomited)
	{
		if (bIsSurvivor(pThis) && (bIsDeveloper(pThis, 8) || bIsDeveloper(pThis, 10) || (((g_esShooter[pThis].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[pThis].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[pThis].g_iSafetyBubble == 1)))
		{
			return MRES_Ignored;
		}

		g_esPlayer[pThis].g_bVomited = true;

		if (bIsInfected(pThis) || bIsSurvivor(pThis))
		{
			vRemovePlayerGlow(pThis);
		}
	}

	return MRES_Ignored;
}

/**
 * DHooks Hook callbacks
 **/

MRESReturn mreWeaponShootPositionPost(int pThis, DHookReturn hReturn)
{
	if (g_esGeneral.g_bPluginEnabled && bIsSurvivor(pThis) && g_esGeneral.g_iBulletFix == 1 && !g_esGeneral.g_bIgnoreWeaponShotPosition)
	{
		hReturn.SetVector(g_esPlayer[pThis].g_flLastWeaponShotPosition);

		return MRES_Supercede;
	}

	return MRES_Ignored;
}

/**
 * Patch functions
 **/

void vInstallPatch(int index, bool override = false)
{
	if (index >= g_esGeneral.g_iPatchCount)
	{
		LogError("%s Patch #%i out of range when installing patch. (Maximum: %i)", MT_TAG, index, (g_esGeneral.g_iPatchCount - 1));

		return;
	}

	if ((g_esPatch[index].g_iType == 2 && !override) || g_esPatch[index].g_bInstalled)
	{
		return;
	}

	for (int iPos = 0; iPos < g_esPatch[index].g_iLength; iPos++)
	{
		g_esPatch[index].g_iOriginalBytes[iPos] = LoadFromAddress((g_esPatch[index].g_adPatch + view_as<Address>(g_esPatch[index].g_iOffset + iPos)), NumberType_Int8);
		StoreToAddress((g_esPatch[index].g_adPatch + view_as<Address>(g_esPatch[index].g_iOffset + iPos)), g_esPatch[index].g_iPatchBytes[iPos], NumberType_Int8, g_esPatch[index].g_bUpdateMemAccess);
	}

	g_esPatch[index].g_bInstalled = true;
	g_esPatch[index].g_bUpdateMemAccess = false;

	if (g_esPatch[index].g_iType == 2 && g_esPatch[index].g_bLog)
	{
		vLogMessage(-1, _, "%s Enabled the \"%s\" patch.", MT_TAG, g_esPatch[index].g_sName);
	}
}

void vInstallPermanentPatches()
{
	for (int iPos = 0; iPos < g_esGeneral.g_iPatchCount; iPos++)
	{
		if (g_esPatch[iPos].g_sName[0] != '\0' && g_esPatch[iPos].g_iType == 2 && !g_esPatch[iPos].g_bInstalled)
		{
			vInstallPatch(iPos, true);
		}
	}
}

void vReadPatchSettings(const char[] key, const char[] value)
{
	int iIndex = g_esGeneral.g_iPatchCount;
	g_esPatch[iIndex].g_bLog = !!iGetKeyValueEx(key, "Log", "Log", "Log", "Log", g_esPatch[iIndex].g_bLog, value, 0, 1);
	g_esPatch[iIndex].g_iType = iGetKeyValueEx(key, "Type", "Type", "Type", "Type", g_esPatch[iIndex].g_iType, value, 0, 2);

	vGetKeyValueEx(key, "CvarCheck", "Cvar Check", "Cvar_Check", "cvars", g_esPatch[iIndex].g_sCvars, sizeof esPatch::g_sCvars, value);
	vGetKeyValueEx(key, "Signature", "Signature", "Signature", "Signature", g_esPatch[iIndex].g_sSignature, sizeof esPatch::g_sSignature, value);
	vGetKeyValueEx(key, "Offset", "Offset", "Offset", "Offset", g_esPatch[iIndex].g_sOffset, sizeof esPatch::g_sOffset, value);
	vGetKeyValueEx(key, "Verify", "Verify", "Verify", "Verify", g_esPatch[iIndex].g_sVerify, sizeof esPatch::g_sVerify, value);
	vGetKeyValueEx(key, "Bypass", "Bypass", "Bypass", "Bypass", g_esPatch[iIndex].g_sBypass, sizeof esPatch::g_sBypass, value);
	vGetKeyValueEx(key, "Patch", "Patch", "Patch", "Patch", g_esPatch[iIndex].g_sPatch, sizeof esPatch::g_sPatch, value);
}

void vRegisterPatch(const char[] name, bool reg)
{
	if (!reg)
	{
		g_esGeneral.g_bOverridePatch = true;

		return;
	}

	int iIndex = g_esGeneral.g_iPatchCount;
	if (g_esPatch[iIndex].g_iType == 0 || bIsConVarConflictFound(name, g_esPatch[iIndex].g_sCvars, "skipping", g_esPatch[iIndex].g_bLog))
	{
		vResetPatchInfo(iIndex);

		return;
	}

	if (g_esPatch[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s Reading byte(s) for \"%s\": %s - %s - %s", MT_TAG, name, g_esPatch[iIndex].g_sBypass, g_esPatch[iIndex].g_sVerify, g_esPatch[iIndex].g_sPatch);
	}

	char sSet[MT_PATCH_MAXLEN][2];
	int iBypass[MT_PATCH_MAXLEN], iVerify[MT_PATCH_MAXLEN], iPatch[MT_PATCH_MAXLEN];

	ReplaceString(g_esPatch[iIndex].g_sBypass, sizeof esPatch::g_sBypass, "\\x", " ", false);
	TrimString(g_esPatch[iIndex].g_sBypass);
	int iBLength = ExplodeString(g_esPatch[iIndex].g_sBypass, " ", sSet, sizeof sSet, sizeof sSet[]);

	ReplaceString(g_esPatch[iIndex].g_sVerify, sizeof esPatch::g_sVerify, "\\x", " ", false);
	TrimString(g_esPatch[iIndex].g_sVerify);
	int iVLength = ExplodeString(g_esPatch[iIndex].g_sVerify, " ", sSet, sizeof sSet, sizeof sSet[]);

	ReplaceString(g_esPatch[iIndex].g_sPatch, sizeof esPatch::g_sPatch, "\\x", " ", false);
	TrimString(g_esPatch[iIndex].g_sPatch);
	int iPLength = ExplodeString(g_esPatch[iIndex].g_sPatch, " ", sSet, sizeof sSet, sizeof sSet[]);

	if (g_esPatch[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s Storing byte(s) for \"%s\": %s - %s - %s", MT_TAG, name, g_esPatch[iIndex].g_sBypass, g_esPatch[iIndex].g_sVerify, g_esPatch[iIndex].g_sPatch);
	}

	if (g_esPatch[iIndex].g_sBypass[0] != '\0')
	{
		for (int iPos = 0; iPos < MT_PATCH_MAXLEN; iPos++)
		{
			switch (iPos < iBLength)
			{
				case true: iBypass[iPos] = (iGetDecimalFromHex(g_esPatch[iIndex].g_sBypass[iPos * 3]) << 4) + iGetDecimalFromHex(g_esPatch[iIndex].g_sBypass[(iPos * 3) + 1]);
				case false: iBypass[iPos] = 0;
			}
		}
	}

	for (int iPos = 0; iPos < MT_PATCH_MAXLEN; iPos++)
	{
		switch (iPos < iVLength)
		{
			case true: iVerify[iPos] = (iGetDecimalFromHex(g_esPatch[iIndex].g_sVerify[iPos * 3]) << 4) + iGetDecimalFromHex(g_esPatch[iIndex].g_sVerify[(iPos * 3) + 1]);
			case false: iVerify[iPos] = 0;
		}
	}

	for (int iPos = 0; iPos < MT_PATCH_MAXLEN; iPos++)
	{
		switch (iPos < iPLength)
		{
			case true: iPatch[iPos] = (iGetDecimalFromHex(g_esPatch[iIndex].g_sPatch[iPos * 3]) << 4) + iGetDecimalFromHex(g_esPatch[iIndex].g_sPatch[(iPos * 3) + 1]);
			case false: iPatch[iPos] = 0;
		}
	}

	Address adPatch = g_esGeneral.g_gdMutantTanks.GetMemSig(g_esPatch[iIndex].g_sSignature);
	if (adPatch == Address_Null)
	{
		vResetPatchInfo(iIndex);

		return;
	}

	int iOffset = 0;
	if (g_esPatch[iIndex].g_sOffset[0] != '\0')
	{
		iOffset = IsCharNumeric(g_esPatch[iIndex].g_sOffset[0]) ? StringToInt(g_esPatch[iIndex].g_sOffset) : iGetGameDataOffset(g_esPatch[iIndex].g_sOffset);
		if (iOffset == -1)
		{
			vResetPatchInfo(iIndex);

			return;
		}
	}

	bool bInvalid = false;
	char sBypass[192], sVerify[192], sActual[192];
	int iActualByte = 0;
	for (int iPos = 0; iPos < iVLength; iPos++)
	{
		if (iVerify[iPos] < 0 || iVerify[iPos] > 255 || iBypass[iPos] < 0 || iBypass[iPos] > 255)
		{
			LogError("%s Invalid byte to verify for %s (%i) [%i]", MT_TAG, name, iVerify[iPos], iBypass[iPos]);

			continue;
		}

		switch (sVerify[0] == '\0')
		{
			case true: FormatEx(sVerify, sizeof sVerify, "%02X", iVerify[iPos]);
			case false: Format(sVerify, sizeof sVerify, "%s %02X", sVerify, iVerify[iPos]);
		}

		switch (sBypass[0] == '\0')
		{
			case true: FormatEx(sBypass, sizeof sBypass, "%02X", iBypass[iPos]);
			case false: Format(sBypass, sizeof sBypass, "%s %02X", sBypass, iBypass[iPos]);
		}

		if (iVerify[iPos] != 0x2A)
		{
			iActualByte = LoadFromAddress((adPatch + view_as<Address>(iOffset + iPos)), NumberType_Int8);

			switch (sActual[0] == '\0')
			{
				case true: FormatEx(sActual, sizeof sActual, "%02X", iActualByte);
				case false: Format(sActual, sizeof sActual, "%s %02X", sActual, iActualByte);
			}

			if (iActualByte != iVerify[iPos])
			{
				switch (iBypass[iPos] == 0)
				{
					case true: bInvalid = true;
					case false: bInvalid = (iBypass[iPos] != 0x2A && iActualByte != iBypass[iPos]);
				}
			}
		}
		else
		{
			switch (sActual[0] == '\0')
			{
				case true: FormatEx(sActual, sizeof sActual, "2A");
				case false: Format(sActual, sizeof sActual, "%s 2A", sActual);
			}
		}
	}

	if (bInvalid)
	{
		LogError("%s Failed to locate patch: %s (%s) [Expected: %s | Bypassed: %s | Found: %s]", MT_TAG, name, g_esPatch[iIndex].g_sOffset, sVerify, sBypass, sActual);
		vResetPatchInfo(iIndex);

		return;
	}

	g_esPatch[iIndex].g_adPatch = adPatch;
	g_esPatch[iIndex].g_iOffset = iOffset;
	g_esPatch[iIndex].g_iLength = iPLength;
	g_esGeneral.g_iPatchCount++;

	for (int iPos = 0; iPos < iPLength; iPos++)
	{
		g_esPatch[iIndex].g_iPatchBytes[iPos] = iPatch[iPos];
		g_esPatch[iIndex].g_iOriginalBytes[iPos] = 0x00;
	}

	if (g_esPatch[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s Patch byte(s) for \"%s\" - Expected byte(s): %s | Bypassed byte(s): %s | Found byte(s): %s", MT_TAG, name, sVerify, sBypass, sActual);
		vLogMessage(-1, _, "%s Registered the \"%s\" patch.", MT_TAG, name);
	}
}

void vRegisterPatches()
{
	char sFilePath[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, sFilePath, sizeof sFilePath, "%s%s.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_FILE_PATCHES);
	if (!MT_FileExists(MT_CONFIG_FILEPATH, (MT_CONFIG_FILE_PATCHES ... ".cfg"), sFilePath, sFilePath, sizeof sFilePath))
	{
		LogError("%s Unable to load the \"%s\" config file.", MT_TAG, sFilePath);

		return;
	}

	SMCParser smcPatches = smcSetupParser(sFilePath, SMCParseStart_Patches, SMCNewSection_Patches, SMCKeyValues_Patches, SMCEndSection_Patches, SMCRawLine_Patches, SMCParseEnd_Patches);
	if (smcPatches != null)
	{
		delete smcPatches;
	}
}

void vRemovePatch(int index, bool override = false)
{
	if (index >= g_esGeneral.g_iPatchCount)
	{
		LogError("%s Patch #%i out of range when removing patch. (Maximum: %i)", MT_TAG, index, (g_esGeneral.g_iPatchCount - 1));

		return;
	}

	if ((g_esPatch[index].g_iType == 2 && !override) || !g_esPatch[index].g_bInstalled)
	{
		return;
	}

	for (int iPos = 0; iPos < g_esPatch[index].g_iLength; iPos++)
	{
		StoreToAddress((g_esPatch[index].g_adPatch + view_as<Address>(g_esPatch[index].g_iOffset + iPos)), g_esPatch[index].g_iOriginalBytes[iPos], NumberType_Int8, g_esPatch[index].g_bUpdateMemAccess);
	}

	g_esPatch[index].g_bInstalled = false;

	if (g_esPatch[index].g_iType == 2 && g_esPatch[index].g_bLog)
	{
		vLogMessage(-1, _, "%s Disabled the \"%s\" patch.", MT_TAG, g_esPatch[index].g_sName);
	}
}

void vRemovePermanentPatches()
{
	for (int iPos = 0; iPos < g_esGeneral.g_iPatchCount; iPos++)
	{
		if (g_esPatch[iPos].g_sName[0] != '\0' && g_esPatch[iPos].g_iType == 2 && g_esPatch[iPos].g_bInstalled)
		{
			vRemovePatch(iPos, true);
		}
	}
}

void vResetPatchInfo(int index)
{
	g_esGeneral.g_iPatchCount = index;
	g_esPatch[index].g_adPatch = Address_Null;
	g_esPatch[index].g_bInstalled = false;
	g_esPatch[index].g_bLog = false;
	g_esPatch[index].g_bUpdateMemAccess = true;
	g_esPatch[index].g_iLength = 0;
	g_esPatch[index].g_iOffset = 0;
	g_esPatch[index].g_iType = 0;
	g_esPatch[index].g_sBypass[0] = '\0';
	g_esPatch[index].g_sCvars[0] = '\0';
	g_esPatch[index].g_sOffset[0] = '\0';
	g_esPatch[index].g_sPatch[0] = '\0';
	g_esPatch[index].g_sName[0] = '\0';
	g_esPatch[index].g_sSignature[0] = '\0';
	g_esPatch[index].g_sVerify[0] = '\0';

	for (int iPos = 0; iPos < MT_PATCH_MAXLEN; iPos++)
	{
		g_esPatch[index].g_iOriginalBytes[iPos] = 0;
		g_esPatch[index].g_iPatchBytes[iPos] = 0;
	}
}

int iGetPatchIndex(const char[] name)
{
	for (int iPos = 0; iPos < g_esGeneral.g_iPatchCount; iPos++)
	{
		if (StrEqual(name, g_esPatch[iPos].g_sName))
		{
			return iPos;
		}
	}

	return -1;
}

/**
 * Dynamic signatures functions
 **/

void vReadSignatureSettings(const char[] key, const char[] value)
{
	int iIndex = g_esGeneral.g_iSignatureCount;
	g_esSignature[iIndex].g_bLog = !!iGetKeyValueEx(key, "Log", "Log", "Log", "Log", g_esSignature[iIndex].g_bLog, value, 0, 1);

	vGetKeyValueEx(key, "Library", "Library", "Library", "Library", g_esSignature[iIndex].g_sLibrary, sizeof esSignature::g_sLibrary, value);
	vGetKeyValueEx(key, "Signature", "Signature", "Signature", "Signature", g_esSignature[iIndex].g_sSignature, sizeof esSignature::g_sSignature, value);
	vGetKeyValueEx(key, "Offset", "Offset", "Offset", "Offset", g_esSignature[iIndex].g_sOffset, sizeof esSignature::g_sOffset, value);
	vGetKeyValueEx(key, "Start", "Start", "Start", "Start", g_esSignature[iIndex].g_sStart, sizeof esSignature::g_sStart, value);
	vGetKeyValueEx(key, "Before", "Before", "Before", "Before", g_esSignature[iIndex].g_sBefore, sizeof esSignature::g_sBefore, value);
	vGetKeyValueEx(key, "After", "After", "After", "After", g_esSignature[iIndex].g_sAfter, sizeof esSignature::g_sAfter, value);

	if (g_esSignature[iIndex].g_sLibrary[0] == '\0')
	{
		g_esSignature[iIndex].g_sLibrary = "server";
	}

	g_esSignature[iIndex].g_sdkLibrary = (StrEqual(g_esSignature[iIndex].g_sLibrary, "server", false) ? SDKLibrary_Server : SDKLibrary_Engine);

	if (g_esSignature[iIndex].g_sStart[0] == '\0')
	{
		g_esSignature[iIndex].g_sStart = "\\x2A";
	}
}

void vRegisterSignature(const char[] name)
{
	int iIndex = g_esGeneral.g_iSignatureCount;
	g_esGeneral.g_iSignatureCount++;

	if (g_esSignature[iIndex].g_bLog)
	{
		vLogMessage(-1, _, "%s Registered the \"%s\" signature.", MT_TAG, name);
	}
}

void vRegisterSignatures()
{
	char sFilePath[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, sFilePath, sizeof sFilePath, "%s%s.cfg", MT_CONFIG_FILEPATH, MT_CONFIG_FILE_SIGNATURES);
	if (!MT_FileExists(MT_CONFIG_FILEPATH, (MT_CONFIG_FILE_SIGNATURES ... ".cfg"), sFilePath, sFilePath, sizeof sFilePath))
	{
		LogError("%s Unable to load the \"%s\" config file.", MT_TAG, sFilePath);

		return;
	}

	SMCParser smcSignatures = smcSetupParser(sFilePath, SMCParseStart_Signatures, SMCNewSection_Signatures, SMCKeyValues_Signatures, SMCEndSection_Signatures, SMCRawLine_Signatures, SMCParseEnd_Signatures);
	if (smcSignatures != null)
	{
		delete smcSignatures;
	}
}

void vSetupSignatureAddresses()
{
	char sFilePath[PLATFORM_MAX_PATH];
	int iCount = 0;
	BuildPath(Path_SM, sFilePath, sizeof sFilePath, "gamedata/%s.txt", MT_GAMEDATA_TEMP);
	File fTemp = OpenFile(sFilePath, "w", false);
	if (fTemp != null)
	{
		fTemp.WriteLine("\"Games\"");
		fTemp.WriteLine("{");
		fTemp.WriteLine("	\"%s\"", (g_bSecondGame ? "left4dead2" : "left4dead"));
		fTemp.WriteLine("	{");
		fTemp.WriteLine("		\"Signatures\"");
		fTemp.WriteLine("		{");

		for (int iPos = 0; iPos < g_esGeneral.g_iSignatureCount; iPos++)
		{
			if (g_esSignature[iPos].g_sName[0] == '\0' || g_esSignature[iPos].g_sSignature[0] == '\0')
			{
				LogError("%s Invalid information for signature #%i - %s (Address: %s)", MT_TAG, (iPos + 1), g_esSignature[iPos].g_sName, g_esSignature[iPos].g_sSignature);

				continue;
			}

			g_esSignature[iPos].g_adString = g_esGeneral.g_gdMutantTanks.GetMemSig(g_esSignature[iPos].g_sSignature);
			if (g_esSignature[iPos].g_adString == Address_Null)
			{
				fTemp.WriteLine("			\"%sRef\"", g_esSignature[iPos].g_sName[12]);
				fTemp.WriteLine("			{");
				fTemp.WriteLine("				\"library\"	\"%s\"", g_esSignature[iPos].g_sLibrary);
				fTemp.WriteLine("				\"windows\"	\"%s\"", g_esSignature[iPos].g_sSignature);
				fTemp.WriteLine("			}");

				iCount++;
			}
		}

		fTemp.WriteLine("		}");
		fTemp.WriteLine("	}");
		fTemp.WriteLine("}");
		fTemp.Flush();

		delete fTemp;
	}

	if (iCount > 0)
	{
		GameData gdTemp = new GameData(MT_GAMEDATA_TEMP);
		if (gdTemp == null)
		{
			LogError("%s Unable to load the \"%s\" gamedata file.", MT_TAG, MT_GAMEDATA_TEMP);

			return;
		}

		char sSignature[128];
		for (int iPos = 0; iPos < g_esGeneral.g_iSignatureCount; iPos++)
		{
			if (g_esSignature[iPos].g_adString != Address_Null)
			{
				continue;
			}

			FormatEx(sSignature, sizeof sSignature, "%sRef", g_esSignature[iPos].g_sName[12]);
			g_esSignature[iPos].g_adString = gdTemp.GetMemSig(sSignature);
		}

		delete gdTemp;
	}
}

void vSetupSignatures()
{
	char sFilePath[PLATFORM_MAX_PATH];
	BuildPath(Path_SM, sFilePath, sizeof sFilePath, "gamedata/%s.txt", MT_GAMEDATA_TEMP);
	File fTemp = OpenFile(sFilePath, "w", false);
	if (fTemp != null)
	{
		fTemp.WriteLine("\"Games\"");
		fTemp.WriteLine("{");
		fTemp.WriteLine("	\"%s\"", (g_bSecondGame ? "left4dead2" : "left4dead"));
		fTemp.WriteLine("	{");
		fTemp.WriteLine("		\"Signatures\"");
		fTemp.WriteLine("		{");

		Address adPatch = Address_Null;
		char sHexAddress[64], sHexBytes[64], sSignature[1024], sTemp[1024];
		int iCount = 0, iOffset = 256, iStart = 0;
		for (int iPos = 0; iPos < g_esGeneral.g_iSignatureCount; iPos++)
		{
			adPatch = g_esSignature[iPos].g_adString;
			if (adPatch != Address_Null)
			{
				FormatEx(g_esSignature[iPos].g_sDynamicSig, sizeof esSignature::g_sDynamicSig, "%X", adPatch);
				vReverseAddress(g_esSignature[iPos].g_sDynamicSig, sHexAddress, sizeof sHexAddress);
				iStart = FormatEx(g_esSignature[iPos].g_sDynamicSig, sizeof esSignature::g_sDynamicSig, "%s", g_esSignature[iPos].g_sStart);

				if (g_esSignature[iPos].g_sOffset[0] != '\0')
				{
					iOffset = IsCharNumeric(g_esSignature[iPos].g_sOffset[0]) ? StringToInt(g_esSignature[iPos].g_sOffset) : iGetGameDataOffset(g_esSignature[iPos].g_sOffset);
				}

				for (int iIndex = ((iStart / 4) - 1); iIndex < iOffset; iIndex++)
				{
					StrCat(g_esSignature[iPos].g_sDynamicSig, sizeof esSignature::g_sDynamicSig, "\\x2A");

					if (g_esSignature[iPos].g_sOffset[0] == '\0')
					{
						FormatEx(sTemp, sizeof sTemp, "%s%s%s%s", g_esSignature[iPos].g_sDynamicSig, g_esSignature[iPos].g_sBefore, sHexAddress, g_esSignature[iPos].g_sAfter);
						vGetBinariesFromSignature(sTemp, sSignature, sizeof sSignature, iCount);
						if (PrepSDKCall_SetSignature(g_esSignature[iPos].g_sdkLibrary, sSignature, iCount))
						{
							break;
						}
					}
				}

				if (g_esSignature[iPos].g_sBefore[0] != '\0')
				{
					StrCat(g_esSignature[iPos].g_sDynamicSig, sizeof esSignature::g_sDynamicSig, g_esSignature[iPos].g_sBefore);
				}

				StrCat(g_esSignature[iPos].g_sDynamicSig, sizeof esSignature::g_sDynamicSig, sHexAddress);

				if (g_esSignature[iPos].g_sAfter[0] != '\0')
				{
					StrCat(g_esSignature[iPos].g_sDynamicSig, sizeof esSignature::g_sDynamicSig, g_esSignature[iPos].g_sAfter);
				}

				strcopy(sTemp, sizeof sTemp, g_esSignature[iPos].g_sDynamicSig);
				ReplaceString(sTemp, sizeof sTemp, "\\x", " ", false);
				ReplaceString(sTemp, sizeof sTemp, "2A", "?", false);

				fTemp.WriteLine("			\"%s\"", g_esSignature[iPos].g_sName);
				fTemp.WriteLine("			{");
				fTemp.WriteLine("				\"library\"	\"%s\"", g_esSignature[iPos].g_sLibrary);
				fTemp.WriteLine("				\"windows\"	\"%s\"", g_esSignature[iPos].g_sDynamicSig);
				fTemp.WriteLine("						/* %s */", sTemp[1]);
				fTemp.WriteLine("			}");

				if (g_esSignature[iPos].g_bLog)
				{
					strcopy(sHexBytes, sizeof sHexBytes, sHexAddress);
					ReplaceString(sHexBytes, sizeof sHexBytes, "\\x", " ", false);
					TrimString(sHexBytes);
					vLogMessage(-1, _, "%s Storing dynamic bytes for \"%s\": %s - %s", MT_TAG, g_esSignature[iPos].g_sName, sHexAddress, sHexBytes);
					vLogMessage(-1, _, "%s Final signature for \"%s\": %s", MT_TAG, g_esSignature[iPos].g_sName, g_esSignature[iPos].g_sDynamicSig);
				}
			}
		}

		fTemp.WriteLine("		}");
		fTemp.WriteLine("	}");
		fTemp.WriteLine("}");
		fTemp.Flush();

		delete fTemp;
	}
}

void vReverseAddress(const char[] bytes, char[] buffer, int size)
{
	buffer[0] = '\0';

	char sByte[3];
	for (int iPos = (strlen(bytes) - 2); iPos >= -1; iPos -= 2)
	{
		StrCat(buffer, size, "\\x");
		strcopy(sByte, ((iPos >= 1) ? 3 : (iPos + 3)), bytes[((iPos >= 0) ? iPos : 0)]);
		if (strlen(sByte) == 1)
		{
			StrCat(buffer, size, "0");
		}

		StrCat(buffer, size, sByte);
	}
}

int iGetSignatureIndex(const char[] name)
{
	for (int iPos = 0; iPos < g_esGeneral.g_iSignatureCount; iPos++)
	{
		if (StrEqual(name, g_esSignature[iPos].g_sName))
		{
			return iPos;
		}
	}

	return -1;
}

/**
 * Third-party extensions
 **/

// "[TF2 & L4D & L4D2] Actions" by BHaType - https://forums.alliedmods.net/showthread.php?t=336374

#if defined _actions_included
public void OnActionCreated(BehaviorAction action, int actor, const char[] name)
{
	if (bIsInfected(actor))
	{
		g_esPlayer[actor].g_iTargetID = -1;

		static const char sActionNames[][] = {"SmokerAttack", "BoomerAttack", "HunterAttack", "SpitterAttack", "JockeyAttack", "ChargerAttack", "TankAttack"};
		for (int iPos = 0; iPos < (sizeof sActionNames); iPos++)
		{
			if (StrEqual(name, sActionNames[iPos]))
			{
				action.Update = AttackUpdate;

				break;
			}
		}

		strcopy(g_esPlayer[actor].g_sActionName, sizeof esPlayer::g_sActionName, name);
	}
}

Action AttackUpdate(BehaviorAction action, int actor, float interval, ActionResult result)
{
	any aTarget = action.Get(0x34);
	if (aTarget == -1)
	{
		g_esPlayer[actor].g_iTargetID = -1;

		return Plugin_Continue;
	}

	int iSurvivor = LoadEntityFromHandleAddress(view_as<Address>(action) + view_as<Address>(0x34));
	if (bIsSurvivor(iSurvivor))
	{
		g_esPlayer[actor].g_iTargetID = iSurvivor;
	}

	return Plugin_Continue;
}
#endif

/**
 * Third-party plugins
 **/

// "[L4D/L4D2]ThirdPersonShoulder_Detect" by Lux - https://forums.alliedmods.net/showthread.php?t=298649

#if defined _ThirdPersonShoulder_Detect_included
public void TP_OnThirdPersonChanged(int iClient, bool bIsThirdPerson)
{
	if (bIsSurvivor(iClient))
	{
		g_esPlayer[iClient].g_bThirdPerson2 = bIsThirdPerson;
	}
}
#endif

// "Updater" by Teamkiller324 - https://github.com/Teamkiller324/Updater

#if defined _updater_included
public Action Updater_OnPluginChecking()
{
	return (g_esGeneral.g_cvMTAutoUpdate.BoolValue || g_esGeneral.g_iAutoUpdate == 1) ? Plugin_Continue : Plugin_Handled;
}

public Action Updater_OnPluginDownloading()
{
	return (g_esGeneral.g_cvMTAutoUpdate.BoolValue || g_esGeneral.g_iAutoUpdate == 1) ? Plugin_Continue : Plugin_Handled;
}

public void Updater_OnPluginUpdated()
{
	MT_ReloadPlugin(g_hPluginHandle);

	Call_StartForward(g_esGeneral.g_gfPluginUpdateForward);
	Call_Finish();
}
#endif

// "[L4D/L4D2]WeaponHandling_API" by Lux - https://forums.alliedmods.net/showthread.php?t=319947

#if defined _WeaponHandling_included
float flGetAttackBoost(int survivor, float speed)
{
	bool bDeveloper = bIsDeveloper(survivor, 6);
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[survivor].g_flAttackBoost > 0.0))
	{
		float flBoost = (bDeveloper && g_esDeveloper[survivor].g_flDevAttackBoost > g_esPlayer[survivor].g_flAttackBoost) ? g_esDeveloper[survivor].g_flDevAttackBoost : g_esPlayer[survivor].g_flAttackBoost;
		if (flBoost > 0.0)
		{
			return flBoost;
		}
	}

	return speed;
}

float flGetFireRate(int survivor, float speed)
{
	bool bDeveloper = bIsDeveloper(survivor, 6);
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[survivor].g_flFireRate > 0.0))
	{
		float flBoost = (bDeveloper && g_esDeveloper[survivor].g_flDevFireRate > g_esPlayer[survivor].g_flFireRate) ? g_esDeveloper[survivor].g_flDevFireRate : g_esPlayer[survivor].g_flFireRate;
		if (flBoost > 0.0)
		{
			return flBoost;
		}
	}

	return speed;
}

float flGetReloadRate(int survivor, float speed)
{
	bool bDeveloper = bIsDeveloper(survivor, 6);
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[survivor].g_flReloadRate > 0.0))
	{
		float flBoost = (bDeveloper && g_esDeveloper[survivor].g_flDevReloadRate > g_esPlayer[survivor].g_flReloadRate) ? g_esDeveloper[survivor].g_flDevReloadRate : g_esPlayer[survivor].g_flReloadRate;
		if (flBoost > 0.0)
		{
			return flBoost;
		}
	}

	return speed;
}

float flGetSwingRate(int survivor, float speed)
{
	bool bDeveloper = bIsDeveloper(survivor, 6);
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_ATTACKBOOST) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_ATTACKBOOST)) && g_esPlayer[survivor].g_flSwingRate > 0.0))
	{
		float flBoost = (bDeveloper && g_esDeveloper[survivor].g_flDevSwingRate > g_esPlayer[survivor].g_flSwingRate) ? g_esDeveloper[survivor].g_flDevSwingRate : g_esPlayer[survivor].g_flSwingRate;
		if (flBoost > 0.0)
		{
			return flBoost;
		}
	}

	return speed;
}

public void WH_OnMeleeSwing(int client, int weapon, float &speedmodifier)
{
	speedmodifier *= flGetSwingRate(client, speedmodifier);
}

public void WH_OnStartThrow(int client, int weapon, L4D2WeaponType weapontype, float &speedmodifier)
{
	speedmodifier *= flGetAttackBoost(client, speedmodifier);
}

public void WH_OnReadyingThrow(int client, int weapon, L4D2WeaponType weapontype, float &speedmodifier)
{
	speedmodifier *= flGetAttackBoost(client, speedmodifier);
}

public void WH_OnReloadModifier(int client, int weapon, L4D2WeaponType weapontype, float &speedmodifier)
{
	speedmodifier *= flGetReloadRate(client, speedmodifier);
}

public void WH_OnGetRateOfFire(int client, int weapon, L4D2WeaponType weapontype, float &speedmodifier)
{
	speedmodifier *= flGetFireRate(client, speedmodifier);
}

public void WH_OnDeployModifier(int client, int weapon, L4D2WeaponType weapontype, float &speedmodifier)
{
	speedmodifier *= flGetAttackBoost(client, speedmodifier);
}
#endif

/**
 * Tank Rush functions
 **/

void vAnnounceRush(int client)
{
	switch (g_esGeneral.g_iRushTypes)
	{
		case -1, 0: return;
		case MT_RUSHTYPE_TANK: MT_PrintToChat(client, "%s %t", MT_TAG3, "Rush");
		case MT_RUSHTYPE_SMOKER: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushSmoker");
		case MT_RUSHTYPE_BOOMER: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushBoomer");
		case MT_RUSHTYPE_HUNTER: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushHunter");
		case MT_RUSHTYPE_SPITTER: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushSpitter");
		case MT_RUSHTYPE_JOCKEY: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushJockey");
		case MT_RUSHTYPE_CHARGER: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushCharger");
		default: MT_PrintToChat(client, "%s %t", MT_TAG3, "RushAll");
	}
}

void vAnnounceRushKillCountdown(int minutes, int seconds)
{
	switch (g_esGeneral.g_iRushTypes)
	{
		case -1, 0: return;
		case MT_RUSHTYPE_TANK: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdown", minutes, seconds);
		case MT_RUSHTYPE_SMOKER: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownSmoker", minutes, seconds);
		case MT_RUSHTYPE_BOOMER: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownBoomer", minutes, seconds);
		case MT_RUSHTYPE_HUNTER: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownHunter", minutes, seconds);
		case MT_RUSHTYPE_SPITTER: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownSpitter", minutes, seconds);
		case MT_RUSHTYPE_JOCKEY: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownJockey", minutes, seconds);
		case MT_RUSHTYPE_CHARGER: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownCharger", minutes, seconds);
		default: MT_PrintToChatAll("%s %t", MT_TAG5, "KillCountdownAll", minutes, seconds);
	}
}

void vAnnounceRushKillTime(int countdown)
{
	if (countdown > 59)
	{
		int iMinutes = countdown / 60, iSeconds = countdown % 60;
		if (iSeconds > 0 || iMinutes > 0)
		{
			vAnnounceRushKillCountdown(iMinutes, iSeconds);
		}
	}
	else
	{
		vAnnounceRushKillCountdown(0, countdown);
	}
}

void vAnnounceRushRestTime(int countdown)
{
	if (countdown > 59)
	{
		int iMinutes = countdown / 60, iSeconds = countdown % 60;
		if (iSeconds > 0 || iMinutes > 0)
		{
			MT_PrintToChatAll("%s %t", MT_TAG5, "RestCountdown", iMinutes, iSeconds);
		}
	}
	else
	{
		MT_PrintToChatAll("%s %t", MT_TAG5, "RestCountdown", 0, countdown);
	}
}

void vAnnounceRushSpawnWarning()
{
	switch (g_esGeneral.g_iRushTypes)
	{
		case -1, 0: return;
		case MT_RUSHTYPE_TANK: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarning");
		case MT_RUSHTYPE_SMOKER: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningSmoker");
		case MT_RUSHTYPE_BOOMER: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningBoomer");
		case MT_RUSHTYPE_HUNTER: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningHunter");
		case MT_RUSHTYPE_SPITTER: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningSpitter");
		case MT_RUSHTYPE_JOCKEY: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningJockey");
		case MT_RUSHTYPE_CHARGER: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningCharger");
		default: MT_PrintToChatAll("%s %t", MT_TAG3, "SpawnWarningAll");
	}
}

void vAnnounceRushWarning(int client)
{
	int iSeconds = RoundToNearest(g_esGeneral.g_flCoopDelay) - g_esGeneral.g_iRushCoopTick;

	switch (g_esGeneral.g_iRushTypes)
	{
		case -1, 0: return;
		case MT_RUSHTYPE_TANK: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarning", iSeconds);
		case MT_RUSHTYPE_SMOKER: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningSmoker", iSeconds);
		case MT_RUSHTYPE_BOOMER: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningBoomer", iSeconds);
		case MT_RUSHTYPE_HUNTER: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningHunter", iSeconds);
		case MT_RUSHTYPE_SPITTER: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningSpitter", iSeconds);
		case MT_RUSHTYPE_JOCKEY: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningJockey", iSeconds);
		case MT_RUSHTYPE_CHARGER: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningCharger", iSeconds);
		default: MT_PrintToChat(client, "%s %t", MT_TAG5, "RushWarningAll", iSeconds);
	}
}

void vChangeInfectedToGhost(int special)
{
	if (!bIsHumanInfected(special) || g_esGeneral.g_hSDKPlayerZombieAbortControl == null)
	{
		return;
	}

	vCheatCommand(special, "give", "health");

	float flOrigin[3], flAngles[3], flVelocity[3];
	GetClientAbsOrigin(special, flOrigin);
	GetClientEyeAngles(special, flAngles);
	GetEntPropVector(special, Prop_Data, "m_vecVelocity", flVelocity);

	SetEntProp(special, Prop_Data, "m_isCulling", 1);
	SDKCall(g_esGeneral.g_hSDKPlayerZombieAbortControl, special, 0.0);
	TeleportEntity(special, flOrigin, flAngles, flVelocity);
}

void vChangeInfectedToGhosts()
{
	for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
	{
		if (bIsHumanInfected(iSpecial, MT_CHECK_INGAME|MT_CHECK_ALIVE) && !bIsInfectedGhost(iSpecial))
		{
			vChangeInfectedToGhost(iSpecial);
		}
	}
}

void vChangeInfectedToRandom(int special)
{
	if (bIsHumanInfected(special) && g_esGeneral.g_hSDKSetClass != null)
	{
		int iLimit = (g_bSecondGame ? 6 : 3);
		SDKCall(g_esGeneral.g_hSDKSetClass, special, MT_GetRandomInt(1, iLimit));
	}
}

void vChangeInfectedToRandoms()
{
	if (g_esGeneral.g_hSDKSetClass == null)
	{
		return;
	}

	int iLimit = (g_bSecondGame ? 6 : 3);
	for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
	{
		if (bIsHumanInfected(iSpecial, MT_CHECK_INGAME|MT_CHECK_ALIVE))
		{
			SDKCall(g_esGeneral.g_hSDKSetClass, iSpecial, MT_GetRandomInt(1, iLimit));
		}
	}
}

void vChangeInfectedToTank(int special)
{
	if (!bIsHumanInfected(special) || g_esGeneral.g_hSDKSetClass == null || g_esGeneral.g_hSDKCreateForPlayer == null)
	{
		return;
	}

	int iWeapon = GetPlayerWeaponSlot(special, 0);
	if (iWeapon > MaxClients)
	{
		RemoveEntity(iWeapon);
	}

	SDKCall(g_esGeneral.g_hSDKSetClass, special, iGetRandomRushType());

	int iAbility = SDKCall(g_esGeneral.g_hSDKCreateForPlayer, special);
	if (iAbility != -1)
	{
		SetEntPropEnt(special, Prop_Send, "m_customAbility", iAbility);
	}
}

void vChangeInfectedToTanks()
{
	if (g_esGeneral.g_hSDKSetClass == null)
	{
		return;
	}

	for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
	{
		if (bIsHumanInfected(iSpecial, MT_CHECK_INGAME|MT_CHECK_ALIVE))
		{
			SDKCall(g_esGeneral.g_hSDKSetClass, iSpecial, iGetRandomRushType());
		}
	}
}

void vHealAllSurvivors()
{
	for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
	{
		if (bIsSurvivor(iSurvivor, MT_CHECK_INGAME))
		{
			vCheatCommand(iSurvivor, "give", "health");

			if (g_esPlayer[iSurvivor].g_bLastLife[1])
			{
				vSetSurvivorLastLife(iSurvivor, g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue, false);
			}
		}
	}
}

void vKickInfectedBots()
{
	int iTypes = g_esGeneral.g_iRushTypes;
	for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
	{
		if (bIsValidClient(iSpecial, MT_CHECK_INGAME) && !bIsValidClient(iSpecial, MT_CHECK_FAKECLIENT))
		{
			if ((bIsSmoker(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_SMOKER)) || (bIsBoomer(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_BOOMER)) || (bIsHunter(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_HUNTER))
				|| (bIsSpitter(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_SPITTER)) || (bIsJockey(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_JOCKEY)) || (bIsCharger(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_CHARGER))
				|| (bIsTank(iSpecial, MT_CHECK_INGAME) && !(iTypes & MT_RUSHTYPE_TANK)))
			{
				KickClient(iSpecial);
			}
		}
	}

}

void vRespawnInfectedGhost(int ghost)
{
	if (g_esGeneral.g_hSDKStateTransition == null || g_esGeneral.g_hSDKBecomeGhost == null)
	{
		return;
	}

	SDKCall(g_esGeneral.g_hSDKStateTransition, ghost, 6);
	SDKCall(g_esGeneral.g_hSDKBecomeGhost, ghost, 1);
}

void vRespawnInfectedPlayer(int special)
{
	if (g_esGeneral.g_hSDKStateTransition == null || g_esGeneral.g_hSDKBecomeGhost == null)
	{
		return;
	}

	SDKCall(g_esGeneral.g_hSDKStateTransition, special, 8);
	SDKCall(g_esGeneral.g_hSDKBecomeGhost, special, 1);
	SDKCall(g_esGeneral.g_hSDKStateTransition, special, 6);
	SDKCall(g_esGeneral.g_hSDKBecomeGhost, special, 1);
}

void vRespawnInfectedPlayers(bool extra = true)
{
	for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
	{
		if (bIsHumanInfected(iSpecial, MT_CHECK_INGAME) && !bIsValidClient(iSpecial, MT_CHECK_ALIVE))
		{
			vRespawnInfectedPlayer(iSpecial);

			if (extra)
			{
				vChangeInfectedToTank(iSpecial);
				vChangeInfectedToGhost(iSpecial);
			}
		}
	}
}

void vSetTankPlayer(int client)
{
	if (g_esGeneral.g_hSDKStateTransition == null || g_esGeneral.g_hSDKBecomeGhost == null)
	{
		return;
	}

	float flOrigin[3], flAngles[3], flVelocity[3];
	GetClientAbsOrigin(client, flOrigin);
	GetClientEyeAngles(client, flAngles);
	GetEntPropVector(client, Prop_Data, "m_vecVelocity", flVelocity);

	SetEntProp(client, Prop_Data, "m_isCulling", 1);
	SDKCall(g_esGeneral.g_hSDKStateTransition, client, 6);
	SDKCall(g_esGeneral.g_hSDKBecomeGhost, client, 1);
	TeleportEntity(client, flOrigin, flAngles, flVelocity);
}

void vToggleTankRushConVars()
{
	static bool bHooked;

	switch (g_esGeneral.g_bPluginEnabled && g_esGeneral.g_iRushTypes > 0)
	{
		case true:
		{
			if (!bHooked)
			{
				bHooked = true;

				if (g_esGeneral.g_iCommonLimit >= 0)
				{
					g_esGeneral.g_cvMTCommonLimit.IntValue = g_esGeneral.g_iCommonLimit;
				}

				g_esGeneral.g_cvMTDirectorNoBosses.IntValue = 1;
				g_esGeneral.g_cvMTDirectorNoMobs.IntValue = 1;
				g_esGeneral.g_cvMTGhostSpeed.IntValue = 850;
				g_esGeneral.g_cvMTGhostTravelDistance.IntValue = 0;
				g_esGeneral.g_cvMTTankFrustration.IntValue = 0;

				switch (g_esGeneral.g_iHardcoreMode)
				{
					case -1, 0:
					{
						if (g_esGeneral.g_iSurvivorIncaps >= 0)
						{
							g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue = g_esGeneral.g_iSurvivorIncaps;
						}
					}
					case 1: g_esGeneral.g_cvMTSurvivorMaxIncapCount.IntValue = 0;
				}
			}
		}
		case false:
		{
			if (bHooked)
			{
				bHooked = false;

				g_esGeneral.g_cvMTCommonLimit.RestoreDefault();
				g_esGeneral.g_cvMTDirectorNoBosses.RestoreDefault();
				g_esGeneral.g_cvMTDirectorNoMobs.RestoreDefault();
				g_esGeneral.g_cvMTGhostSpeed.RestoreDefault();
				g_esGeneral.g_cvMTGhostTravelDistance.RestoreDefault();
				g_esGeneral.g_cvMTSurvivorMaxIncapCount.RestoreDefault();
				g_esGeneral.g_cvMTTankFrustration.RestoreDefault();
			}
		}
	}
}

/**
 * Helper functions
 **/

void vGetBinariesFromSignature(const char[] signature, char[] buffer, int size, int &count)
{
	char sByte[2], sBytes[512][3];
	count = ExplodeString(signature[2], "\\x", sBytes, sizeof sBytes, sizeof sBytes[]);
	strcopy(buffer, size, signature);
	for (int iPos = 0; iPos < count; iPos++)
	{
		FormatEx(sByte, sizeof sByte, "%s", iGetDecimalFromHex2(sBytes[iPos]));
		buffer[iPos] = sByte[0];
	}
}

void vGetConfigColors(char[] buffer, int size, const char[] value, char delimiter = ',')
{
	switch (FindCharInString(value, delimiter) != -1)
	{
		case true: strcopy(buffer, size, value);
		case false:
		{
			if (g_esGeneral.g_alColorKeys[0] != null)
			{
				int iIndex = g_esGeneral.g_alColorKeys[0].FindString(value);

				switch (iIndex != -1 && g_esGeneral.g_alColorKeys[1] != null)
				{
					case true: g_esGeneral.g_alColorKeys[1].GetString(iIndex, buffer, size);
					case false: strcopy(buffer, size, value);
				}
			}
		}
	}
}

void vGetSpecialSettingNames(char[][] buffers, int maxStringLength, const char[] setting1, const char[] setting2, const char[] setting3, const char[] setting4, int specType)
{
	if (specType > 0)
	{
		FormatEx(buffers[0], maxStringLength, "%s%s", g_sSpecialNames[specType], setting1);
		FormatEx(buffers[1], maxStringLength, "%s %s", g_sSpecialNames[specType], setting2);
		FormatEx(buffers[2], maxStringLength, "%s_%s", g_sSpecialNames[specType], setting3);
	}
	else
	{
		FormatEx(buffers[0], maxStringLength, "%s", setting1);
		FormatEx(buffers[1], maxStringLength, "%s", setting2);
		FormatEx(buffers[2], maxStringLength, "%s", setting3);
	}

	switch (specType)
	{
		case 0: FormatEx(buffers[3], maxStringLength, "%s", setting4);
		case 2, 3, 5, 6: FormatEx(buffers[3], maxStringLength, "%c%s", g_sSpecialNames[specType][0], setting4);
		case 1, 4: FormatEx(buffers[3], maxStringLength, "%c%c%s", g_sSpecialNames[specType][0], g_sSpecialNames[specType][1], setting4);
	}
}

void vGetTankTranslatedName(char[] buffer, int size, int tank = 0, int type = 0, int specType = 0, bool survivor = false, int character = -1)
{
	int iType = (type > 0) ? type : g_esPlayer[tank].g_iTankType,
		iSpecType = (tank > 0 && specType <= 0) ? g_esPlayer[tank].g_iInfectedType : specType;

	if (bIsValidClient(tank, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT))
	{
		char sName[33];

		switch (survivor)
		{
			case true: vGetTankTranslatedNoName(buffer, size, iSpecType, survivor, character);
			case false:
			{
				switch (iSpecType)
				{
					case 1: strcopy(sName, sizeof sName, g_esTeammate[tank].g_sSmokerName);
					case 2: strcopy(sName, sizeof sName, g_esTeammate[tank].g_sBoomerName);
					case 3: strcopy(sName, sizeof sName, g_esTeammate[tank].g_sHunterName);
					case 4: strcopy(sName, sizeof sName, g_esTeammate[tank].g_sSpitterName);
					case 5: strcopy(sName, sizeof sName, g_esTeammate[tank].g_sJockeyName);
					case 6: strcopy(sName, sizeof sName, g_esTeammate[tank].g_sChargerName);
					default: strcopy(sName, sizeof sName, g_esPlayer[tank].g_sTankName);
				}

				if (sName[0] != '\0')
				{
					char sPhrase[64], sPhrase2[64], sSteamIDFinal[64], sSpecialName[33];

					switch (iSpecType)
					{
						case 1, 2, 3, 4, 5, 6: strcopy(sSpecialName, sizeof sSpecialName, g_sSpecialNames[iSpecType]);
						default: sSpecialName = "Tank";
					}

					FormatEx(sPhrase, sizeof sPhrase, "%s %s Name", g_esPlayer[tank].g_sSteamID32, sSpecialName);
					FormatEx(sPhrase2, sizeof sPhrase2, "%s %s Name", g_esPlayer[tank].g_sSteam3ID, sSpecialName);
					FormatEx(sSteamIDFinal, sizeof sSteamIDFinal, "%s", (TranslationPhraseExists(sPhrase) ? sPhrase : sPhrase2));

					switch (sSteamIDFinal[0] != '\0' && TranslationPhraseExists(sSteamIDFinal))
					{
						case true: strcopy(buffer, size, sSteamIDFinal);
						case false: vGetTankTranslatedNoName(buffer, size, iSpecType, survivor, character);
					}
				}
				else
				{
					vGetTankTranslatedNoName(buffer, size, iSpecType, survivor, character);
				}
			}
		}
	}
	else
	{
		char sName[33];

		switch (survivor)
		{
			case true: vGetTankTranslatedNoName(buffer, size, iSpecType, survivor, character);
			case false:
			{
				switch (iSpecType)
				{
					case 1: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sSmokerName);
					case 2: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sBoomerName);
					case 3: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sHunterName);
					case 4: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sSpitterName);
					case 5: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sJockeyName);
					case 6: strcopy(sName, sizeof sName, g_esSpecial[iType].g_sChargerName);
					default: strcopy(sName, sizeof sName, g_esTank[iType].g_sTankName);
				}

				if (sName[0] != '\0')
				{
					char sSpecialName[64];
					iType = g_esTank[iType].g_iRealType[0];
					if (1 <= iSpecType <= 6)
					{
						FormatEx(sSpecialName, sizeof sSpecialName, "%s #%i Name", g_sSpecialNames[iSpecType], iType);

						if (sSpecialName[0] != '\0' && !TranslationPhraseExists(sSpecialName))
						{
							FormatEx(sSpecialName, sizeof sSpecialName, "%s Name", sName);
						}

						if (sSpecialName[0] != '\0' && !TranslationPhraseExists(sSpecialName))
						{
							FormatEx(sSpecialName, sizeof sSpecialName, "%s #%i", g_sSpecialNames[iSpecType], iType);
						}

						if (sSpecialName[0] != '\0' && !TranslationPhraseExists(sSpecialName))
						{
							strcopy(sSpecialName, sizeof sSpecialName, sName);
						}
					}
					else
					{
						FormatEx(sSpecialName, sizeof sSpecialName, "Tank #%i Name", iType);

						if (sSpecialName[0] != '\0' && !TranslationPhraseExists(sSpecialName))
						{
							FormatEx(sSpecialName, sizeof sSpecialName, "%s Name", sName);
						}

						if (sSpecialName[0] != '\0' && !TranslationPhraseExists(sSpecialName))
						{
							FormatEx(sSpecialName, sizeof sSpecialName, "Tank #%i", iType);
						}

						if (sSpecialName[0] != '\0' && !TranslationPhraseExists(sSpecialName))
						{
							strcopy(sSpecialName, sizeof sSpecialName, sName);
						}
					}

					switch (sSpecialName[0] != '\0' && TranslationPhraseExists(sSpecialName))
					{
						case true: strcopy(buffer, size, sSpecialName);
						case false: vGetTankTranslatedNoName(buffer, size, iSpecType, survivor, character);
					}
				}
				else
				{
					vGetTankTranslatedNoName(buffer, size, iSpecType, survivor, character);
				}
			}
		}
	}
}

void vGetTankTranslatedNoName(char[] buffer, int size, int specType, bool survivor, int character)
{
	if (survivor)
	{
		int iCharacter = (g_bSecondGame ? character : (character + 4));

		switch (iCharacter)
		{
			case 0: strcopy(buffer, size, "NoNameNick");
			case 1: strcopy(buffer, size, "NoNameRochelle");
			case 2: strcopy(buffer, size, "NoNameCoach");
			case 3: strcopy(buffer, size, "NoNameEllis");
			case 4: strcopy(buffer, size, "NoNameBill");
			case 5: strcopy(buffer, size, "NoNameZoey");
			case 6: strcopy(buffer, size, "NoNameFrancis");
			case 7: strcopy(buffer, size, "NoNameLouis");
		}
	}
	else
	{
		switch (specType)
		{
			case 1: strcopy(buffer, size, "NoNameSmoker");
			case 2: strcopy(buffer, size, "NoNameBoomer");
			case 3: strcopy(buffer, size, "NoNameHunter");
			case 4: strcopy(buffer, size, "NoNameSpitter");
			case 5: strcopy(buffer, size, "NoNameJockey");
			case 6: strcopy(buffer, size, "NoNameCharger");
			default: strcopy(buffer, size, "NoName");
		}
	}
}

void vPushPlayer(int player, float angles[3], float force)
{
	float flForward[3], flVelocity[3];
	GetAngleVectors(angles, flForward, NULL_VECTOR, NULL_VECTOR);
	NormalizeVector(flForward, flForward);
	ScaleVector(flForward, force);

	GetEntPropVector(player, Prop_Data, "m_vecAbsVelocity", flVelocity);
	flVelocity[0] += flForward[0];
	flVelocity[1] += flForward[1];
	flVelocity[2] += flForward[2];
	TeleportEntity(player, .velocity = flVelocity);
}

bool bAreHumansRequired(int type, int specType, int count = -1)
{
	int iCount = (count >= 0) ? count : iGetHumanCount();

	switch (specType)
	{
		case 1, 2, 3, 4, 5, 6: return iGetSubSettingValue(true, true, g_esSpecial[type].g_iRequiresHumans, g_esTank[type].g_iRequiresHumans, g_esSpecific.g_iRequiresHumans, g_esGeneral.g_iRequiresHumans, 1) > iCount;
		case 8: return iGetSettingValue(true, true, g_esTank[type].g_iRequiresHumans, g_esGeneral.g_iRequiresHumans, 1) > iCount;
	}

	return iGetSettingValue(true, true, g_esTank[type].g_iRequiresHumans, g_esGeneral.g_iRequiresHumans, 1) > iCount;
}

bool bCanTypeSpawn(int type = 0, int specType = 0)
{
	int iCondition = 0;
	iCondition = (specType > 0 && specType != 8) ? g_esSpecific.g_iFinalesOnly : g_esGeneral.g_iFinalesOnly;
	iCondition = (type > 0) ? iGetFinaleType(type, specType) : iCondition;

	switch (iCondition)
	{
		case -1, 0: return true;
		case 1: return g_esGeneral.g_bFinalMap || g_esGeneral.g_iTankWave > 0;
		case 2: return g_esGeneral.g_bNormalMap && g_esGeneral.g_iTankWave <= 0;
		case 3: return g_esGeneral.g_bFinalMap && g_esGeneral.g_iTankWave <= 0;
		case 4: return g_esGeneral.g_bFinalMap && g_esGeneral.g_iTankWave > 0;
	}

	return false;
}

bool bFoundSection(const char[] subsection, int index)
{
	int iListSize = g_esGeneral.g_alAbilitySections[index].Length;
	if (g_esGeneral.g_alAbilitySections[index] != null && iListSize > 0)
	{
		char sSection[32];
		for (int iPos = 0; iPos < iListSize; iPos++)
		{
			g_esGeneral.g_alAbilitySections[index].GetString(iPos, sSection, sizeof sSection);
			if (StrEqual(subsection, sSection, false))
			{
				return true;
			}
		}
	}

	return false;
}

bool bHasCoreAdminAccess(int admin, int type = 0)
{
	if (!bIsValidClient(admin, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_FAKECLIENT) || bIsDeveloper(admin, 1))
	{
		return true;
	}

	int iType = (type > 0) ? type : g_esPlayer[admin].g_iTankType,
		iTypePlayerFlags = g_esAdmin[iType].g_iAccessFlags[admin],
		iPlayerFlags = g_esPlayer[admin].g_iAccessFlags,
		iAdminFlags = GetUserFlagBits(admin),
		iTypeFlags = g_esTank[iType].g_iAccessFlags,
		iGlobalFlags = g_esGeneral.g_iAccessFlags;

	if ((iTypeFlags != 0 && ((!(iTypeFlags & iTypePlayerFlags) && !(iTypePlayerFlags & iTypeFlags)) || (!(iTypeFlags & iPlayerFlags) && !(iPlayerFlags & iTypeFlags)) || (!(iTypeFlags & iAdminFlags) && !(iAdminFlags & iTypeFlags))))
		|| (iGlobalFlags != 0 && ((!(iGlobalFlags & iTypePlayerFlags) && !(iTypePlayerFlags & iGlobalFlags)) || (!(iGlobalFlags & iPlayerFlags) && !(iPlayerFlags & iGlobalFlags)) || (!(iGlobalFlags & iAdminFlags) && !(iAdminFlags & iGlobalFlags)))))
	{
		return false;
	}

	return true;
}

bool bIsBoomerEnabled(int type)
{
	int iTypes = iGetSettingValue(true, true, g_esSpecial[type].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
	return iTypes > 0 && (iTypes & MT_SPECINF_BOOMER);
}

bool bIsBossLimited(int type)
{
	int iType = g_esTank[type].g_iRecordedType[0], iBaseType = g_esTank[iType].g_iBossBaseType, iLimit = g_esTank[iType].g_iBossLimit;
	if (iBaseType <= 0 && iLimit <= 0)
	{
		return false;
	}

	int iTypeCount = 0;
	for (int iTank = 1; iTank <= MaxClients; iTank++)
	{
		if (bIsInfected(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE) && !g_esPlayer[iTank].g_bArtificial && g_esPlayer[iTank].g_iTankType > 0)
		{
			if (iBaseType == g_esPlayer[iTank].g_iTankType || iBaseType == g_esTank[g_esPlayer[iTank].g_iTankType].g_iBossBaseType)
			{
				iTypeCount++;
			}
		}
	}

	return iTypeCount > 0 && (iTypeCount > iLimit || (iBaseType > 0 && iTypeCount > g_esTank[iBaseType].g_iBossLimit));
}

bool bIsChargerEnabled(int type)
{
	int iTypes = iGetSettingValue(true, true, g_esSpecial[type].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
	return iTypes > 0 && (iTypes & MT_SPECINF_CHARGER);
}

bool bIsClassLimited(int tank, const char[] class, int type, int specType = 0)
{
	if (g_esGeneral.g_alClassKeys[0] == null || g_esGeneral.g_alClassKeys[1] == null)
	{
		return false;
	}

	bool bTypeLimit = false;
	char sTypeClass[65];
	int iClassCount = 0, iType = 0;
	for (int iInfected = 1; iInfected <= MaxClients; iInfected++)
	{
		if (bIsInfected(iInfected, MT_CHECK_INGAME|MT_CHECK_ALIVE) && !bIsCustomTank(iInfected) && !g_esPlayer[iInfected].g_bArtificial && iInfected != tank)
		{
			iType = g_esPlayer[iInfected].g_iTankType;

			switch (specType)
			{
				case 1:
				{
					bTypeLimit = (g_esSpecial[iType].g_sSmokerClass[0] != '\0');
					sTypeClass = (g_esSpecial[iType].g_sSmokerClass[0] != '\0') ? g_esSpecial[iType].g_sSmokerClass : g_esTank[iType].g_sTankClass;
				}
				case 2:
				{
					bTypeLimit = (g_esSpecial[iType].g_sBoomerClass[0] != '\0');
					sTypeClass = (g_esSpecial[iType].g_sBoomerClass[0] != '\0') ? g_esSpecial[iType].g_sBoomerClass : g_esTank[iType].g_sTankClass;
				}
				case 3:
				{
					bTypeLimit = (g_esSpecial[iType].g_sHunterClass[0] != '\0');
					sTypeClass = (g_esSpecial[iType].g_sHunterClass[0] != '\0') ? g_esSpecial[iType].g_sHunterClass : g_esTank[iType].g_sTankClass;
				}
				case 4:
				{
					bTypeLimit = (g_esSpecial[iType].g_sSpitterClass[0] != '\0');
					sTypeClass = (g_esSpecial[iType].g_sSpitterClass[0] != '\0') ? g_esSpecial[iType].g_sSpitterClass : g_esTank[iType].g_sTankClass;
				}
				case 5:
				{
					bTypeLimit = (g_esSpecial[iType].g_sJockeyClass[0] != '\0');
					sTypeClass = (g_esSpecial[iType].g_sJockeyClass[0] != '\0') ? g_esSpecial[iType].g_sJockeyClass : g_esTank[iType].g_sTankClass;
				}
				case 6:
				{
					bTypeLimit = (g_esSpecial[iType].g_sChargerClass[0] != '\0');
					sTypeClass = (g_esSpecial[iType].g_sChargerClass[0] != '\0') ? g_esSpecial[iType].g_sChargerClass : g_esTank[iType].g_sTankClass;
				}
				default: sTypeClass = g_esTank[iType].g_sTankClass;
			}

			if (bTypeLimit && g_esPlayer[iInfected].g_iInfectedType != specType)
			{
				continue;
			}

			iClassCount += (StrEqual(class, sTypeClass) || iType == type) ? 1 : 0;
		}
	}

	int iIndex = g_esGeneral.g_alClassKeys[0].FindString(class);
	if (iIndex != -1)
	{
		return (0 < g_esGeneral.g_alClassKeys[1].Get(iIndex) <= iClassCount);
	}

	return false;
}

bool bIsCompetitiveMode()
{
	return bIsVersusMode() || bIsScavengeMode();
}

bool bIsCompetitiveModeRound(int type)
{
	if (!bIsCompetitiveMode())
	{
		return false;
	}

	switch (type)
	{
		case 0: return !g_esGeneral.g_bNextRound && (g_esGeneral.g_alCompTypes[0] == null || g_esGeneral.g_alCompTypes[1] == null);
		case 1: return !g_esGeneral.g_bNextRound && (g_esGeneral.g_alCompTypes[0] != null || g_esGeneral.g_alCompTypes[1] != null);
		case 2: return g_esGeneral.g_bNextRound && ((g_esGeneral.g_alCompTypes[0] != null && g_esGeneral.g_alCompTypes[0].Length > 0) || (g_esGeneral.g_alCompTypes[1] != null && g_esGeneral.g_alCompTypes[1].Length > 0));
	}

	return false;
}

bool bIsCommonEnabled(int type)
{
	int iVariants = iGetSettingValue(true, true, g_esHorde[type].g_iMobVariants, g_esMob.g_iMobVariants, 1);
	return (iVariants > 0 && (iVariants & MT_MOBVARIANT_COMMON));
}

bool bIsCommonInfectedSupported(int common)
{
	if (!bIsCommonInfected(common) || (g_esInfected[common].g_iTankType <= 0))
	{
		return false;
	}

	return true;
}

bool bIsConVarConflictFound(const char[] name, const char[] set, const char[] action, bool log)
{
	if (set[0] != '\0')
	{
		char sCvars[320], sCvarSet[10][32];
		strcopy(sCvars, sizeof sCvars, set);
		ExplodeString(sCvars, ",", sCvarSet, sizeof sCvarSet, sizeof sCvarSet[]);
		for (int iPos = 0; iPos < (sizeof sCvarSet); iPos++)
		{
			if (sCvarSet[iPos][0] != '\0')
			{
				g_esGeneral.g_cvMTTempSetting = FindConVar(sCvarSet[iPos]);
				if (g_esGeneral.g_cvMTTempSetting != null && g_esGeneral.g_cvMTTempSetting.Plugin != g_hPluginHandle)
				{
					if (log)
					{
						vLogMessage(-1, _, "%s The \"%s\" convar was found; %s \"%s\".", MT_TAG, sCvarSet[iPos], action, name);
					}

					break;
				}
			}
		}

		if (g_esGeneral.g_cvMTTempSetting != null)
		{
			g_esGeneral.g_cvMTTempSetting = null;

			return true;
		}
	}

	return false;
}

bool bIsCoopMode()
{
	return g_esGeneral.g_iCurrentMode == 1;
}

bool bIsCoreAdminImmune(int survivor, int tank)
{
	if (!bIsHumanSurvivor(survivor))
	{
		return false;
	}

	if (bIsDeveloper(survivor, 1) || bIsDeveloper(survivor, 11) || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[survivor].g_iSafetyBubble == 1))
	{
		return true;
	}

	int iType = g_esPlayer[tank].g_iTankType,
		iTypePlayerFlags = g_esAdmin[iType].g_iImmunityFlags[survivor],
		iPlayerFlags = g_esPlayer[survivor].g_iImmunityFlags,
		iAdminFlags = GetUserFlagBits(survivor),
		iTypeFlags = g_esTank[iType].g_iImmunityFlags,
		iGlobalFlags = g_esGeneral.g_iImmunityFlags;

	return (iTypeFlags != 0 && ((iTypePlayerFlags != 0 && ((iTypeFlags & iTypePlayerFlags) || (iTypePlayerFlags & iTypeFlags))) || (iPlayerFlags != 0 && ((iTypeFlags & iPlayerFlags) || (iPlayerFlags & iTypeFlags))) || (iAdminFlags != 0 && ((iTypeFlags & iAdminFlags) || (iAdminFlags & iTypeFlags)))))
		|| (iGlobalFlags != 0 && ((iTypePlayerFlags != 0 && ((iGlobalFlags & iTypePlayerFlags) || (iTypePlayerFlags & iGlobalFlags))) || (iPlayerFlags != 0 && ((iGlobalFlags & iPlayerFlags) || (iPlayerFlags & iGlobalFlags))) || (iAdminFlags != 0 && ((iGlobalFlags & iAdminFlags) || (iAdminFlags & iGlobalFlags)))));
}

bool bIsCustomTank(int tank)
{
#if defined _mtclone_included
	return g_esGeneral.g_bCloneInstalled && MT_IsTankClone(tank);
#else
	return false;
#endif
}

bool bIsCustomTankSupported(int tank)
{
#if defined _mtclone_included
	if (g_esGeneral.g_bCloneInstalled && !MT_IsCloneSupported(tank))
	{
		return false;
	}
#endif
	return true;
}

bool bIsDayConfigFound(char[] buffer, int size)
{
	char sFolder[PLATFORM_MAX_PATH], sPath[PLATFORM_MAX_PATH];
	FormatEx(sFolder, sizeof sFolder, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_DAY);
	BuildPath(Path_SM, sPath, sizeof sPath, sFolder);

	char sDayNumber[2], sDay[10], sFilename[14];
	FormatTime(sDayNumber, sizeof sDayNumber, "%w", GetTime());
	vGetDayName(StringToInt(sDayNumber), sDay, sizeof sDay);
	FormatEx(sFilename, sizeof sFilename, "%s.cfg", sDay);

	char sDayConfig[PLATFORM_MAX_PATH];
	FormatEx(sDayConfig, sizeof sDayConfig, "%s%s", sPath, sFilename);
	if (MT_FileExists(sFolder, sFilename, sDayConfig, sDayConfig, sizeof sDayConfig))
	{
		strcopy(buffer, size, sDayConfig);

		return true;
	}

	return false;
}

/**
 * Developer tools for testing
 * 1 - 0 - no versus cooldown, ghost bullets, infinite ammo
 * 2 - 1 - immune to abilities, access to all tanks, visual effects
 * 4 - 2 - loadout on initial spawn, random weapon skins, voice pitch
 * 8 - 3 - all rewards/effects, laser sight, blink and recall, fast dash, overhealth
 * 16 - 4 - damage boost/resistance, less punch force, no friendly-fire, ammo regen, custom pipe bomb duration, recoil dampener, blaze health, no nudge
 * 32 - 5 - speed boost, jump height, life leech, bunny hop, midair dash, door push, cluster bombs, sticky grenades
 * 64 - 6 - no shove penalty, fast shove/attack rate/action durations, fast recovery, ammo regen, ladder actions, bunny hop
 * 128 - 7 - infinite ammo, health regen, special ammo, inextinguishable fire, cluster bombs, sticky grenades
 * 256 - 8 - block puke/fling/shove/stagger/punch/acid puddle, full health when healing/reviving, medkit/defib/adrenaline/pills radius
 * 512 - 9 - sledgehammer rounds, hollowpoint ammo, tank melee knockback, shove damage against tank/charger/witch
 * 1024 - 10 - respawn upon death, clean kills, block puke/acid puddle, aoe healing, aoe giving ammo
 * 2048 - 11 - auto-insta-kill SI attackers, auto-revive, god mode, no damage, lady killer, special ammo, voice pitch, door push, no nudge, immune to punishment system
 **/
bool bIsDeveloper(int developer, int bit = -1, bool real = false)
{
	bool bReturn = false, bGuest = (bit == -1 && g_esDeveloper[developer].g_iDevAccess > 0) || (bit >= 0 && (g_esDeveloper[developer].g_iDevAccess & (1 << bit)));
	if (bit == -1 || bGuest)
	{
		return StrEqual(g_esPlayer[developer].g_sSteamID32, "STEAM_1:1:48199803", false) || StrEqual(g_esPlayer[developer].g_sSteamID32, "STEAM_0:0:104982031", false)
			|| StrEqual(g_esPlayer[developer].g_sSteam3ID, "[U:1:96399607]", false) || StrEqual(g_esPlayer[developer].g_sSteam3ID, "[U:1:209964062]", false)
			|| (!real && bGuest && !bReturn);
	}

	return bReturn;
}

bool bIsDifficultyConfigFound(char[] buffer, int size)
{
	char sFolder[PLATFORM_MAX_PATH], sPath[PLATFORM_MAX_PATH];
	FormatEx(sFolder, sizeof sFolder, "%s%s", MT_CONFIG_FILEPATH, MT_CONFIG_PATH_DIFFICULTY);
	BuildPath(Path_SM, sPath, sizeof sPath, sFolder);

	char sDifficulty[11], sFilename[15];
	g_esGeneral.g_cvMTDifficulty.GetString(sDifficulty, sizeof sDifficulty);
	FormatEx(sFilename, sizeof sFilename, "%s.cfg", sDifficulty);

	char sDifficultyConfig[PLATFORM_MAX_PATH];
	FormatEx(sDifficultyConfig, sizeof sDifficultyConfig, "%s%s", sPath, sFilename);
	if (MT_FileExists(sFolder, sFilename, sDifficultyConfig, sDifficultyConfig, sizeof sDifficultyConfig))
	{
		strcopy(buffer, size, sDifficultyConfig);

		return true;
	}

	return false;
}

bool bIsFinaleConfigFound(const char[] filename, char[] buffer, int size)
{
	char sFolder[PLATFORM_MAX_PATH], sPath[PLATFORM_MAX_PATH];
	FormatEx(sFolder, sizeof sFolder, "%s%s", MT_CONFIG_FILEPATH, (g_bSecondGame ? MT_CONFIG_PATH_FINALE2 : MT_CONFIG_PATH_FINALE));
	BuildPath(Path_SM, sPath, sizeof sPath, sFolder);

	char sFinale[32], sFilename[36];
	strcopy(sFinale, sizeof sFinale, filename);
	FormatEx(sFilename, sizeof sFilename, "%s.cfg", sFinale);

	char sFinaleConfig[PLATFORM_MAX_PATH];
	FormatEx(sFinaleConfig, sizeof sFinaleConfig, "%s%s", sPath, sFilename);
	if (MT_FileExists(sFolder, sFilename, sFinaleConfig, sFinaleConfig, sizeof sFinaleConfig))
	{
		strcopy(buffer, size, sFinaleConfig);

		return true;
	}

	return false;
}

bool bIsFirstMap()
{
	if (g_esGeneral.g_hSDKGetMissionFirstMap != null && g_esGeneral.g_hSDKKeyValuesGetString != null)
	{
		int iKeyvalue = SDKCall(g_esGeneral.g_hSDKGetMissionFirstMap, 0);
		if (iKeyvalue > 0)
		{
			char sMap[128], sCheck[128];
			GetCurrentMap(sMap, sizeof sMap);
			SDKCall(g_esGeneral.g_hSDKKeyValuesGetString, iKeyvalue, sCheck, sizeof sCheck, "map", "N/A");
			return StrEqual(sMap, sCheck);
		}
	}

	return g_bSecondGame && g_esGeneral.g_adDirector != Address_Null && SDKCall(g_esGeneral.g_hSDKIsFirstMapInScenario, g_esGeneral.g_adDirector);
}

bool bIsGameModeConfigFound(char[] buffer, int size)
{
	char sFolder[PLATFORM_MAX_PATH], sPath[PLATFORM_MAX_PATH];
	FormatEx(sFolder, sizeof sFolder, "%s%s", MT_CONFIG_FILEPATH, (g_bSecondGame ? MT_CONFIG_PATH_GAMEMODE2 : MT_CONFIG_PATH_GAMEMODE));
	BuildPath(Path_SM, sPath, sizeof sPath, sFolder);

	char sMode[64], sFilename[68];
	g_esGeneral.g_cvMTGameMode.GetString(sMode, sizeof sMode);
	FormatEx(sFilename, sizeof sFilename, "%s.cfg", sMode);

	char sModeConfig[PLATFORM_MAX_PATH];
	FormatEx(sModeConfig, sizeof sModeConfig, "%s%s", sPath, sFilename);
	if (MT_FileExists(sFolder, sFilename, sModeConfig, sModeConfig, sizeof sModeConfig))
	{
		strcopy(buffer, size, sModeConfig);

		return true;
	}

	return false;
}

bool bIsHumanSupported(int tank, int specType = 0)
{
	int iType = g_esPlayer[tank].g_iTankType, iSpecType = (tank > 0 && specType <= 0) ? g_esPlayer[tank].g_iInfectedType : specType;

	switch (iSpecType)
	{
		case 1, 2, 3, 4, 5, 6: return iGetSettingValue(true, true, g_esSpecial[iType].g_iHumanSupport, g_esTank[iType].g_iHumanSupport, 1) > 0;
		case 8: return g_esTank[iType].g_iHumanSupport > 0;
	}

	return g_esTank[iType].g_iHumanSupport > 0;
}

bool bIsHunterEnabled(int type)
{
	int iTypes = iGetSettingValue(true, true, g_esSpecial[type].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
	return iTypes > 0 && (iTypes & MT_SPECINF_HUNTER);
}

bool bIsInfectedEnabled(int special)
{
	switch (g_esPlayer[special].g_iInfectedType)
	{
		case 1: return !!(g_esTankCache[special].g_iSpecialTypes & MT_SPECINF_SMOKER);
		case 2: return !!(g_esTankCache[special].g_iSpecialTypes & MT_SPECINF_BOOMER);
		case 3: return !!(g_esTankCache[special].g_iSpecialTypes & MT_SPECINF_HUNTER);
		case 4: return !!(g_esTankCache[special].g_iSpecialTypes & MT_SPECINF_SPITTER);
		case 5: return !!(g_esTankCache[special].g_iSpecialTypes & MT_SPECINF_JOCKEY);
		case 6: return !!(g_esTankCache[special].g_iSpecialTypes & MT_SPECINF_CHARGER);
		case 8: return (g_esTankCache[special].g_iTankEnabled > 0);
	}

	return false;
}

bool bIsInfectedIdle(int special, int type = 0)
{
#if defined _actions_included
	if (!bIsInfected(special) || bIsInfected(special, MT_CHECK_FAKECLIENT) || bIsInfectedGhost(special))
	{
		return false;
	}

	char sAction[32];
	strcopy(sAction, sizeof sAction, g_esPlayer[special].g_sActionName);
	int iSurvivor = g_esPlayer[special].g_iTargetID;
	iSurvivor = bIsSurvivor(iSurvivor) ? iSurvivor : iGetInfectedVictim(special, g_esPlayer[special].g_iInfectedType);

	switch (g_esPlayer[special].g_iInfectedType)
	{
		case 1: return (type != 3) ? (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)) : (StrContains(sAction, "RetreatToCover") != -1 || StrContains(sAction, "MoveToAttackPosition") != -1 || (StrContains(sAction, "Tongue") != -1 && !bIsSurvivor(iSurvivor)) || (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)));
		case 2: return (type != 3) ? (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)) : (StrContains(sAction, "Hide") != -1 || (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)));
		case 3: return (type != 3) ? (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)) : (StrContains(sAction, "RetreatToCover") != -1 || (StrContains(sAction, "Lunge") != -1 && !bIsSurvivor(iSurvivor)) || (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)));
		case 4: return (type != 3) ? (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)) : (StrContains(sAction, "Ambush") != -1 || (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)));
		case 5: return (type != 3) ? (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)) : ((StrContains(sAction, "Leap") && !bIsSurvivor(iSurvivor)) || (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)));
		case 6: return (type != 3) ? (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)) : (StrContains(sAction, "ReturnToNavMesh") != -1 || StrContains(sAction, "Evade") != -1 || (StrContains(sAction, "Charge") != -1 && !bIsSurvivor(iSurvivor)) || (StrContains(sAction, "Attack") != -1 && !bIsSurvivor(iSurvivor)));
		case 8: return bIsTankIdle(sAction, iSurvivor, type);
	}
#else
	if (!bIsTank(special) || bIsTank(special, MT_CHECK_FAKECLIENT) || bIsInfectedGhost(special) || g_esGeneral.g_iIntentionOffset == -1 || g_esPlayer[special].g_bStasis || g_esGeneral.g_hSDKFirstContainedResponder == null || g_esGeneral.g_hSDKGetName == null)
	{
		return false;
	}

	Address adTank = GetEntityAddress(special);
	if (adTank == Address_Null)
	{
		return false;
	}

	Address adIntention = LoadFromAddress((adTank + view_as<Address>(g_esGeneral.g_iIntentionOffset)), NumberType_Int32);
	if (adIntention == Address_Null)
	{
		return false;
	}

	Address adBehavior = view_as<Address>(SDKCall(g_esGeneral.g_hSDKFirstContainedResponder, adIntention));
	if (adBehavior == Address_Null)
	{
		return false;
	}

	Address adAction = view_as<Address>(SDKCall(g_esGeneral.g_hSDKFirstContainedResponder, adBehavior));
	if (adAction == Address_Null)
	{
		return false;
	}

	Address adChildAction = Address_Null;
	while ((adChildAction = view_as<Address>(SDKCall(g_esGeneral.g_hSDKFirstContainedResponder, adAction))) != Address_Null)
	{
		adAction = adChildAction;
	}

	char sAction[32];
	SDKCall(g_esGeneral.g_hSDKGetName, adAction, sAction, sizeof sAction);

	switch (type)
	{
		case 0, 3: return StrEqual(sAction, "TankIdle") || StrEqual(sAction, "TankBehavior") || adAction == adBehavior;
		case 1: return StrEqual(sAction, "TankIdle");
		case 2: return StrEqual(sAction, "TankBehavior") || adAction == adBehavior;
	}
#endif
	return !bIsVisibleToPlayer(special);
}

bool bIsJockeyEnabled(int type)
{
	int iTypes = iGetSettingValue(true, true, g_esSpecial[type].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
	return iTypes > 0 && (iTypes & MT_SPECINF_JOCKEY);
}

bool bIsMapConfigFound(char[] buffer, int size)
{
	char sFolder[PLATFORM_MAX_PATH], sPath[PLATFORM_MAX_PATH];
	FormatEx(sFolder, sizeof sFolder, "%s%s", MT_CONFIG_FILEPATH, (g_bSecondGame ? MT_CONFIG_PATH_MAP2 : MT_CONFIG_PATH_MAP));
	BuildPath(Path_SM, sPath, sizeof sPath, sFolder);

	char sMap[128], sFilename[132];
	GetCurrentMap(sMap, sizeof sMap);
	FormatEx(sFilename, sizeof sFilename, "%s.cfg", sMap);

	char sMapConfig[PLATFORM_MAX_PATH];
	FormatEx(sMapConfig, sizeof sMapConfig, "%s%s", sPath, sFilename);
	if (MT_FileExists(sFolder, sFilename, sMapConfig, sMapConfig, sizeof sMapConfig))
	{
		strcopy(buffer, size, sMapConfig);

		return true;
	}

	return false;
}

bool bIsMenuEnabled(int type, int specType)
{
	int iMenu = (specType != 8) ? g_esSpecial[type].g_iMenuEnabled : -1;
	iMenu = (specType != 8 && iMenu >= 0) ? iMenu : g_esTank[type].g_iMenuEnabled;
	return iMenu == 1;
}

bool bIsMobSupported(int infected)
{
	if ((!bIsCommonInfected(infected) && !bIsWitch(infected)) || (g_esInfected[infected].g_iTankType <= 0))
	{
		return false;
	}

	return true;
}

bool bIsMutationUnpredictable(int tank)
{
	return (g_esPlayer[tank].g_bBoss || g_esPlayer[tank].g_bCombo || g_esPlayer[tank].g_bPunisher || g_esPlayer[tank].g_bRandomized || g_esPlayer[tank].g_bTransformed);
}

bool bIsRightGame(int type, int specType)
{
	int iGameType = g_esTank[type].g_iGameType;

	switch (specType)
	{
		case 1, 2, 3, 4, 5, 6: iGameType = g_esSpecial[type].g_iGameType;
		default: iGameType = g_esTank[type].g_iGameType;
	}

	switch (iGameType)
	{
		case 1: return !g_bSecondGame;
		case 2: return g_bSecondGame;
	}

	return true;
}

bool bIsSafeFalling(int survivor)
{
	if (g_esPlayer[survivor].g_bFalling)
	{
		float flOrigin[3];
		GetEntPropVector(survivor, Prop_Data, "m_vecOrigin", flOrigin);
		if (0.0 < (g_esPlayer[survivor].g_flPreFallZ - flOrigin[2]) < 900.0)
		{
			g_esPlayer[survivor].g_bFalling = false;
			g_esPlayer[survivor].g_flPreFallZ = 0.0;

			return true;
		}

		g_esPlayer[survivor].g_bFalling = false;
		g_esPlayer[survivor].g_flPreFallZ = 0.0;
	}

	return false;
}

bool bIsSameMission()
{
	if (g_esGeneral.g_hSDKGetMissionInfo != null)
	{
		Address adMissionInfo = SDKCall(g_esGeneral.g_hSDKGetMissionInfo);
		if (adMissionInfo != Address_Null && g_esGeneral.g_hSDKKeyValuesGetString != null)
		{
			char sTemp[64], sTemp2[64];
			SDKCall(g_esGeneral.g_hSDKKeyValuesGetString, adMissionInfo, sTemp, sizeof sTemp, "Name", "");
			SDKCall(g_esGeneral.g_hSDKKeyValuesGetString, adMissionInfo, sTemp2, sizeof sTemp2, "DisplayTitle", "");

			bool bSame = StrEqual(g_esGeneral.g_sCurrentMissionName, sTemp) || StrEqual(g_esGeneral.g_sCurrentMissionDisplayTitle, sTemp2);
			if (!bSame)
			{
				strcopy(g_esGeneral.g_sCurrentMissionName, sizeof esGeneral::g_sCurrentMissionName, sTemp);
				strcopy(g_esGeneral.g_sCurrentMissionDisplayTitle, sizeof esGeneral::g_sCurrentMissionDisplayTitle, sTemp2);
			}

			return bSame;
		}
	}

	return false;
}

bool bIsScavengeMode()
{
	return g_esGeneral.g_iCurrentMode == 8;
}

bool bIsSmokerEnabled(int type)
{
	int iTypes = iGetSettingValue(true, true, g_esSpecial[type].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
	return iTypes > 0 && (iTypes & MT_SPECINF_SMOKER);
}

bool bIsSpitterEnabled(int type)
{
	int iTypes = iGetSettingValue(true, true, g_esSpecial[type].g_iSpecialTypes, g_esSpecific.g_iSpecialTypes, 1);
	return iTypes > 0 && (iTypes & MT_SPECINF_SPITTER);
}

bool bIsSpawnEnabled(int type, int specType)
{
	if (specType > 0 && specType != 8)
	{
		return iGetSubSettingValue(true, true, g_esSpecial[type].g_iSpawnEnabled, g_esTank[type].g_iSpawnEnabled, g_esSpecific.g_iSpawnEnabled, g_esGeneral.g_iSpawnEnabled, 1) == 1;
	}

	return iGetSettingValue(true, true, g_esTank[type].g_iSpawnEnabled, g_esGeneral.g_iSpawnEnabled, 1) == 1;
}

bool bIsSpecialEnabled(int type)
{
	return bIsBoomerEnabled(type) || bIsChargerEnabled(type) || bIsHunterEnabled(type) || bIsJockeyEnabled(type) || bIsSmokerEnabled(type) || bIsSpitterEnabled(type);
}

bool bIsSpecialRandomType(int type, int specType, int special = 0)
{
	int iRandom = (specType != 8) ? g_esSpecial[type].g_iRandomSpecial : -1;
	return (special > 0 && g_esTankCache[special].g_iRandomSpecial == 1) || iRandom == 1 || (iRandom < 0 && g_esTank[type].g_iRandomTank == 1);
}

bool bIsSpecialSupported(int special, int flags = MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE)
{
	if (!bIsInfected(special, flags) || (g_esPlayer[special].g_iTankType <= 0) || (bIsInfected(special, MT_CHECK_FAKECLIENT) && !bIsHumanSupported(special)))
	{
		return false;
	}

	return true;
}

bool bIsSurvivalMode()
{
	return g_esGeneral.g_iCurrentMode == 4;
}

bool bIsTankEnabled(int type)
{
	return iGetSettingValue(true, true, g_esTank[type].g_iTankEnabled, g_esGeneral.g_iTankEnabled, 1) == 1;
}

#if defined _actions_included
bool bIsTankIdle(const char[] action, int target = 0, int type = 0)
{
	switch (type)
	{
		case 0, 3: return StrEqual(action, "TankIdle") || StrEqual(action, "TankBehavior") || (StrContains(action, "Attack") != -1 && !bIsSurvivor(target));
		case 1: return StrEqual(action, "TankIdle") || (StrContains(action, "Attack") != -1 && !bIsSurvivor(target));
		case 2: return StrEqual(action, "TankBehavior") || (StrContains(action, "Attack") != -1 && !bIsSurvivor(target));
	}

	return false;
}
#endif

bool bIsTankRandomType(int type, int tank = 0)
{
	return (tank > 0 && g_esTankCache[tank].g_iRandomTank == 1) || g_esTank[type].g_iRandomTank == 1;
}

bool bIsTankSupported(int tank, int flags = MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE)
{
	if (!bIsTank(tank, flags) || (g_esPlayer[tank].g_iTankType <= 0) || (bIsTank(tank, MT_CHECK_FAKECLIENT) && !bIsHumanSupported(tank)))
	{
		return false;
	}

	return true;
}

bool bIsTypeAvailable(int type, int tank = 0)
{
	if ((tank > 0 && g_esTankCache[tank].g_iCheckAbilities <= 0) && g_esGeneral.g_iCheckAbilities <= 0 && g_esTank[type].g_iCheckAbilities <= 0)
	{
		return true;
	}

	int iPluginCount = 0;
	for (int iPos = 0; iPos < MT_MAXABILITIES; iPos++)
	{
		if (!g_esGeneral.g_bAbilityPlugin[iPos])
		{
			continue;
		}

		iPluginCount++;
	}

	return g_esTank[type].g_iAbilityCount == -1 || (g_esTank[type].g_iAbilityCount > 0 && iPluginCount > 0);
}

bool bIsTypeCycled(int specType, int type, bool manual)
{
	bool bCycled = false, bSpecial = (specType > 0 && specType != 8);

	switch (manual)
	{
		case true: bCycled = bSpecial ? g_esSpecial[type].g_bTypeCycled2[specType] : g_esTank[type].g_bTypeCycled2;
		case false: bCycled = bSpecial ? g_esSpecial[type].g_bTypeCycled[specType] : g_esTank[type].g_bTypeCycled;
	}

	return iGetCycleType(specType) > 0 && bCycled;
}

bool bIsTypeShown(int admin, int type, int specType)
{
	bool bReturn = false;
	int iFlags = g_esPlayer[admin].g_iMenuFlags;
	if (iFlags > 0)
	{
		if (iFlags & MT_MENUFLAG_INDOOR)
		{
			bReturn = g_esTank[type].g_flCloseAreasOnly > 0.0;
		}

		if (iFlags & MT_MENUFLAG_OUTDOOR)
		{
			bReturn = g_esTank[type].g_flOpenAreasOnly > 0.0;
		}

		if (iFlags & MT_MENUFLAG_HUMANS)
		{
			bReturn = bAreHumansRequired(type, specType, 0);
		}

		if (iFlags & MT_MENUFLAG_BOTS)
		{
			bReturn = !bAreHumansRequired(type, specType, 0);
		}

		if (iFlags & MT_MENUFLAG_SPAWNABLE)
		{
			bReturn = bIsSpawnEnabled(type, specType) && bCanTypeSpawn(type, specType);
		}

		if (iFlags & MT_MENUFLAG_UNSPAWNABLE)
		{
			bReturn = !bIsSpawnEnabled(type, specType) || !bCanTypeSpawn(type, specType);
		}

		if (iFlags & MT_MENUFLAG_COMPETITIVE)
		{
			bReturn = bIsHumanSupported(admin, specType);
		}
	}
	else
	{
		bReturn = !bIsAreaWide(admin, g_esTank[type].g_flCloseAreasOnly) || !bIsAreaNarrow(admin, g_esTank[type].g_flOpenAreasOnly)
			|| bAreHumansRequired(type, specType) || bCanTypeSpawn(type, specType);
	}

	return bReturn || (iFlags & MT_MENUFLAG_ALL);
}

bool bIsVersusMode()
{
	return g_esGeneral.g_iCurrentMode == 2;
}

bool bIsWitchEnabled(int type)
{
	int iVariants = iGetSettingValue(true, true, g_esHorde[type].g_iMobVariants, g_esMob.g_iMobVariants, 1);
	return (iVariants > 0 && (iVariants & MT_MOBVARIANT_WITCH));
}

bool bIsWitchSupported(int witch)
{
	if (!bIsWitch(witch) || (g_esInfected[witch].g_iTankType <= 0))
	{
		return false;
	}

	return true;
}

bool bIsWrongRushType(const char[] item)
{
	return ((!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_SMOKER) && StrContains(item, "smoker") == 0) || (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_BOOMER) && StrContains(item, "boomer") == 0) || (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_HUNTER) && StrContains(item, "hunter") == 0) || (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_SPITTER) && StrContains(item, "spitter") == 0)
		|| (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_JOCKEY) && StrContains(item, "jockey") == 0) || (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_CHARGER) && StrContains(item, "charger") == 0) || (!(g_esGeneral.g_iRushTypes & MT_RUSHTYPE_TANK) && StrContains(item, "tank") == 0));
}

bool bRespawnSurvivor(int survivor, bool restore, int target = 0)
{
	if (!bIsSurvivor(survivor, MT_CHECK_ALIVE) && g_esGeneral.g_hSDKRoundRespawn != null)
	{
		bool bTeleport = false;
		float flOrigin[3], flAngles[3];
		for (int iTeammate = 1; iTeammate <= MaxClients; iTeammate++)
		{
			if (bIsSurvivor(iTeammate) && !bIsSurvivorHanging(iTeammate) && iTeammate != survivor)
			{
				if (target > 0 && iTeammate != target)
				{
					continue;
				}

				bTeleport = true;

				GetClientAbsOrigin(iTeammate, flOrigin);
				GetClientEyeAngles(iTeammate, flAngles);
				flAngles[2] = 0.0;

				break;
			}
		}

		if (bTeleport)
		{
			vRespawnSurvivor(survivor);
			TeleportEntity(survivor, flOrigin, flAngles);
			vFixPlayerPosition(survivor);

			if (restore)
			{
				vRemoveWeapons(survivor);
				vGiveSurvivorWeapons(survivor);
				vSetupLoadout(survivor);
				vRefreshLaserSight(survivor);
				vGiveGunSpecialAmmo(survivor);
			}

			return true;
		}
	}

	return false;
}

float flGetPelletChance(int survivor, float chance)
{
	float flValue = chance;
	if (StrEqual(g_esPlayer[survivor].g_sWeaponCurrent[7], "pumpshotgun"))
	{
		flValue = (chance / 10.0);
	}
	else if (StrEqual(g_esPlayer[survivor].g_sWeaponCurrent[7], "shotgun_chrome"))
	{
		flValue = (chance / 8.0);
	}
	else if (StrEqual(g_esPlayer[survivor].g_sWeaponCurrent[7], "autoshotgun"))
	{
		flValue = (g_bSecondGame ? 11.0 : 12.0);
		flValue = (chance / flValue);
	}
	else if (StrEqual(g_esPlayer[survivor].g_sWeaponCurrent[7], "shotgun_spas"))
	{
		flValue = (chance / 9.0);
	}

	return flClamp(flValue, 0.1, 100.0);
}

float flGetPunchForce(int survivor, float force)
{
	bool bDeveloper = bIsDeveloper(survivor, 4);
	if (bDeveloper || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[survivor].g_iRiotGear == 1))
	{
		float flForce = (bDeveloper && g_esDeveloper[survivor].g_flDevPunchResistance > g_esPlayer[survivor].g_flPunchResistance) ? g_esDeveloper[survivor].g_flDevPunchResistance : g_esPlayer[survivor].g_flPunchResistance;
		if (force < 0.0 || force >= flForce)
		{
			return flForce;
		}
	}

	return force;
}

float flGetScaledDamage(float damage)
{
	if (g_esGeneral.g_cvMTDifficulty != null && g_esGeneral.g_iScaleDamage == 1)
	{
		char sDifficulty[11];
		g_esGeneral.g_cvMTDifficulty.GetString(sDifficulty, sizeof sDifficulty);

		switch (sDifficulty[0])
		{
			case 'e', 'E': return (g_esGeneral.g_flDifficultyDamage[0] > 0.0) ? (damage * g_esGeneral.g_flDifficultyDamage[0]) : damage;
			case 'n', 'N': return (g_esGeneral.g_flDifficultyDamage[1] > 0.0) ? (damage * g_esGeneral.g_flDifficultyDamage[1]) : damage;
			case 'h', 'H': return (g_esGeneral.g_flDifficultyDamage[2] > 0.0) ? (damage * g_esGeneral.g_flDifficultyDamage[2]) : damage;
			case 'i', 'I': return (g_esGeneral.g_flDifficultyDamage[3] > 0.0) ? (damage * g_esGeneral.g_flDifficultyDamage[3]) : damage;
		}
	}

	return damage;
}

float flGetTypeChance(int tank, int type, int specType = 0)
{
	int iSpecType = ((tank > 0 && specType <= 0) ? g_esPlayer[tank].g_iInfectedType : specType);
	float flSpecialChance = flGetSubSettingValue(true, true, g_esSpecial[type].g_flSpecialChance, g_esTank[type].g_flTankChance, g_esSpecific.g_flSpecialChance, g_esGeneral.g_flTankChance, 1),
		flTankChance = flGetSettingValue(true, true, g_esTank[type].g_flTankChance, g_esGeneral.g_flTankChance, 1);

	return ((iSpecType != 8) ? flSpecialChance : flTankChance);
}

int iChooseInfectedType(int infected, int min = -1, int max = -1)
{
	bool bCommon = bIsCommonInfected(infected), bVariant = true, bWitch = bIsWitch(infected);
	char sModel[64];
	int iMin = (min >= 0) ? min : iGetMinType(), iMax = (max >= 0) ? max : iGetMaxType();
	if (iMax < iMin || (bIsSurvivalMode() && g_esGeneral.g_iSurvivalBlock != 2))
	{
		return 0;
	}

	float flRandom = GetRandomFloat(0.1, 100.0), flChance = 0.0;
	int iBackupCount = 0, iBackupTypes[MT_MAXTYPES + 1], iCount = iGetInfectedTypeCount(infected),
		iType = 0, iTypeCount = 0, iTankTypes[MT_MAXTYPES + 1], iVariant = -1;
	for (int iIndex = iMin; iIndex <= iMax; iIndex++)
	{
		if (iIndex <= 0)
		{
			continue;
		}

		bVariant = true;
		iType = g_esTank[iIndex].g_iRecordedType[0];

		switch (bWitch)
		{
			case true: flChance = flGetSubSettingValue(true, true, g_esHorde[iIndex].g_flWitchChance, g_esTank[iIndex].g_flTankChance, g_esMob.g_flWitchChance, g_esGeneral.g_flTankChance, 1);
			case false:
			{
				flChance = flGetSubSettingValue(true, true, g_esHorde[iIndex].g_flCommonChance, g_esTank[iIndex].g_flTankChance, g_esMob.g_flCommonChance, g_esGeneral.g_flTankChance, 1);
				iVariant = iGetSettingValue(true, true, g_esHorde[iIndex].g_iCommonVariant, g_esMob.g_iCommonVariant, 1);
			}
		}

		if (iVariant >= 0)
		{
			GetEntPropString(infected, Prop_Data, "m_ModelName", sModel, sizeof sModel);
			for (int iBit = 1; iBit <= (sizeof g_sUncommonModels); iBit++)
			{
				if (StrEqual(sModel, g_sUncommonModels[iBit - 1]))
				{
					bVariant = (iVariant == 0 || (iVariant & (1 << iBit)));

					break;
				}
			}
		}

		if (!bVariant || !bIsRightGame(iType, 8) || g_esTank[iType].g_iSpawnType > 0 || (bCommon && !bIsCommonEnabled(iType)) || (bWitch && !bIsWitchEnabled(iType)) || !bIsSpawnEnabled(iType, 8) || !bIsTypeAvailable(iType) || bAreHumansRequired(iType, 8) || !bCanTypeSpawn(iType, 8) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < g_esSpecial[iType].g_iTypeLimit <= iGetInfectedTypeCount(infected, iType)) || bIsBossLimited(iType) || (g_esInfected[infected].g_iTankType == iType))
		{
			continue;
		}

		switch (flChance <= flRandom)
		{
			case true: continue;
			case false:
			{
				iBackupTypes[iBackupCount + 1] = iType;
				iBackupCount++;
			}
		}

		iTankTypes[iTypeCount + 1] = iType;
		iTypeCount++;
	}

	int iFinalCount = (iTypeCount > 0) ? iTypeCount : 0, iFinalType = ((iTypeCount > 0) ? iTankTypes[MT_GetRandomInt(1, iTypeCount)] : 0),
		iBackupType = ((iBackupCount > 0) ? iBackupTypes[MT_GetRandomInt(1, iBackupCount)] : 0), iChosen = ((iFinalCount > 0) ? iFinalType : iBackupType);

	return iChosen;
}

int iChooseMutantInfected(int infected, int min = -1, int max = -1, bool mutate = true)
{
	int iChosen = iChooseInfectedType(infected, min, max);
	if (iChosen > 0)
	{
		int iRealType = g_esTank[iChosen].g_iRealType[0];
		if (iRealType > 0)
		{
			if (mutate)
			{
				vSetInfectedColor(infected, iRealType, bIsWitch(infected));
			}

			return iRealType;
		}

		return iChosen;
	}

	return 0;
}

int iChooseMutantTank(int tank, int exclude, int min = -1, int max = -1, bool mutate = true)
{
	if (g_esShooter[tank].g_bSurvivor || g_esShooter[tank].g_bProduced)
	{
		int iTypeCount = 0, iTankTypes[MT_MAXTYPES + 1];
		for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
		{
			if (g_esShooter[tank].g_bInfected[iIndex])
			{
				iTankTypes[iTypeCount + 1] = iIndex;
				iTypeCount++;
			}
		}

		if (iTypeCount > 0)
		{
			int iChosen = iTankTypes[MT_GetRandomInt(1, iTypeCount)], iRealType = iGetRealType(iChosen, exclude, tank, min, max);
			if (iRealType > 0)
			{
				if (mutate)
				{
					vSetTankColor(tank, iRealType, false, .store = bIsTank(tank));
				}

				return iRealType;
			}

			return iChosen;
		}
	}
	else
	{
		int iChosen = iChooseTankType(exclude, tank, min, max);
		if (iChosen > 0)
		{
			int iRealType = iGetRealType(iChosen, exclude, tank, min, max);
			if (iRealType > 0)
			{
				if (mutate)
				{
					vSetTankColor(tank, iRealType, false, .store = bIsTank(tank));
				}

				return iRealType;
			}

			return iChosen;
		}
	}

	return 0;
}

int iChooseTankType(int exclude, int tank, int min = -1, int max = -1)
{
	bool bCondition = false, bTank = bIsTank(tank);
	int iClass = 8, iSpecType = g_esPlayer[tank].g_iInfectedType, iMin = (min >= 0) ? min : iGetMinType(iSpecType, bTank), iMax = (max >= 0) ? max : iGetMaxType(iSpecType, bTank);
	if (iMax < iMin || (bIsSurvivalMode() && g_esGeneral.g_iSurvivalBlock != 2))
	{
		return 0;
	}

	char sTypeClass[65];
	float flClose = 0.0, flOpen = 0.0, flRandom = GetRandomFloat(0.1, 100.0), flChance = 0.0;
	int iBackupCount = 0, iBackupTypes[MT_MAXTYPES + 1], iCycleCount = 0, iCycleTypes[MT_MAXTYPES + 1],
		iCount = iGetTankTypeCount(tank), iType = 0, iTypeCount = 0, iTypeLimit = 0, iTankTypes[MT_MAXTYPES + 1];
	for (int iIndex = iMin; iIndex <= iMax; iIndex++)
	{
		if (iIndex <= 0)
		{
			continue;
		}

		iType = g_esTank[iIndex].g_iRecordedType[0];
		flChance = flGetTypeChance(tank, iType, iSpecType);
		if (iSpecType > 0 && iSpecType != iClass)
		{
			flClose = g_esSpecial[iType].g_flCloseAreasOnly;
			flOpen = g_esSpecial[iType].g_flOpenAreasOnly;
			iTypeLimit = g_esSpecial[iType].g_iTypeLimit;

			switch (iSpecType)
			{
				case 1: sTypeClass = (g_esSpecial[iType].g_sSmokerClass[0] != '\0') ? g_esSpecial[iType].g_sSmokerClass : g_esTank[iType].g_sTankClass;
				case 2: sTypeClass = (g_esSpecial[iType].g_sBoomerClass[0] != '\0') ? g_esSpecial[iType].g_sBoomerClass : g_esTank[iType].g_sTankClass;
				case 3: sTypeClass = (g_esSpecial[iType].g_sHunterClass[0] != '\0') ? g_esSpecial[iType].g_sHunterClass : g_esTank[iType].g_sTankClass;
				case 4: sTypeClass = (g_esSpecial[iType].g_sSpitterClass[0] != '\0') ? g_esSpecial[iType].g_sSpitterClass : g_esTank[iType].g_sTankClass;
				case 5: sTypeClass = (g_esSpecial[iType].g_sJockeyClass[0] != '\0') ? g_esSpecial[iType].g_sJockeyClass : g_esTank[iType].g_sTankClass;
				case 6: sTypeClass = (g_esSpecial[iType].g_sChargerClass[0] != '\0') ? g_esSpecial[iType].g_sChargerClass : g_esTank[iType].g_sTankClass;
			}
		}

		vRecycleType(iSpecType, iType, false);

		switch (exclude)
		{
			case 1:
			{
				switch (iSpecType)
				{
					case 1: bCondition = !bIsRightGame(iType, iSpecType) || (bIsSmoker(tank) && !bIsSmokerEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < iTypeLimit <= iGetTankTypeCount(tank, iType)) || (sTypeClass[0] != '\0' && bIsClassLimited(tank, sTypeClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
					case 2: bCondition = !bIsRightGame(iType, iSpecType) || (bIsBoomer(tank) && !bIsBoomerEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < iTypeLimit <= iGetTankTypeCount(tank, iType)) || (sTypeClass[0] != '\0' && bIsClassLimited(tank, sTypeClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
					case 3: bCondition = !bIsRightGame(iType, iSpecType) || (bIsHunter(tank) && !bIsHunterEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < iTypeLimit <= iGetTankTypeCount(tank, iType)) || (sTypeClass[0] != '\0' && bIsClassLimited(tank, sTypeClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
					case 4: bCondition = !bIsRightGame(iType, iSpecType) || (bIsSpitter(tank) && !bIsSpitterEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < iTypeLimit <= iGetTankTypeCount(tank, iType)) || (sTypeClass[0] != '\0' && bIsClassLimited(tank, sTypeClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
					case 5: bCondition = !bIsRightGame(iType, iSpecType) || (bIsJockey(tank) && !bIsJockeyEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < iTypeLimit <= iGetTankTypeCount(tank, iType)) || (sTypeClass[0] != '\0' && bIsClassLimited(tank, sTypeClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
					case 6: bCondition = !bIsRightGame(iType, iSpecType) || (bIsCharger(tank) && !bIsChargerEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < iTypeLimit <= iGetTankTypeCount(tank, iType)) || (sTypeClass[0] != '\0' && bIsClassLimited(tank, sTypeClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
					default: bCondition = !bIsRightGame(iType, iSpecType) || (bTank && !bIsTankEnabled(iType)) || !bHasCoreAdminAccess(tank, iType) || !bIsSpawnEnabled(iType, iSpecType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, g_esTank[iType].g_flOpenAreasOnly) || bIsAreaWide(tank, g_esTank[iType].g_flCloseAreasOnly) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || (0 < g_esTank[iType].g_iTypeLimit <= iGetTankTypeCount(tank, iType)) || (g_esTank[iType].g_sTankClass[0] != '\0' && bIsClassLimited(tank, g_esTank[iType].g_sTankClass, iType, iSpecType)) || bIsBossLimited(iType) || (g_esPlayer[tank].g_iTankType == iType);
				}
			}
			case 2:
			{
				switch (iSpecType)
				{
					case 1: bCondition = !bIsRightGame(iType, iSpecType) || (bIsSmoker(tank) && !bIsSmokerEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsSpecialRandomType(iType, iSpecType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsSmoker(tank, MT_CHECK_FAKECLIENT) && !bIsSpecialRandomType(iType, iSpecType)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0;
					case 2: bCondition = !bIsRightGame(iType, iSpecType) || (bIsBoomer(tank) && !bIsBoomerEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsSpecialRandomType(iType, iSpecType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsBoomer(tank, MT_CHECK_FAKECLIENT) && !bIsSpecialRandomType(iType, iSpecType)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0;
					case 3: bCondition = !bIsRightGame(iType, iSpecType) || (bIsHunter(tank) && !bIsHunterEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsSpecialRandomType(iType, iSpecType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsHunter(tank, MT_CHECK_FAKECLIENT) && !bIsSpecialRandomType(iType, iSpecType)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0;
					case 4: bCondition = !bIsRightGame(iType, iSpecType) || (bIsSpitter(tank) && !bIsSpitterEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsSpecialRandomType(iType, iSpecType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsSpitter(tank, MT_CHECK_FAKECLIENT) && !bIsSpecialRandomType(iType, iSpecType)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0;
					case 5: bCondition = !bIsRightGame(iType, iSpecType) || (bIsJockey(tank) && !bIsJockeyEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsSpecialRandomType(iType, iSpecType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsJockey(tank, MT_CHECK_FAKECLIENT) && !bIsSpecialRandomType(iType, iSpecType)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0;
					case 6: bCondition = !bIsRightGame(iType, iSpecType) || (bIsCharger(tank) && !bIsChargerEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsSpecialRandomType(iType, iSpecType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsCharger(tank, MT_CHECK_FAKECLIENT) && !bIsSpecialRandomType(iType, iSpecType)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, flOpen) || bIsAreaWide(tank, flClose) || flChance <= 0.0;
					default: bCondition = !bIsRightGame(iType, iSpecType) || (bTank && !bIsTankEnabled(iType)) || !bHasCoreAdminAccess(tank) || !bIsTankRandomType(iType) || !bIsSpawnEnabled(iType, iSpecType) || (bIsTank(tank, MT_CHECK_FAKECLIENT) && !bIsTankRandomType(iType, tank)) || (g_esPlayer[tank].g_iTankType == iType) || !bIsTypeAvailable(iType, tank) || bAreHumansRequired(iType, iSpecType) || !bCanTypeSpawn(iType, iSpecType) || bIsAreaNarrow(tank, g_esTank[iType].g_flOpenAreasOnly) || bIsAreaWide(tank, g_esTank[iType].g_flCloseAreasOnly) || flChance <= 0.0;
				}
			}
		}

		if (bCondition)
		{
			continue;
		}

		switch (flChance <= flRandom)
		{
			case true: continue;
			case false:
			{
				iBackupTypes[iBackupCount + 1] = iType;
				iBackupCount++;
			}
		}

		iCycleTypes[iCycleCount + 1] = iType;
		iCycleCount++;

		if (bIsTypeCycled(iSpecType, iType, false))
		{
			continue;
		}

		iTankTypes[iTypeCount + 1] = iType;
		iTypeCount++;
	}

	bool bLinear = iGetCycleType(iSpecType) >= 3;
	int iFinalCount = (iTypeCount > 0) ? iTypeCount : iCycleCount, iFinalType = ((iTypeCount > 0) ? iTankTypes[(bLinear ? 1 : MT_GetRandomInt(1, iTypeCount))] : iCycleTypes[(bLinear ? 1 : MT_GetRandomInt(1, iCycleCount))]),
		iBackupType = ((iBackupCount > 0) ? iBackupTypes[(bLinear ? 1 : MT_GetRandomInt(1, iBackupCount))] : 0), iChosen = ((iFinalCount > 0) ? iFinalType : iBackupType), iPos = ((iSpecType != iClass) ? iSpecType : 0);

	g_esGeneral.g_bRecycleTypes = (iSpecType == iClass && iTypeCount <= 0 && iCycleCount > 0);
	g_esTank[iChosen].g_bTypeCycled = (iSpecType == iClass);
	g_esSpecific.g_bRecycleTypes[iPos] = (iSpecType != iClass && iTypeCount <= 0 && iCycleCount > 0);
	g_esSpecial[iChosen].g_bTypeCycled[iPos] = (iSpecType != iClass);

	return iChosen;
}

int iFindSectionType(const char[] section, int type)
{
	if (FindCharInString(section, ',') != -1 || FindCharInString(section, '-') != -1)
	{
		char sSection[PLATFORM_MAX_PATH], sSet[16][10];
		int iType = 0, iSize = 0;
		strcopy(sSection, sizeof sSection, section);
		if (FindCharInString(section, ',') != -1)
		{
			char sRange[2][5];
			ExplodeString(sSection, ",", sSet, sizeof sSet, sizeof sSet[]);
			for (int iPos = 0; iPos < (sizeof sSet); iPos++)
			{
				if (FindCharInString(sSet[iPos], '-') != -1)
				{
					ExplodeString(sSet[iPos], "-", sRange, sizeof sRange, sizeof sRange[]);
					iSize = StringToInt(sRange[1]);
					for (iType = StringToInt(sRange[0]); iType <= iSize; iType++)
					{
						if (type == iType)
						{
							return iType;
						}
					}
				}
				else
				{
					iType = StringToInt(sSet[iPos]);
					if (type == iType)
					{
						return iType;
					}
				}
			}
		}
		else if (FindCharInString(section, '-') != -1)
		{
			ExplodeString(sSection, "-", sSet, sizeof sSet, sizeof sSet[]);
			iSize = StringToInt(sSet[1]);
			for (iType = StringToInt(sSet[0]); iType <= iSize; iType++)
			{
				if (type == iType)
				{
					return iType;
				}
			}
		}
	}

	return 0;
}

int iGetConfigSectionNumber(const char[] section, int size)
{
	for (int iPos = 0; iPos < size; iPos++)
	{
		if (IsCharNumeric(section[iPos]))
		{
			return iPos;
		}
	}

	return -1;
}

int iGetCycleType(int specType)
{
	return (specType > 0 && specType != 8) ? iGetSettingValue(true, true, g_esSpecific.g_iCycleTypes, g_esGeneral.g_iCycleTypes, 1) : g_esGeneral.g_iCycleTypes;
}

int iGetDecimalFromHex(int character)
{
	if (IsCharNumeric(character))
	{
		return (character - '0');
	}
	else if (IsCharAlpha(character))
	{
		int iLetter = CharToUpper(character);
		if (iLetter < 'A' || iLetter > 'F')
		{
			return -1;
		}

		return ((iLetter - 'A') + 10);
	}

	return -1;
}

int iGetDecimalFromHex2(char[] bytes)
{
	int iBase = 1, iLength = strlen(bytes), iValue = 0;
	for (int iPos = (iLength - 1); iPos >= 0; iPos--)
	{
		if (bytes[iPos] >= '0' && bytes[iPos] <= '9')
		{
			iValue += (bytes[iPos] - 48) * iBase;
			iBase = (iBase * 16);
		}
		else if (bytes[iPos] >= 'A' && bytes[iPos] <= 'F')
		{
			iValue += (bytes[iPos] - 55) * iBase;
			iBase = (iBase * 16);
		}
	}

	return iValue;
}

int iGetFinaleType(int type, int specType)
{
	int iFinale = (specType != 8) ? g_esSpecial[type].g_iFinaleSpecial : -1;
	iFinale = (specType != 8 && iFinale >= 0) ? iFinale : g_esTank[type].g_iFinaleTank;
	return iFinale;
}

int iGetInfectedTypeCount(int infected, int type = 0)
{
	bool bCheck = false;
	int iInfected = -1, iTypeCount = 0;
	if (bIsCommonInfected(infected))
	{
		while ((iInfected = FindEntityByClassname(iInfected, "infected")) != INVALID_ENT_REFERENCE)
		{
			bCheck = (type > 0) ? (g_esInfected[iInfected].g_iTankType == type) : (g_esInfected[iInfected].g_iTankType > 0);
			if (bCheck)
			{
				iTypeCount++;
			}
		}
	}
	else if (bIsWitch(infected))
	{
		while ((iInfected = FindEntityByClassname(iInfected, "witch")) != INVALID_ENT_REFERENCE)
		{
			bCheck = (type > 0) ? (g_esInfected[iInfected].g_iTankType == type) : (g_esInfected[iInfected].g_iTankType > 0);
			if (bCheck)
			{
				iTypeCount++;
			}
		}
	}

	return iTypeCount;
}

int iGetMaxAmmo(int survivor, int type, int weapon, bool reserve, bool reset = false)
{
	bool bRewarded = bIsSurvivor(survivor) && (bIsDeveloper(survivor, 4) || bIsDeveloper(survivor, 6) || (((g_esShooter[survivor].g_iTotalPassives & MT_PASSIVE_AMMO) || (g_esPlayer[survivor].g_iRewardTypes & MT_REWARD_AMMO)) && g_esPlayer[survivor].g_iAmmoBoost == 1));
	int iType = (type > 0 || weapon <= MaxClients) ? type : GetEntProp(weapon, Prop_Send, "m_iPrimaryAmmoType");
	if (g_bSecondGame)
	{
		if (reserve)
		{
			switch (iType)
			{
				case MT_L4D2_AMMOTYPE_RIFLE: return (bRewarded && !reset) ? (g_esGeneral.g_cvMTAssaultRifleAmmo.IntValue * 2) : g_esGeneral.g_cvMTAssaultRifleAmmo.IntValue;
				case MT_L4D2_AMMOTYPE_SMG: return (bRewarded && !reset) ? iClamp(RoundToNearest(g_esGeneral.g_cvMTSMGAmmo.IntValue * 1.23), 1, 1000) : g_esGeneral.g_cvMTSMGAmmo.IntValue;
				case MT_L4D2_AMMOTYPE_SHOTGUN_TIER1: return (bRewarded && !reset) ? iClamp(RoundToNearest(g_esGeneral.g_cvMTShotgunAmmo.IntValue * 2.08), 1, 255) : g_esGeneral.g_cvMTShotgunAmmo.IntValue;
				case MT_L4D2_AMMOTYPE_SHOTGUN_TIER2: return (bRewarded && !reset) ? iClamp(RoundToNearest(g_esGeneral.g_cvMTAutoShotgunAmmo.IntValue * 2.22), 1, 255) : g_esGeneral.g_cvMTAutoShotgunAmmo.IntValue;
				case MT_L4D2_AMMOTYPE_HUNTING_RIFLE: return (bRewarded && !reset) ? (g_esGeneral.g_cvMTHuntingRifleAmmo.IntValue * 2) : g_esGeneral.g_cvMTHuntingRifleAmmo.IntValue;
				case MT_L4D2_AMMOTYPE_SNIPER_RIFLE: return (bRewarded && !reset) ? (g_esGeneral.g_cvMTSniperRifleAmmo.IntValue * 2) : g_esGeneral.g_cvMTSniperRifleAmmo.IntValue;
				case MT_L4D2_AMMOTYPE_GRENADE_LAUNCHER: return (bRewarded && !reset) ? (g_esGeneral.g_cvMTGrenadeLauncherAmmo.IntValue * 2) : g_esGeneral.g_cvMTGrenadeLauncherAmmo.IntValue;
			}
		}
		else
		{
			switch (iType)
			{
				case MT_L4D2_AMMOTYPE_PISTOL: return (bRewarded && !reset) ? 30 : 15;
				case MT_L4D2_AMMOTYPE_PISTOL_MAGNUM: return (bRewarded && !reset) ? 16 : 8;
				case MT_L4D2_AMMOTYPE_RIFLE: return (bRewarded && !reset) ? 100 : 50;
				case MT_L4D2_AMMOTYPE_SMG: return (bRewarded && !reset) ? 100 : 50;
				case MT_L4D2_AMMOTYPE_RIFLE_M60: return (bRewarded && !reset) ? 300 : 150;
				case MT_L4D2_AMMOTYPE_SHOTGUN_TIER1: return (bRewarded && !reset) ? 16 : 8;
				case MT_L4D2_AMMOTYPE_SHOTGUN_TIER2: return (bRewarded && !reset) ? 20 : 10;
				case MT_L4D2_AMMOTYPE_HUNTING_RIFLE: return (bRewarded && !reset) ? 30 : 15;
				case MT_L4D2_AMMOTYPE_SNIPER_RIFLE: return (bRewarded && !reset) ? 60 : 30;
				case MT_L4D2_AMMOTYPE_GRENADE_LAUNCHER: return (bRewarded && !reset) ? 2 : 1;
			}
		}
	}
	else
	{
		if (reserve)
		{
			switch (iType)
			{
				case MT_L4D1_AMMOTYPE_HUNTING_RIFLE: return (bRewarded && !reset) ? (g_esGeneral.g_cvMTHuntingRifleAmmo.IntValue * 2) : g_esGeneral.g_cvMTHuntingRifleAmmo.IntValue;
				case MT_L4D1_AMMOTYPE_RIFLE: return (bRewarded && !reset) ? (g_esGeneral.g_cvMTAssaultRifleAmmo.IntValue * 2) : g_esGeneral.g_cvMTAssaultRifleAmmo.IntValue;
				case MT_L4D1_AMMOTYPE_SMG: return (bRewarded && !reset) ? iClamp(RoundToNearest(g_esGeneral.g_cvMTSMGAmmo.IntValue * 1.23), 1, 1000) : g_esGeneral.g_cvMTSMGAmmo.IntValue;
				case MT_L4D1_AMMOTYPE_SHOTGUN: return (bRewarded && !reset) ? iClamp(RoundToNearest(g_esGeneral.g_cvMTShotgunAmmo.IntValue * 1.56), 1, 255) : g_esGeneral.g_cvMTShotgunAmmo.IntValue;
			}
		}
		else
		{
			switch (iType)
			{
				case MT_L4D1_AMMOTYPE_PISTOL: return (bRewarded && !reset) ? 30 : 15;
				case MT_L4D1_AMMOTYPE_HUNTING_RIFLE: return (bRewarded && !reset) ? 30 : 15;
				case MT_L4D1_AMMOTYPE_RIFLE: return (bRewarded && !reset) ? 100 : 50;
				case MT_L4D1_AMMOTYPE_SMG: return (bRewarded && !reset) ? 100 : 50;
				case MT_L4D1_AMMOTYPE_SHOTGUN: return (bRewarded && !reset) ? 20 : 10;
			}
		}
	}

	return 0;
}

int iGetMaxWeaponSkins(int developer)
{
	int iActiveWeapon = iGetSurvivorActiveWeapon(developer);
	if (bIsValidEntity(iActiveWeapon))
	{
		char sClassname[32];
		GetEntityClassname(iActiveWeapon, sClassname, sizeof sClassname);
		if (StrEqual(sClassname[7], "pistol_magnum") || StrEqual(sClassname[7], "rifle") || StrEqual(sClassname[7], "rifle_ak47"))
		{
			return 2;
		}
		else if (StrEqual(sClassname[7], "smg") || StrEqual(sClassname[7], "smg_silenced")
			|| StrEqual(sClassname[7], "pumpshotgun") || StrEqual(sClassname[7], "shotgun_chrome")
			|| StrEqual(sClassname[7], "autoshotgun") || StrEqual(sClassname[7], "hunting_rifle"))
		{
			return 1;
		}
		else if (StrEqual(sClassname[7], "melee"))
		{
			char sWeapon[32];
			GetEntPropString(iActiveWeapon, Prop_Data, "m_strMapSetScriptName", sWeapon, sizeof sWeapon);
			if (StrEqual(sWeapon, "cricket_bat") || StrEqual(sWeapon, "crowbar"))
			{
				return 1;
			}
		}
	}

	return -1;
}

int iGetMaxType(int specType = 0, bool condition = false)
{
	int iMaxType = (specType != 8) ? g_esSpecific.g_iMaxType : -1;
	return (specType == 8 || condition || iMaxType <= 0) ? g_esGeneral.g_iMaxType : iMaxType;
}

int iGetMessageType(int setting)
{
	int iMessageCount = 0, iMessages[10], iFlag = 0;
	for (int iBit = 0; iBit < (sizeof iMessages); iBit++)
	{
		iFlag = (1 << iBit);
		if (!(setting & iFlag))
		{
			continue;
		}

		iMessages[iMessageCount] = iFlag;
		iMessageCount++;
	}

	if (iMessageCount > 0)
	{
		switch (iMessages[MT_GetRandomInt(0, (iMessageCount - 1))])
		{
			case 1: return 1;
			case 2: return 2;
			case 4: return 3;
			case 8: return 4;
			case 16: return 5;
			case 32: return 6;
			case 64: return 7;
			case 128: return 8;
			case 256: return 9;
			case 512: return 10;
			default: return MT_GetRandomInt(1, (sizeof iMessages));
		}
	}

	return MT_GetRandomInt(1, (sizeof iMessages));
}

int iGetMinType(int specType = 0, bool condition = false)
{
	int iMinType = (specType != 8) ? g_esSpecific.g_iMinType : -1;
	return (specType == 8 || condition || iMinType <= 0) ? g_esGeneral.g_iMinType : iMinType;
}

int iGetRandomRecipient(int recipient, int tank, int priority, bool none)
{
	bool bCondition = false;
	float flPercentage = 0.0;
	int iRecipient = recipient, iRecipientCount = 0;
	int[] iRecipients = new int[MaxClients + 1];
	if (g_esTankCache[tank].g_iShareRewards[priority] == 1 || g_esTankCache[tank].g_iShareRewards[priority] == 3)
	{
		for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
		{
			bCondition = none ? (g_esPlayer[iSurvivor].g_iRewardTypes <= 0) : (g_esPlayer[iSurvivor].g_iRewardTypes > 0);
			flPercentage = ((float(g_esPlayer[iSurvivor].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100.0);
			if (bIsHumanSurvivor(iSurvivor) && bCondition && (1.0 <= flPercentage < g_esTankCache[tank].g_flRewardPercentage[priority]) && iSurvivor != recipient)
			{
				iRecipients[iRecipientCount] = iSurvivor;
				iRecipientCount++;
			}
		}
	}

	if (iRecipientCount > 0)
	{
		iRecipient = iRecipients[MT_GetRandomInt(0, (iRecipientCount - 1))];
	}

	if ((g_esTankCache[tank].g_iShareRewards[priority] == 2 || g_esTankCache[tank].g_iShareRewards[priority] == 3) && (iRecipientCount == 0 || iRecipient == recipient))
	{
		bool bBot = false;
		for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
		{
			bCondition = none ? (g_esPlayer[iSurvivor].g_iRewardTypes <= 0) : (g_esPlayer[iSurvivor].g_iRewardTypes > 0);
			flPercentage = ((float(g_esPlayer[iSurvivor].g_iTankDamage[tank]) / float(g_esPlayer[tank].g_iSpecialMaxHealth)) * 100.0);
			if (bIsSurvivor(iSurvivor) && bCondition && (1.0 <= flPercentage < g_esTankCache[tank].g_flRewardPercentage[priority]) && iSurvivor != recipient)
			{
				bBot = (g_esTankCache[tank].g_iShareRewards[priority] == 2) ? !bIsValidClient(iSurvivor, MT_CHECK_FAKECLIENT) : true;
				if (bBot)
				{
					iRecipients[iRecipientCount] = iSurvivor;
					iRecipientCount++;
				}
			}
		}

		if (iRecipientCount > 0)
		{
			iRecipient = iRecipients[MT_GetRandomInt(0, (iRecipientCount - 1))];
		}
	}

	return iRecipient;
}

int iGetRealType(int type, int exclude = 0, int tank, int min = -1, int max = -1)
{
	Action aResult = Plugin_Continue;
	int iType = g_esTank[type].g_iRealType[0];

	Call_StartForward(g_esGeneral.g_gfTypeChosenForward);
	Call_PushCellRef(iType);
	Call_PushCell(tank);
	Call_Finish(aResult);

	switch (aResult)
	{
		case Plugin_Stop: return 0;
		case Plugin_Handled: return iChooseTankType(exclude, tank, min, max);
		case Plugin_Changed: return g_esTank[iType].g_iRecordedType[0];
	}

	return type;
}

int iGetRefEHandle(Address entityHandle)
{
	if (!entityHandle)
	{
		return INVALID_EHANDLE_INDEX;
	}

	Address adRefHandle = SDKCall(g_esGeneral.g_hSDKGetRefEHandle, entityHandle);
	return LoadFromAddress(adRefHandle, NumberType_Int32);
}

int iGetRandomRushType()
{
	int iRushCount = 0, iRushTypes[7], iFlag = 0;
	for (int iBit = 0; iBit < (sizeof iRushTypes); iBit++)
	{
		iFlag = (1 << iBit);
		if (!(g_esGeneral.g_iRushTypes & iFlag) || (!g_bSecondGame && iBit >= 4))
		{
			continue;
		}

		iRushTypes[iRushCount] = iFlag;
		iRushCount++;
	}

	if (iRushCount > 0)
	{
		int iType = iRushTypes[MT_GetRandomInt(0, (iRushCount - 1))];

		switch (iType)
		{
			case MT_RUSHTYPE_SMOKER: return 1;
			case MT_RUSHTYPE_BOOMER: return 2;
			case MT_RUSHTYPE_HUNTER: return 3;
			case MT_RUSHTYPE_SPITTER: return (g_bSecondGame ? 4 : 2);
			case MT_RUSHTYPE_JOCKEY: return (g_bSecondGame ? 5 : 3);
			case MT_RUSHTYPE_CHARGER: return (g_bSecondGame ? 6 : 1);
			case MT_RUSHTYPE_TANK: return 8;
		}
	}

	return 0;
}

int iGetSpecialCount(bool manual, bool include = false)
{
	switch (manual)
	{
		case true:
		{
			int iSpecialCount = 0;
			for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
			{
				if (bIsSpecialInfected(iSpecial, MT_CHECK_INGAME|MT_CHECK_ALIVE))
				{
					if (!include && bIsCustomTank(iSpecial))
					{
						continue;
					}

					iSpecialCount++;
				}
			}

			return iSpecialCount;
		}
		case false: return g_esGeneral.g_iSpecialCount;
	}

	return 0;
}

int iGetSpecialTypes(int setting, const char[] specsection)
{
	int iPos = StrContains(specsection, MT_CONFIG_SECTION_SMOKER, false);
	bool bCheck = iPos != -1;
	int iTypes = setting;
	iPos = (iPos > 0) ? (iPos - 1) : 0;
	if (bCheck)
	{
		switch (specsection[iPos] == '!' || specsection[iPos] == '/')
		{
			case true: iTypes = !!(iTypes & MT_SPECINF_SMOKER) ? (iTypes & ~MT_SPECINF_SMOKER) : iTypes;
			case false: iTypes = !(iTypes & MT_SPECINF_SMOKER) ? (iTypes|MT_SPECINF_SMOKER) : iTypes;
		}
	}

	iPos = StrContains(specsection, MT_CONFIG_SECTION_BOOMER, false);
	bCheck = iPos != -1;
	iPos = (iPos > 0) ? (iPos - 1) : 0;
	if (bCheck)
	{
		switch (specsection[iPos] == '!' || specsection[iPos] == '/')
		{
			case true: iTypes = !!(iTypes & MT_SPECINF_BOOMER) ? (iTypes & ~MT_SPECINF_BOOMER) : iTypes;
			case false: iTypes = !(iTypes & MT_SPECINF_BOOMER) ? (iTypes|MT_SPECINF_BOOMER) : iTypes;
		}
	}

	iPos = StrContains(specsection, MT_CONFIG_SECTION_HUNTER, false);
	bCheck = iPos != -1;
	iPos = (iPos > 0) ? (iPos - 1) : 0;
	if (bCheck)
	{
		switch (specsection[iPos] == '!' || specsection[iPos] == '/')
		{
			case true: iTypes = !!(iTypes & MT_SPECINF_HUNTER) ? (iTypes & ~MT_SPECINF_HUNTER) : iTypes;
			case false: iTypes = !(iTypes & MT_SPECINF_HUNTER) ? (iTypes|MT_SPECINF_HUNTER) : iTypes;
		}
	}

	iPos = StrContains(specsection, MT_CONFIG_SECTION_SPITTER, false);
	bCheck = iPos != -1;
	iPos = (iPos > 0) ? (iPos - 1) : 0;
	if (bCheck)
	{
		switch (specsection[iPos] == '!' || specsection[iPos] == '/')
		{
			case true: iTypes = !!(iTypes & MT_SPECINF_SPITTER) ? (iTypes & ~MT_SPECINF_SPITTER) : iTypes;
			case false: iTypes = !(iTypes & MT_SPECINF_SPITTER) ? (iTypes|MT_SPECINF_SPITTER) : iTypes;
		}
	}

	iPos = StrContains(specsection, MT_CONFIG_SECTION_JOCKEY, false);
	bCheck = iPos != -1;
	iPos = (iPos > 0) ? (iPos - 1) : 0;
	if (bCheck)
	{
		switch (specsection[iPos] == '!' || specsection[iPos] == '/')
		{
			case true: iTypes = !!(iTypes & MT_SPECINF_JOCKEY) ? (iTypes & ~MT_SPECINF_JOCKEY) : iTypes;
			case false: iTypes = !(iTypes & MT_SPECINF_JOCKEY) ? (iTypes|MT_SPECINF_JOCKEY) : iTypes;
		}
	}

	iPos = StrContains(specsection, MT_CONFIG_SECTION_CHARGER, false);
	bCheck = iPos != -1;
	iPos = (iPos > 0) ? (iPos - 1) : 0;
	if (bCheck)
	{
		switch (specsection[iPos] == '!' || specsection[iPos] == '/')
		{
			case true: iTypes = !!(iTypes & MT_SPECINF_CHARGER) ? (iTypes & ~MT_SPECINF_CHARGER) : iTypes;
			case false: iTypes = !(iTypes & MT_SPECINF_CHARGER) ? (iTypes|MT_SPECINF_CHARGER) : iTypes;
		}
	}

	return iTypes;
}

int iGetTankCount(bool manual, bool include = false)
{
	switch (manual)
	{
		case true:
		{
			int iTankCount = 0;
			for (int iTank = 1; iTank <= MaxClients; iTank++)
			{
				if (bIsTank(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE))
				{
					if (!include && bIsCustomTank(iTank))
					{
						continue;
					}

					iTankCount++;
				}
			}

			return iTankCount;
		}
		case false: return g_esGeneral.g_iTankCount;
	}

	return 0;
}

int iGetTankTypeCount(int tank, int type = 0)
{
	bool bCondition = false, bCheck = false;
	int iTypeCount = 0;
	for (int iTank = 1; iTank <= MaxClients; iTank++)
	{
		switch (g_esPlayer[tank].g_iInfectedType)
		{
			case 1: bCondition = bIsSmoker(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
			case 2: bCondition = bIsBoomer(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
			case 3: bCondition = bIsHunter(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
			case 4: bCondition = bIsSpitter(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
			case 5: bCondition = bIsJockey(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
			case 6: bCondition = bIsCharger(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
			default: bCondition = bIsTank(iTank, MT_CHECK_INGAME|MT_CHECK_ALIVE);
		}

		bCheck = (type > 0) ? (g_esPlayer[iTank].g_iTankType == type) : (g_esPlayer[iTank].g_iTankType > 0);
		if (bCondition && !g_esPlayer[iTank].g_bArtificial && bCheck)
		{
			iTypeCount++;
		}
	}

	return iTypeCount;
}
#if defined _WeaponHandling_included
int iGetTotalPassives(int survivor, int type, bool include)
{
	int iType = (include ? 0 : type);

	switch (include)
	{
		case true:
		{
			for (int iBit = 0; iBit < 10; iBit++)
			{
				if ((type & (1 << iBit)) && !(g_esShooter[survivor].g_iPassiveTypes & (1 << iBit)))
				{
					iType |= (1 << iBit);
				}
			}
		}
		case false:
		{
			for (int iBit = 0; iBit < 10; iBit++)
			{
				if ((type & (1 << iBit)) && (g_esShooter[survivor].g_iPassiveTypes & (1 << iBit)))
				{
					iType &= ~(1 << iBit);
				}
			}
		}
	}

	return iType;
}
#endif

int iGetUsefulRewards(int survivor, int tank, int types, int priority)
{
	int iType = 0;
	if (g_esTankCache[tank].g_iUsefulRewards[priority] > 0)
	{
		if (bIsSurvivor(survivor, MT_CHECK_ALIVE))
		{
			int iAmmo = -1, iWeapon = GetPlayerWeaponSlot(survivor, 0);
			if (iWeapon > MaxClients)
			{
				iAmmo = GetEntProp(survivor, Prop_Send, "m_iAmmo", .element = iGetWeaponOffset(iWeapon));
			}

			if ((g_esTankCache[tank].g_iUsefulRewards[priority] & MT_USEFUL_REFILL) && !(types & MT_REWARD_REFILL) && ((g_esPlayer[survivor].g_bLastLife[0] && g_esPlayer[survivor].g_iReviveCount > 0) || bIsSurvivorDisabled(survivor)) && -1 < iAmmo <= 10)
			{
				iType |= MT_REWARD_REFILL;
			}
			else if ((g_esTankCache[tank].g_iUsefulRewards[priority] & MT_USEFUL_HEALTH) && !(types & MT_REWARD_REFILL) && !(types & MT_REWARD_HEALTH) && ((g_esPlayer[survivor].g_bLastLife[0] && g_esPlayer[survivor].g_iReviveCount > 0) || bIsSurvivorDisabled(survivor)))
			{
				iType |= MT_REWARD_HEALTH;
			}
			else if ((g_esTankCache[tank].g_iUsefulRewards[priority] & MT_USEFUL_AMMO) && !(types & MT_REWARD_REFILL) && !(types & MT_REWARD_AMMO) && -1 < iAmmo <= 10)
			{
				iType |= MT_REWARD_AMMO;
			}
		}
		else if ((g_esTankCache[tank].g_iUsefulRewards[priority] & MT_USEFUL_RESPAWN) && !(types & MT_REWARD_RESPAWN))
		{
			iType |= MT_REWARD_RESPAWN;
		}
	}

	return iType;
}

int iGetWeaponInfoID(int weapon)
{
	if (bIsValidEntity(weapon) && g_esGeneral.g_hSDKGetWeaponID != null)
	{
		int iWeaponID = SDKCall(g_esGeneral.g_hSDKGetWeaponID, weapon);
		if (iWeaponID != -1 && g_esGeneral.g_hSDKGetWeaponInfo != null)
		{
			return SDKCall(g_esGeneral.g_hSDKGetWeaponInfo, iWeaponID);
		}
	}

	return -1;
}

int iSpawnNearbySpecial(int survivor, int filter, int chosenType, bool customPos, bool teleport = true, float pos[3] = {0.0, 0.0, 0.0}, float angles[3] = {0.0, 0.0, 0.0})
{
	float flHitPos[3], flPos[3], flAngles[3], flVector[3];
	if (customPos)
	{
		vCopyVector(pos, flPos);
		vCopyVector(angles, flAngles);
	}
	else
	{
		GetClientEyePosition(survivor, flPos);
		GetClientEyeAngles(survivor, flAngles);
	}

	flAngles[0] = -25.0;
	GetAngleVectors(flAngles, flAngles, NULL_VECTOR, NULL_VECTOR);
	NormalizeVector(flAngles, flAngles);
	ScaleVector(flAngles, -1.0);
	vCopyVector(flAngles, flVector);
	GetVectorAngles(flAngles, flAngles);

	Handle hTrace = null;

	switch (customPos)
	{
		case true: hTrace = TR_TraceRayFilterEx(flPos, flAngles, MASK_SOLID, RayType_Infinite, bTraceRayDontHitSelfAndSolid);
		case false: hTrace = TR_TraceRayFilterEx(flPos, flAngles, MASK_SOLID, RayType_Infinite, bTraceRayDontHitSelf, survivor);
	}

	int iSpecial = 0;
	if (hTrace != null)
	{
		if (TR_DidHit(hTrace))
		{
			TR_GetEndPosition(flHitPos, hTrace);
			NormalizeVector(flVector, flVector);
			ScaleVector(flVector, -40.0);
			AddVectors(flHitPos, flVector, flHitPos);
			if (!teleport || customPos || (40.0 < GetVectorDistance(flHitPos, flPos) < 200.0))
			{
				bool[] bExists = new bool[MaxClients + 1];
				for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
				{
					bExists[iPlayer] = false;
					if (bIsInfected(iPlayer, MT_CHECK_INGAME))
					{
						bExists[iPlayer] = true;
					}
				}

				int iTypeCount = 0, iTypes[7], iFlag = 0;
				for (int iBit = 0; iBit < (sizeof iTypes); iBit++)
				{
					iFlag = (1 << iBit);
					if (!(filter & iFlag))
					{
						continue;
					}

					iTypes[iTypeCount] = iFlag;
					iTypeCount++;
				}

				int iChosenType = g_esTank[chosenType].g_iRealType[0], iType = (iTypeCount > 0) ? iTypes[MT_GetRandomInt(0, (iTypeCount - 1))] : iTypes[0];
				iChosenType = (iChosenType <= 0) ? 0 : iChosenType;
				if (iChosenType >= 0)
				{
					switch (iType)
					{
						case 1: vQueueTank(survivor, 8, iChosenType, .log = false, .custom = true);
						case 2: vQueueTank(survivor, 1, iChosenType, .log = false, .custom = true);
						case 4: vQueueTank(survivor, 2, iChosenType, .log = false, .custom = true);
						case 8: vQueueTank(survivor, 3, iChosenType, .log = false, .custom = true);
						case 16: vQueueTank(survivor, (g_bSecondGame ? 4 : 1), iChosenType, .log = false, .custom = true);
						case 32: vQueueTank(survivor, (g_bSecondGame ? 5 : 2), iChosenType, .log = false, .custom = true);
						case 64: vQueueTank(survivor, (g_bSecondGame ? 6 : 3), iChosenType, .log = false, .custom = true);
						default:
						{
							switch (MT_GetRandomInt(1, (sizeof iTypes)))
							{
								case 1: vQueueTank(survivor, 8, iChosenType, .log = false, .custom = true);
								case 2: vQueueTank(survivor, 1, iChosenType, .log = false, .custom = true);
								case 3: vQueueTank(survivor, 2, iChosenType, .log = false, .custom = true);
								case 4: vQueueTank(survivor, 3, iChosenType, .log = false, .custom = true);
								case 5: vQueueTank(survivor, (g_bSecondGame ? 4 : 1), iChosenType, .log = false, .custom = true);
								case 6: vQueueTank(survivor, (g_bSecondGame ? 5 : 2), iChosenType, .log = false, .custom = true);
								case 7: vQueueTank(survivor, (g_bSecondGame ? 6 : 3), iChosenType, .log = false, .custom = true);
							}
						}
					}

					for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
					{
						if (bIsInfected(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE) && !bExists[iPlayer])
						{
							iSpecial = iPlayer;

							break;
						}
					}

					if (bIsInfected(iSpecial) && teleport)
					{
						TeleportEntity(iSpecial, flHitPos);
					}
				}
			}
		}

		delete hTrace;
	}

	return iSpecial;
}

/**
 * ArrayList functions
 **/

void vClearAbilityList()
{
	for (int iPos = 0; iPos < (sizeof esGeneral::g_alAbilitySections); iPos++)
	{
		if (g_esGeneral.g_alAbilitySections[iPos] != null)
		{
			g_esGeneral.g_alAbilitySections[iPos].Clear();

			delete g_esGeneral.g_alAbilitySections[iPos];
		}
	}
}

void vClearClassKeysList()
{
	for (int iPos = 0; iPos < (sizeof esGeneral::g_alClassKeys); iPos++)
	{
		if (g_esGeneral.g_alClassKeys[iPos] != null)
		{
			g_esGeneral.g_alClassKeys[iPos].Clear();

			delete g_esGeneral.g_alClassKeys[iPos];
		}
	}
}

void vClearColorKeysList()
{
	for (int iPos = 0; iPos < (sizeof esGeneral::g_alColorKeys); iPos++)
	{
		if (g_esGeneral.g_alColorKeys[iPos] != null)
		{
			g_esGeneral.g_alColorKeys[iPos].Clear();

			delete g_esGeneral.g_alColorKeys[iPos];
		}
	}
}

void vClearCompTypesList()
{
	if (g_esGeneral.g_alCompTypes[0] != null)
	{
		g_esGeneral.g_alCompTypes[0].Clear();

		delete g_esGeneral.g_alCompTypes[0];
	}

	if (g_esGeneral.g_alCompTypes[1] != null)
	{
		g_esGeneral.g_alCompTypes[1].Clear();

		delete g_esGeneral.g_alCompTypes[1];
	}
}

void vClearElevatorsList()
{
	if (g_esGeneral.g_alElevators != null)
	{
		g_esGeneral.g_alElevators.Clear();

		delete g_esGeneral.g_alElevators;
	}
}

void vClearPluginList()
{
	if (g_esGeneral.g_alPlugins != null)
	{
		g_esGeneral.g_alPlugins.Clear();

		delete g_esGeneral.g_alPlugins;
	}
}

void vClearSectionList()
{
	if (g_esGeneral.g_alSections != null)
	{
		g_esGeneral.g_alSections.Clear();

		delete g_esGeneral.g_alSections;
	}
}

void vResetElevatorsList()
{
	vClearElevatorsList();

	g_esGeneral.g_alElevators = new ArrayList();
}

/**
 * Timer functions & callbacks
 **/

void vResetBioMassTimer()
{
	delete g_esMob.g_hBioMassTimer;

	g_esMob.g_hBioMassTimer = CreateTimer(g_esMob.g_flCommonCheck, tTimerCheckBioMassMeter, .flags = TIMER_REPEAT);
}

void vResetProtectionTimers(int tank, int type)
{
	if (type == 1 || type == 3)
	{
		delete g_esPlayer[tank].g_hProtectionTimer[0];

		g_esPlayer[tank].g_hProtectionTimer[0] = CreateTimer(g_esTankCache[tank].g_flShieldDuration, tTimerRemoveShield, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE);
	}

	if (type == 2 || type == 3)
	{
		delete g_esPlayer[tank].g_hProtectionTimer[1];

		g_esPlayer[tank].g_hProtectionTimer[1] = CreateTimer(g_esTankCache[tank].g_flArmorDuration, tTimerRemoveArmor, GetClientUserId(tank), TIMER_FLAG_NO_MAPCHANGE);
	}
}

void vResetRegularWavesTimer(bool delay)
{
	switch (delay)
	{
		case true: CreateTimer(g_esGeneral.g_flRegularDelay, tTimerDelayRegularWaves, .flags = TIMER_FLAG_NO_MAPCHANGE);
		case false:
		{
			if (g_esGeneral.g_hSDKHasAnySurvivorLeftSafeArea != null && g_esGeneral.g_adDirector != Address_Null && SDKCall(g_esGeneral.g_hSDKHasAnySurvivorLeftSafeArea, g_esGeneral.g_adDirector))
			{
				delete g_esGeneral.g_hRegularWavesTimer;

				g_esGeneral.g_hRegularWavesTimer = CreateTimer(g_esGeneral.g_flRegularInterval, tTimerRegularWaves, .flags = TIMER_REPEAT);
			}
		}
	}
}

void vResetTimers()
{
	vResetBioMassTimer();
	vResetRegularWavesTimer(false);

	for (int iTank = 1; iTank <= MaxClients; iTank++)
	{
		if (bIsSpecialSupported(iTank))
		{
			vResetTimersForward(1, iTank);
		}
	}

	vResetTimersForward();
}

Action tTimerAnnounce(Handle timer, DataPack pack)
{
	pack.Reset();

	int iTank = GetClientOfUserId(pack.ReadCell());
	if (!bIsInfected(iTank) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (bIsSpecialSupported(iTank) && !bIsInfectedIdle(iTank))
	{
		if (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank))
		{
			return Plugin_Continue;
		}

		char sOldName[33], sNewName[33];
		pack.ReadString(sOldName, sizeof sOldName);
		pack.ReadString(sNewName, sizeof sNewName);

		int iMode = pack.ReadCell(), iSpecType = pack.ReadCell();
		vChooseArrivalType(iTank, sOldName, sNewName, iMode, iSpecType);

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action tTimerAnnounce2(Handle timer, DataPack pack)
{
	pack.Reset();

	int iTank = GetClientOfUserId(pack.ReadCell());
	if (!bIsInfected(iTank) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!bIsInfectedIdle(iTank))
	{
		if (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank))
		{
			return Plugin_Continue;
		}

		int iSpecType = pack.ReadCell();
		vAnnounceArrival(iTank, iSpecType);

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action tTimerBloodEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_BLOOD) || !g_esPlayer[iTank].g_bBlood || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bBlood = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vAttachParticle(iTank, PARTICLE_BLOOD, 0.75, 30.0);

	return Plugin_Continue;
}

Action tTimerBloodEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_BLOOD) || !g_esInfected[iInfected].g_bBlood)
	{
		g_esInfected[iInfected].g_bBlood = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_BLOOD, 0.75, 30.0);

	return Plugin_Continue;
}

Action tTimerBlurEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iPropsAttached & MT_PROP_BLUR) || !g_esPlayer[iTank].g_bBlur || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bBlur = false;

		return Plugin_Stop;
	}

	int iTankModel = EntRefToEntIndex(g_esPlayer[iTank].g_iBlur);
	if (iTankModel == INVALID_ENT_REFERENCE || !bIsValidEntity(iTankModel))
	{
		g_esPlayer[iTank].g_bBlur = false;
		g_esPlayer[iTank].g_iBlur = INVALID_ENT_REFERENCE;

		return Plugin_Stop;
	}

	float flTankPos[3], flTankAngles[3];
	GetClientAbsOrigin(iTank, flTankPos);
	GetClientAbsAngles(iTank, flTankAngles);
	if (bIsValidEntity(iTankModel))
	{
		TeleportEntity(iTankModel, flTankPos, flTankAngles);
		SetEntProp(iTankModel, Prop_Send, "m_nSequence", GetEntProp(iTank, Prop_Send, "m_nSequence"));
	}

	return Plugin_Continue;
}

Action tTimerCheckBioMassMeter(Handle timer)
{
	if (g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esMob.g_hBioMassTimer = null;

		return Plugin_Stop;
	}

	float flChance = 0.0, flGoal = 0.0, flTemp = 0.0;
	int iCount = 0;
	for (int iIndex = 0; iIndex <= MT_MAXTYPES; iIndex++)
	{
		flGoal = flGetSettingValue(true, true, g_esHorde[iIndex].g_flCommonGoal, g_esMob.g_flCommonGoal, 1);
		if (0.0 < flGoal <= g_esMob.g_flBioMassMeter)
		{
			flChance = flGetSettingValue(true, true, g_esHorde[iIndex].g_flCommonBioChance, g_esMob.g_flCommonBioChance, 1);
			iCount = iGetTankTypeCount(0, iIndex);
			if (!bIsRightGame(iIndex, 8) || g_esTank[iIndex].g_iSpawnType > 0 || !bIsCommonEnabled(iIndex) || !bIsSpawnEnabled(iIndex, 8) || !bIsTypeAvailable(iIndex) || bAreHumansRequired(iIndex, 8) || !bCanTypeSpawn(iIndex, 8) || flChance <= 0.0 || (g_esGeneral.g_iSpawnLimit > 0 && iCount >= g_esGeneral.g_iSpawnLimit) || bIsBossLimited(iIndex))
			{
				continue;
			}

			if (flChance <= GetRandomFloat(0.1, 100.0))
			{
				continue;
			}

			g_esSpecific.g_bInfected[iIndex] = true;

			if (flGoal > flTemp)
			{
				flTemp = flGoal;
			}
		}
	}

	if (0.0 < flTemp <= g_esMob.g_flBioMassMeter)
	{
		CreateTimer(1.0, tTimerUseBioMass, flTemp, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);

		g_esMob.g_hBioMassTimer = null;

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action tTimerCheckCharacter(Handle timer, int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (!bIsSurvivor(iSurvivor) || g_esPlayer[iSurvivor].g_iRewardTypes > 0 || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esShooter[iSurvivor].g_hCharacterTimer = null;

		return Plugin_Stop;
	}

	int iType = GetEntProp(iSurvivor, Prop_Send, "m_survivorCharacter");
	if (g_esShooter[iSurvivor].g_iCharacterType[1] == -1 || g_esShooter[iSurvivor].g_iCharacterType[1] != iType)
	{
		g_esShooter[iSurvivor].g_iCharacterType[1] = iType;
	}

	if (g_esShooter[iSurvivor].g_iCharacterType[0] == -1 || g_esShooter[iSurvivor].g_iCharacterType[0] != iType)
	{
		g_esShooter[iSurvivor].g_iCharacterType[0] = iType;

		vCacheSurvivorSettings(iSurvivor);
		vCheckSurvivorPassive(iSurvivor);
#if defined _WeaponHandling_included
		int iActiveWeapon = iGetSurvivorActiveWeapon(iSurvivor);
		if (bIsValidEntity(iActiveWeapon))
		{
			vToggleWeaponPassive(iSurvivor, iActiveWeapon);
		}
#endif
	}

	return Plugin_Continue;
}

Action tTimerCheckInfection(Handle timer, DataPack pack)
{
	pack.Reset();

	int iSurvivor = GetClientOfUserId(pack.ReadCell());
	if (bIsSurvivor(iSurvivor) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		vRemoveInfection(iSurvivor);

		return Plugin_Stop;
	}

	int iChosenType = pack.ReadCell(), iSpecType = pack.ReadCell(), iTeleport = pack.ReadCell(), iVoice = pack.ReadCell();
	float flVoiceChance = pack.ReadFloat(), flVoiceInterval = pack.ReadFloat(), flPos[3], flAngles[3];
	char sAttackLines[1280], sBaitLines[1280];
	pack.ReadString(sAttackLines, sizeof sAttackLines);
	pack.ReadString(sBaitLines, sizeof sBaitLines);
	pack.ReadFloatArray(flPos, sizeof flPos);
	pack.ReadFloatArray(flAngles, sizeof flAngles);

	int iSpecial = iSpawnNearbySpecial(iSurvivor, iSpecType, iChosenType, true, !!iTeleport, flPos, flAngles);
	if (bIsInfected(iSpecial))
	{
		if (iVoice == 1 && flVoiceInterval > 0.0)
		{
			DataPack dpVoices;
			CreateDataTimer(flVoiceInterval, tTimerInfectionVoices, dpVoices, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
			dpVoices.WriteCell(GetClientUserId(iSpecial));
			dpVoices.WriteFloat(flVoiceChance);
			dpVoices.WriteString(sAttackLines);
			dpVoices.WriteString(sBaitLines);
		}

		vCopyInfectionStats(iSurvivor, iSpecial);
		vRemoveInfection(iSurvivor);

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action tTimerCheckTankView(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE|MT_CHECK_FAKECLIENT))
	{
		return Plugin_Stop;
	}

	QueryClientConVar(iTank, "z_view_distance", vViewDistanceQuery);

	return Plugin_Continue;
}

Action tTimerControlTank(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!bIsInfected(iTank))
	{
		return Plugin_Stop;
	}

	vTankSpawn(iTank, -1,  8);

	return Plugin_Continue;
}

Action tTimerDelayPassive(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!bIsInfected(iTank) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_hPassiveTimer[0] = null;

		return Plugin_Stop;
	}

	delete g_esPlayer[iTank].g_hPassiveTimer[1];

	g_esPlayer[iTank].g_bPassive = false;
	g_esPlayer[iTank].g_hPassiveTimer[1] = CreateTimer(g_esTankCache[iTank].g_flPassiveInterval, tTimerPassive, GetClientUserId(iTank), TIMER_REPEAT);
	g_esPlayer[iTank].g_hPassiveTimer[0] = null;

	return Plugin_Continue;
}

Action tTimerDelayRegularWaves(Handle timer)
{
	delete g_esGeneral.g_hRegularWavesTimer;

	g_esGeneral.g_hRegularWavesTimer = CreateTimer(g_esGeneral.g_flRegularInterval, tTimerRegularWaves, .flags = TIMER_REPEAT);

	return Plugin_Continue;
}

Action tTimerDelaySurvival(Handle timer)
{
	g_esGeneral.g_hSurvivalTimer = null;
	g_esGeneral.g_iSurvivalBlock = 2;

	return Plugin_Continue;
}

Action tTimerDevParticle(Handle timer, int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSurvivor(iSurvivor) || !bIsDeveloper(iSurvivor, 1) || !g_esDeveloper[iSurvivor].g_bDevVisual || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esDeveloper[iSurvivor].g_bDevVisual = false;

		return Plugin_Stop;
	}

	if (g_esDeveloper[iSurvivor].g_iDevParticle <= 0 || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vSetSurvivorEffects(iSurvivor, g_esDeveloper[iSurvivor].g_iDevParticle);

	return Plugin_Continue;
}

Action tTimerElectricEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_ELECTRICITY) || !g_esPlayer[iTank].g_bElectric || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bElectric = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	switch (bIsValidClient(iTank, MT_CHECK_FAKECLIENT))
	{
		case true: vAttachParticle(iTank, PARTICLE_ELECTRICITY, 0.75, 30.0);
		case false:
		{
			for (int iCount = 1; iCount < 4; iCount++)
			{
				switch (bIsSpecialInfected(iTank))
				{
					case true: vAttachParticle(iTank, PARTICLE_ELECTRICITY, 0.75, (1.0 * float(iCount * 10)));
					case false: vAttachParticle(iTank, PARTICLE_ELECTRICITY, 0.75, (1.0 * float(iCount * 15)));
				}
			}
		}
	}

	return Plugin_Continue;
}

Action tTimerElectricEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_ELECTRICITY) || !g_esInfected[iInfected].g_bElectric)
	{
		g_esInfected[iInfected].g_bElectric = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_ELECTRICITY, 0.75, 30.0);

	return Plugin_Continue;
}

Action tTimerExecuteCustomConfig(Handle timer, DataPack pack)
{
	pack.Reset();

	char sSavePath[PLATFORM_MAX_PATH];
	pack.ReadString(sSavePath, sizeof sSavePath);
	if (sSavePath[0] != '\0')
	{
		vLogMessage(MT_LOG_SERVER, _, "%s %T", MT_TAG, "ReloadingConfig", LANG_SERVER, sSavePath);
		vLoadConfigs(sSavePath, 2);
		vPluginStatus();
		vResetTimers();
		vToggleTankRushConVars();
		vToggleLogging();
	}

	return Plugin_Continue;
}

Action tTimerFireEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_FIRE) || !g_esPlayer[iTank].g_bFire || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bFire = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vAttachParticle(iTank, PARTICLE_FIRE, 0.75);

	return Plugin_Continue;
}

Action tTimerFireEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_FIRE) || !g_esInfected[iInfected].g_bFire)
	{
		g_esInfected[iInfected].g_bFire = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_FIRE, 0.75);

	return Plugin_Continue;
}

Action tTimerForceSpawnInfected(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsInfected(iTank) || !bIsInfectedGhost(iTank))
	{
		return Plugin_Stop;
	}

	int iAbility = -1;
	if (g_esGeneral.g_hSDKMaterializeFromGhost != null)
	{
		SDKCall(g_esGeneral.g_hSDKMaterializeFromGhost, iTank);
		iAbility = GetEntPropEnt(iTank, Prop_Send, "m_customAbility");
	}

	switch (iAbility)
	{
		case -1: MT_PrintToChat(iTank, "%s %t", MT_TAG3, "SpawnManually");
		default: vTankSpawn(iTank);
	}

	return Plugin_Continue;
}

Action tTimerHideDeathModel(Handle timer, int ref)
{
	int iDeathModel = EntRefToEntIndex(ref);
	if (iDeathModel == INVALID_ENT_REFERENCE || !bIsValidEntity(iDeathModel))
	{
		return Plugin_Stop;
	}

	float flPos[3];
	flPos[0] = MT_GetRandomFloat(-180.0, 180.0);
	flPos[1] = MT_GetRandomFloat(-180.0, 180.0);
	flPos[2] = MT_GetRandomFloat(-180.0, 180.0);
	TeleportEntity(iDeathModel, flPos);
	SDKHook(iDeathModel, SDKHook_SetTransmit, OnDeathModelSetTransmit);

	return Plugin_Continue;
}

Action tTimerHudPanel(Handle timer, int userid)
{
	int iPlayer = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsValidClient(iPlayer) || !bIsDeveloper(iPlayer, .real = true) || iGetTankCount(true, true) <= 0 || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iPlayer].g_hHudTimer = null;

		return Plugin_Stop;
	}

	vHudPanel(iPlayer, g_esPlayer[iPlayer].g_iHudPanelPage);

	return Plugin_Continue;
}

Action tTimerIceEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_ICE) || !g_esPlayer[iTank].g_bIce || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bIce = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vAttachParticle(iTank, PARTICLE_ICE, 2.0, 30.0);

	return Plugin_Continue;
}

Action tTimerIceEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_ICE) || !g_esInfected[iInfected].g_bIce)
	{
		g_esInfected[iInfected].g_bIce = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_ICE, 2.0, 30.0);

	return Plugin_Continue;
}

Action tTimerInfectionVoices(Handle timer, DataPack pack)
{
	pack.Reset();

	int iSpecial = GetClientOfUserId(pack.ReadCell());
	if (!bIsInfected(iSpecial) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	float flVoiceChance = pack.ReadFloat();
	char sAttackLines[1280], sBaitLines[1280];
	pack.ReadString(sAttackLines, sizeof sAttackLines);
	pack.ReadString(sBaitLines, sizeof sBaitLines);

	if (GetRandomFloat(0.1, 100.0) <= flVoiceChance)
	{
		bool bAttacking = (iGetInfectedVictim(iSpecial, g_esPlayer[iSpecial].g_iInfectedType) > 0 || bIsVisibleToPlayer(iSpecial));
		char sVoicelines[1280], sSet[20][64];
		FormatEx(sVoicelines, sizeof sVoicelines, "%s", ((!bAttacking || bIsInfectedIdle(iSpecial, 3)) ? sBaitLines : sAttackLines));
		ReplaceString(sVoicelines, sizeof sVoicelines, " ", "");

		int iVoicelineCount = ExplodeString(sVoicelines, ",", sSet, sizeof sSet, sizeof sSet[]);
		if (iVoicelineCount > 0)
		{
			FormatEx(sVoicelines, sizeof sVoicelines, "player/survivor/voice/%s", sSet[MT_GetRandomInt(0, (iVoicelineCount - 1))]);
			EmitSoundToAll(sVoicelines, iSpecial, SNDCHAN_VOICE, .flags = SND_SHOULDPAUSE);
		}
	}

	return Plugin_Continue;
}

Action tTimerInfectSurvivor(Handle timer, DataPack pack)
{
	pack.Reset();

	int iSurvivor = GetClientOfUserId(pack.ReadCell());
	if (bIsSurvivor(iSurvivor) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	int iFilter = pack.ReadCell(), iMix = pack.ReadCell(), iMode = pack.ReadCell(), iTeleport = pack.ReadCell(), iMinType = pack.ReadCell(), iMaxType = pack.ReadCell(), iVoice = pack.ReadCell();
	float flVoiceChance = pack.ReadFloat(), flVoiceInterval = pack.ReadFloat(), flPos[3], flAngles[3];
	char sAttackLines[1280], sBaitLines[1280];
	pack.ReadString(sAttackLines, sizeof sAttackLines);
	pack.ReadString(sBaitLines, sizeof sBaitLines);
	pack.ReadFloatArray(flPos, sizeof flPos);
	pack.ReadFloatArray(flAngles, sizeof flAngles);

	int iBit = 0, iChosenType = 0, iSpecType = 0;

	switch (iMode)
	{
		case 1:
		{
			iChosenType = (iMix == 1) ? iChosenType : MT_GetRandomInt(iMinType, iMaxType);
			iSpecType = iFilter;
		}
		case 2:
		{
			iChosenType = (iMix == 1) ? iChosenType : g_esShooter[iSurvivor].g_iFirstType;
			iBit = g_esShooter[iSurvivor].g_iFirstSpecial;
			iSpecType = (iBit != -1) ? (1 << iBit) : iFilter;
			iSpecType = (iBit == 8) ? (1 << 0) : iSpecType;
		}
		case 3:
		{
			iChosenType = (iMix == 1) ? iChosenType : g_esShooter[iSurvivor].g_iLastType;
			iBit = g_esShooter[iSurvivor].g_iLastSpecial;
			iSpecType = (iBit != -1) ? (1 << iBit) : iFilter;
			iSpecType = (iBit == 8) ? (1 << 0) : iSpecType;
		}
		case 4:
		{
			iChosenType = (iMix == 1) ? iChosenType : g_esShooter[iSurvivor].g_iLeastType;
			iBit = g_esShooter[iSurvivor].g_iLeastSpecial;
			iSpecType = (iBit != -1) ? (1 << iBit) : iFilter;
			iSpecType = (iBit == 8) ? (1 << 0) : iSpecType;
		}
		case 5:
		{
			iChosenType = (iMix == 1) ? iChosenType : g_esShooter[iSurvivor].g_iMostType;
			iBit = g_esShooter[iSurvivor].g_iMostSpecial;
			iSpecType = (iBit != -1) ? (1 << iBit) : iFilter;
			iSpecType = (iBit == 8) ? (1 << 0) : iSpecType;
		}
		case 6:
		{
			iChosenType = (iMix == 1) ? iChosenType : g_esShooter[iSurvivor].g_iKillerType;
			iBit = g_esShooter[iSurvivor].g_iKillerSpecial;
			iSpecType = (iBit != -1) ? (1 << iBit) : iFilter;
			iSpecType = (iBit == 8) ? (1 << 0) : iSpecType;
		}
	}

	DataPack dpInfection;
	CreateDataTimer(1.0, tTimerCheckInfection, dpInfection, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
	dpInfection.WriteCell(GetClientUserId(iSurvivor));
	dpInfection.WriteCell(iChosenType);
	dpInfection.WriteCell(iSpecType);
	dpInfection.WriteCell(iTeleport);
	dpInfection.WriteCell(iVoice);
	dpInfection.WriteFloat(flVoiceChance);
	dpInfection.WriteFloat(flVoiceInterval);
	dpInfection.WriteString(sAttackLines);
	dpInfection.WriteString(sBaitLines);
	dpInfection.WriteFloatArray(flPos, sizeof flPos);
	dpInfection.WriteFloatArray(flAngles, sizeof flAngles);

	return Plugin_Continue;
}

Action tTimerKillIdleTank(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsTank(iTank) || bIsTank(iTank, MT_CHECK_FAKECLIENT))
	{
		return Plugin_Stop;
	}

	if (g_esPlayer[iTank].g_bBlindTank && g_esGeneral.g_cvMTBlind.BoolValue)
	{
		return Plugin_Continue;
	}

	if (iGetIncapacitatedCount() < iGetSurvivorCount() && bIsInfectedIdle(iTank, g_esGeneral.g_iIdleCheckMode))
	{
		ForcePlayerSuicide(iTank);

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action tTimerKillStuckTank(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsInfected(iTank) || !bIsPlayerIncapacitated(iTank))
	{
		return Plugin_Stop;
	}

	ForcePlayerSuicide(iTank);

	return Plugin_Continue;
}

Action tTimerLoopVoiceline(Handle timer, int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSurvivor(iSurvivor) || g_esPlayer[iSurvivor].g_flVisualTime[2] == -1.0 || g_esPlayer[iSurvivor].g_flVisualTime[2] < GetGameTime() || g_esPlayer[iSurvivor].g_sLoopingVoiceline[0] == '\0' || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iSurvivor].g_flVisualTime[2] = -1.0;
		g_esPlayer[iSurvivor].g_sLoopingVoiceline[0] = '\0';

		return Plugin_Stop;
	}

	if (!(g_esPlayer[iSurvivor].g_iRewardVisuals & MT_VISUAL_VOICELINE) || bHasIdlePlayer(iSurvivor) || bIsPlayerIdle(iSurvivor))
	{
		return Plugin_Continue;
	}

	vForceVocalize(iSurvivor, g_esPlayer[iSurvivor].g_sLoopingVoiceline);

	return Plugin_Continue;
}

Action tTimerMeteorEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_METEOR) || !g_esPlayer[iTank].g_bMeteor || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bMeteor = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vAttachParticle(iTank, PARTICLE_METEOR, 6.0, 30.0);

	return Plugin_Continue;
}

Action tTimerMeteorEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_METEOR) || !g_esInfected[iInfected].g_bMeteor)
	{
		g_esInfected[iInfected].g_bMeteor = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_METEOR, 6.0, 30.0);

	return Plugin_Continue;
}

Action tTimerParticleVisual(Handle timer, int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSurvivor(iSurvivor) || g_esPlayer[iSurvivor].g_flVisualTime[1] == -1.0 || g_esPlayer[iSurvivor].g_flVisualTime[1] < GetGameTime() || g_esPlayer[iSurvivor].g_iParticleEffect <= 0 || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iSurvivor].g_flVisualTime[1] = -1.0;
		g_esPlayer[iSurvivor].g_iParticleEffect = 0;

		return Plugin_Stop;
	}

	if ((bIsDeveloper(iSurvivor, 1) && g_esDeveloper[iSurvivor].g_bDevVisual && g_esDeveloper[iSurvivor].g_iDevParticle > 0) || !(g_esPlayer[iSurvivor].g_iRewardVisuals & MT_VISUAL_PARTICLE) || bHasIdlePlayer(iSurvivor) || bIsPlayerIdle(iSurvivor) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vSetSurvivorEffects(iSurvivor, g_esPlayer[iSurvivor].g_iParticleEffect);

	return Plugin_Continue;
}

Action tTimerPassive(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_hPassiveTimer[1] = null;

		return Plugin_Stop;
	}

	int iPassiveHealth = g_esTankCache[iTank].g_iPassiveHealth;
	if (iPassiveHealth == 0)
	{
		g_esPlayer[iTank].g_bPassive = false;
		g_esPlayer[iTank].g_hPassiveTimer[1] = null;

		return Plugin_Stop;
	}

	int iHealth = GetEntProp(iTank, Prop_Data, "m_iHealth"), iMaxHealth = GetEntProp(iTank, Prop_Data, "m_iMaxHealth");
	float flHealthPercentage = (float(iHealth) / float(iMaxHealth)), flPassiveHealth = float(iPassiveHealth);
	if (g_esTankCache[iTank].g_flArmorPercentage > 0.0 && (1.0 - g_esTankCache[iTank].g_flArmorPercentage) <= flHealthPercentage && g_esTankCache[iTank].g_flArmorResistance[0] > 0.0)
	{
		flPassiveHealth /= (flPassiveHealth / (flPassiveHealth * (1.0 - g_esTankCache[iTank].g_flArmorResistance[0])));
	}
	else if (g_esTankCache[iTank].g_flShieldPercentage > 0.0 && (1.0 - g_esTankCache[iTank].g_flArmorPercentage - g_esTankCache[iTank].g_flShieldPercentage) <= flHealthPercentage && g_esTankCache[iTank].g_flShieldRate > 0.0)
	{
		flPassiveHealth /= g_esTankCache[iTank].g_flShieldRate;
	}

	int iNewHealth = (iHealth + RoundToNearest(flPassiveHealth)), iHealthBoost = (iNewHealth > iMaxHealth) ? iMaxHealth : iNewHealth,
		iHealthNoBoost = (iNewHealth < iHealth) ? 1 : iNewHealth, iFinalHealth = (iNewHealth >= 0) ? iHealthBoost : iHealthNoBoost;
	SetEntProp(iTank, Prop_Data, "m_iHealth", iFinalHealth);

	if ((iPassiveHealth > 0 && iFinalHealth >= iMaxHealth) || (iPassiveHealth < 0 && iFinalHealth <= 1))
	{
		g_esPlayer[iTank].g_bPassive = false;
		g_esPlayer[iTank].g_hPassiveTimer[1] = null;

		if (iPassiveHealth < 0 && iFinalHealth <= 1)
		{
			ForcePlayerSuicide(iTank);
		}

		return Plugin_Stop;
	}

	return Plugin_Continue;
}

Action tTimerPunishSurvivors(Handle timer)
{
	if (g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || bIsCompetitiveMode() || (g_esGeneral.g_iPunishEnabled[0] <= -1 && g_esGeneral.g_iPunishEnabled[1] <= -1 && g_esGeneral.g_iPunishBots[0] <= -1 && g_esGeneral.g_iPunishBots[1] <= -1) || (g_esGeneral.g_iFinaleCheck == 2 && g_esGeneral.g_bNormalMap) || (g_esGeneral.g_iFinaleCheck == 1 && g_esGeneral.g_bFinalMap))
	{
		return Plugin_Continue;
	}

	ArrayList alFlowList = new ArrayList(2);
	if (alFlowList != null)
	{
		bool bHuman = false;
		float flFlow = 0.0;
		int iArea = 0, iCount = 0, iFlowCount = 0, iIncapCount = 0, iIndex = 0, iLift = -1, iSurvivor = 0;
		int[] iSurvivors = new int[MaxClients + 1];
		for (int iPlayer = 1; iPlayer <= MaxClients; iPlayer++)
		{
			if (bIsSurvivor(iPlayer, MT_CHECK_INGAME|MT_CHECK_ALIVE))
			{
				if (bIsDeveloper(iPlayer, 11) || (((g_esShooter[iPlayer].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iPlayer].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iPlayer].g_iSafetyBubble == 1) || g_esPlayer[iPlayer].g_bPunished)
				{
					continue;
				}

				iSurvivors[iCount++] = iPlayer;

				if (g_esGeneral.g_iIncapsRequired > 0 && bIsSurvivorDisabled(iPlayer))
				{
					iIncapCount++;
				}
			}
		}

		for (int iPos = 0; iPos < iCount; iPos++)
		{
			iSurvivor = iSurvivors[iPos];
			bHuman = bIsValidClient(iSurvivor, MT_CHECK_FAKECLIENT);

			if ((!(g_esGeneral.g_iSurvivorTypes & MT_PUNISH_ALIVE) && bIsSurvivor(iSurvivor, MT_CHECK_ALIVE)) || (!(g_esGeneral.g_iSurvivorTypes & MT_PUNISH_INCAPS) && 0 < g_esGeneral.g_iIncapsRequired <= iIncapCount && bIsSurvivorDisabled(iSurvivor))
				|| (!(g_esGeneral.g_iSurvivorTypes & MT_PUNISH_ACTIONS) && bIsSurvivorHelping(iSurvivor)) || (!(g_esGeneral.g_iSurvivorTypes & MT_PUNISH_IDLE) && bIsPlayerIdle(iSurvivor)) || (!(g_esGeneral.g_iSurvivorTypes & MT_PUNISH_PINNED) && bIsSurvivorCaught(iSurvivor))
				|| (!(g_esGeneral.g_iSurvivorTypes & MT_PUNISH_INJURED) && g_esPlayer[iSurvivor].g_bLastLife[0]))
			{
				continue;
			}

			iLift = GetEntPropEnt(iSurvivor, Prop_Send, "m_hGroundEntity");
			if (iLift > MaxClients)
			{
				iLift = EntIndexToEntRef(iLift);
				if (g_esGeneral.g_alElevators.FindValue(iLift) != -1)
				{
					continue;
				}
			}

			iArea = SDKCall(g_esGeneral.g_hSDKGetLastKnownArea, iSurvivor);
			flFlow = (iArea == 0) ? 0.0 : view_as<float>(LoadFromAddress(view_as<Address>(iArea + g_esGeneral.g_iFlowOffset), NumberType_Int32));
			flFlow = (flFlow == -9999.0) ? 0.0 : flFlow;
			if (flFlow && flFlow != -9999.0)
			{
				iFlowCount++;
				iIndex = alFlowList.Push(flFlow);
				alFlowList.Set(iIndex, iSurvivor, 1);
			}
		}

		if (0 < g_esGeneral.g_iSurvivorsRequired <= iFlowCount)
		{
			alFlowList.Sort(Sort_Descending, Sort_Float);

			float flCurrentTime = GetGameTime(), flDistance = 0.0, flLastFlow = 0.0;
			if (g_esGeneral.g_flPunishDistance[1] > 0.0)
			{
				for (int iPos = 0; iPos < iFlowCount; iPos++)
				{
					iSurvivor = alFlowList.Get(iPos, 1);
					bHuman = bIsValidClient(iSurvivor, MT_CHECK_FAKECLIENT);

					if ((bHuman && g_esGeneral.g_iPunishEnabled[1] <= -1) || (!bHuman && g_esGeneral.g_iPunishBots[1] <= -1) || bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1) || g_esPlayer[iSurvivor].g_bPunished)
					{
						continue;
					}

					if (iPos < (iFlowCount / 2))
					{
						flFlow = alFlowList.Get(iPos, 0);

						for (int iPos2 = (iPos + 1); iPos2 <= (iFlowCount / 2); iPos2++)
						{
							flLastFlow = alFlowList.Get(iPos2, 0);
							flDistance = (flFlow - flLastFlow);

							if (g_esGeneral.g_iWarningLimit[1] > 0 && (0.0 < g_esGeneral.g_flWarningDistance[1] < flDistance < g_esGeneral.g_flPunishDistance[1]) && g_esPlayer[iSurvivor].g_flLastWarning < flCurrentTime)
							{
								g_esPlayer[iSurvivor].g_flLastWarning = (flCurrentTime + float(g_esGeneral.g_iWarningInterval[1]));

								if (bHuman)
								{
									PrintHintText(iSurvivor, "%s %t", MT_TAG, "MTWarnRusher");
								}
							}

							if (flDistance > g_esGeneral.g_flPunishDistance[1])
							{
								if (flFlow > g_esPlayer[iSurvivor].g_flLastFlow)
								{
									g_esPlayer[iSurvivor].g_flLastFlow = flFlow;

									vPunishSurvivor(iSurvivor, bHuman, 1);
								}
								else if (flFlow < g_esPlayer[iSurvivor].g_flLastFlow)
								{
									g_esPlayer[iSurvivor].g_flLastFlow = flFlow;
								}

								break;
							}
						}
					}
				}
			}

			if (g_esGeneral.g_flPunishDistance[0] > 0.0)
			{
				for (int iPos = (iFlowCount - 1); iPos > (iFlowCount / 2); iPos--)
				{
					iSurvivor = alFlowList.Get(iPos, 1);
					bHuman = bIsValidClient(iSurvivor, MT_CHECK_FAKECLIENT);

					if ((bHuman && g_esGeneral.g_iPunishEnabled[0] <= -1) || (!bHuman && g_esGeneral.g_iPunishBots[0] <= -1) || bIsDeveloper(iSurvivor, 11) || (((g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_GODMODE) || (g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_GODMODE)) && g_esPlayer[iSurvivor].g_iSafetyBubble == 1) || g_esPlayer[iSurvivor].g_bPunished)
					{
						continue;
					}

					flFlow = alFlowList.Get(iPos, 0);

					for (int iPos2 = (iPos - 1); iPos2 < iFlowCount; iPos2++)
					{
						flLastFlow = alFlowList.Get(iPos2, 0);
						flDistance = (flLastFlow - flFlow);

						if (g_esGeneral.g_iWarningLimit[0] > 0 && (0.0 < g_esGeneral.g_flWarningDistance[0] < flDistance < g_esGeneral.g_flPunishDistance[0]) && g_esPlayer[iSurvivor].g_flLastWarning < flCurrentTime)
						{
							g_esPlayer[iSurvivor].g_flLastWarning = (flCurrentTime + float(g_esGeneral.g_iWarningInterval[0]));

							if (bHuman)
							{
								PrintHintText(iSurvivor, "%s %t", MT_TAG, "MTWarnSlacker");
							}
						}

						if (flDistance > g_esGeneral.g_flPunishDistance[0])
						{
							vPunishSurvivor(iSurvivor, bHuman, 0);

							break;
						}
					}
				}
			}
		}

		delete alFlowList;
	}

	return Plugin_Continue;
}

Action tTimerRefreshRewards(Handle timer)
{
	for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
	{
		if (bIsSurvivor(iSurvivor, MT_CHECK_INGAME|MT_CHECK_ALIVE))
		{
			vEndPassives(iSurvivor, false);
			vEndRewards(iSurvivor, false);
		}
	}

	return Plugin_Continue;
}

Action tTimerRegenerateAmmoHealth(Handle timer)
{
	if (g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled)
	{
		return Plugin_Continue;
	}

	bool bDeveloper = false;
	char sWeapon[32];
	int iAmmo = 0, iAmmoOffset = 0, iMaxAmmo = 0, iClip = 0, iRegen = 0, iSlot = 0, iSpecialAmmo = 0;
	for (int iSurvivor = 1; iSurvivor <= MaxClients; iSurvivor++)
	{
		if (!bIsSurvivor(iSurvivor))
		{
			continue;
		}

		vLifeLeech(iSurvivor, 7);
		vNullifyNudge(iSurvivor);

		bDeveloper = bIsDeveloper(iSurvivor, 4) || bIsDeveloper(iSurvivor, 6);
		iRegen = (bDeveloper && g_esDeveloper[iSurvivor].g_iDevAmmoRegen > g_esPlayer[iSurvivor].g_iAmmoRegen) ? g_esDeveloper[iSurvivor].g_iDevAmmoRegen : g_esPlayer[iSurvivor].g_iAmmoRegen;
		if ((!bDeveloper && !(g_esShooter[iSurvivor].g_iTotalPassives & MT_PASSIVE_AMMO) && (!(g_esPlayer[iSurvivor].g_iRewardTypes & MT_REWARD_AMMO) || g_esPlayer[iSurvivor].g_flRewardTime[4] == -1.0)) || iRegen <= 0)
		{
			continue;
		}

		iSlot = GetPlayerWeaponSlot(iSurvivor, 0);
		if (!bIsValidEntity(iSlot))
		{
			g_esPlayer[iSurvivor].g_iMaxClip[0] = 0;

			continue;
		}

		iClip = GetEntProp(iSlot, Prop_Send, "m_iClip1");
		if (iClip < g_esPlayer[iSurvivor].g_iMaxClip[0] && !GetEntProp(iSlot, Prop_Send, "m_bInReload"))
		{
			SetEntProp(iSlot, Prop_Send, "m_iClip1", (iClip + iRegen));
		}

		if ((iClip + iRegen) > g_esPlayer[iSurvivor].g_iMaxClip[0])
		{
			SetEntProp(iSlot, Prop_Send, "m_iClip1", g_esPlayer[iSurvivor].g_iMaxClip[0]);
		}

		if (g_bSecondGame && bHasSpecialAmmo(iSlot, 0))
		{
			iSpecialAmmo = GetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded");
			if (iSpecialAmmo < g_esPlayer[iSurvivor].g_iMaxClip[0])
			{
				SetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded", (iSpecialAmmo + iRegen));
			}

			if ((iSpecialAmmo + iRegen) > g_esPlayer[iSurvivor].g_iMaxClip[0])
			{
				SetEntProp(iSlot, Prop_Send, "m_nUpgradedPrimaryAmmoLoaded", g_esPlayer[iSurvivor].g_iMaxClip[0]);
			}
		}

		iAmmoOffset = iGetWeaponOffset(iSlot), iAmmo = GetEntProp(iSurvivor, Prop_Send, "m_iAmmo", .element = iAmmoOffset), iMaxAmmo = iGetMaxAmmo(iSurvivor, 0, iSlot, true);
		if (iAmmo < iMaxAmmo)
		{
			SetEntProp(iSurvivor, Prop_Send, "m_iAmmo", (iAmmo + iRegen), .element = iAmmoOffset);
		}

		if ((iAmmo + iRegen) > iMaxAmmo)
		{
			SetEntProp(iSurvivor, Prop_Send, "m_iAmmo", iMaxAmmo, .element = iAmmoOffset);
		}

		iSlot = GetPlayerWeaponSlot(iSurvivor, 1);
		if (!bIsValidEntity(iSlot))
		{
			g_esPlayer[iSurvivor].g_iMaxClip[1] = 0;

			continue;
		}

		GetEntityClassname(iSlot, sWeapon, sizeof sWeapon);
		if (!strncmp(sWeapon[7], "pistol", 6) || StrEqual(sWeapon[7], "chainsaw"))
		{
			iClip = GetEntProp(iSlot, Prop_Send, "m_iClip1");
			if (iClip < g_esPlayer[iSurvivor].g_iMaxClip[1])
			{
				SetEntProp(iSlot, Prop_Send, "m_iClip1", (iClip + iRegen));
			}

			if ((iClip + iRegen) > g_esPlayer[iSurvivor].g_iMaxClip[1])
			{
				SetEntProp(iSlot, Prop_Send, "m_iClip1", g_esPlayer[iSurvivor].g_iMaxClip[1]);
			}
		}
	}

	return Plugin_Continue;
}

Action tTimerRegularWaves(Handle timer)
{
	int iClass = 8, iCount = iGetTankCount(true);
	iCount = (iCount > 0) ? iCount : iGetTankCount(false);
	if (!bCanTypeSpawn(.specType = iClass) || g_esGeneral.g_bFinalMap || g_esGeneral.g_iTankWave > 0 || iCount > 0 || (g_esGeneral.g_iRegularLimit > 0 && g_esGeneral.g_iRegularCount >= g_esGeneral.g_iRegularLimit) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esGeneral.g_hRegularWavesTimer = null;

		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || g_esGeneral.g_iRushTypes > 0 || g_esGeneral.g_iRegularLimit <= 0 || g_esGeneral.g_iRegularMode <= 0 || g_esGeneral.g_iRegularWave <= 0 || (g_esGeneral.g_iRegularAmount > 0 && iCount >= g_esGeneral.g_iRegularAmount))
	{
		return Plugin_Continue;
	}

	switch (g_esGeneral.g_iRegularAmount)
	{
		case -1, 0: vRegularSpawn(iClass);
		default:
		{
			for (int iAmount = iCount; iAmount < g_esGeneral.g_iRegularAmount; iAmount++)
			{
				vRegularSpawn(iClass);
			}

			g_esGeneral.g_iRegularCount++;
		}
	}

	g_esGeneral.g_hRegularWavesTimer = null;

	return Plugin_Stop;
}

Action tTimerReloadConfigs(Handle timer)
{
	vCheckConfig(false);

	return Plugin_Continue;
}

Action tTimerRemoveArmor(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!bIsValidClient(iTank))
	{
		g_esPlayer[iTank].g_hProtectionTimer[1] = null;

		return Plugin_Stop;
	}

	g_esPlayer[iTank].g_bProtected[1] = false;
	g_esPlayer[iTank].g_hProtectionTimer[1] = null;

	return Plugin_Continue;
}

Action tTimerRemovePunisher(Handle timer, DataPack pack)
{
	pack.Reset();

	int iPunished = GetClientOfUserId(pack.ReadCell()), iPunisher = GetClientOfUserId(pack.ReadCell());
	if (bIsSurvivor(iPunished, MT_CHECK_INDEX|MT_CHECK_INGAME) && g_esPlayer[iPunished].g_bPunished)
	{
		g_esPlayer[iPunished].g_bPunished = false;
	}

	if (!bIsSpecialSupported(iPunisher) || !g_esPlayer[iPunisher].g_bPunisher)
	{
		g_esPlayer[iPunisher].g_bPunisher = false;

		return Plugin_Stop;
	}

	if (g_esPlayer[iPunisher].g_bPunisher)
	{
		g_esPlayer[iPunisher].g_bPunisher = false;

		switch (bIsValidClient(iPunisher, MT_CHECK_FAKECLIENT))
		{
			case true: ForcePlayerSuicide(iPunisher);
			case false: KickClient(iPunisher);
		}
	}

	return Plugin_Continue;
}

Action tTimerRemoveShield(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!bIsValidClient(iTank))
	{
		g_esPlayer[iTank].g_hProtectionTimer[0] = null;

		return Plugin_Stop;
	}

	g_esPlayer[iTank].g_bProtected[0] = false;
	g_esPlayer[iTank].g_hProtectionTimer[0] = null;

	return Plugin_Continue;
}

Action tTimerRemoveTimescale(Handle timer, int ref)
{
	int iTimescale = EntRefToEntIndex(ref);
	if (iTimescale == INVALID_ENT_REFERENCE || !bIsValidEntity(iTimescale))
	{
		return Plugin_Stop;
	}

	AcceptEntityInput(iTimescale, "Stop");
	RemoveEntity(iTimescale);

	return Plugin_Continue;
}

Action tTimerResetPassiveDelay(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!bIsValidClient(iTank))
	{
		return Plugin_Stop;
	}

	g_esPlayer[iTank].g_bPassive = false;

	return Plugin_Continue;
}

Action tTimerResetType(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!bIsValidClient(iTank))
	{
		vResetTank2(iTank);

		return Plugin_Stop;
	}

	vResetTank2(iTank);

	if (g_esPlayer[iTank].g_iTankType > 0)
	{
		vCacheTankSettings(iTank);
	}

	if (!bIsValidClient(iTank, MT_CHECK_FAKECLIENT) && g_esGeneral.g_iKickBots == 1)
	{
		KickClient(iTank);
	}

	return Plugin_Continue;
}

Action tTimerResizeInfected(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (iInfected == INVALID_ENT_REFERENCE || !bIsValidEntity(iInfected) || !g_bSecondGame || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	bool bCommon = bIsCommonInfected(iInfected), bWitch = bIsWitch(iInfected);
	if (bCommon || bWitch)
	{
		bool bHealth = false;
		float flScale = 0.0;
		if (bCommon && GetRandomFloat(0.1, 100.0) <= g_esGeneral.g_flInfectedChance)
		{
			bHealth = !!g_esGeneral.g_iInfectedHealth;
			flScale = MT_GetRandomFloat(g_esGeneral.g_flInfectedScaleMin, g_esGeneral.g_flInfectedScaleMax);
		}
		else if (bWitch && GetRandomFloat(0.1, 100.0) <= g_esGeneral.g_flWitchChance)
		{
			bHealth = !!g_esGeneral.g_iWitchHealth;
			flScale = MT_GetRandomFloat(g_esGeneral.g_flWitchScaleMin, g_esGeneral.g_flWitchScaleMax);
			CreateTimer(0.1, tTimerResizeWitch, ref, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
		}

		if (0.0 < flScale <= 10.0)
		{
			if (bHealth)
			{
				int iNewHealth = RoundToCeil(float(GetEntProp(iInfected, Prop_Data, "m_iHealth")) * flScale);
				SetEntProp(iInfected, Prop_Data, "m_iHealth", iNewHealth);
				SetEntProp(iInfected, Prop_Data, "m_iMaxHealth", iNewHealth);
			}

			SetEntPropFloat(iInfected, Prop_Data, "m_flModelScale", flScale);
		}
	}

	return Plugin_Continue;
}

Action tTimerResizeWitch(Handle timer, int ref)
{
	int iWitch = EntRefToEntIndex(ref);
	if (iWitch == INVALID_ENT_REFERENCE || !bIsValidEntity(iWitch) || !g_bSecondGame || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (bIsWitch(iWitch))
	{
		float flRage = GetEntPropFloat(iWitch, Prop_Send, "m_rage");
		int iRush = GetEntProp(iWitch, Prop_Send, "m_mobRush");
		float flScale = (1.0 + (flRage * (g_esGeneral.g_flWitchScaleMax - 1.0)));
		if (0.0 < flScale <= 10.0)
		{
			SetEntPropFloat(iWitch, Prop_Data, "m_flModelScale", flScale);
		}

		if (iRush)
		{
			SetEntPropFloat(iWitch, Prop_Data, "m_flModelScale", g_esGeneral.g_flWitchScaleMax);

			return Plugin_Stop;
		}
	}

	return Plugin_Continue;
}

Action tTimerRockEffects(Handle timer, DataPack pack)
{
	pack.Reset();

	int iRock = EntRefToEntIndex(pack.ReadCell()), iTank = GetClientOfUserId(pack.ReadCell());
	if (!g_esGeneral.g_bPluginEnabled || iRock == INVALID_ENT_REFERENCE || !bIsValidEntity(iRock) || !bIsTankSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || g_esTankCache[iTank].g_iRockEffects <= 0 || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	char sClassname[32];
	GetEntityClassname(iRock, sClassname, sizeof sClassname);
	if (!StrEqual(sClassname, "tank_rock"))
	{
		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	if ((g_esTankCache[iTank].g_iRockEffects & MT_ROCK_BLOOD) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[iTank].g_flRockChance[0])
	{
		vAttachParticle(iRock, PARTICLE_BLOOD, 0.75);
	}

	if ((g_esTankCache[iTank].g_iRockEffects & MT_ROCK_ELECTRICITY) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[iTank].g_flRockChance[1])
	{
		vAttachParticle(iRock, PARTICLE_ELECTRICITY, 0.75);
	}

	if ((g_esTankCache[iTank].g_iRockEffects & MT_ROCK_FIRE) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[iTank].g_flRockChance[2])
	{
		IgniteEntity(iRock, 120.0);
	}

	if (g_bSecondGame && (g_esTankCache[iTank].g_iRockEffects & MT_ROCK_SPIT) && GetRandomFloat(0.1, 100.0) <= g_esTankCache[iTank].g_flRockChance[3])
	{
		EmitSoundToAll(SOUND_SPIT, iTank);
		vAttachParticle(iRock, PARTICLE_SPIT, 0.75);
	}

	return Plugin_Continue;
}

Action tTimerScreenEffect(Handle timer, int userid)
{
	int iSurvivor = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSurvivor(iSurvivor) || g_esPlayer[iSurvivor].g_flVisualTime[0] == -1.0 || g_esPlayer[iSurvivor].g_flVisualTime[0] < GetGameTime() || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iSurvivor].g_flVisualTime[0] = -1.0;
		g_esPlayer[iSurvivor].g_iScreenColorVisual[0] = -1;
		g_esPlayer[iSurvivor].g_iScreenColorVisual[1] = -1;
		g_esPlayer[iSurvivor].g_iScreenColorVisual[2] = -1;
		g_esPlayer[iSurvivor].g_iScreenColorVisual[3] = -1;

		return Plugin_Stop;
	}

	if (!(g_esPlayer[iSurvivor].g_iRewardVisuals & MT_VISUAL_SCREEN) || bHasIdlePlayer(iSurvivor) || bIsPlayerIdle(iSurvivor) || bIsSurvivorHanging(iSurvivor) || bIsPlayerInThirdPerson(iSurvivor) || (g_esGeneral.g_iGraphicsLevel <= 0 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 0))
	{
		return Plugin_Continue;
	}
#if defined _ThirdPersonShoulder_Detect_included
	if (g_esPlayer[iSurvivor].g_bThirdPerson2)
	{
		return Plugin_Continue;
	}
#endif
	vScreenEffect(iSurvivor, 0, MT_ATTACK_RANGE, MT_ATTACK_RANGE, g_esPlayer[iSurvivor].g_iScreenColorVisual[0], g_esPlayer[iSurvivor].g_iScreenColorVisual[1], g_esPlayer[iSurvivor].g_iScreenColorVisual[2], g_esPlayer[iSurvivor].g_iScreenColorVisual[3]);

	return Plugin_Continue;
}

Action tTimerSmokeEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_SMOKE) || !g_esPlayer[iTank].g_bSmoke || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bSmoke = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vAttachParticle(iTank, PARTICLE_SMOKE, 1.5);

	return Plugin_Continue;
}

Action tTimerSmokeEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_SMOKE) || !g_esInfected[iInfected].g_bSmoke)
	{
		g_esInfected[iInfected].g_bSmoke = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_SMOKE, 1.5);

	return Plugin_Continue;
}

Action tTimerSpitEffect(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !(g_esTankCache[iTank].g_iBodyEffects & MT_PARTICLE_SPIT) || !g_esPlayer[iTank].g_bSpit || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		g_esPlayer[iTank].g_bSpit = false;

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)) || (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2))
	{
		return Plugin_Continue;
	}

	vAttachParticle(iTank, PARTICLE_SPIT, 2.0, 30.0);
	iCreateParticle(iTank, PARTICLE_SPIT2, NULL_VECTOR, NULL_VECTOR, 0.95, 2.0, (bIsTank(iTank) ? "mouth" : ""));

	return Plugin_Continue;
}

Action tTimerSpitEffect2(Handle timer, int ref)
{
	int iInfected = EntRefToEntIndex(ref);
	if (!bIsValidEntity(iInfected) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (!g_esGeneral.g_bPluginEnabled || !bIsMobSupported(iInfected) || (!bIsCommonInfected(iInfected) && !bIsWitch(iInfected)) || !(g_esInfectedCache[iInfected].g_iBodyEffects & MT_PARTICLE_SPIT) || !g_esInfected[iInfected].g_bSpit)
	{
		g_esInfected[iInfected].g_bSpit = false;

		return Plugin_Stop;
	}

	if (g_esGeneral.g_iGraphicsLevel <= 2 && g_esGeneral.g_cvMTGraphicsLevel.IntValue <= 2)
	{
		return Plugin_Continue;
	}

	vAttachParticle(iInfected, PARTICLE_SPIT, 2.0, 30.0);
	iCreateParticle(iInfected, PARTICLE_SPIT2, NULL_VECTOR, NULL_VECTOR, 0.95, 2.0);

	return Plugin_Continue;
}

Action tTimerTankCountCheck(Handle timer, DataPack pack)
{
	pack.Reset();

	int iTank = GetClientOfUserId(pack.ReadCell()), iAmount = pack.ReadCell(), iCount = iGetTankCount(true), iCount2 = iGetTankCount(false);
	if (!bIsTank(iTank) || g_esGeneral.g_iRushTypes > 0 || iAmount <= 0 || iCount >= iAmount || iCount2 >= iAmount || (g_esGeneral.g_bNormalMap && g_esGeneral.g_iTankWave <= 0 && g_esGeneral.g_iRegularMode == 1 && g_esGeneral.g_iRegularWave == 1))
	{
		return Plugin_Stop;
	}
	else if (iCount < iAmount && iCount2 < iAmount)
	{
		vRegularSpawn(8);
	}

	return Plugin_Continue;
}

Action tTimerTankUpdate(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bIsCustomTankSupported(iTank) || bIsPlayerIncapacitated(iTank) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if ((!bIsPlayerStuck(iTank) && (bIsInfectedIdle(iTank, 3) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)))) || g_esPlayer[iTank].g_bStickied || (g_esPlayer[iTank].g_bBlindTank && g_esGeneral.g_cvMTBlind.BoolValue))
	{
		return Plugin_Continue;
	}

	switch (g_esTankCache[iTank].g_iSpawnType)
	{
		case 1:
		{
			if (!g_esPlayer[iTank].g_bBoss)
			{
				vSpawnModes(iTank, true);

				DataPack dpBoss;
				CreateDataTimer(0.1, tTimerUpdateBoss, dpBoss, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
				dpBoss.WriteCell(GetClientUserId(iTank));
				dpBoss.WriteCell(g_esTankCache[iTank].g_iBossStages);
				dpBoss.WriteCellArray(g_esTankCache[iTank].g_iBossHealth, sizeof esTankCache::g_iBossHealth);
				dpBoss.WriteCellArray(g_esTankCache[iTank].g_iBossType, sizeof esTankCache::g_iBossType);
			}
		}
		case 2:
		{
			if (!g_esPlayer[iTank].g_bRandomized)
			{
				vSpawnModes(iTank, true);

				DataPack dpRandom;
				CreateDataTimer(g_esTankCache[iTank].g_flRandomInterval, tTimerUpdateRandomize, dpRandom, TIMER_FLAG_NO_MAPCHANGE|TIMER_REPEAT);
				dpRandom.WriteCell(GetClientUserId(iTank));
				dpRandom.WriteFloat(GetGameTime());
			}
		}
		case 3:
		{
			if (!g_esPlayer[iTank].g_bTransformed)
			{
				vSpawnModes(iTank, true);
				CreateTimer(g_esTankCache[iTank].g_flTransformDelay, tTimerTransform, GetClientUserId(iTank), TIMER_FLAG_NO_MAPCHANGE);

				DataPack dpUntransform;
				CreateDataTimer((g_esTankCache[iTank].g_flTransformDuration + g_esTankCache[iTank].g_flTransformDelay), tTimerUntransform, dpUntransform, TIMER_FLAG_NO_MAPCHANGE);
				dpUntransform.WriteCell(GetClientUserId(iTank));
				dpUntransform.WriteCell(g_esPlayer[iTank].g_iTankType);
			}
		}
		case 4: vSpawnModes(iTank, true);
	}

	Call_StartForward(g_esGeneral.g_gfAbilityActivatedForward);
	Call_PushCell(iTank);
	Call_Finish();

	vCombineAbilitiesForward(iTank, MT_COMBO_MAINRANGE);

	return Plugin_Continue;
}

Action tTimerTankRushUpdate(Handle timer)
{
	if (!g_esGeneral.g_bPluginEnabled || g_esGeneral.g_iRushTypes <= 0 || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	if (bIsCoopMode() && !g_esGeneral.g_bRushSpawning && !g_esGeneral.g_bRushCooldown && !g_esGeneral.g_bRushCoop && !g_esGeneral.g_bRushEnded)
	{
		g_esGeneral.g_bRushCoop = true;
	}

	if (g_esGeneral.g_bRushCoop)
	{
		g_esGeneral.g_iRushCoopTick++;

		if (g_esGeneral.g_iRushCoopTick >= RoundToNearest(g_esGeneral.g_flCoopDelay))
		{
			g_esGeneral.g_bRushCoop = false;
			g_esGeneral.g_bRushSpawning = true;
			g_esGeneral.g_iRushCoopTick = 0;

			vAnnounceRushSpawnWarning();
		}
	}

	int iInterval = RoundToNearest(g_esGeneral.g_flSpawnInterval);
	if (g_esGeneral.g_bRushSpawning)
	{
		g_esGeneral.g_iRushSpawnTick++;

		int iCount = (g_esGeneral.g_iRushTypes > 1) ? iGetSpecialCount(true) : iGetTankCount(true);
		if ((g_esGeneral.g_iRushSpawnTick >= iInterval && (g_esGeneral.g_iRushLimit <= 0 || iCount < g_esGeneral.g_iRushLimit) && iGetInfectedCount(false, MT_CHECK_INGAME) > 0) || (!g_esGeneral.g_bRushFirst && iInterval >= 20))
		{
			g_esGeneral.g_bRushFirst = true;
			g_esGeneral.g_iRushSpawnTick = 0;

			for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
			{
				if (bIsHumanInfected(iSpecial, MT_CHECK_INDEX|MT_CHECK_INGAME) && bIsInfectedGhost(iSpecial))
				{
					g_esPlayer[iSpecial].g_bRushGhost = true;

					SetEntProp(iSpecial, Prop_Send, "m_isGhost", 0);
				}
			}

			vRegularSpawn(iGetRandomRushType());

			for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
			{
				if (bIsHumanInfected(iSpecial, MT_CHECK_INDEX|MT_CHECK_INGAME|MT_CHECK_ALIVE) && !bIsInfectedGhost(iSpecial) && g_esPlayer[iSpecial].g_bRushGhost)
				{
					g_esPlayer[iSpecial].g_bRushGhost = false;

					SetEntProp(iSpecial, Prop_Send, "m_isGhost", 1);
				}
			}
		}
	}

	if (g_esGeneral.g_bRushCountdown)
	{
		int iCountdown = RoundToNearest(g_esGeneral.g_flKillCountdown);
		if (!g_esGeneral.g_bRushStarted)
		{
			g_esGeneral.g_bRushStarted = true;

			vAnnounceRushKillTime(iCountdown);
		}

		g_esGeneral.g_iRushCountdownTick++;

		int iCooldown = RoundToNearest(g_esGeneral.g_flFinaleCooldown);
		if (!g_esGeneral.g_bRushRested && g_esGeneral.g_iRushCountdownTick >= iCountdown)
		{
			g_esGeneral.g_bRushCooldown = true;
			g_esGeneral.g_bRushCountdown = false;
			g_esGeneral.g_bRushRested = true;
			g_esGeneral.g_bRushSpawning = false;
			g_esGeneral.g_iRushCountdownHalf = iCountdown / 2;
			g_esGeneral.g_iRushCountdownTick = 0;

			if (g_esGeneral.g_iRushCountdownHalf < 60)
			{
				g_esGeneral.g_iRushCountdownHalf = 60;
			}

			vKickInfectedBots();
			vRespawnInfectedPlayers();
			vChangeInfectedToGhosts();
			vChangeInfectedToRandoms();
			vAnnounceRushRestTime(iCooldown);
		}

		if (g_esGeneral.g_bRushRested && g_esGeneral.g_iRushCountdownTick >= g_esGeneral.g_iRushCountdownHalf)
		{
			g_esGeneral.g_bRushCooldown = true;
			g_esGeneral.g_bRushCountdown = false;
			g_esGeneral.g_bRushSpawning = false;
			g_esGeneral.g_iRushCountdownHalf /= 2;
			g_esGeneral.g_iRushCountdownTick = 0;

			if (g_esGeneral.g_iRushCountdownHalf < 60)
			{
				g_esGeneral.g_iRushCountdownHalf = 60;
			}

			vKickInfectedBots();
			vRespawnInfectedPlayers();
			vChangeInfectedToGhosts();
			vChangeInfectedToRandoms();
			vAnnounceRushRestTime(iCooldown);
		}
	}

	if (g_esGeneral.g_bRushCooldown)
	{
		g_esGeneral.g_iRushCooldownTick++;

		if (g_esGeneral.g_iRushCooldownTick >= RoundToNearest(g_esGeneral.g_flFinaleCooldown))
		{
			g_esGeneral.g_bRushCooldown = false;
			g_esGeneral.g_bRushCountdown = true;
			g_esGeneral.g_bRushFirst = false;
			g_esGeneral.g_bRushSpawning = true;
			g_esGeneral.g_iRushCooldownTick = 0;

			vRespawnInfectedPlayers();
			vChangeInfectedToTanks();
			vAnnounceRushKillTime(g_esGeneral.g_iRushCountdownHalf);
		}
	}

	int iSeconds = 0;
	for (int iSpecial = 1; iSpecial <= MaxClients; iSpecial++)
	{
		if (bIsHumanInfected(iSpecial, MT_CHECK_INGAME))
		{
			if (bIsInfectedGhost(iSpecial) && g_esPlayer[iSpecial].g_bRushWaiting)
			{
				g_esPlayer[iSpecial].g_iRushWaitingTick++;

				iSeconds = iInterval - g_esPlayer[iSpecial].g_iRushWaitingTick;
				PrintCenterText(iSpecial, "%s %t", MT_TAG, "SpawnTimer", iSeconds);

				if (g_esPlayer[iSpecial].g_iRushWaitingTick >= iInterval)
				{
					g_esPlayer[iSpecial].g_bRushWaiting = false;
					g_esPlayer[iSpecial].g_iRushWaitingTick = 0;

					PrintCenterText(iSpecial, "%s %t", MT_TAG, "SpawnNow");
				}
			}
			else if (!bIsInfectedGhost(iSpecial) && g_esPlayer[iSpecial].g_bRushDespawning)
			{
				g_esPlayer[iSpecial].g_iRushDespawningTick++;

				iSeconds = 6 - g_esPlayer[iSpecial].g_iRushDespawningTick;
				PrintCenterText(iSpecial, "%s %t", MT_TAG, "DespawnTimer", iSeconds);

				if (GetClientButtons(iSpecial) != IN_SPEED)
				{
					g_esPlayer[iSpecial].g_bRushDespawning = false;
					g_esPlayer[iSpecial].g_iRushDespawningTick = 0;

					PrintCenterText(iSpecial, "%s %t", MT_TAG, "DespawnCanceled");
				}
				else if (g_esPlayer[iSpecial].g_iRushDespawningTick >= 6)
				{
					g_esPlayer[iSpecial].g_bRushDespawning = false;
					g_esPlayer[iSpecial].g_iRushDespawningTick = 0;
					g_esPlayer[iSpecial].g_iRushDespawnCount++;

					PrintCenterText(iSpecial, "%s %t", MT_TAG, "DespawnNow");
					vChangeInfectedToGhost(iSpecial);
					vChangeInfectedToRandom(iSpecial);
					vChangeInfectedToTank(iSpecial);
					vSetTankPlayer(iSpecial);
					vChangeInfectedToGhost(iSpecial);
					vChangeInfectedToRandom(iSpecial);
					vChangeInfectedToTank(iSpecial);
				}
			}
		}
	}

	return Plugin_Continue;
}

Action tTimerTankWave(Handle timer)
{
	if (g_esGeneral.g_bNormalMap || iGetTankCount(true, true) > 0 || iGetTankCount(false, true) > 0 || !(0 < g_esGeneral.g_iTankWave < 10))
	{
		g_esGeneral.g_hTankWaveTimer = null;

		return Plugin_Stop;
	}

	g_esGeneral.g_hTankWaveTimer = null;
	g_esGeneral.g_iTankWave++;

	return Plugin_Continue;
}

Action tTimerTransform(Handle timer, int userid)
{
	int iTank = GetClientOfUserId(userid);
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bIsCustomTankSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !g_esPlayer[iTank].g_bTransformed || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		vSpawnModes(iTank, false);

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)))
	{
		return Plugin_Stop;
	}

	int iPos = MT_GetRandomInt(0, (sizeof esTankCache::g_iTransformType - 1));
	vSetTankColor(iTank, g_esTankCache[iTank].g_iTransformType[iPos]);
	vTankSpawn(iTank, 3);

	return Plugin_Continue;
}

Action tTimerUntransform(Handle timer, DataPack pack)
{
	pack.Reset();

	int iTank = GetClientOfUserId(pack.ReadCell());
	if (!bIsSpecialSupported(iTank) || !bIsInfectedEnabled(iTank))
	{
		vSpawnModes(iTank, false);

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank))
	{
		return Plugin_Stop;
	}

	int iTankType = pack.ReadCell();
	vSetTankColor(iTank, iTankType);
	vTankSpawn(iTank, 4);
	vSpawnModes(iTank, false);

	return Plugin_Continue;
}

Action tTimerUpdateBoss(Handle timer, DataPack pack)
{
	pack.Reset();

	int iTank = GetClientOfUserId(pack.ReadCell());
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bIsCustomTankSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !g_esPlayer[iTank].g_bBoss || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		vSpawnModes(iTank, false);

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank))
	{
		return Plugin_Continue;
	}

	int iBossStageCount = g_esPlayer[iTank].g_iBossStageCount,
		iBossStages = pack.ReadCell(), iBossHealthValues[4] = {0, 0, 0, 0}, iTypes[4] = {0, 0, 0, 0};
	pack.ReadCellArray(iBossHealthValues, sizeof iBossHealthValues);
	pack.ReadCellArray(iTypes, sizeof iTypes);

	vEvolveBoss(iTank, iBossHealthValues[iBossStageCount], iBossStages, iTypes[iBossStageCount], (iBossStageCount + 1));

	return Plugin_Continue;
}

Action tTimerUpdateRandomize(Handle timer, DataPack pack)
{
	pack.Reset();

	int iTank = GetClientOfUserId(pack.ReadCell());
	float flTime = pack.ReadFloat();
	if (!g_esGeneral.g_bPluginEnabled || !bIsSpecialSupported(iTank) || !bIsCustomTankSupported(iTank) || !bHasCoreAdminAccess(iTank) || !bIsInfectedEnabled(iTank) || !g_esPlayer[iTank].g_bRandomized || (flTime + g_esTankCache[iTank].g_flRandomDuration < GetGameTime()) || g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		vSpawnModes(iTank, false);

		return Plugin_Stop;
	}

	if (bIsInfectedIdle(iTank) || (bIsSpecialInfected(iTank) && !bIsTankVisible(iTank)))
	{
		return Plugin_Continue;
	}

	int iType = iChooseMutantTank(iTank, 2, .mutate = false);

	switch (iType)
	{
		case 0: return Plugin_Continue;
		default: vSetTankColor(iTank, iType);
	}

	vTankSpawn(iTank, 2);

	return Plugin_Continue;
}

Action tTimerUseBioMass(Handle timer, float cost)
{
	if (g_esGeneral.g_bFinaleEnded || g_esGeneral.g_bRoundEnded)
	{
		return Plugin_Stop;
	}

	int iSpecial = iSpawnNearbySpecial(iGetRandomSurvivor(0), g_esMob.g_iCommonFilter, 0, true, false);
	if (bIsInfected(iSpecial))
	{
		g_esMob.g_flBioMassMeter -= cost;
		g_esShooter[iSpecial].g_bProduced = true;

		vCopyBioMassStats(iSpecial);
		vRemoveBioMass();
		vResetBioMassTimer();

		return Plugin_Stop;
	}

	return Plugin_Continue;
}